{"code": "public static String unEscapeString(String str,char escapeChar,char charToEscape){\n  return unEscapeString(str,escapeChar,new char[]{charToEscape});\n}\n", "nl": "Unescape <code>charToEscape</code> in the string with the escape char <code>escapeChar</code>"}
{"code": "public void checkNextPoissonConsistency(double mean){\n  final int sampleSize=1000;\n  final int minExpectedCount=7;\n  long maxObservedValue=0;\n  final double alpha=0.001;\n  UnitTestUtils.Frequency<Long> frequency=new UnitTestUtils.Frequency<Long>();\n  for (int i=0; i < sampleSize; i++) {\n    long value=randomData.nextPoisson(mean);\n    if (value > maxObservedValue) {\n      maxObservedValue=value;\n    }\n    frequency.addValue(value);\n  }\n  PoissonDistribution poissonDistribution=new PoissonDistribution(mean);\n  int lower=1;\n  while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize < minExpectedCount) {\n    lower++;\n  }\n  int upper=(int)(5 * mean);\n  while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize < minExpectedCount) {\n    upper--;\n  }\n  int binWidth=0;\n  boolean widthSufficient=false;\n  double lowerBinMass=0;\n  double upperBinMass=0;\n  while (!widthSufficient) {\n    binWidth++;\n    lowerBinMass=poissonDistribution.probability(lower - 1,lower + binWidth - 1);\n    upperBinMass=poissonDistribution.probability(upper - binWidth - 1,upper - 1);\n    widthSufficient=FastMath.min(lowerBinMass,upperBinMass) * sampleSize >= minExpectedCount;\n  }\n  List<Integer> binBounds=new ArrayList<Integer>();\n  binBounds.add(lower);\n  int bound=lower + binWidth;\n  while (bound < upper - binWidth) {\n    binBounds.add(bound);\n    bound+=binWidth;\n  }\n  binBounds.add(upper);\n  final int binCount=binBounds.size() + 1;\n  long[] observed=new long[binCount];\n  double[] expected=new double[binCount];\n  observed[0]=0;\n  for (int i=0; i < lower; i++) {\n    observed[0]+=frequency.getCount((long)i);\n  }\n  expected[0]=poissonDistribution.cumulativeProbability(lower - 1) * sampleSize;\n  observed[binCount - 1]=0;\n  for (int i=upper; i <= maxObservedValue; i++) {\n    observed[binCount - 1]+=frequency.getCount((long)i);\n  }\n  expected[binCount - 1]=(1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize;\n  for (int i=1; i < binCount - 1; i++) {\n    observed[i]=0;\n    for (int j=binBounds.get(i - 1); j < binBounds.get(i); j++) {\n      observed[i]+=frequency.getCount((long)j);\n    }\n    expected[i]=(poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) - poissonDistribution.cumulativeProbability(binBounds.get(i - 1) - 1)) * sampleSize;\n  }\n  if (UnitTestUtils.chiSquareTest(expected,observed) < alpha) {\n    StringBuilder msgBuffer=new StringBuilder();\n    DecimalFormat df=new DecimalFormat(\"#.##\");\n    msgBuffer.append(\"Chisquare test failed for mean = \");\n    msgBuffer.append(mean);\n    msgBuffer.append(\" p-value = \");\n    msgBuffer.append(UnitTestUtils.chiSquareTest(expected,observed));\n    msgBuffer.append(\" chisquare statistic = \");\n    msgBuffer.append(UnitTestUtils.chiSquare(expected,observed));\n    msgBuffer.append(\". \\n\");\n    msgBuffer.append(\"bin\\t\\texpected\\tobserved\\n\");\n    for (int i=0; i < expected.length; i++) {\n      msgBuffer.append(\"[\");\n      msgBuffer.append(i == 0 ? 1 : binBounds.get(i - 1));\n      msgBuffer.append(\",\");\n      msgBuffer.append(i == binBounds.size() ? \"inf\" : binBounds.get(i));\n      msgBuffer.append(\")\");\n      msgBuffer.append(\"\\t\\t\");\n      msgBuffer.append(df.format(expected[i]));\n      msgBuffer.append(\"\\t\\t\");\n      msgBuffer.append(observed[i]);\n      msgBuffer.append(\"\\n\");\n    }\n    msgBuffer.append(\"This test can fail randomly due to sampling error with probability \");\n    msgBuffer.append(alpha);\n    msgBuffer.append(\".\");\n    Assert.fail(msgBuffer.toString());\n  }\n}\n", "nl": "Verifies that nextPoisson(mean) generates an empirical distribution of values consistent with PoissonDistributionImpl by generating 1000 values, computing a grouped frequency distribution of the observed values and comparing this distribution to the corresponding expected distribution computed using PoissonDistributionImpl. Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the distributions are the same. If the null hypothesis can be rejected with confidence 1 - alpha, the check fails."}
{"code": "public DefaultJobRowBuilder(Function<Map<JobField,String>,String> idGenerator,Function<SecurityContext,String> userIdExtractor,Clock timestampGenerator){\n  this.idGenerator=idGenerator;\n  this.userIdExtractor=userIdExtractor;\n  this.timestampGenerator=timestampGenerator;\n}\n", "nl": "Builds a factory for generating JobRows with a custom function for extracting a userid from a request's SecurityContext."}
{"code": "protected final boolean handleAllocNode(AllocNode src){\n  boolean ret=false;\n  Node[] targets=pag.allocLookup(src);\n  for (  Node element : targets) {\n    if (element.makeP2Set().add(src)) {\n      varNodeWorkList.add((VarNode)element);\n      ret=true;\n    }\n  }\n  return ret;\n}\n", "nl": "Propagates new points-to information of node src to all its successors."}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigWKT copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigWKT(fieldConfigBase.getCommonData());\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field."}
{"code": "public void handleEntryExpiredSA(EntryExpiredBusPacket packet) throws Exception {\n  handleEntryExpiredCoreSA(packet.getEntryHolder(),packet.getTransaction(),packet.isFromReplication());\n}\n", "nl": "Handles EntryExpired packets."}
{"code": "public static SM_SYSTEM_MESSAGE STR_EXTRACT_GATHER_SUCCESS_1_BASIC(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1330078,descriptionId);\n}\n", "nl": "You have gathered %0."}
{"code": "public void toggle(Animation animIn,Animation animOut){\n  toggle(true,animIn,animOut);\n}\n", "nl": "Toggle the badge visibility in the UI."}
{"code": "private boolean isInSameEvolutionChain(Pokemon p1,Pokemon p2){\n  ArrayList<Pokemon> evolutionLine=getEvolutionLine(p1);\n  for (  Pokemon poke : evolutionLine) {\n    if (poke.number == p2.number) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check if two pokemon are in the same complete evolution chain. Jolteon and vaporeon would return true"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_ME_TO_B(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200459,skillname);\n}\n", "nl": "You stop using [%SkillName]."}
{"code": "public PhotosGetUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getUploadServer\",PhotoUpload.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ChangeReport onEquipmentUnitAdd(final EquipmentUnitAdd equipmentUnitAdd){\n  log.debug(\"onEquipmentUnitAdd - entering onEquipmentUnitAdd()..\");\n  ChangeReport changeReport=new ChangeReport(equipmentUnitAdd);\n  changeReport.setState(CHANGE_STATE.SUCCESS);\n  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();\n  if (processConfiguration.getEquipmentConfiguration(equipmentUnitAdd.getEquipmentId()) != null) {\n    changeReport.appendError(\"onEquipmentUnitAdd - Equipment unit id: \" + equipmentUnitAdd.getEquipmentId() + \" is already registered\");\n    changeReport.setState(CHANGE_STATE.FAIL);\n    return changeReport;\n  }\n  EquipmentConfiguration conf=null;\n  try {\n    conf=equipmentConfigurationFactory.createEquipmentConfiguration(equipmentUnitAdd.getEquipmentUnitXml());\n  }\n catch (  Exception ex) {\n    changeReport.setState(CHANGE_STATE.FAIL);\n    changeReport.appendError(StackTraceHelper.getStackTrace(ex));\n    return changeReport;\n  }\n  EquipmentMessageHandler equnit=null;\n  boolean dynamicTimeDeadbandEnabled=environment.getRequiredProperty(Options.DYNAMIC_TIME_DEADBAND_ENABLED,Boolean.class);\n  conf.setDynamicTimeDeadbandEnabled(dynamicTimeDeadbandEnabled);\n  log.info(\"onEquipmentUnitAdd - Dynamic timedeadband enabled for equipment id: \" + conf.getId() + \" enabled: \"+ dynamicTimeDeadbandEnabled);\n  EquipmentLoggerFactory equipmentLoggerFactory=EquipmentLoggerFactory.createFactory(conf,processConfiguration,environment.getProperty(\"c2mon.daq.logging.useEquipmentLoggers\",Boolean.class,false),environment.getProperty(\"c2mon.daq.logging.useEquipmentAppendersOnly\",Boolean.class,false));\n  EquipmentMessageSender equipmentMessageSender=(EquipmentMessageSender)applicationContext.getBean(EQUIPMENT_MESSAGE_SENDER);\n  equipmentMessageSender.init(conf,equipmentLoggerFactory);\n  configurationController.addCoreDataTagChanger(conf.getId(),equipmentMessageSender);\n  try {\n    validateDataTags(conf,equipmentMessageSender);\n    validateCommandTags(conf,equipmentMessageSender);\n    equnit=EquipmentMessageHandler.createEquipmentMessageHandler(conf.getHandlerClassName(),new EquipmentCommandHandler(conf.getId(),requestController),new EquipmentConfigurationHandler(conf.getId(),configurationController),equipmentMessageSender);\n    equnit.setEquipmentLoggerFactory(equipmentLoggerFactory);\n    processConfiguration.addEquipmentConfiguration(conf);\n  }\n catch (  InstantiationException e) {\n    String msg=\"Error while instantiating \" + conf.getHandlerClassName();\n    equipmentMessageSender.confirmEquipmentStateIncorrect(msg + \": \" + e.getMessage());\n    log.error(msg,e);\n  }\ncatch (  IllegalAccessException e) {\n    String msg=\"Access error while calling constructor of \" + conf.getHandlerClassName();\n    equipmentMessageSender.confirmEquipmentStateIncorrect(\"Error in code: \" + msg);\n    log.error(msg,e);\n  }\ncatch (  ClassNotFoundException e) {\n    String msg=\"Handler class not found: \" + conf.getHandlerClassName();\n    equipmentMessageSender.confirmEquipmentStateIncorrect(\"Error during configuration: \" + msg);\n    log.error(msg,e);\n  }\n  if (equnit != null) {\n    if (!registerNewEquipmentUnit(equnit)) {\n      changeReport.setState(CHANGE_STATE.REBOOT);\n      changeReport.appendWarn(\"problem detected while registering new equipment. You need to restart the DAQ\");\n    }\n  }\n  return changeReport;\n}\n", "nl": "Updates the DAQ by injecting new Equipment Unit"}
{"code": "private void requestNewPhotosOrders(Context c,int page,boolean refresh){\n  page=refresh ? 1 : page + 1;\n  listener=new OnRequestPhotosListener(c,page,Mysplash.CATEGORY_TOTAL_NEW,refresh,false);\n  model.getService().requestPhotos(page,Mysplash.DEFAULT_PER_PAGE,model.getPhotosOrder(),listener);\n}\n", "nl": "<br> utils."}
{"code": "public static void picture(double x,double y,String filename,double scaledWidth,double scaledHeight,double degrees){\n  if (scaledWidth < 0)   throw new IllegalArgumentException(\"width is negative: \" + scaledWidth);\n  if (scaledHeight < 0)   throw new IllegalArgumentException(\"height is negative: \" + scaledHeight);\n  Image image=getImage(filename);\n  double xs=scaleX(x);\n  double ys=scaleY(y);\n  double ws=factorX(scaledWidth);\n  double hs=factorY(scaledHeight);\n  if (ws < 0 || hs < 0)   throw new IllegalArgumentException(\"image \" + filename + \" is corrupt\");\n  if (ws <= 1 && hs <= 1)   pixel(x,y);\n  offscreen.rotate(Math.toRadians(-degrees),xs,ys);\n  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);\n  offscreen.rotate(Math.toRadians(+degrees),xs,ys);\n  draw();\n}\n", "nl": "Draws the specified image centered at (<em>x</em>, <em>y</em>), rotated given number of degrees, and rescaled to the specified bounding box. The supported image formats are JPEG, PNG, and GIF."}
{"code": "public VisualTable(Visualization vis,String group,Schema schema){\n  super(TableVisualItem.class);\n  init(vis,group,schema);\n}\n", "nl": "Create a new VisualTable without a parent table."}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static DataTag buildCreateBasicDataTag(Properties properties){\n  if (properties == null) {\n    properties=new Properties();\n  }\n  DataTag dataTag=DataTag.create(\"DataTag\",Integer.class,new DataTagAddress()).build();\n  dataTag.setEquipmentId(10L);\n  properties.setProperty(\"name\",\"DataTag\");\n  properties.setProperty(\"description\",\"<no description provided>\");\n  properties.setProperty(\"mode\",String.valueOf(TagMode.OPERATIONAL.ordinal()));\n  properties.setProperty(\"dataType\",Integer.class.getName());\n  properties.setProperty(\"isLogged\",String.valueOf(true));\n  properties.setProperty(\"equipmentId\",String.valueOf(10l));\n  properties.setProperty(\"address\",new DataTagAddress().toConfigXML());\n  return dataTag;\n}\n", "nl": "Expected generated id is 100. Expected parent id is 10."}
{"code": "protected void updateRowCount(){\n  int maxrow=m_rows.getMaximumRow() + 1;\n  Iterator cols=getColumns();\n  while (cols.hasNext()) {\n    Column c=(Column)cols.next();\n    c.setMaximumRow(maxrow);\n  }\n}\n", "nl": "Internal method that updates the row counts for local data columns."}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowTriPlot();\n}\n", "nl": "this is currently selected?"}
{"code": "public int hashCode(){\n  return (int)(ConnectionRelativeTime.class.hashCode() + time);\n}\n", "nl": "Returns a hash code value for this object."}
{"code": "protected VideoRemoveTagQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "Video ID."}
{"code": "public static void cover(String dest,int w,int h,List<String> sources) throws Exception {\n  if (sources == null) {\n    throw new Exception(\"no source!\");\n  }\n  int len=sources.size();\n  if (len == 4 || len == 9) {\n    BufferedImage src[]=new BufferedImage[len];\n    for (int i=0; i < len; i++) {\n      src[i]=ImageIO.read(new File(sources.get(i)));\n    }\n    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);\n    Graphics g=out.getGraphics();\n    g.setColor(Color.WHITE);\n    g.fillRect(0,0,w,h);\n    g.setColor(new Color(0xCCD4D0));\n    int size=len == 4 ? 2 : 3;\n    int space=len == 4 ? 4 : 2;\n    int w1=(w - 1) / size;\n    int h1=(h - 1) / size;\n    float fd=((float)w1) / h1;\n    for (int i=0; i < len; i++) {\n      BufferedImage img=src[i];\n      int w2=img.getWidth();\n      int h2=img.getHeight();\n      float fs=((float)w2) / h2;\n      if (fs > fd) {\n        w2=w1;\n        h2=(int)(w2 / fs);\n      }\n else       if (fs < fd) {\n        h2=h1;\n        w2=(int)(h2 * fs);\n      }\n else {\n        w2=w1;\n        h2=h1;\n      }\n      Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);\n      int x=(i % size) * w1;\n      int y=(i / size) * h1;\n      g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);\n      g.drawRect(x,y,w1,h1);\n    }\n    ImageIO.write(out,\"jpg\",new File(dest));\n  }\n else {\n    throw new Exception(\"sources MUST is 4 or 9 picutures!\" + len);\n  }\n}\n", "nl": "make a Cover by source images."}
{"code": "public Bindings add(String property,JRadioButton[] cs,int defaultValue){\n  registerPropertyChangeListener(cs);\n  return add(new JRadioButtonBinding(property,cs,defaultValue));\n}\n", "nl": "Handles JRadioButton"}
{"code": "public void cancelAlarm(Context context){\n  if (alarmMgr != null) {\n    alarmMgr.cancel(alarmIntent);\n  }\n  ComponentName receiver=new ComponentName(context,BootReceiver.class);\n  PackageManager pm=context.getPackageManager();\n  pm.setComponentEnabledSetting(receiver,PackageManager.COMPONENT_ENABLED_STATE_DISABLED,PackageManager.DONT_KILL_APP);\n}\n", "nl": "Cancels the alarm."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201257,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] dispelled its magical buffs by using [%SkillName]."}
{"code": "public static <T>T findValueOfType(Collection<T> collection,Class<? extends T>[] types){\n  if (isEmpty(collection) || ObjectUtils.isEmpty(types))   return null;\n  for (  Class<? extends T> type : types) {\n    T value=findValueOfType(collection,type);\n    if (value != null)     return value;\n  }\n  return null;\n}\n", "nl": "Find a value of one of the given types in the given collection: searching the collection for a value of the first type, then searching for a value of the second type, etc."}
{"code": "private static long writeLogSegment(DistributedLogManager dlm,int numRecords,long startTxId,int flushPerNumRecords,boolean emptyRecord) throws IOException {\n  long txid=startTxId;\n  LogWriter writer=dlm.startLogSegmentNonPartitioned();\n  for (long j=1; j <= numRecords; j++) {\n    if (emptyRecord) {\n      writer.write(DLMTestUtil.getEmptyLogRecordInstance(txid++));\n    }\n else {\n      writer.write(DLMTestUtil.getLargeLogRecordInstance(txid++));\n    }\n    if (j % flushPerNumRecords == 0) {\n      writer.setReadyToFlush();\n      writer.flushAndSync();\n    }\n  }\n  writer.setReadyToFlush();\n  writer.flushAndSync();\n  writer.close();\n  return txid;\n}\n", "nl": "Write <code>numRecords</code> records to the log, starting with <code>startTxId</code>. It flushes every <code>flushPerNumRecords</code> records."}
{"code": "@Override public void characters(char[] ch,int start,int length) throws SAXException {\n}\n", "nl": "PathElement is the only element having values inside -> nothing to do here. Doesn't care at the current state of parsing."}
{"code": "protected boolean runTestsOnEdt(){\n  return true;\n}\n", "nl": "Override to run tests off the EDT."}
{"code": "@Override public Histogram histogram(){\n  return hist;\n}\n", "nl": "Returns the histogram that approximates the join distribution of the field values of query results."}
{"code": "public CountriesExample(){\n  oredCriteria=new ArrayList<Criteria>();\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.countries"}
{"code": "public Pair<Integer,Set<Long>> writeTable(long uuid){\n  preBufferAccess();\n  int offset=_buffer.position();\n  try {\n    if (_buffer.remaining() < 4) {\n      return Pair.<Integer,Set<Long>>create(-1,ImmutableSet.<Long>of());\n    }\n    _buffer.position(offset + 4);\n    Set<Long> uuids;\n    try {\n      ByteBuffer tableBuffer=_buffer.slice();\n      uuids=getTableSerializer().loadAndSerialize(uuid,new ByteBufferOutputStream(tableBuffer));\n      tableBuffer.flip();\n      int length=tableBuffer.limit();\n      _buffer.position(offset);\n      _buffer.putInt(length);\n      _buffer.position(offset + 4 + length);\n    }\n catch (    UnknownTableException|DroppedTableException e) {\n      uuids=ImmutableSet.of(uuid);\n      writeUnknownOrDroppedTable(offset,e);\n    }\n    _modified=true;\n    return Pair.create(offset,uuids);\n  }\n catch (  BufferOverflowException e) {\n    _buffer.position(offset);\n    if (offset == 0) {\n      _log.error(\"Table with UUID {} is too large to fit in a single block\",uuid);\n      throw new IllegalArgumentException(\"Table too large\");\n    }\n    return Pair.<Integer,Set<Long>>create(-1,ImmutableSet.<Long>of());\n  }\ncatch (  IOException e) {\n    throw Throwables.propagate(e);\n  }\n finally {\n    postBufferAccess();\n  }\n}\n", "nl": "Writes a table to the block.  Returns the offset in this block where the table was written, or -1 if there was insufficient room in the block to write the entire table."}
{"code": "public static boolean isBehind(VisibleObject object1,VisibleObject object2){\n  float angle=MathUtil.convertHeadingToDegree(object1.getHeading()) + 90;\n  if (angle >= 360) {\n    angle-=360;\n  }\n  double radian=Math.toRadians(angle);\n  float x0=object1.getX();\n  float y0=object1.getY();\n  float x1=(float)(Math.cos(radian) * 5) + x0;\n  float y1=(float)(Math.sin(radian) * 5) + y0;\n  float xA=object2.getX();\n  float yA=object2.getY();\n  float temp=(x1 - x0) * (yA - y0) - (y1 - y0) * (xA - x0);\n  return temp > 0;\n}\n", "nl": "Analyse two object position by coordinates"}
{"code": "void assignToBlock(BlockId blk){\n  internalLock.writeLock().lock();\n  try {\n    flush();\n    this.blk=blk;\n    contents.read(blk);\n    pins=0;\n    lastLsn=LogSeqNum.readFromPage(contents,LAST_LSN_OFFSET);\n  }\n  finally {\n    internalLock.writeLock().unlock();\n  }\n}\n", "nl": "Reads the contents of the specified block into the buffer's page. If the buffer was dirty, then the contents of the previous page are first written to disk."}
{"code": "public boolean contains(int index){\n  return index >= getFirst() && index <= getLast();\n}\n", "nl": "Tests whether item is contained by range"}
{"code": "@Override public boolean hasPassword(){\n  return propertyMap.containsKey(PASSWORD_KEY);\n}\n", "nl": "Checks for password."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200701,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has protected you by using [%SkillName]."}
{"code": "protected Highlight buildHighlight(IDataSet set,int dataSetIndex,float xVal,DataSet.Rounding rounding){\n  final Entry e=set.getEntryForXPos(xVal,rounding);\n  if (e == null)   return null;\n  MPPointD pixels=mChart.getTransformer(set.getAxisDependency()).getPixelsForValues(e.getX(),e.getY());\n  return new Highlight(e.getX(),e.getY(),(float)pixels.x,(float)pixels.y,dataSetIndex,set.getAxisDependency());\n}\n", "nl": "Returns the Highlight object corresponding to the selected xValue and dataSetIndex."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_MY_PARTY_STATE(String value0){\n  return new SM_SYSTEM_MESSAGE(1390135,value0);\n}\n", "nl": "You changed the group to the %0 state."}
{"code": "private static void storeAsTypeWithSignaturesImport(String strTypeToImport,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  if (strTypeToImport.contains(\"|\")) {\n    for (    String strOneType : strTypeToImport.split(\"\\\\|\")) {\n      storeAsTypeWithSignaturesImport(Types.getType(strOneType),objScope,objIndex,objTypesSet);\n    }\n    return;\n  }\n  if (StringUtil.isEmpty(strTypeToImport) || strTypeToImport.equals(\"?\")) {\n    return;\n  }\n  if (strTypeToImport.contains(\"#\")) {\n    TypeFromSignatureResolvingUtil.resolveSignature(strTypeToImport,objScope,objIndex,objTypesSet);\n    return;\n  }\n  objTypesSet.add(Types.getType(strTypeToImport));\n}\n", "nl": "adds type, handling | and #, invoking signatures resolving"}
{"code": "private V doGet(Object okey){\n  Comparable<? super K> key=comparable(okey);\n  for (; ; ) {\n    Node<K,V> n=findNode(key);\n    if (n == null)     return null;\n    Object v=n.value;\n    if (v != null)     return (V)v;\n  }\n}\n", "nl": "Gets value for key using findNode."}
{"code": "public JSONWriter key(String string) throws JSONException {\n  if (string == null) {\n    throw new JSONException(\"Null key.\");\n  }\n  if (this.mode == 'k') {\n    try {\n      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);\n      if (this.comma) {\n        this.writer.write(',');\n      }\n      this.writer.write(JSONObject.quote(string));\n      this.writer.write(':');\n      this.comma=false;\n      this.mode='o';\n      return this;\n    }\n catch (    IOException e) {\n      throw new JSONException(e);\n    }\n  }\n  throw new JSONException(\"Misplaced key.\");\n}\n", "nl": "Append a key. The key will be associated with the next value. In an object, every value must be preceded by a key."}
{"code": "private boolean useIsSameNode(Node node){\n  if (node instanceof NodeImpl) {\n    return false;\n  }\n  Document doc=node.getNodeType() == Node.DOCUMENT_NODE ? (Document)node : node.getOwnerDocument();\n  return (doc != null && doc.getImplementation().hasFeature(\"Core\",\"3.0\"));\n}\n", "nl": "Use isSameNode() for testing node identity if the DOM implementation supports DOM Level 3 core and it isn't the Xerces implementation."}
{"code": "public boolean isExpired(Period period,Date now){\n  int expiryDays=getExpiryDays();\n  return expiryDays != DataSet.NO_EXPIRY && new DateTime(period.getEndDate()).plusDays(expiryDays).isBefore(new DateTime(now));\n}\n", "nl": "Indicates whether the given period is considered expired for the end date of the given date based on the expiry days of the data sets associated with this data element."}
{"code": "protected void at(String msg,boolean condition){\n  Assert.assertTrue(msg,condition);\n}\n", "nl": "Short for Assert.assertTrue"}
{"code": "@Deprecated public boolean isAssignableFrom(Type from){\n  if (from == null) {\n    return false;\n  }\n  if (type.equals(from)) {\n    return true;\n  }\n  if (type instanceof Class<?>) {\n    return rawType.isAssignableFrom($Gson$Types.getRawType(from));\n  }\n else   if (type instanceof ParameterizedType) {\n    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());\n  }\n else   if (type instanceof GenericArrayType) {\n    return rawType.isAssignableFrom($Gson$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);\n  }\n else {\n    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);\n  }\n}\n", "nl": "Check if this type is assignable from the given Type."}
{"code": "private Collection<Var> migrateColumnValueAsRelation(Var parent,String fkName,String childType,Object childId){\n  if (childId == null) {\n    return Collections.emptyList();\n  }\n  String relationType=namer.relationName(fkName);\n  String childRole=namer.roleChildName(fkName);\n  String parentRole=namer.roleParentName(fkName);\n  String foreignPrimaryKey=namer.primaryKey(childType,Collections.singleton(childId.toString()));\n  Var child=var().isa(childType).id(foreignPrimaryKey);\n  Var relation=var().rel(childRole,var().id(id(child))).rel(parentRole,var().id(id(parent))).isa(relationType);\n  return Arrays.asList(child,relation);\n}\n", "nl": "Migrate a column value as a relation. This creates a target node with the ID of the foreign key and a relation from the given instance to this node."}
{"code": "protected void animateToState(boolean checked){\n  if (mProcessAnimator == null) {\n    return;\n  }\n  if (mProcessAnimator.isRunning()) {\n    mProcessAnimator.cancel();\n  }\n  mProcessAnimator.setDuration(mAnimationDuration);\n  if (checked) {\n    mProcessAnimator.setFloatValues(mProcess,1f);\n  }\n else {\n    mProcessAnimator.setFloatValues(mProcess,0);\n  }\n  mProcessAnimator.start();\n}\n", "nl": "processing animation"}
{"code": "@Override public Fraction reciprocal(){\n  return new Fraction(denominator,numerator);\n}\n", "nl": "Return the multiplicative inverse of this fraction."}
{"code": "public String listTargetFeatures(TargetFeatureComputer featureComputer,List<Element> segmentsAndBoundaries){\n  String pauseSymbol=featureComputer.getPauseSymbol();\n  List<Target> targets=overridableCreateTargetsWithPauses(segmentsAndBoundaries,pauseSymbol);\n  String header=featureComputer.getAllFeatureProcessorNamesAndValues();\n  StringBuilder text=new StringBuilder();\n  StringBuilder bin=new StringBuilder();\n  for (  Target target : targets) {\n    FeatureVector features=featureComputer.computeFeatureVector(target);\n    text.append(featureComputer.toStringValues(features)).append(\"\\n\");\n    bin.append(features.toString()).append(\"\\n\");\n  }\n  String out=header + \"\\n\" + text+ \"\\n\"+ bin;\n  return out;\n}\n", "nl": "For the given elements and using the given feature computer, create a string representation of the target features."}
{"code": "public void type(int... keys) throws InterruptedException {\n  for (  int key : keys) {\n    type(key);\n  }\n}\n", "nl": "Type a series of keys on the keyboard"}
{"code": "public FriendsAddQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void clear(){\n  cache.invalidateAllData();\n}\n", "nl": "Only for UTs (for now), as this clears the whole ZK data cache."}
{"code": "@Override public void onConfigsUpdated(List<ConfigItem> configItems){\n  if (configItems != null && !configItems.isEmpty()) {\n    for (    ConfigItem configItem : configItems) {\n      configValues.put(configItem.getName(),configItem.getValue());\n    }\n  }\n}\n", "nl": "Refresh local configs"}
{"code": "@Override public boolean shouldSkipClass(Class<?> aClass){\n  return false;\n}\n", "nl": "Skips no classes."}
{"code": "private static Field[] fieldInfo(Entry entry){\n  Field[] fields=null;\nsynchronized (AbstractEntry.class) {\n    if (fieldArrays == null)     fieldArrays=new WeakHashMap();\n else {\n      fields=(Field[])fieldArrays.get(entry.getClass());\n      if (fields != null)       return fields;\n    }\n  }\n  final int SKIP_MODIFIERS=(Modifier.STATIC | Modifier.TRANSIENT | Modifier.FINAL);\n  fields=entry.getClass().getFields();\n  ArrayList usable=null;\n  for (int i=0; i < fields.length; i++) {\n    if ((fields[i].getModifiers() & SKIP_MODIFIERS) != 0 || (fields[i].getType().isPrimitive())) {\n      if (usable == null) {\n        usable=new ArrayList();\n        for (int j=0; j < i; j++)         usable.add(fields[j]);\n      }\n    }\n else {\n      if (usable != null)       usable.add(fields[i]);\n    }\n  }\n  if (usable != null)   fields=(Field[])usable.toArray(new Field[usable.size()]);\nsynchronized (AbstractEntry.class) {\n    fieldArrays.put(entry.getClass(),fields);\n  }\n  return fields;\n}\n", "nl": "Calculate the list of usable fields for this type"}
{"code": "public boolean equals(Object obj){\n  return obj == this || (obj != null && obj.getClass() == getClass() && instance.equals(((MarshalledWrapper)obj).instance));\n}\n", "nl": "Compares the specified object with this <code>MarshalledWrapper</code> for equality.  This method returns <code>true</code> if and only if the specified object is of the same class as this object and its wrapped <code>MarshalledInstance</code> is equal to the one in this object."}
{"code": "protected static Dfp atanInternal(final Dfp a){\n  Dfp y=new Dfp(a);\n  Dfp x=new Dfp(y);\n  Dfp py=new Dfp(y);\n  for (int i=3; i < 90; i+=2) {\n    x=x.multiply(a);\n    x=x.multiply(a);\n    x=x.negate();\n    y=y.add(x.divide(i));\n    if (y.equals(py)) {\n      break;\n    }\n    py=new Dfp(y);\n  }\n  return y;\n}\n", "nl": "computes the arc-tangent of the argument."}
{"code": "private void flush(){\n  myPage.write(currentBlk);\n  lastFlushedLsn=lastLsn;\n}\n", "nl": "Writes the current page to the log file."}
{"code": "private XtnConfilctCheckIndicators checkTransactionConflict(Context context,IEntryHolder entry,ITemplateHolder template,boolean isShadow){\n  XtnEntry xtnEntry;\n  if ((template.getTemplateOperation() == SpaceOperations.READ || template.getTemplateOperation() == SpaceOperations.READ_IE) && !template.isExclusiveReadLockOperation()) {\n    ITransactionalEntryData edata=context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData();\n    xtnEntry=edata.getWriteLockOwner();\n    if (xtnEntry == null)     return XtnConfilctCheckIndicators.NO_CONFLICT;\n    final XtnStatus entryWriteLockStatus=xtnEntry.getStatus();\n    final int entryWriteLockOperation=edata.getWriteLockOperation();\n    final boolean isDirtyRead=indicateDirtyRead(template);\n    final boolean isReadCommitted=indicateReadCommitted(edata,template);\n    if (template.getXidOriginatedTransaction() == null || !edata.getWriteLockTransaction().equals(template.getXidOriginatedTransaction())) {\n      if (isDirtyRead)       return checkTransactionConflictDirtyRead(context,xtnEntry,entryWriteLockStatus,entryWriteLockOperation,entry,edata,isShadow);\n      if (isReadCommitted)       return checkTransactionConflictReadCommitted(context,xtnEntry,entryWriteLockStatus,entryWriteLockOperation,entry,edata,isShadow);\n      return checkTransactionConflict(xtnEntry,entryWriteLockStatus,entryWriteLockOperation);\n    }\n    if (entryWriteLockOperation == SpaceOperations.TAKE || entryWriteLockOperation == SpaceOperations.TAKE_IE)     return XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;\n    if (isReadCommitted && isShadow)     return XtnConfilctCheckIndicators.XTN_CONFLICT;\n    return XtnConfilctCheckIndicators.NO_CONFLICT;\n  }\n  if ((template.getTemplateOperation() == SpaceOperations.TAKE_IE || template.getTemplateOperation() == SpaceOperations.TAKE)) {\n    List<XtnEntry> readWriteLock=entry.getReadLockOwners();\n    if (entry.getWriteLockTransaction() == null && (readWriteLock == null || readWriteLock.isEmpty()))     return XtnConfilctCheckIndicators.NO_CONFLICT;\n    if (readWriteLock != null && !readWriteLock.isEmpty()) {\n      for (      XtnEntry readLockOwner : readWriteLock) {\n        xtnEntry=readLockOwner;\n        if (xtnEntry != null) {\n          XtnStatus entryReadLockStatus=xtnEntry.getStatus();\n          if (entryReadLockStatus == XtnStatus.COMMITED || entryReadLockStatus == XtnStatus.COMMITING || (entryReadLockStatus == XtnStatus.PREPARED && xtnEntry.m_SingleParticipant) || entryReadLockStatus == XtnStatus.ROLLED || (entryReadLockStatus == XtnStatus.ROLLING && !xtnEntry.m_AlreadyPrepared))           continue;\n          if (template.getXidOriginatedTransaction() == null || !readLockOwner.m_Transaction.equals(template.getXidOriginatedTransaction()))           return XtnConfilctCheckIndicators.XTN_CONFLICT;\n        }\n      }\n    }\n    xtnEntry=entry.getWriteLockOwner();\n    if (xtnEntry == null)     return XtnConfilctCheckIndicators.NO_CONFLICT;\n    XtnStatus entryWriteLockStatus=xtnEntry.getStatus();\n    int entryWriteLockOperation=entry.getWriteLockOperation();\n    if (template.getXidOriginatedTransaction() == null || !entry.getWriteLockTransaction().equals(template.getXidOriginatedTransaction())) {\n      return checkTransactionConflict(xtnEntry,entryWriteLockStatus,entryWriteLockOperation);\n    }\n    if (entryWriteLockOperation == SpaceOperations.TAKE || entryWriteLockOperation == SpaceOperations.TAKE_IE)     return XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;\n    return XtnConfilctCheckIndicators.NO_CONFLICT;\n  }\n  if (template.getTemplateOperation() == SpaceOperations.UPDATE || template.isExclusiveReadLockOperation()) {\n    List<XtnEntry> rwLock=entry.getReadLockOwners();\n    if (entry.getWriteLockTransaction() == null && (rwLock == null || rwLock.isEmpty()))     return XtnConfilctCheckIndicators.NO_CONFLICT;\n    if (rwLock != null && !rwLock.isEmpty()) {\n      for (      XtnEntry readLockOwner : rwLock) {\n        xtnEntry=readLockOwner;\n        if (xtnEntry != null) {\n          XtnStatus entryReadLockStatus=xtnEntry.getStatus();\n          if (entryReadLockStatus == XtnStatus.COMMITED || entryReadLockStatus == XtnStatus.COMMITING || (entryReadLockStatus == XtnStatus.PREPARED && xtnEntry.m_SingleParticipant) || entryReadLockStatus == XtnStatus.ROLLED || (entryReadLockStatus == XtnStatus.ROLLING && !xtnEntry.m_AlreadyPrepared))           continue;\n          if (template.getXidOriginatedTransaction() == null || !readLockOwner.m_Transaction.equals(template.getXidOriginatedTransaction()))           return XtnConfilctCheckIndicators.XTN_CONFLICT;\n        }\n      }\n    }\n    xtnEntry=entry.getWriteLockOwner();\n    if (xtnEntry == null)     return XtnConfilctCheckIndicators.NO_CONFLICT;\n    XtnStatus entryWriteLockStatus=xtnEntry.getStatus();\n    int entryWriteLockOperation=entry.getWriteLockOperation();\n    if (template.getXidOriginatedTransaction() == null || !entry.getWriteLockTransaction().equals(template.getXidOriginatedTransaction())) {\n      return checkTransactionConflict(xtnEntry,entryWriteLockStatus,entryWriteLockOperation);\n    }\n    if (entryWriteLockOperation == SpaceOperations.TAKE || entryWriteLockOperation == SpaceOperations.TAKE_IE)     return UpdateModifiers.isUpdateOrWrite(template.getOperationModifiers()) ? XtnConfilctCheckIndicators.NO_CONFLICT : XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;\n    if (template.isFifoGroupPoll() && xtnEntry == template.getXidOriginated() && template.isExclusiveReadLockOperation())     return XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;\n    return XtnConfilctCheckIndicators.NO_CONFLICT;\n  }\n  return XtnConfilctCheckIndicators.NO_CONFLICT;\n}\n", "nl": "Checks if there is a transaction conflict between the specified entry and the operation implied by the specified template. templateTransaction is not null if template is under xtn isShadow is true if the call is on behalf of a shadow entry"}
{"code": "public boolean freePage(int pageNum){\n  Page p;\n  try {\n    p=fetchPage(pageNum);\n  }\n catch (  PageException e) {\n    return false;\n  }\n  return freePage(p);\n}\n", "nl": "Frees the page to be returned back to the system. The page is no longer valid and can be re-used the next time the user called allocPage."}
{"code": "public synchronized void openDriver(SurfaceHolder holder) throws IOException {\n  Camera theCamera=camera;\n  if (theCamera == null) {\n    if (requestedCameraId >= 0) {\n      theCamera=OpenCameraInterface.open(requestedCameraId);\n    }\n else {\n      theCamera=OpenCameraInterface.open();\n    }\n    if (theCamera == null) {\n      throw new IOException();\n    }\n    camera=theCamera;\n  }\n  theCamera.setPreviewDisplay(holder);\n  if (!initialized) {\n    initialized=true;\n    configManager.initFromCameraParameters(theCamera);\n  }\n  Camera.Parameters parameters=theCamera.getParameters();\n  String parametersFlattened=parameters == null ? null : parameters.flatten();\n  try {\n    configManager.setDesiredCameraParameters(theCamera,false);\n  }\n catch (  RuntimeException re) {\n    Log.w(TAG,\"Camera rejected parameters. Setting only minimal safe-mode parameters\");\n    Log.i(TAG,\"Resetting to saved camera params: \" + parametersFlattened);\n    if (parametersFlattened != null) {\n      parameters=theCamera.getParameters();\n      parameters.unflatten(parametersFlattened);\n      try {\n        theCamera.setParameters(parameters);\n        configManager.setDesiredCameraParameters(theCamera,true);\n      }\n catch (      RuntimeException re2) {\n        Log.w(TAG,\"Camera rejected even safe-mode parameters! No configuration\");\n      }\n    }\n  }\n}\n", "nl": "Opens the camera driver and initializes the hardware parameters."}
{"code": "@Override public IntegerDistribution makeDistribution(){\n  return new GeometricDistribution(0.40);\n}\n", "nl": "Creates the default discrete distribution instance to use in tests."}
{"code": "public final boolean isOverridingLocale(){\n  return (myOverride & CFG_LOCALE) != 0;\n}\n", "nl": "Returns true if the locale is overridden"}
{"code": "public static ContourNextLinkMessage fromBytes(MedtronicCNLSession pumpSession,byte[] bytes) throws ChecksumException, EncryptionException {\n  ContourNextLinkMessage message=MedtronicMessage.fromBytes(bytes);\n  if (bytes.length >= 57) {\n    byte encryptedPayloadSize=bytes[56];\n    ByteBuffer encryptedPayload=ByteBuffer.allocate(encryptedPayloadSize);\n    encryptedPayload.put(bytes,57,encryptedPayloadSize);\n    byte[] decryptedPayload=decrypt(pumpSession.getKey(),pumpSession.getIV(),encryptedPayload.array());\n    message.mPayload.position(57);\n    message.mPayload.put(decryptedPayload);\n  }\n  return message;\n}\n", "nl": "MedtronicReceiveMessage: +------------------+-----------------+-----------------+---------------------------------+-------------------+--------------------------------+ | LE short unknown | LE long pumpMAC | LE long linkMAC | byte[3] responseSequenceNumber? | byte Payload size | byte[] Encrypted Payload bytes | +------------------+-----------------+-----------------+---------------------------------+-------------------+--------------------------------+ <p/> MedtronicReceiveMessage (decrypted payload): +----------------------------+-----------------------------+----------------------+--------------------+ | byte receiveSequenceNumber | BE short receiveMessageType | byte[] Payload bytes | BE short CCITT CRC | +----------------------------+-----------------------------+----------------------+--------------------+"}
{"code": "public Builder popupAnchor(Point popupAnchor){\n  this.popupAnchor=popupAnchor;\n  return this;\n}\n", "nl": "The coordinates of the point from which popups will \"open\", relative to the icon anchor."}
{"code": "@deprecated protected DictionaryBasedBreakIterator(InputStream compiledRules) throws IOException {\n  this.fRData=RBBIDataWrapper.get(compiledRules);\n  this.dictionary=null;\n  this.usingCTDictionary=true;\n}\n", "nl": "/*    "}
{"code": "public Builder boxZoom(Boolean boxZoom){\n  this.boxZoom=boxZoom;\n  return this;\n}\n", "nl": "Whether the map can be zoomed to a rectangular area specified by dragging the mouse while pressing shift. default true"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if (comboBox != null) {\n    String oldValue=(String)undoRedoObject.getOldValue();\n    comboBox.setSelectValueKey(oldValue);\n  }\n}\n", "nl": "Undo action."}
{"code": "public void removeRule(Rule ruleToDelete){\n  List<Rule> ruleList=(List<Rule>)this.symbolData.getFeatureTypeStyle().rules();\n  int indexFound=-1;\n  int index=0;\n  for (  Rule rule : ruleList) {\n    if (rule == ruleToDelete) {\n      indexFound=index;\n      break;\n    }\n else {\n      index++;\n    }\n  }\n  if (indexFound > -1) {\n    ruleList.remove(indexFound);\n  }\n}\n", "nl": "Removes the rule."}
{"code": "public void loadMoreComplate(){\n  isLoadingMoreData=false;\n  if (mFooterView != null) {\n    if (isManualLoadMoreData) {\n      mFooterView.getLayoutParams().height=0;\n    }\n else {\n      mFooterView.setVisibility(GONE);\n    }\n  }\n  getAdapter().notifyDataSetChanged();\n}\n", "nl": "after loadmore ,you should call this method on the UI thread"}
{"code": "protected String renderUri(URI uri){\n  return uri.toASCIIString();\n}\n", "nl": "Render the URI as a string."}
{"code": "public JsonArray(){\n  values=new ArrayList<JsonValue>();\n}\n", "nl": "Creates a new empty JsonArray."}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"close what=current;\");\n}\n", "nl": "action to be performed"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "public static String nullSafeToString(byte[] array){\n  if (array == null) {\n    return NULL_STRING;\n  }\n  int length=array.length;\n  if (length == 0) {\n    return EMPTY_ARRAY;\n  }\n  StringBuffer buffer=new StringBuffer();\n  for (int i=0; i < length; i++) {\n    if (i == 0) {\n      buffer.append(ARRAY_START);\n    }\n else {\n      buffer.append(ARRAY_ELEMENT_SEPARATOR);\n    }\n    buffer.append(array[i]);\n  }\n  buffer.append(ARRAY_END);\n  return buffer.toString();\n}\n", "nl": "Return a String representation of the contents of the specified array. The String representation consists of a list of the array's elements, enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated by the characters <code>\", \"</code> (a comma followed by a space). Returns <code>\"null\"</code> if <code>array</code> is <code>null</code>."}
{"code": "public static void writeStringToFile(File file,String data) throws IOException {\n  writeStringToFile(file,data,Charset.defaultCharset(),false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist using the default encoding for the VM."}
{"code": "public boolean removeTuple(Tuple t){\n  Table table=t.getTable();\n  if (m_sets.contains(table)) {\n    return table.removeTuple(t);\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Removes the tuple from its source set if that source set is contained within this composite."}
{"code": "private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n}\n", "nl": "The locator should NOT hold any cache data and thus this method is  overriden by an empty method."}
{"code": "@SuppressWarnings(\"unchecked\") public final S withValueSupplier(Splittable.BigIntegerIndexed<T> valueSupplier){\n  this.valueSupplier=valueSupplier;\n  return (S)this;\n}\n", "nl": "Configures the value supplier of this source."}
{"code": "public static boolean hasNextKeyTyped(){\nsynchronized (keyLock) {\n    return !keysTyped.isEmpty();\n  }\n}\n", "nl": "Returns true if the user has typed a key (that has not yet been processed)."}
{"code": "public void loadSavedApi(){\n  String savedApiLevel=PropertiesComponent.getInstance().getValue(FormFactorUtils.getPropertiesComponentMinSdkKey(myFormFactor),Integer.toString(myFormFactor.defaultApi));\n  setSelectedApiLevel(savedApiLevel);\n  if (getSelectedIndex() < 0 && getItemCount() > 0) {\n    setSelectedIndex(0);\n  }\n}\n", "nl": "Load the saved value for this ComboBox"}
{"code": "private void createFilter(Rule rule,JsonElement fieldsElement,JsonElement fieldDelimiterElement,String value){\n  if (fieldsElement == null)   return;\n  if (value == null) {\n    rule.setElseFilter(true);\n  }\n else {\n    List<String> fieldList=new ArrayList<String>();\n    JsonArray fieldArray=fieldsElement.getAsJsonArray();\n    for (int fieldIndex=0; fieldIndex < fieldArray.size(); fieldIndex++) {\n      JsonElement jsonFieldElement=fieldArray.get(fieldIndex);\n      if (jsonFieldElement != null) {\n        JsonObject fieldObj=jsonFieldElement.getAsJsonObject();\n        fieldList.add(fieldObj.get(\"name\").getAsString());\n      }\n    }\n    String[] values=null;\n    if (fieldDelimiterElement != null) {\n      values=value.split(fieldDelimiterElement.getAsString());\n    }\n else {\n      values=new String[1];\n      values[0]=value;\n    }\n    List<Filter> filterList=new ArrayList<Filter>();\n    int index=0;\n    while (index < values.length) {\n      Expression fieldExpression=filterFactory.property(fieldList.get(index));\n      Expression valueExpression=filterFactory.literal(values[index]);\n      PropertyIsEqualTo filter=filterFactory.equals(fieldExpression,valueExpression);\n      filterList.add(filter);\n      index++;\n    }\n    Filter completeFilter=null;\n    if (filterList.size() > 1) {\n      completeFilter=filterFactory.and(filterList);\n    }\n else     if (filterList.size() == 1) {\n      completeFilter=filterList.get(0);\n    }\n    rule.setFilter(completeFilter);\n  }\n}\n", "nl": "Creates the filter."}
{"code": "public static void computeReachableFromObject(Object root,Class<?> declaredRootClass,List<String> currentPath,ReachableClasses reachableClasses) throws IllegalAccessException, ClassNotFoundException {\n  final Class<?> concreteRootClass=DeepEqualsTesterUtil.getClass(declaredRootClass,root);\n  List<Field> allFields=DeepEqualsTesterUtil.getAllFields(concreteRootClass);\n  for (  Field field : allFields) {\n    if (!Modifier.isStatic(field.getModifiers())) {\n      field.setAccessible(true);\n      final Object fieldObject;\n      if (root == null) {\n        fieldObject=null;\n      }\n else {\n        fieldObject=field.get(root);\n      }\n      List<String> childPath=Lists.newArrayList();\n      childPath.addAll(currentPath);\n      childPath.add(field.toString());\n      addToReachableAndRecurse(fieldObject,field.getType(),field.getGenericType(),childPath,reachableClasses);\n    }\n  }\n}\n", "nl": "Find all of the classes reachable from a root object"}
{"code": "public int next(){\n  if (!hasNextLine())   return -1;\n  String line=nextLine();\n  while (hasNextLine() && !line.startsWith(\">\")) {\n    line=nextLine();\n  }\n  if (line == null || !line.startsWith(\">\"))   return -1;\n  final String queryName=Basic.getReadName(line);\n  matchesTextLength=0;\n  byte[] bytes=makeSAM(queryName,Basic.replaceSpaces(line,' ')).getBytes();\n  if (matchesTextLength + bytes.length >= matchesText.length) {\n    byte[] tmp=new byte[2 * (matchesTextLength + bytes.length)];\n    System.arraycopy(matchesText,0,tmp,0,matchesTextLength);\n    matchesText=tmp;\n  }\n  System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);\n  matchesTextLength+=bytes.length;\n  return 1;\n}\n", "nl": "gets the next matches"}
{"code": "public boolean isUnknown(){\n  return true;\n}\n", "nl": "Returns <tt>true</tt> if this type of attribute is unknown. The default implementation of this method always returns <tt>true</tt>."}
{"code": "@Override public void touchAuthorAvatar(){\n  User u=User.buildUser(model.getPhoto());\n  Mysplash.getInstance().setUser(u);\n  view.touchAuthorAvatar();\n}\n", "nl": "<br> presenter."}
{"code": "private void requestUserPhotos(Context c,int page,boolean refresh,String order){\n  page=refresh ? 1 : page + 1;\n  listener=new OnRequestPhotosListener(c,page,refresh);\n  model.getService().requestUserPhotos((User)model.getRequestKey(),page,Mysplash.DEFAULT_PER_PAGE,order,listener);\n}\n", "nl": "<br> utils."}
{"code": "private void listSelectionChanged(IStructuredSelection selection){\n  if (editor == null || editor.getSelectionProvider() == null) {\n    try {\n      contents.reset();\n      showAnnotations(svnFile,svnAnnotateBlocks,contents,false);\n    }\n catch (    PartInitException e) {\n      return;\n    }\ncatch (    IOException e) {\n      return;\n    }\n  }\n  ISelectionProvider selectionProvider=editor.getSelectionProvider();\n  if (selectionProvider == null) {\n    return;\n  }\n  ITextSelection textSelection=(ITextSelection)selectionProvider.getSelection();\n  AnnotateBlock listSelection=null;\n  try {\n    listSelection=(AnnotateBlock)selection.getFirstElement();\n  }\n catch (  ClassCastException cce) {\n    return;\n  }\n  if (listSelection == null) {\n    return;\n  }\n  if (textSelection.getStartLine() == listSelection.getStartLine() && textSelection.getEndLine() == listSelection.getEndLine() && selection.equals(previousListSelection)) {\n    return;\n  }\n  if (!lastSelectionWasText) {\n    try {\n      int start=document.getLineOffset(listSelection.getStartLine());\n      int end=document.getLineOffset(listSelection.getEndLine() + 1);\n      editor.selectAndReveal(start,end - start);\n      if (editor != null && !page.isPartVisible(editor)) {\n        page.activate(editor);\n      }\n    }\n catch (    BadLocationException e) {\n    }\n  }\n  if (historyView != null) {\n    SVNHistoryPage page=(SVNHistoryPage)historyView.getHistoryPage();\n    page.selectRevision(new SVNRevision.Number(listSelection.getRevision()));\n  }\n  lastSelectionWasText=false;\n}\n", "nl": "A selection event in the Annotate List View"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200280,skillname);\n}\n", "nl": "You are struck with fear after using [%SkillName]."}
{"code": "public static void o(double[][] A){\n  o(A,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);\n}\n", "nl": "Prints a 2-dimensional array of doubles in default e format."}
{"code": "public void addClickingListener(OnWheelClickedListener listener){\n  clickingListeners.add(listener);\n}\n", "nl": "Adds wheel clicking listener"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists."}
{"code": "public static byte[] compressForGzip(String string){\n  ByteArrayOutputStream os=null;\n  GZIPOutputStream gos=null;\n  try {\n    os=new ByteArrayOutputStream(string.length());\n    gos=new GZIPOutputStream(os);\n    gos.write(string.getBytes(\"UTF-8\"));\n    byte[] compressed=os.toByteArray();\n    return compressed;\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    okhttp3.internal.Util.closeQuietly(gos);\n    okhttp3.internal.Util.closeQuietly(os);\n  }\n  return null;\n}\n", "nl": "gzip compress 2 byte"}
{"code": "public SimpleAsyncPollingContainerConfigurer eventListenerMethod(Object eventListener,String methodName){\n  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();\n  methodEventListenerAdapter.setDelegate(eventListener);\n  methodEventListenerAdapter.setMethodName(methodName);\n  methodEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(methodEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses method name as an adapter"}
{"code": "public void waitUntilFinished(){\n  flushTermination();\n  flushUpdate();\n  flushInsert();\n  shutdown();\n  for (int i=0; i < numberOfQueues; i++) {\n    while (!executors[i].isTerminated()) {\n      try {\n        executors[i].awaitTermination(10000000,TimeUnit.SECONDS);\n      }\n catch (      InterruptedException e) {\n      }\n    }\n  }\n  if (useBulkInsert) {\n    bulkInsert();\n  }\n  logFinalResults();\n  if (this.error != null) {\n    if (error instanceof RuntimeException) {\n      throw (RuntimeException)error;\n    }\n else {\n      throw new RuntimeException(\"One or more parallel tasks failed\",this.error);\n    }\n  }\n}\n", "nl": "Calls flushTermination(), flushUpdate(), flushInsert() and shutdown() and waits for all pending tasks to finish. To ensure proper error handling, this method must be called."}
{"code": "public void onCreate(K key,R resource){\n}\n", "nl": "Notifies that a the resource was created. This is called by the thread creating the resource, prior to being given the instance."}
{"code": "public static String formatMillis(int millisec){\n  int seconds=(int)(millisec / 1000);\n  int hours=seconds / (60 * 60);\n  seconds%=(60 * 60);\n  int minutes=seconds / 60;\n  seconds%=60;\n  String time;\n  if (hours > 0) {\n    time=String.format(Locale.ROOT,\"%d:%02d:%02d\",hours,minutes,seconds);\n  }\n else {\n    time=String.format(Locale.ROOT,\"%d:%02d\",minutes,seconds);\n  }\n  return time;\n}\n", "nl": "Formats time from milliseconds to hh:mm:ss string format."}
{"code": "public Matrix3f adjoint(){\n  return adjoint(null);\n}\n", "nl": "Returns a new matrix representing the adjoint of this matrix."}
{"code": "@Override public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {\n  allowXMLCatalogPI=false;\n  if (dtdHandler != null) {\n    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);\n  }\n}\n", "nl": "SAX DTDHandler API."}
{"code": "protected void createNetwork() throws Throwable {\n  sendContainerNetworkRequest(NetworkOperationType.CREATE);\n  verifyNetworkStateExists(networkStateReference);\n  sendGetNetworkStateRequest();\n}\n", "nl": "Create a network, store its id in this.containerId"}
{"code": "private void pickCenterOverlap(ScoutWidget[] list){\n  for (int i=0; i < list.length; i++) {\n    ScoutWidget scoutWidget=list[i];\n    float centerX=scoutWidget.getX() + scoutWidget.getWidth() / 2;\n    float centerY=scoutWidget.getY() + scoutWidget.getHeight() / 2;\n    for (int j=0; j < list.length; j++) {\n      if (i == j)       continue;\n      ScoutWidget widget=list[j];\n      if (scoutWidget.isGuideline()) {\n        continue;\n      }\n      if (!widget.isGuideline() && ScoutWidget.distance(scoutWidget,widget) > MAX_DIST_FOR_CENTER_OVERLAP) {\n        continue;\n      }\n      if (!widget.isGuideline() || widget.isVerticalGuideline()) {\n        if (Math.abs(widget.getX() - centerX) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(1,widget,Direction.WEST);\n        }\n        if (Math.abs(widget.getX() + widget.getWidth() - centerX) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(1,widget,Direction.EAST);\n        }\n      }\n      if (!widget.isGuideline() || widget.isHorizontalGuideline()) {\n        if (Math.abs(widget.getY() - centerY) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(0,widget,Direction.NORTH);\n        }\n        if (Math.abs(widget.getY() + widget.getHeight() - centerY) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(0,widget,Direction.SOUTH);\n        }\n      }\n    }\n  }\n}\n", "nl": "Find and connect widgets centered over other widgets"}
{"code": "public JSONObject optJSONObject(String key){\n  Object o=opt(key);\n  return o instanceof JSONObject ? (JSONObject)o : null;\n}\n", "nl": "Get an optional JSONObject associated with a key. It returns null if there is no such key, or if its value is not a JSONObject."}
{"code": "private BSPTree<Euclidean1D> childAfter(BSPTree<Euclidean1D> node){\n  if (isDirect(node)) {\n    return node.getPlus();\n  }\n else {\n    return node.getMinus();\n  }\n}\n", "nl": "Find the child node just after an internal node."}
{"code": "@Override public Object[] toArray(){\n  return backedSet.toArray();\n}\n", "nl": "Returns an array containing all of the elements in this applyTransformToDestination. If this applyTransformToDestination makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. <p/> <p>The returned array will be \"safe\" in that no references to it are maintained by this applyTransformToDestination.  (In other words, this method must allocate a new array even if this applyTransformToDestination is backed by an array). The caller is thus free to modify the returned array. <p/> <p>This method acts as bridge between array-based and collection-based APIs."}
{"code": "public void init(String title){\n  mTitleView=(TextView)findViewById(R.id.most_visited_title);\n  mThumbnailView=(MostVisitedThumbnail)findViewById(R.id.most_visited_thumbnail);\n  mTitleView.setText(title);\n  mTitlePaddingStart=ApiCompatibilityUtils.getPaddingStart(mTitleView);\n  mFaviconSize=getResources().getDimensionPixelSize(R.dimen.default_favicon_size);\n  int extraPaddingStart=mFaviconSize + mTitleView.getCompoundDrawablePadding();\n  ApiCompatibilityUtils.setPaddingRelative(mTitleView,mTitlePaddingStart + extraPaddingStart,0,0,0);\n}\n", "nl": "Initializes the item. This must be called immediately after construction."}
{"code": "public JSONArray(){\n  this.myArrayList=new ArrayList<Object>();\n}\n", "nl": "Construct an empty JSONArray."}
{"code": "public boolean start(){\n  if (!mIsStarted && !mIsStopped) {\n    mStopWatch.start();\n    mIsStarted=true;\n    return true;\n  }\n  return false;\n}\n", "nl": "Start this stage"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static long floorDiv(final long a,final long b) throws MathRuntimeException {\n  if (b == 0l) {\n    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);\n  }\n  final long m=a % b;\n  if ((a ^ b) >= 0l || m == 0l) {\n    return a / b;\n  }\n else {\n    return (a / b) - 1l;\n  }\n}\n", "nl": "Finds q such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0. <p> This methods returns the same value as integer division when a and b are same signs, but returns a different value when they are opposite (i.e. q is negative)."}
{"code": "public void compose(final double[] operand,final int operandOffset,final double[] f,final double[] result,final int resultOffset){\n  for (int i=0; i < compIndirection.length; ++i) {\n    final int[][] mappingI=compIndirection[i];\n    double r=0;\n    for (int j=0; j < mappingI.length; ++j) {\n      final int[] mappingIJ=mappingI[j];\n      double product=mappingIJ[0] * f[mappingIJ[1]];\n      for (int k=2; k < mappingIJ.length; ++k) {\n        product*=operand[operandOffset + mappingIJ[k]];\n      }\n      r+=product;\n    }\n    result[resultOffset + i]=r;\n  }\n}\n", "nl": "Compute composition of a derivative structure by a function."}
{"code": "public static Value local(Value val){\n  if (val != null && isLocal(val))   return val;\n else   return null;\n}\n", "nl": "filters out Locals.<br> returns <code>null</code> if <code>val</code> is null."}
{"code": "public static boolean isEmpty(Object s){\n  return s == null || X.EMPTY.equals(s) || X.EMPTY.equals(s.toString().trim());\n}\n", "nl": "same, which test null."}
{"code": "public void testIntegerField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n", "nl": "integer field should always assigned 1."}
{"code": "public static Integer toIntegerObject(Object obj){\n  if (obj == null) {\n    return null;\n  }\n  if (obj instanceof Integer) {\n    return (Integer)obj;\n  }\n  if (obj instanceof Number) {\n    return ((Number)obj).intValue();\n  }\n  Integer result=null;\n  try {\n    result=Integer.parseInt(obj.toString());\n  }\n catch (  Exception e) {\n  }\n  return result;\n}\n", "nl": "Converts an <code>Object</code> to an <code>Integer</code>. Returns <code>null</code> if conversion is not possible."}
{"code": "@Nullable public TypeRef lookupType(String fullName){\n  return typeByName.get(getTypeNameInSymbolTable(fullName));\n}\n", "nl": "Get the type by its full name."}
{"code": "public AtomicFile(File baseName){\n  mBaseName=baseName;\n  mBackupName=new File(baseName.getPath() + \".bak\");\n}\n", "nl": "Create a new AtomicFile for a file located at the given File path. The secondary backup file will be the same file path with \".bak\" appended."}
{"code": "public FieldRotation<T> revert(){\n  return new FieldRotation<T>(q0.negate(),q1,q2,q3,false);\n}\n", "nl": "Revert a rotation. Build a rotation which reverse the effect of another rotation. This means that if r(u) = v, then r.revert(v) = u. The instance is not changed."}
{"code": "boolean doesProfileMatch(Experiment experiment,SegmentationProfile segmentationProfile,HttpHeaders headers,Context context){\n  return doesProfileMatch(experiment,segmentationProfile,headers,context,false);\n}\n", "nl": "This method is called to check if the current user is selected by this experiment's segmentation rule by checking if the user's segmentation profile values cause the rule to evaluate to true. The headers and context are passed because they can be used in the rule automatically. NOTE: This version will check the parsed version of the rule that is cached in memory on this system, if available."}
{"code": "private static final void addSuperClasses(final TypeDecl t,final HashSet result){\n  if (t == null)   return;\n  if (t.isClassDecl() && !result.contains(t)) {\n    result.add((ClassDecl)t);\n  }\n else   if (t.isTypeVariable()) {\n    TypeVariable var=(TypeVariable)t;\n    for (int i=0; i < var.getNumTypeBound(); i++)     addSuperClasses(var.getTypeBound(i).type(),result);\n  }\n else   if (t instanceof LUBType || t instanceof GLBType) {\n    result.add(t);\n  }\n else   if (t.isInterfaceDecl())   result.add((ClassDecl)t.typeObject());\n}\n", "nl": "Add the superclasses (<i>C<sub>i</sub></i>) of <i>t</i> to the set <i>result</i>. <ul> <li>If <i>t</i> is a class, then <i>C<sub>i</sub></i> is t itself.</li> <li>If <i>t</i> is a type variable, then <i>C<sub>i</sub></i> is the first class encountered in it bounds</li> <li>It <i>t</i> is an intersection type, then <i>C<sub>i</sub></i> is class that is a member of the intersection, otherwise it's Object</li> </ul>"}
{"code": "private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){\n  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());\n  FilterFactory ff=CommonFactoryFinder.getFilterFactory();\n  Map<String,Expression> options=contrastEnhancement.getOptions();\n  options.put(\"algorithm\",ff.literal(\"TestStretchToMinimumMaximum\"));\n  options.put(\"minValue\",ff.literal(\"1.0\"));\n  options.put(\"maxValue\",ff.literal(\"5.0\"));\n  SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);\n  SelectedChannelType[] channels=new SelectedChannelType[3];\n  channels[0]=channelType;\n  channels[1]=channelType;\n  channels[2]=channelType;\n  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);\n  return channelSelection;\n}\n", "nl": "Creates the channel selection error object"}
{"code": "public static boolean isNativePageUrl(String url,boolean isIncognito){\n  return nativePageType(url,null,isIncognito) != NativePageType.NONE;\n}\n", "nl": "Returns whether the URL would navigate to a native page."}
{"code": "@NotNull @VisibleForTesting public static ModuleResourceRepository createForTest(@NotNull AndroidFacet facet,@NotNull Collection<VirtualFile> resourceDirectories){\n  return createForTest(facet,resourceDirectories,Collections.<LocalResourceRepository>emptyList());\n}\n", "nl": "For testing: creates a project with a given set of resource roots; this allows tests to check this repository without creating a gradle project setup etc"}
{"code": "public LazyConnectionDataSourceProxy(AbstractReadRoutingDataSource abstractReadRoutingDataSource){\n  this.abstractReadRoutingDataSource=abstractReadRoutingDataSource;\n}\n", "nl": "Create a new LazyConnectionDataSourceProxy."}
{"code": "public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){\n  int count=0;\n  List<List<Double>> ret=new ArrayList<List<Double>>();\n  while (count < arr.size()) {\n    List<Double> sublist=arr.subList(count,count + chunk);\n    count+=chunk;\n    ret.add(sublist);\n  }\n  for (  List<Double> lists : ret) {\n    if (lists.size() < chunk)     ret.remove(lists);\n  }\n  return ret;\n}\n", "nl": "This will partition the given whole variable data applyTransformToDestination in to the specified chunk number."}
{"code": "private void encodeContexts(){\n  int i, j;\n  int n_reachable=0, n_scc_reachable=0;\n  int n_full=0;\n  long max_contexts=Long.MIN_VALUE;\n  CgEdge p;\n  Random rGen=new Random();\n  pre_cnt=1;\n  max_scc_size=1;\n  for (i=0; i < n_func; ++i) {\n    vis_cg[i]=0;\n    indeg_cg[i]=0;\n    max_context_size_block[i]=0;\n  }\n  queue_cg.clear();\n  callGraphDFS(Constants.SUPER_MAIN);\n  for (i=0; i < n_func; ++i) {\n    if (vis_cg[i] == 0)     continue;\n    p=call_graph[i];\n    while (p != null) {\n      if (rep_cg[i] == rep_cg[p.t]) {\n        p.scc_edge=true;\n      }\n else {\n        p.scc_edge=false;\n        ++indeg_cg[rep_cg[p.t]];\n      }\n      p=p.next;\n    }\n    ++n_reachable;\n    if (rep_cg[i] == i)     ++n_scc_reachable;\n  }\n  for (i=0; i < n_func; ++i)   if (vis_cg[i] != 0 && rep_cg[i] != i) {\n    p=call_graph[i];\n    while (p.next != null)     p=p.next;\n    p.next=call_graph[rep_cg[i]];\n    call_graph[rep_cg[i]]=call_graph[i];\n  }\n  max_context_size_block[Constants.SUPER_MAIN]=1;\n  queue_cg.addLast(Constants.SUPER_MAIN);\n  while (!queue_cg.isEmpty()) {\n    i=queue_cg.getFirst();\n    queue_cg.removeFirst();\n    p=call_graph[i];\n    while (p != null) {\n      if (p.scc_edge == false) {\n        j=rep_cg[p.t];\n        if (Constants.MAX_CONTEXTS - max_context_size_block[i] < max_context_size_block[j]) {\n          long start=rGen.nextLong();\n          if (start < 0)           start=-start;\n          if (start > Constants.MAX_CONTEXTS - max_context_size_block[i]) {\n            start=Constants.MAX_CONTEXTS - max_context_size_block[i];\n            max_context_size_block[j]=Constants.MAX_CONTEXTS;\n          }\n else {\n            if (max_context_size_block[j] < start + max_context_size_block[i])             max_context_size_block[j]=start + max_context_size_block[i];\n          }\n          p.map_offset=start + 1;\n        }\n else {\n          p.map_offset=max_context_size_block[j] + 1;\n          max_context_size_block[j]+=max_context_size_block[i];\n        }\n        if (--indeg_cg[j] == 0)         queue_cg.addLast(j);\n      }\n else {\n        p.map_offset=1;\n      }\n      p=p.next;\n    }\n    if (max_context_size_block[i] > max_contexts)     max_contexts=max_context_size_block[i];\n  }\n  for (i=n_func - 1; i > -1; --i) {\n    if (vis_cg[i] == 0)     continue;\n    if (rep_cg[i] != i) {\n      max_context_size_block[i]=max_context_size_block[rep_cg[i]];\n      p=call_graph[i];\n      while (p.next.s == i)       p=p.next;\n      call_graph[rep_cg[i]]=p.next;\n      p.next=null;\n    }\n    if (max_context_size_block[i] == Constants.MAX_CONTEXTS)     ++n_full;\n    context_size[i]=max_context_size_block[i];\n    block_num[i]=1;\n  }\n  if (getOpts().geom_blocking()) {\n    for (i=0; i < n_func; ++i) {\n      if (vis_cg[i] == 0)       continue;\n      p=call_graph[i];\n      while (p != null) {\n        j=p.t;\n        if (j != i && p.scc_edge == true) {\n          if (context_size[j] <= Constants.MAX_CONTEXTS - max_context_size_block[i]) {\n            p.map_offset=context_size[j] + 1;\n            context_size[j]+=max_context_size_block[i];\n            ++block_num[j];\n          }\n else {\n            int iBlock=0;\n            if (block_num[j] > 1)             iBlock=rGen.nextInt(block_num[j] - 1) + 1;\n            p.map_offset=iBlock * max_context_size_block[j] + 1;\n          }\n        }\n        p=p.next;\n      }\n    }\n  }\n  ps.printf(\"Reachable Methods = %d, in which #Condensed Nodes = %d, #Full Context Nodes = %d \\n\",n_reachable - 1,n_scc_reachable - 1,n_full);\n  ps.printf(\"Maximum SCC = %d \\n\",max_scc_size);\n  ps.printf(\"The maximum context size = %e\\n\",(double)max_contexts);\n}\n", "nl": "Build a call graph, merge the SCCs and name the contexts."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200935,skilltarget);\n}\n", "nl": "[%SkillTarget]'s attack speed is restored to normal."}
{"code": "protected double populationVariance(double[] v){\n  double mean=StatUtils.mean(v);\n  double sum=0;\n  for (  double val : v) {\n    sum+=(val - mean) * (val - mean);\n  }\n  return sum / v.length;\n}\n", "nl": "Definitional formula for population variance"}
{"code": "@Override public boolean hasField(String fldName){\n  return currentScan.hasField(fldName);\n}\n", "nl": "Returns true if the specified field is in the current scan."}
{"code": "public static boolean searchInArray(int[] data,int key){\n  for (int i=0; i < data.length; i++) {\n    if (key == data[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "return true if given key is found in array"}
{"code": "private void initialize(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n    Log.e(\"GradientRadioLayout\",\"GradientRadioLayout is only Android 21+ compatible. The view will crash !\");\n  }\n  final TypedArray styleAttributes=context.obtainStyledAttributes(attrs,R.styleable.GradientRadioLayout,defStyleAttr,defStyleRes);\n  mColorA=styleAttributes.getColor(R.styleable.GradientRadioLayout_colorA,getResources().getColor(R.color.color_a_default));\n  mColorB=styleAttributes.getColor(R.styleable.GradientRadioLayout_colorB,getResources().getColor(R.color.color_b_default));\n  mDegreesAngle=styleAttributes.getInt(R.styleable.GradientRadioLayout_angle,0);\n  styleAttributes.recycle();\n}\n", "nl": "Initialize view."}
{"code": "protected WSService importService(Service service){\n  String name=service.getQName().getLocalPart();\n  Port port=(Port)service.getPorts().values().iterator().next();\n  String location=\"\";\n  List extensionElements=port.getExtensibilityElements();\n  for (  Object extension : extensionElements) {\n    if (extension instanceof SOAPAddress) {\n      SOAPAddress address=(SOAPAddress)extension;\n      location=address.getLocationURI();\n    }\n  }\n  WSService wsService=new WSService(this.namespace + name,location,this.wsdlLocation);\n  return wsService;\n}\n", "nl": "Imports the service from the WSDL service definition"}
{"code": "public ApplicationType createApplicationTypeFor(Application app,Jvm jvm,String mainClass){\n  String[] appDesc=map.get(mainClass);\n  if (appDesc != null) {\n    return new MainClassApplicationType(app,appDesc[NAME],appDesc[DESCRIPTION],appDesc[ICON_PATH]);\n  }\n  return null;\n}\n", "nl": "Creates ApplicationType for application, jvm and mainClass. Can overriden  by sublasses, which relies on mainClass name"}
{"code": "public static Map<String,Object> makeValidContext(ModelService model,String mode,Map<String,? extends Object> context) throws GenericServiceException {\n  Map<String,Object> newContext;\n  int modeInt=0;\n  if (mode.equalsIgnoreCase(\"in\")) {\n    modeInt=1;\n  }\n else   if (mode.equalsIgnoreCase(\"out\")) {\n    modeInt=2;\n  }\n  if (model == null) {\n    throw new GenericServiceException(\"Model service is null! Should never happen.\");\n  }\n else {\nswitch (modeInt) {\ncase 2:\n      newContext=model.makeValid(context,ModelService.OUT_PARAM,true,null);\n    break;\ncase 1:\n  newContext=model.makeValid(context,ModelService.IN_PARAM,true,null);\nbreak;\ndefault :\nthrow new GenericServiceException(\"Invalid mode, should be either IN or OUT\");\n}\nreturn newContext;\n}\n}\n", "nl": "Uses an existing map of name value pairs and extracts the keys which are used in serviceName Note: This goes not guarantee the context will be 100% valid, there may be missing fields"}
{"code": "public UsersReportQuery comment(String value){\n  return unsafeParam(\"comment\",value);\n}\n", "nl": "Comment describing the complaint."}
{"code": "public Vector2f(){\n  x=y=0;\n}\n", "nl": "Creates a Vector2f with x and y set to 0. Equivalent to Vector2f(0,0)."}
{"code": "@Override public int addAttribute(QName qname,String attrType,String attrValue){\n  int index=fElement.getXercesAttribute(qname.uri,qname.localpart);\n  if (index < 0) {\n    AttrImpl attr=(AttrImpl)((CoreDocumentImpl)fElement.getOwnerDocument()).createAttributeNS(qname.uri,qname.rawname,qname.localpart);\n    attr.setNodeValue(attrValue);\n    index=fElement.setXercesAttributeNode(attr);\n    fDTDTypes.insertElementAt(attrType,index);\n    fAugmentations.insertElementAt(new AugmentationsImpl(),index);\n    attr.setSpecified(false);\n  }\n else {\n  }\n  return index;\n}\n", "nl": "This method adds default declarations"}
{"code": "public boolean exists(){\n  return scanner != null;\n}\n", "nl": "Returns true if this input stream exists."}
{"code": "public void startDeleteJob(){\n  try {\n    Scheduler scheduler=Singleton.getScheduler();\n    JobDetail job=newJob(DeleteRepositoryJob.class).withIdentity(\"deletejob\").build();\n    SimpleTrigger trigger=newTrigger().withIdentity(\"deletejob\").withSchedule(simpleSchedule().withIntervalInSeconds(1).repeatForever()).build();\n    scheduler.scheduleJob(job,trigger);\n    scheduler.start();\n  }\n catch (  SchedulerException ex) {\n    LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n}\n", "nl": "Starts a background job which deletes repositories from the database, index and checked out disk"}
{"code": "public static GsAuthResponse registerGameServer(GsConnection gsConnection,byte requestedId,byte[] defaultAddress,List<IPRange> ipRanges,int port,int maxPlayers,String password){\n  GameServerInfo gsi=gameservers.get(requestedId);\n  if (gsi == null) {\n    log.info(gsConnection + \" requestedID=\" + requestedId+ \" not aviable!\");\n    return GsAuthResponse.NOT_AUTHED;\n  }\n  if (gsi.getConnection() != null) {\n    return GsAuthResponse.ALREADY_REGISTERED;\n  }\n  if (!gsi.getPassword().equals(password) || !NetworkUtils.checkIPMatching(gsi.getIp(),gsConnection.getIP())) {\n    log.info(gsi.getPassword() + \" \" + password);\n    log.info(gsConnection + \" wrong ip or password!\");\n    return GsAuthResponse.NOT_AUTHED;\n  }\n  gsi.setDefaultAddress(defaultAddress);\n  gsi.setIpRanges(ipRanges);\n  gsi.setPort(port);\n  gsi.setMaxPlayers(maxPlayers);\n  gsi.setConnection(gsConnection);\n  gsConnection.setGameServerInfo(gsi);\n  return GsAuthResponse.AUTHED;\n}\n", "nl": "Register GameServer if its possible."}
{"code": "public boolean handleResponse(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {\n  logger.warn(\"TODO: {} unsupported RESPONSE.\",incomingMessage.getMessageClass().getLabel());\n  return false;\n}\n", "nl": "Method for handling the response from the controller"}
{"code": "public static void buildUnpaidOrderTable(Connection conn){\n  try {\n    Statement stmt=conn.createStatement();\n    stmt.execute(\"CREATE TABLE UnpaidOrder \" + \"( CustomerNumber CHAR(10) NOT NULL REFERENCES Customer(CustomerNumber), \" + \"  ProdNum CHAR(10) NOT NULL REFERENCES Coffee(ProdNum),\"+ \"  OrderDate CHAR(10),\"+ \"  Quantity DOUBLE,\"+ \"  Cost DOUBLE )\");\n  }\n catch (  SQLException ex) {\n    System.out.println(\"ERROR: \" + ex.getMessage());\n  }\n}\n", "nl": "The buildUnpaidOrderTable method creates the UnpaidOrder table."}
{"code": "public void addTypeBound(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeBoundListNoTransform() : getTypeBoundList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeBound list."}
{"code": "public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){\n  if (tag != cp.tag)   return tag - cp.tag;\n  CONSTANT_Integer_info cu=(CONSTANT_Integer_info)cp;\n  return ((int)bytes) - (int)cu.bytes;\n}\n", "nl": "Compares this entry with another cp_info object (which may reside in a different constant pool)."}
{"code": "public <T>T recall(File file,Class<T> type) throws IOException {\n  try (FileInputStream fis=new FileInputStream(file)){\n    return serializer.read(fis,type);\n  }\n }\n", "nl": "Returns the object stored in the local file system at the given file location."}
{"code": "private void handleFinishedH(boolean reschedule){\nswitch (mVerb) {\ncase VERB_EXECUTING:\ncase VERB_STOPPING:\n    closeAndCleanupJobH(reschedule);\n  break;\ndefault :\nbreak;\n}\n}\n", "nl": "VERB_EXECUTING  -> Client called jobFinished(), clean up and notify done. _STOPPING   -> Successful finish, clean up and notify done. _STARTING   -> Error _PENDING    -> Error"}
{"code": "public static int bestFactor(long size,Transaction tx){\n  int avail=tx.bufferMgr().available();\n  if (avail <= 1)   return 1;\n  long k=size;\n  double i=1.0;\n  while (k > avail) {\n    i++;\n    k=(int)Math.ceil(size / i);\n  }\n  return (int)k;\n}\n", "nl": "This method considers the various factors of the specified output size (in blocks), and returns the highest factor that is less than the number of available buffers."}
{"code": "protected void restoreBaseURI(){\n  fBaseURI.pop();\n  fLiteralSystemID.pop();\n  fExpandedSystemID.pop();\n  fBaseURIScope.pop();\n  fCurrentBaseURI.setBaseSystemId((String)fBaseURI.peek());\n  fCurrentBaseURI.setLiteralSystemId((String)fLiteralSystemID.peek());\n  fCurrentBaseURI.setExpandedSystemId((String)fExpandedSystemID.peek());\n}\n", "nl": "Discards the URIs at the top of the stack, and restores the ones beneath it."}
{"code": "@Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type){\n  return addCursor(x,y,direction,type,true);\n}\n", "nl": "Add a cursor to the collection."}
{"code": "public synchronized static LuaState newLuaState(){\n  int i=getNextStateIndex();\n  LuaState L=new LuaState(i);\n  states.add(i,L);\n  return L;\n}\n", "nl": "Method that creates a new instance of LuaState"}
{"code": "public boolean equals(final Quaternion q,final double eps){\n  return Precision.equals(q0,q.getQ0(),eps) && Precision.equals(q1,q.getQ1(),eps) && Precision.equals(q2,q.getQ2(),eps)&& Precision.equals(q3,q.getQ3(),eps);\n}\n", "nl": "Checks whether this instance is equal to another quaternion within a given tolerance."}
{"code": "@Override public Collection<SerialMessage> initialize(boolean refresh){\n  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();\n  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {\n    result.add(getSupportedMessage());\n  }\n  return result;\n}\n", "nl": "Initializes the meter command class. Requests the supported meter types."}
{"code": "@SuppressWarnings(\"WeakerAccess\") public boolean hasHeader(){\n  return header != null;\n}\n", "nl": "Returns if a header is currently set."}
{"code": "protected Criteria createCriteriaInternal(){\n  Criteria criteria=new Criteria();\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.rules"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static Zmat o(Zdiagmat D,Zmat A) throws JampackException {\n  if (D.order != A.nrow) {\n    throw new JampackException(\"Unconformity in product.\");\n  }\n  Zmat B=new Zmat(A.nrow,A.ncol);\n  for (int i=0; i < A.nrow; i++) {\n    for (int j=0; j < A.nc; j++) {\n      B.re[i][j]=D.re[i] * A.re[i][j] - D.im[i] * A.im[i][j];\n      B.im[i][j]=D.re[i] * A.im[i][j] + D.im[i] * A.re[i][j];\n    }\n  }\n  return B;\n}\n", "nl": "Computes the product of a Zdiagmat and a Zmat."}
{"code": "protected AbstractLeaseMap(Map map,Lease lease,long duration){\n  this(map);\n  map.put(lease,new Long(duration));\n}\n", "nl": "Provide a map of your choice.  It is assumed that canContainKey(lease) is true."}
{"code": "public static String grabQueryString(String text) throws IOException {\n  BufferedReader r=new BufferedReader(new StringReader(text));\n  String aLine;\n  StringBuilder buf=new StringBuilder();\n  boolean passedScore=false;\n  while ((aLine=r.readLine()) != null) {\n    aLine=aLine.trim();\n    if (aLine.startsWith(\"Score\")) {\n      if (!passedScore)       passedScore=true;\n else       break;\n    }\n    if (aLine.startsWith(\"Query\")) {\n      String[] words=aLine.split(\" +\");\n      buf.append(words[2]);\n    }\n  }\n  return buf.toString().replaceAll(\"\\n\",\"\").replaceAll(\"\\r\",\"\");\n}\n", "nl": "grab the total query string"}
{"code": "public Math_Vector add(Math_Vector other){\n  this.x+=other.x;\n  this.y+=other.y;\n  return this;\n}\n", "nl": "add the value to this Math_Vector"}
{"code": "@deprecated public LanguageMatcherData addDistance(String desired,String supported,int percent,String comment){\n  return addDistance(desired,supported,percent,false,comment);\n}\n", "nl": "/*    "}
{"code": "public Location(int x,int y,int z){\n  this.x=x;\n  this.y=y;\n  this.z=z;\n}\n", "nl": "Constructs a new Location with the given coordinates"}
{"code": "public static String dottedClassName(String typeDescriptor){\n  if (!isByteCodeClassName(typeDescriptor)) {\n    String t=typeDescriptor;\n    int idx=0;\n    while (idx < t.length() && t.charAt(idx) == '[') {\n      idx++;\n    }\n    String c=t.substring(idx);\n    if (c.length() == 1 && (c.startsWith(\"I\") || c.startsWith(\"B\") || c.startsWith(\"C\")|| c.startsWith(\"S\")|| c.startsWith(\"J\")|| c.startsWith(\"D\")|| c.startsWith(\"F\")|| c.startsWith(\"Z\"))) {\n      Type ty=getType(t);\n      return ty == null ? \"\" : getType(t).toString();\n    }\n    throw new IllegalArgumentException(\"typeDescriptor is not a class typedescriptor: '\" + typeDescriptor + \"'\");\n  }\n  String t=typeDescriptor;\n  int idx=0;\n  while (idx < t.length() && t.charAt(idx) == '[') {\n    idx++;\n  }\n  String className=typeDescriptor.substring(idx);\n  className=className.substring(className.indexOf('L') + 1,className.indexOf(';'));\n  className=className.replace('/','.');\n  return className;\n}\n", "nl": "Return the dotted class name of a type descriptor, i.e. change Ljava/lang/Object; to java.lang.Object."}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (cookie == null)   throw new InvalidObjectException(\"null cookie reference\");\n  if (landlord == null)   throw new InvalidObjectException(\"null landlord reference\");\n  if (landlordUuid == null)   throw new InvalidObjectException(\"null landlordUuid reference\");\n}\n", "nl": "Read this object back validating state."}
{"code": "@Override public long skip(long n){\n  if (n < 0) {\n    throw new IllegalArgumentException(\"Number of characters to skip is less than zero: \" + n);\n  }\n  if (idx >= charSequence.length()) {\n    return -1;\n  }\n  int dest=(int)Math.min(charSequence.length(),idx + n);\n  int count=dest - idx;\n  idx=dest;\n  return count;\n}\n", "nl": "Skip the specified number of characters."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public IntType fullCopy(){\n  IntType tree=(IntType)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public static void deleteConnection(GeoServerConnection connection){\n  getInstance().internal_deleteConnection(connection);\n}\n", "nl": "Delete connection."}
{"code": "public boolean isAssumedNonNullBefore(Unit s,Immediate i){\n  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);\n  return ai.get(i) == NON_NULL;\n}\n", "nl": "Returns <code>true</code> if the analysis could determine that i is always treated as non-null after and including the statement s."}
{"code": "public boolean hasSet(String name){\n  return m_map.containsKey(name);\n}\n", "nl": "Indicates if this composite contains a TupleSet with the given name."}
{"code": "protected AbstractJmsListener(Delegator delegator){\n  this.dispatcher=ServiceContainer.getLocalDispatcher(\"JMSDispatcher\",delegator);\n}\n", "nl": "Initializes the LocalDispatcher for this service listener."}
{"code": "public static String millisToString(long millis){\n  return Strings.millisToString(millis,false);\n}\n", "nl": "Convert time to a string"}
{"code": "public final void incrementIdCounterTo(int id){\n  int diff=id - mIdCounter.get();\n  if (diff < 0)   return;\n  mIdCounter.addAndGet(diff);\n  updateSharedPreference();\n}\n", "nl": "Ensures the counter is at least as high as the specified value.  The counter should always point to an unused ID (which will be handed out next time a request comes in).  Exposed so that anything externally loading tabs and ids can set enforce new tabs start at the correct id. TODO(dfalcantara): Reduce the visibility of this method once all TabModels are united in how the IDs are assigned (crbug.com/502384)."}
{"code": "public static String join(Collection<? extends IdentifiableObject> objects){\n  if (objects != null && objects.size() > 0) {\n    Iterator<? extends IdentifiableObject> iterator=objects.iterator();\n    StringBuilder builder=new StringBuilder(iterator.next().getDisplayName());\n    while (iterator.hasNext()) {\n      builder.append(SEPARATOR_JOIN).append(iterator.next().getDisplayName());\n    }\n    return builder.toString();\n  }\n  return null;\n}\n", "nl": "Joins the names of the IdentifiableObjects in the given list and separates them with a comma and space. Returns null if the given list is null or has no elements."}
{"code": "public static boolean isMeganizedDAAFile(String fileName,boolean meganized) throws IOException {\n  try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){\n    long magicNumber=ins.readLong();\n    if (magicNumber != DAAHeader.MAGIC_NUMBER)     throw new IOException(\"Input file is not a DAA file.\");\n    long version=ins.readLong();\n    if (version > DAAHeader.DAA_VERSION)     throw new IOException(\"DAA version requires later version of MEGAN.\");\n    if (!meganized)     return true;\n    ins.skip(76);\n    int meganVersion=ins.readInt();\n    if (meganVersion <= 0)     return false;\n    if (meganVersion > DAAHeader.MEGAN_VERSION)     throw new IOException(\"DAA version requires later version of MEGAN.\");\n else     return true;\n  }\n }\n", "nl": "read the header of a DAA file and all reference names"}
{"code": "public PollsDeleteVoteQuery(VkApiClient client,UserActor actor,int pollId,int answerId){\n  super(client,\"polls.deleteVote\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n  answerId(answerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static String callPayPal(HttpServletRequest request,HttpServletResponse response){\n  Locale locale=UtilHttp.getLocale(request);\n  Delegator delegator=(Delegator)request.getAttribute(\"delegator\");\n  GenericValue userLogin=(GenericValue)request.getSession().getAttribute(\"userLogin\");\n  String orderId=(String)request.getAttribute(\"orderId\");\n  GenericValue orderHeader=null;\n  try {\n    orderHeader=EntityQuery.use(delegator).from(\"OrderHeader\").where(\"orderId\",orderId).queryOne();\n  }\n catch (  GenericEntityException e) {\n    Debug.logError(e,\"Cannot get the order header for order: \" + orderId,module);\n    request.setAttribute(\"_ERROR_MESSAGE_\",UtilProperties.getMessage(resourceErr,\"payPalEvents.problemsGettingOrderHeader\",locale));\n    return \"error\";\n  }\n  String orderTotal=orderHeader.getBigDecimal(\"grandTotal\").toPlainString();\n  String currencyUom=orderHeader.getString(\"currencyUom\");\n  GenericValue productStore=ProductStoreWorker.getProductStore(request);\n  if (productStore == null) {\n    Debug.logError(\"ProductStore is null\",module);\n    request.setAttribute(\"_ERROR_MESSAGE_\",UtilProperties.getMessage(resourceErr,\"payPalEvents.problemsGettingMerchantConfiguration\",locale));\n    return \"error\";\n  }\n  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString(\"productStoreId\"),\"EXT_PAYPAL\",null,true);\n  String configString=null;\n  String paymentGatewayConfigId=null;\n  if (paymentConfig != null) {\n    paymentGatewayConfigId=paymentConfig.getString(\"paymentGatewayConfigId\");\n    configString=paymentConfig.getString(\"paymentPropertiesPath\");\n  }\n  if (configString == null) {\n    configString=\"payment.properties\";\n  }\n  String company=UtilFormatOut.checkEmpty(productStore.getString(\"companyName\"),\"\");\n  String itemName=UtilProperties.getMessage(resource,\"AccountingOrderNr\",locale) + orderId + \" \"+ (company != null ? UtilProperties.getMessage(commonResource,\"CommonFrom\",locale) + \" \" + company : \"\");\n  String itemNumber=\"0\";\n  String redirectUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"redirectUrl\",configString,\"payment.paypal.redirect\");\n  String notifyUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"notifyUrl\",configString,\"payment.paypal.notify\");\n  String returnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"returnUrl\",configString,\"payment.paypal.return\");\n  String cancelReturnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"cancelReturnUrl\",configString,\"payment.paypal.cancelReturn\");\n  String imageUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"imageUrl\",configString,\"payment.paypal.image\");\n  String payPalAccount=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"businessEmail\",configString,\"payment.paypal.business\");\n  if (UtilValidate.isEmpty(redirectUrl) || UtilValidate.isEmpty(notifyUrl) || UtilValidate.isEmpty(returnUrl)|| UtilValidate.isEmpty(imageUrl)|| UtilValidate.isEmpty(payPalAccount)) {\n    Debug.logError(\"Payment properties is not configured properly, some notify URL from PayPal is not correctly defined!\",module);\n    request.setAttribute(\"_ERROR_MESSAGE_\",UtilProperties.getMessage(resourceErr,\"payPalEvents.problemsGettingMerchantConfiguration\",locale));\n    return \"error\";\n  }\n  Map<String,Object> parameters=new LinkedHashMap<String,Object>();\n  parameters.put(\"cmd\",\"_xclick\");\n  parameters.put(\"business\",payPalAccount);\n  parameters.put(\"item_name\",itemName);\n  parameters.put(\"item_number\",itemNumber);\n  parameters.put(\"invoice\",orderId);\n  parameters.put(\"custom\",userLogin.getString(\"userLoginId\"));\n  parameters.put(\"amount\",orderTotal);\n  parameters.put(\"currency_code\",currencyUom);\n  parameters.put(\"return\",returnUrl);\n  if (UtilValidate.isNotEmpty(cancelReturnUrl))   parameters.put(\"cancel_return\",cancelReturnUrl);\n  parameters.put(\"notify_url\",notifyUrl);\n  parameters.put(\"image_url\",imageUrl);\n  parameters.put(\"no_note\",\"1\");\n  parameters.put(\"no_shipping\",\"1\");\n  String encodedParameters=UtilHttp.urlEncodeArgs(parameters,false);\n  String redirectString=redirectUrl + \"?\" + encodedParameters;\n  request.getSession().setAttribute(\"PAYPAL_ORDER\",orderId);\n  try {\n    response.sendRedirect(redirectString);\n  }\n catch (  IOException e) {\n    Debug.logError(e,\"Problems redirecting to PayPal\",module);\n    request.setAttribute(\"_ERROR_MESSAGE_\",UtilProperties.getMessage(resourceErr,\"payPalEvents.problemsConnectingWithPayPal\",locale));\n    return \"error\";\n  }\n  return \"success\";\n}\n", "nl": "Initiate PayPal Request"}
{"code": "@Override public void doNamespaceBundleSplit() throws Exception {\n  int maxBundleCount=pulsar.getConfiguration().getLoadBalancerNamespaceMaximumBundles();\n  long maxBundleTopics=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxTopics();\n  long maxBundleSessions=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxSessions();\n  long maxBundleMsgRate=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxMsgRate();\n  long maxBundleBandwidth=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxBandwidthMbytes() * MBytes;\n  log.info(\"Running namespace bundle split with thresholds: topics {}, sessions {}, msgRate {}, bandwidth {}, maxBundles {}\",maxBundleTopics,maxBundleSessions,maxBundleMsgRate,maxBundleBandwidth,maxBundleCount);\n  if (this.lastLoadReport == null || this.lastLoadReport.getBundleStats() == null) {\n    return;\n  }\n  Map<String,NamespaceBundleStats> bundleStats=this.lastLoadReport.getBundleStats();\n  Set<String> bundlesToBeSplit=new HashSet<>();\n  for (  Map.Entry<String,NamespaceBundleStats> statsEntry : bundleStats.entrySet()) {\n    String bundleName=statsEntry.getKey();\n    NamespaceBundleStats stats=statsEntry.getValue();\n    long totalSessions=stats.consumerCount + stats.producerCount;\n    double totalMsgRate=stats.msgRateIn + stats.msgRateOut;\n    double totalBandwidth=stats.msgThroughputIn + stats.msgThroughputOut;\n    boolean needSplit=false;\n    if (stats.topics > maxBundleTopics || totalSessions > maxBundleSessions || totalMsgRate > maxBundleMsgRate || totalBandwidth > maxBundleBandwidth) {\n      if (stats.topics <= 1) {\n        log.info(\"Unable to split hot namespace bundle {} since there is only one topic.\",bundleName);\n      }\n else {\n        NamespaceName namespaceName=new NamespaceName(getNamespaceNameFromBundleName(bundleName));\n        int numBundles=pulsar.getNamespaceService().getBundleCount(namespaceName);\n        if (numBundles >= maxBundleCount) {\n          log.info(\"Unable to split hot namespace bundle {} since the namespace has too many bundles.\",bundleName);\n        }\n else {\n          needSplit=true;\n        }\n      }\n    }\n    if (needSplit) {\n      if (this.getLoadBalancerAutoBundleSplitEnabled()) {\n        log.info(\"Will split hot namespace bundle {}, topics {}, producers+consumers {}, msgRate in+out {}, bandwidth in+out {}\",bundleName,stats.topics,totalSessions,totalMsgRate,totalBandwidth);\n        bundlesToBeSplit.add(bundleName);\n      }\n else {\n        log.info(\"DRY RUN - split hot namespace bundle {}, topics {}, producers+consumers {}, msgRate in+out {}, bandwidth in+out {}\",bundleName,stats.topics,totalSessions,totalMsgRate,totalBandwidth);\n      }\n    }\n  }\n  if (bundlesToBeSplit.size() > 0) {\n    for (    String bundleName : bundlesToBeSplit) {\n      try {\n        pulsar.getAdminClient().namespaces().splitNamespaceBundle(getNamespaceNameFromBundleName(bundleName),getBundleRangeFromBundleName(bundleName));\n        log.info(\"Successfully split namespace bundle {}\",bundleName);\n      }\n catch (      Exception e) {\n        log.error(\"Failed to split namespace bundle {}\",bundleName,e);\n      }\n    }\n    this.setLoadReportForceUpdateFlag();\n  }\n}\n", "nl": "Detect and split hot namespace bundles"}
{"code": "public void writeByteByteInt(ByteByteInt a) throws IOException {\n  io.write(a.getByte1());\n  io.write(a.getByte2());\n  writeInt(a.getValue());\n}\n", "nl": "write a byte-byte-int"}
{"code": "public ShortArrayCodeOutput(short[] array){\n  if (array == null) {\n    throw new IllegalArgumentException(\"array is null.\");\n  }\n  this.array=array;\n}\n", "nl": "Constructs an instance by wrapping an exist array."}
{"code": "private void parseLayoutAttributes(String layoutFile,SootClass layoutClass,AXmlNode rootNode){\n  boolean isSensitive=false;\n  int id=-1;\n  for (  Entry<String,AXmlAttribute<?>> entry : rootNode.getAttributes().entrySet()) {\n    String attrName=entry.getKey().trim();\n    AXmlAttribute<?> attr=entry.getValue();\n    if (attrName.isEmpty())     continue;\n    if (!isAndroidNamespace(attr.getNamespace()))     continue;\n    if (attrName.equals(\"id\") && (attr.getType() == AxmlVisitor.TYPE_REFERENCE || attr.getType() == AxmlVisitor.TYPE_INT_HEX))     id=(Integer)attr.getValue();\n else     if (attrName.equals(\"password\")) {\n      if (attr.getType() == AxmlVisitor.TYPE_INT_HEX)       isSensitive=((Integer)attr.getValue()) != 0;\n else       if (attr.getType() == AxmlVisitor.TYPE_INT_BOOLEAN)       isSensitive=(Boolean)attr.getValue();\n else       throw new RuntimeException(\"Unknown representation of boolean data type\");\n    }\n else     if (!isSensitive && attrName.equals(\"inputType\") && attr.getType() == AxmlVisitor.TYPE_INT_HEX) {\n      int tp=(Integer)attr.getValue();\n      isSensitive=((tp & TYPE_NUMBER_VARIATION_PASSWORD) == TYPE_NUMBER_VARIATION_PASSWORD) || ((tp & TYPE_TEXT_VARIATION_PASSWORD) == TYPE_TEXT_VARIATION_PASSWORD) || ((tp & TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) == TYPE_TEXT_VARIATION_VISIBLE_PASSWORD)|| ((tp & TYPE_TEXT_VARIATION_WEB_PASSWORD) == TYPE_TEXT_VARIATION_WEB_PASSWORD);\n    }\n else     if (isActionListener(attrName) && attr.getType() == AxmlVisitor.TYPE_STRING && attr.getValue() instanceof String) {\n      String strData=((String)attr.getValue()).trim();\n      addCallbackMethod(layoutFile,strData);\n    }\n else     if (attr.getType() == AxmlVisitor.TYPE_STRING && attrName.equals(\"text\")) {\n    }\n else     if (DEBUG && attr.getType() == AxmlVisitor.TYPE_STRING) {\n      System.out.println(\"Found unrecognized XML attribute:  \" + attrName);\n    }\n  }\n  addToMapSet(this.userControls,layoutFile,new LayoutControl(id,layoutClass,isSensitive));\n}\n", "nl": "Parses the layout attributes in the given AXml node"}
{"code": "@PostConstruct public void init(){\n  listenerContainer=cacheRegistrationService.registerToAlarms(this);\n}\n", "nl": "Registers to be notified of all Tag updates (data, rule and control tags)."}
{"code": "@Override public void run(){\n  while (!shutdownRequestMade) {\n    try {\n      ObjectAndMethod objectAndMethod=taskQueue.poll(THREAD_SHUTDOWN_CHECK_INTERVAL,TimeUnit.MILLISECONDS);\n      if (objectAndMethod != null) {\n        callCorrectMethod(objectAndMethod);\n      }\n    }\n catch (    InterruptedException e) {\n      LOGGER.warn(\"Cache Listener thread interrupted in MultiThreadedListener.\",e);\n    }\n  }\n  ObjectAndMethod objectAndMethod;\n  while ((objectAndMethod=taskQueue.poll()) != null) {\n    callCorrectMethod(objectAndMethod);\n  }\n}\n", "nl": "Runs from start up to shutdown and listens for updates."}
{"code": "public JSONObject put(String key,boolean value) throws JSONException {\n  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);\n  return this;\n}\n", "nl": "Put a key/boolean pair in the JSONObject."}
{"code": "public boolean hasNext(){\n  if (error || currentClass == null)   return false;\n  if (currentCount < currentClass.getFirst())   return true;\n  currentClass=null;\n  while (classes.size() > 0) {\n    currentCount=0;\n    Pair<Integer,Long> next=classes.remove(0);\n    if (next != null && next.getFirst() > 0 && next.getSecond() >= 0) {\n      try {\n        classDumpReader.seek(next.getSecond());\n      }\n catch (      IOException e) {\n        Basic.caught(e);\n        return false;\n      }\n      currentClass=next;\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns <tt>true</tt> if the iteration has more elements. (In other words, returns <tt>true</tt> if <tt>next</tt> would return an element rather than throwing an exception.)"}
{"code": "public void writeLong(long value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.write(_LONG);\n    this.dataOut.writeLong(value);\n  }\n catch (  IOException ioe) {\n    raise(ioe);\n  }\n}\n", "nl": "Writes a <code>long</code> to the stream message."}
{"code": "public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {\n  String str=data == null ? null : data.toString();\n  writeStringToFile(file,str,encoding,append);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist."}
{"code": "public SpaceConfigurationException(String str,Throwable cause){\n  super(str,cause);\n}\n", "nl": "Constructs a <code>SpaceConfigurationException</code> with the specified detail message and cause."}
{"code": "@Override public void disconnect(long timeout) throws AWSIotException, AWSIotTimeoutException {\n  super.disconnect(timeout);\n}\n", "nl": "Disconnect the client from the server. This is a blocking call, so the calling thread will be blocked until the operation succeeded, failed, or timed out."}
{"code": "@NonNull public static StorableFence or(@NonNull StorableFence... fences){\n  return StorableFence.or(Arrays.asList(fences));\n}\n", "nl": "Creates a meta storable fence which is a logical 'or' of all the given fences"}
{"code": "public LoadInfo(LoadInfo other){\n  __isset_bit_vector.clear();\n  __isset_bit_vector.or(other.__isset_bit_vector);\n  this.averageLoad=other.averageLoad;\n  this.oldGC=other.oldGC;\n  this.threadNum=other.threadNum;\n  this.queueSize=other.queueSize;\n  if (other.isSetMethodQpsMap()) {\n    Map<String,Double> __this__methodQpsMap=new HashMap<String,Double>();\n    for (    Map.Entry<String,Double> other_element : other.methodQpsMap.entrySet()) {\n      String other_element_key=other_element.getKey();\n      Double other_element_value=other_element.getValue();\n      String __this__methodQpsMap_copy_key=other_element_key;\n      Double __this__methodQpsMap_copy_value=other_element_value;\n      __this__methodQpsMap.put(__this__methodQpsMap_copy_key,__this__methodQpsMap_copy_value);\n    }\n    this.methodQpsMap=__this__methodQpsMap;\n  }\n}\n", "nl": "Performs a deep copy on <i>other</i>."}
{"code": "private void checkPathParameterConditions(Method method,FieldSelector selector){\n  TypeRef type=selector.getType();\n  WellKnownType wkt=type.getWellKnownType();\n  if (type.isMap()) {\n    error(method,\"map field not allowed: reached via '%s' on message '%s'.\",selector.toString(),getInputMessageName(method));\n  }\n else   if (type.isRepeated()) {\n    error(method,\"repeated field not allowed: reached via '%s' on message '%s'.\",selector,getInputMessageName(method));\n  }\n else   if (type.isMessage() && !wkt.allowedAsPathParameter()) {\n    error(method,\"message field not allowed: reached via '%s' on message '%s'.\",selector,getInputMessageName(method));\n  }\n}\n", "nl": "Checks context conditions for selectors bound to the HTTP path."}
{"code": "public CacheHeader(String key,Entry entry){\n  this.key=key;\n  this.size=entry.data.length;\n  this.etag=entry.etag;\n  this.serverDate=entry.serverDate;\n  this.lastModified=entry.lastModified;\n  this.ttl=entry.ttl;\n  this.softTtl=entry.softTtl;\n  this.responseHeaders=entry.responseHeaders;\n}\n", "nl": "Instantiates a new CacheHeader object"}
{"code": "private Style renderSymbol(Style style,FeatureTypeStyle ftsToRender,Rule ruleToRender,RuleRenderOptions options){\n  int symbolIndex=SelectedSymbol.getInstance().getSymbolIndex();\n  RuleRenderVisitor visitor=new RuleRenderVisitor(ftsToRender,ruleToRender,symbolIndex,options);\n  style.accept(visitor);\n  Style copy=(Style)visitor.getCopy();\n  return copy;\n}\n", "nl": "Render symbol."}
{"code": "@Inject public Jersey2UnhandledExceptionHandler(ProjectApiErrors projectApiErrors,ApiExceptionHandlerUtils utils){\n  super(projectApiErrors,utils);\n  this.singletonGenericServiceError=Collections.singleton(projectApiErrors.getGenericServiceError());\n  this.genericServiceErrorHttpStatusCode=projectApiErrors.getGenericServiceError().getHttpStatusCode();\n}\n", "nl": "Creates a new instance with the given arguments."}
{"code": "public SuffixFileFilter(String[] suffixes,IOCase caseSensitivity){\n  if (suffixes == null) {\n    throw new IllegalArgumentException(\"The array of suffixes must not be null\");\n  }\n  this.suffixes=new String[suffixes.length];\n  System.arraycopy(suffixes,0,this.suffixes,0,suffixes.length);\n  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;\n}\n", "nl": "Constructs a new Suffix file filter for an array of suffixs specifying case-sensitivity. <p> The array is not cloned, so could be changed after constructing the instance. This would be inadvisable however."}
{"code": "boolean descendsFrom(ClassFile cf){\n  return descendsFrom(cf.toString());\n}\n", "nl": "Answers whether this class is an immediate descendant (as subclass or as an implementation of an interface) of the given class."}
{"code": "public DocumentNGramDistroGraph allNotIn(DocumentNGramDistroGraph dgOtherGraph){\n  EdgeCachedLocator eclLocator=new EdgeCachedLocator(100);\n  DocumentNGramDistroGraph dgClone=(DocumentNGramDistroGraph)clone();\n  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {\n    UniqueVertexGraph gCloneLevel=dgClone.getGraphLevelByNGramSize(iCurLvl);\n    UniqueVertexGraph gOtherGraphLevel=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);\n    if (gOtherGraphLevel == null)     continue;\n    java.util.Iterator iIter=gCloneLevel.getEdgeSet().iterator();\n    while (iIter.hasNext()) {\n      WeightedEdge weCurItem=(WeightedEdge)iIter.next();\n      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gOtherGraphLevel,weCurItem.getVertexA(),weCurItem.getVertexB());\n      if (eEdge != null)       try {\n        gCloneLevel.removeEdge(weCurItem);\n        dgClone.getEdgesToDistros().remove(weCurItem);\n        iIter=gCloneLevel.getEdgeSet().iterator();\n      }\n catch (      Exception ex) {\n        ex.printStackTrace();\n      }\n    }\n  }\n  return dgClone;\n}\n", "nl": "Returns all edges not existent in another graph."}
{"code": "public void received(ByteBuffer buffer){\n  hasReceivedData=true;\n  lastReceiveTime=System.currentTimeMillis();\n}\n", "nl": "Method called when data is received."}
{"code": "public void populateField(FieldIdEnum fieldId,Expression value){\n  if (fieldConfigManager == null) {\n    return;\n  }\n  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);\n  if (fieldConfig != null) {\n    fieldConfig.populate(value);\n  }\n else {\n    ConsoleManager.getInstance().error(this,String.format(\"populateField - %s : %s\",Localisation.getString(StandardPanel.class,\"StandardPanel.unknownField\"),fieldId));\n  }\n}\n", "nl": "Populate field."}
{"code": "public void onSuccess(JSONObject response){\n}\n", "nl": "Fired when a request returns successfully and contains a json object at the base of the response string. Override to handle in your own code."}
{"code": "@Override public void initialize(){\n  getUserList();\n}\n", "nl": "Initializes the presenter by start retrieving the user"}
{"code": "public static void deleteAll(){\n  Helper.delete(new BasicDBObject(),AccessLog.class);\n}\n", "nl": "Delete all."}
{"code": "public static final void shuffle(long[] a,Random r){\n  shuffle(a,0,a.length,r);\n}\n", "nl": "Randomly permute the contents of an array."}
{"code": "public static CharSequence extractFlagsForEditText(CharSequence text){\n  char[] textChars=text.toString().toCharArray();\n  ArrayList<Character> characters=new ArrayList<>();\n  ArrayList<WhatsappUtil.Flag> flags=new ArrayList<>();\n  WhatsappUtil.Flag boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);\n  WhatsappUtil.Flag strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);\n  WhatsappUtil.Flag italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);\n  for (int i=0, j=0; i < textChars.length; i++) {\n    char c=textChars[i];\n    if (c == BOLD_FLAG) {\n      if (boldFlag.start == INVALID_INDEX) {\n        if (WhatsappUtil.hasFlagSameLine(text,BOLD_FLAG,i + 1)) {\n          boldFlag.start=j + 1;\n        }\n      }\n else {\n        boldFlag.end=j;\n        flags.add(boldFlag);\n        boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);\n      }\n    }\n else     if (c == STRIKE_FLAG) {\n      if (strikeFlag.start == INVALID_INDEX) {\n        if (WhatsappUtil.hasFlagSameLine(text,STRIKE_FLAG,i + 1)) {\n          strikeFlag.start=j + 1;\n        }\n      }\n else {\n        strikeFlag.end=j;\n        flags.add(strikeFlag);\n        strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);\n      }\n    }\n else     if (c == ITALIC_FLAG) {\n      if (italicFlag.start == INVALID_INDEX) {\n        if (WhatsappUtil.hasFlagSameLine(text,ITALIC_FLAG,i + 1)) {\n          italicFlag.start=j + 1;\n        }\n      }\n else {\n        italicFlag.end=j;\n        flags.add(italicFlag);\n        italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);\n      }\n    }\n    characters.add(c);\n    j++;\n  }\n  String formatted=WhatsappUtil.getText(characters);\n  SpannableStringBuilder builder=new SpannableStringBuilder(formatted);\n  for (int i=0; i < flags.size(); i++) {\n    WhatsappUtil.Flag flag=flags.get(i);\n    if (flag.flag == BOLD_FLAG) {\n      StyleSpan bss=new StyleSpan(Typeface.BOLD);\n      builder.setSpan(bss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n    }\n else     if (flag.flag == STRIKE_FLAG) {\n      builder.setSpan(new StrikethroughSpan(),flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n    }\n else     if (flag.flag == ITALIC_FLAG) {\n      StyleSpan iss=new StyleSpan(Typeface.ITALIC);\n      builder.setSpan(iss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n    }\n  }\n  return builder;\n}\n", "nl": "Performs formatting on the given text."}
{"code": "private void bindViewType(WXComponent component){\n  int id=generateViewType(component);\n  if (mViewTypes == null) {\n    mViewTypes=new SparseArray<>();\n  }\n  ArrayList<WXComponent> mTypes=mViewTypes.get(id);\n  if (mTypes == null) {\n    mTypes=new ArrayList<>();\n    mViewTypes.put(id,mTypes);\n  }\n  mTypes.add(component);\n}\n", "nl": "ViewType will be classified into {HashMap<Integer,ArrayList<Integer>> mViewTypes}"}
{"code": "public AudioMoveToAlbumQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID of the community where the audio files are located. By default, current user ID."}
{"code": "public void startFirstSampleTimer(){\n}\n", "nl": "Starts the first sample timer"}
{"code": "public void startPlaying(String file){\n  if (this.readyPlayer(file) && this.player != null) {\n    this.player.start();\n    this.setState(STATE.MEDIA_RUNNING);\n    this.seekOnPrepared=0;\n  }\n else {\n    this.prepareOnly=false;\n  }\n}\n", "nl": "Start or resume playing audio file."}
{"code": "protected void checkForNumericAttribute(ProposedTuples tuples,SemanticGraph sg,IndexedWord word){\n  if (sg.hasChildWithReln(word,UniversalEnglishGrammaticalRelations.NUMERIC_MODIFIER)) {\n    IndexedWord nummod=sg.getChildWithReln(word,UniversalEnglishGrammaticalRelations.NUMERIC_MODIFIER);\n    if (nummod.index() < word.index()) {\n      tuples.addTuple(word,nummod);\n    }\n  }\n else   if (sg.hasChildWithReln(word,SemanticGraphEnhancer.QMOD_RELATION)) {\n    IndexedWord qmod=sg.getChildWithReln(word,SemanticGraphEnhancer.QMOD_RELATION);\n    tuples.addTuple(word,qmod);\n  }\n}\n", "nl": "Checks if a word has a numerical modifier, and if so adds it as an object with attribute"}
{"code": "public static int nullSafeHashCode(double[] array){\n  if (array == null) {\n    return 0;\n  }\n  int hash=INITIAL_HASH;\n  int arraySize=array.length;\n  for (int i=0; i < arraySize; i++) {\n    hash=MULTIPLIER * hash + hashCode(array[i]);\n  }\n  return hash;\n}\n", "nl": "Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0."}
{"code": "public static void showToast(Context context,String message){\n  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();\n}\n", "nl": "Method to show toast message"}
{"code": "public boolean hasItem(){\n  return this.item != null;\n}\n", "nl": "Check if this event involved an item"}
{"code": "@Override public long blocksAccessed(){\n  return p.blocksAccessed();\n}\n", "nl": "Estimates the number of block accesses in the projection, which is the same as in the underlying query."}
{"code": "public IntObjectHashMap(){\n  this(defaultCapacity);\n}\n", "nl": "Constructs an empty map with default capacity and default load factors."}
{"code": "private void createClassBody(polyglot.ast.ClassBody classBody){\n  staticFieldInits=null;\n  fieldInits=null;\n  initializerBlocks=null;\n  staticInitializerBlocks=null;\n  Iterator it=classBody.members().iterator();\n  while (it.hasNext()) {\n    Object next=it.next();\n    if (next instanceof polyglot.ast.MethodDecl) {\n      createMethodDecl((polyglot.ast.MethodDecl)next);\n    }\n else     if (next instanceof polyglot.ast.FieldDecl) {\n      createFieldDecl((polyglot.ast.FieldDecl)next);\n    }\n else     if (next instanceof polyglot.ast.ConstructorDecl) {\n      createConstructorDecl((polyglot.ast.ConstructorDecl)next);\n    }\n else     if (next instanceof polyglot.ast.ClassDecl) {\n      Util.addInnerClassTag(sootClass,Util.getSootType(((polyglot.ast.ClassDecl)next).type()).toString(),sootClass.getName(),((polyglot.ast.ClassDecl)next).name().toString(),Util.getModifier(((polyglot.ast.ClassDecl)next).flags()));\n    }\n else     if (next instanceof polyglot.ast.Initializer) {\n      createInitializer((polyglot.ast.Initializer)next);\n    }\n else     if (Options.v().verbose()) {\n      G.v().out.println(\"Class Body Member not implemented for type \" + next.getClass().getName());\n    }\n  }\n  handleInnerClassTags(classBody);\n  handleClassLiteral(classBody);\n  handleAssert(classBody);\n}\n", "nl": "Class Body Creation"}
{"code": "public Matrix copy(){\n  Matrix X=new Matrix(m,n);\n  double[][] C=X.getArray();\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      C[i][j]=A[i][j];\n    }\n  }\n  return X;\n}\n", "nl": "Make a deep copy of a matrix"}
{"code": "public Iterator items(String group,String expr){\n  Expression e=ExpressionParser.parse(expr);\n  if (!(e instanceof Predicate) || ExpressionParser.getError() != null)   return Collections.EMPTY_LIST.iterator();\n  return items(group,(Predicate)e);\n}\n", "nl": "Get an iterator over all items in the given group which match the given filter expression."}
{"code": "public void write(IOutputWriter indexWriter) throws IOException {\n  for (  Object[] dataRecord : data) {\nswitch ((Character)dataRecord[1]) {\ncase 'i':\n      indexWriter.writeInt((Integer)dataRecord[2]);\n    break;\ncase 'f':\n  indexWriter.writeFloat((Float)dataRecord[2]);\nbreak;\ncase 'l':\nindexWriter.writeLong((Long)dataRecord[2]);\nbreak;\ncase 'b':\nindexWriter.write((Byte)dataRecord[2]);\nbreak;\ncase 'B':\nindexWriter.writeByteByteInt((ByteByteInt)dataRecord[2]);\nbreak;\ncase 'c':\nindexWriter.writeChar((Character)dataRecord[2]);\nbreak;\n}\n}\n}\n", "nl": "write the fixed part of the reads block"}
{"code": "public boolean check(Player player,boolean warn){\n  QuestStateList qsl=player.getQuestStateList();\n  return checkFinishedQuests(qsl) && checkUnfinishedQuests(qsl) && checkAcquiredQuests(qsl)&& checkNoAcquiredQuests(qsl)&& checkEquippedItems(player,warn);\n}\n", "nl": "Check all conditions"}
{"code": "public static boolean checkComplete(Context context,String directory,ShareSecurityCheck securityCheck,Intent intentResult){\n  String meta=securityCheck.getMetaContentMap().get(RESOURCE_META_FILE);\n  if (meta == null) {\n    return true;\n  }\n  ShareResPatchInfo.parseResPatchInfoFirstLine(meta,resPatchInfo);\n  if (resPatchInfo.resArscMd5 == null) {\n    return true;\n  }\n  if (!ShareResPatchInfo.checkResPatchInfo(resPatchInfo)) {\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED);\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return false;\n  }\n  String resourcePath=directory + \"/\" + RESOURCE_PATH+ \"/\";\n  File resourceDir=new File(resourcePath);\n  if (!resourceDir.exists() || !resourceDir.isDirectory()) {\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_DIRECTORY_NOT_EXIST);\n    return false;\n  }\n  File resourceFile=new File(resourcePath + RESOURCE_FILE);\n  if (!resourceFile.exists()) {\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_FILE_NOT_EXIST);\n    return false;\n  }\n  try {\n    TinkerResourcePatcher.isResourceCanPatch(context);\n  }\n catch (  Throwable e) {\n    Log.e(TAG,\"resource hook check failed.\",e);\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION);\n    return false;\n  }\n  return true;\n}\n", "nl": "resource file exist? fast check, only check whether exist"}
{"code": "protected void transform(byte[] in,int off){\n  updateCheckSumAndEncryptBlock(in,off);\n}\n", "nl": "<p> Adds <code>BLOCK_LENGTH</code> bytes to the running digest. </p>"}
{"code": "public void seekToPlaying(int milliseconds){\n  if (this.readyPlayer(this.audioFile)) {\n    this.player.seekTo(milliseconds);\n    Log.d(LOG_TAG,\"Send a onStatus update for the new seek\");\n    sendStatusChange(MEDIA_POSITION,null,(milliseconds / 1000.0f));\n  }\n else {\n    this.seekOnPrepared=milliseconds;\n  }\n}\n", "nl": "Seek or jump to a new time in the track."}
{"code": "@Override public void actionPerformed(ActionEvent e){\n}\n", "nl": "Method actionPerformed."}
{"code": "public PollsCreateQuery question(String value){\n  return unsafeParam(\"question\",value);\n}\n", "nl": "Question text"}
{"code": "public boolean isEmptyResponse(){\n  return isOptionEnabled(UrlFilterRuleOption.EMPTY_RESPONSE);\n}\n", "nl": "If empty is true than Adguard will return empty response when request is blocked by such rule"}
{"code": "protected VirtualFile createFile(String filePath,String contents){\n  assertPathIsNotAbsolute(filePath);\n  try {\n    return testFixture.getTempDirFixture().createFile(filePath,contents);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Creates a file with the specified contents and file path in the test project"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200898,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] was knocked back from shock because [%SkillCaster] used [%SkillName]."}
{"code": "private static BigDecimal normalizeDecimalValue(BigDecimal bigDecimal,int allowedPrecision){\n  if (bigDecimal.precision() > allowedPrecision) {\n    return null;\n  }\n  return bigDecimal;\n}\n", "nl": "This method will check the digits before dot with the max precision allowed"}
{"code": "public Boolean removeColumn(Column columnToRemove){\n  return this.columns.remove(columnToRemove);\n}\n", "nl": "Method to remove a column."}
{"code": "private static boolean extractDexToJar(ZipFile zipFile,ZipEntry entryFile,File extractTo,String targetMd5) throws IOException {\n  int numAttempts=0;\n  boolean isExtractionSuccessful=false;\n  while (numAttempts < MAX_EXTRACT_ATTEMPTS && !isExtractionSuccessful) {\n    numAttempts++;\n    FileOutputStream fos=new FileOutputStream(extractTo);\n    InputStream in=zipFile.getInputStream(entryFile);\n    ZipOutputStream zos=null;\n    BufferedInputStream bis=null;\n    TinkerLog.i(TAG,\"try Extracting \" + extractTo.getPath());\n    try {\n      zos=new ZipOutputStream(new BufferedOutputStream(fos));\n      bis=new BufferedInputStream(in);\n      byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n      ZipEntry entry=new ZipEntry(ShareConstants.DEX_IN_JAR);\n      zos.putNextEntry(entry);\n      int length=bis.read(buffer);\n      while (length != -1) {\n        zos.write(buffer,0,length);\n        length=bis.read(buffer);\n      }\n      zos.closeEntry();\n    }\n  finally {\n      SharePatchFileUtil.closeQuietly(bis);\n      SharePatchFileUtil.closeQuietly(zos);\n    }\n    isExtractionSuccessful=SharePatchFileUtil.verifyDexFileMd5(extractTo,targetMd5);\n    TinkerLog.i(TAG,\"isExtractionSuccessful: %b\",isExtractionSuccessful);\n    if (!isExtractionSuccessful) {\n      extractTo.delete();\n      if (extractTo.exists()) {\n        TinkerLog.e(TAG,\"Failed to delete corrupted dex \" + extractTo.getPath());\n      }\n    }\n  }\n  return isExtractionSuccessful;\n}\n", "nl": "repack dex to jar"}
{"code": "private void initCache(){\n  lruCacheMap=new LinkedHashMap<String,Cacheable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE,1.0f,true);\n}\n", "nl": "initialize lru cache"}
{"code": "public String process(Item item) throws ProcessException {\n  int count=0;\n  for (Item p=item.getItemAs(Relation.SYLLABLE); p != null; p=p.getPrevious(), count++) {\n    if (isAccented(p)) {\n      break;\n    }\n  }\n  return Integer.toString(rail(count));\n}\n", "nl": "Performs some processing on the given item."}
{"code": "public VOGeoServerShapeSymbol(){\n  String fullResourceName=\"geoserver/GeoServerShapeSymbol.xml\";\n  SymbolTypeConfigReader.readConfig(VOGeoServerShapeSymbol.class,fullResourceName,fieldEnableMap);\n}\n", "nl": "Instantiates a new VOGeoServerShapeSymbol."}
{"code": "private void updateButtonState(boolean dataChanged){\n  btnApply.setEnabled(dataChanged);\n  btnRevert.setEnabled(dataChanged);\n}\n", "nl": "Update button Apply/Revert state."}
{"code": "protected SchedulerDriver createInternal(final Scheduler scheduler,final FrameworkInfo frameworkInfo,final String masterUrl,final Credential credential){\n  if (credential == null) {\n    return new MesosSchedulerDriver(scheduler,frameworkInfo,masterUrl);\n  }\n else {\n    return new MesosSchedulerDriver(scheduler,frameworkInfo,masterUrl,credential);\n  }\n}\n", "nl": "Broken out into a separate function to allow testing with custom SchedulerDrivers."}
{"code": "private void resize(int newCapacity){\n  Entry[] oldTable=getTable();\n  int oldCapacity=oldTable.length;\n  if (oldCapacity == MAXIMUM_CAPACITY) {\n    threshold=Integer.MAX_VALUE;\n    return;\n  }\n  Entry[] newTable=new Entry[newCapacity];\n  transfer(oldTable,newTable);\n  table=newTable;\n  threshold=(int)(newCapacity * loadFactor);\n}\n", "nl": "Rehashes the contents of this map into a new array with a larger capacity.  This method is called automatically when the number of keys in this map reaches its threshold. <p/> If current capacity is MAXIMUM_CAPACITY, this method does not resize the map, but but sets threshold to Integer.MAX_VALUE. This has the effect of preventing future calls."}
{"code": "public static Call checkCoordinate(Coordinate coordinate,@Nullable Double buffer,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){\n  String url=statusPointUrl;\n  Map<String,String> params=AirMapStatus.getAsParams(coordinate,types,ignoredTypes,weather,date);\n  if (buffer != null) {\n    params.put(\"buffer\",String.valueOf(buffer));\n  }\n  return AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));\n}\n", "nl": "Get a flight status based on a Point and Radius based flight"}
{"code": "public Object[] call(Object[] args,int nres) throws LuaException {\nsynchronized (L) {\n    if (!isFunction() && !isTable() && !isUserdata())     throw new LuaException(\"Invalid object. Not a function, table or userdata .\");\n    int top=L.getTop();\n    push();\n    int nargs;\n    if (args != null) {\n      nargs=args.length;\n      for (int i=0; i < nargs; i++) {\n        Object obj=args[i];\n        L.pushObjectValue(obj);\n      }\n    }\n else     nargs=0;\n    int err=L.pcall(nargs,nres,0);\n    if (err != 0) {\n      String str;\n      if (L.isString(-1)) {\n        str=L.toString(-1);\n        L.pop(1);\n      }\n else       str=\"\";\n      if (err == LuaState.LUA_ERRRUN.intValue()) {\n        str=\"Runtime error. \" + str;\n      }\n else       if (err == LuaState.LUA_ERRMEM.intValue()) {\n        str=\"Memory allocation error. \" + str;\n      }\n else       if (err == LuaState.LUA_ERRERR.intValue()) {\n        str=\"Error while running the error handler function. \" + str;\n      }\n else {\n        str=\"Lua Error code \" + err + \". \"+ str;\n      }\n      throw new LuaException(str);\n    }\n    if (nres == LuaState.LUA_MULTRET.intValue())     nres=L.getTop() - top;\n    if (L.getTop() - top < nres) {\n      throw new LuaException(\"Invalid Number of Results .\");\n    }\n    Object[] res=new Object[nres];\n    for (int i=nres; i > 0; i--) {\n      res[i - 1]=L.toJavaObject(-1);\n      L.pop(1);\n    }\n    return res;\n  }\n}\n", "nl": "Calls the object represented by <code>this</code> using Lua function pcall."}
{"code": "@Override protected AudioInputStream generateAudioStream(List<SelectedUnit> units) throws IOException {\n  int len=units.size();\n  Datagram[][] datagrams=new Datagram[len][];\n  Datagram[] rightContexts=new Datagram[len];\n  for (int i=0; i < len; i++) {\n    SelectedUnit unit=units.get(i);\n    OverlapUnitData unitData=(OverlapUnitData)unit.getConcatenationData();\n    assert unitData != null : \"Should not have null unitdata here\";\n    Datagram[] frames=unitData.getFrames();\n    assert frames != null : \"Cannot generate audio from null frames\";\n    datagrams[i]=frames;\n    Unit nextInDB=database.getUnitFileReader().getNextUnit(unit.getUnit());\n    Unit nextSelected;\n    if (i + 1 == len)     nextSelected=null;\n else     nextSelected=units.get(i + 1).getUnit();\n    if (nextInDB != null && !nextInDB.equals(nextSelected)) {\n      rightContexts[i]=unitData.getRightContextFrame();\n    }\n  }\n  DoubleDataSource audioSource=new DatagramOverlapDoubleDataSource(datagrams,rightContexts);\n  return new DDSAudioInputStream(new BufferedDoubleDataSource(audioSource),audioformat);\n}\n", "nl": "Generate audio to match the target pitchmarks as closely as possible."}
{"code": "public void addDiscoveryListener(DiscoveryListener listener){\n  if (listener == null) {\n    throw new NullPointerException(\"can't add null listener\");\n  }\n  if (!listeners.contains(listener)) {\n    listeners.add(listener);\n  }\n  HashMap groupsMap;\nsynchronized (discoveredSet) {\n    groupsMap=new HashMap(discoveredSet.size());\n    if (discoveredSet.isEmpty())     return;\n    for (int i=0; i < discoveredSet.size(); i++) {\n      ProxyReg reg=(ProxyReg)discoveredSet.get(i);\n      groupsMap.put(reg.proxy,reg.getMemberGroups());\n    }\n  }\n  notifyListener(listener,groupsMap,DISCOVERED);\n}\n", "nl": "Adds an instance of <code>DiscoveryListener</code> to the set of objects listening for discovery events. Once the listener is registered, it will be notified of all lookup services discovered to date, and will then be notified as new lookup services are discovered or existing lookup services are discarded. <p> If <code>null</code> is input, this method takes no action. If the listener input to this method duplicates (using the <code>equals</code> method) another element in the current set of listeners, no action is taken."}
{"code": "public boolean implies(Permission permission){\n  if (!(permission instanceof GrantPermission)) {\n    return false;\n  }\n  if (implier == null) {\n    Implier imp=new Implier();\n    imp.add(this);\n    implier=imp;\n  }\n  return implier.implies(permission);\n}\n", "nl": "Returns <code>true</code> if the given permission is a <code>GrantPermission</code> implied by this permission, or <code>false</code> otherwise.  Implication is defined as follows: for a given <code>GrantPermission g</code>, let <code>c(g)</code> denote the set of all permissions contained within <code>g</code> or within arbitrarily nested <code>GrantPermission</code>s inside <code>g</code>, excluding nested <code>GrantPermission</code>s themselves.  Then, a <code>GrantPermission g1</code> is implied by another <code>GrantPermission g2</code> if and only if each permission in <code>c(g1)</code> is implied by <code>c(g2)</code>. <p> Implication of contained <code>java.security.UnresolvedPermission</code>s is special-cased: an <code>UnresolvedPermission p1</code> is taken to imply another <code>UnresolvedPermission p2</code> if and only if the serialized representations of <code>p1</code> and <code>p2</code> are identical."}
{"code": "public void recordFocusedOmnibox(){\n  setFirstAction(FOCUSED_OMNIBOX);\n}\n", "nl": "Records that the omnibox has been focused."}
{"code": "public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected,Map hEdgeDistros){\n  StringBuffer sb=new StringBuffer();\n  String sConnector;\n  boolean bDistroGraph=(hEdgeDistros != null);\n  if (!bDirected) {\n    sb.append(\"graph {\\n\");\n    sConnector=\"--\";\n  }\n else {\n    sb.append(\"digraph {\\n\");\n    sConnector=\"->\";\n  }\n  Iterator iIter=gTree.getEdgeSet().iterator();\n  while (iIter.hasNext()) {\n    Edge e=(Edge)iIter.next();\n    String sA=\"_\" + e.getVertexA().toString().replaceAll(\"\\\\W\",\"_\");\n    String sB=\"_\" + e.getVertexB().toString().replaceAll(\"\\\\W\",\"_\");\n    String sLabel=\"\";\n    if (e instanceof WeightedEdge) {\n      sLabel+=String.format(\"%4.2f\",((WeightedEdge)e).getWeight());\n    }\n    if (bDistroGraph) {\n      Distribution dTmp;\n      if ((dTmp=(Distribution)(hEdgeDistros.get(e))) != null)       sLabel+=\" - Distro: \" + dTmp.toString();\n    }\n    if (e instanceof WeightedEdge)     sb.append(\"\\t\" + sA + \" \"+ sConnector+ \" \"+ sB+ \" [label=\\\"\"+ sLabel.replaceAll(\"\\\\s+\",\" \")+ \"\\\"]\\n\");\n else     sb.append(\"\\t\" + sA + \" \"+ sConnector+ \" \"+ sB+ \"\\n\");\n    sb.append(\"\\t\" + sA + \" [label=\\\"\"+ sA+ \"\\\"] \"+ \"\\n\");\n  }\n  sb.append(\"}\");\n  return sb.toString();\n}\n", "nl": "Renders a graph to its DOT representation (See GraphViz for more info on the format)."}
{"code": "public boolean isNative(){\n  return Modifier.isNative(this.getModifiers());\n}\n", "nl": "Convenience method returning true if this method is native."}
{"code": "public void addFirst(E u){\n  innerChain.addFirst(u);\n}\n", "nl": "Adds the given object at the beginning of the Chain."}
{"code": "public MarketSearchQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addToken(View v){\n  if (selectedToken != null) {\n    cth.addToken(selectedToken);\n    updateEditField();\n    updateClipPreview();\n  }\n else {\n    Toast.makeText(this,R.string.clipboard_no_token_selected,Toast.LENGTH_LONG).show();\n  }\n}\n", "nl": "Add a token to the user settings."}
{"code": "private void printSchema(XMLWriter xml,String group,Schema s,String[] ignore){\n  String[] attr=new String[]{Tokens.ID,Tokens.FOR,Tokens.ATTRNAME,Tokens.ATTRTYPE};\n  String[] vals=new String[4];\n  OUTER:   for (int i=0; i < s.getColumnCount(); ++i) {\n    vals[0]=s.getColumnName(i);\n    for (int j=0; ignore != null && j < ignore.length; ++j) {\n      if (vals[0].equals(ignore[j]))       continue OUTER;\n    }\n    vals[1]=group;\n    vals[2]=vals[0];\n    vals[3]=(String)TYPES.get(s.getColumnType(i));\n    Object dflt=s.getDefault(i);\n    if (dflt == null) {\n      xml.tag(Tokens.KEY,attr,vals,4);\n    }\n else {\n      xml.start(Tokens.KEY,attr,vals,4);\n      xml.contentTag(Tokens.DEFAULT,dflt.toString());\n      xml.end();\n    }\n  }\n}\n", "nl": "Print a table schema to a GraphML file"}
{"code": "private void ensureStackCapacity(int newElementDepth){\n  if (newElementDepth == fElementQNamePartsStack.length) {\n    QName[] newStackOfQueue=new QName[newElementDepth * 2];\n    System.arraycopy(this.fElementQNamePartsStack,0,newStackOfQueue,0,newElementDepth);\n    fElementQNamePartsStack=newStackOfQueue;\n    QName qname=fElementQNamePartsStack[newElementDepth];\n    if (qname == null) {\n      for (int i=newElementDepth; i < fElementQNamePartsStack.length; i++) {\n        fElementQNamePartsStack[i]=new QName();\n      }\n    }\n    int[] newStack=new int[newElementDepth * 2];\n    System.arraycopy(fElementIndexStack,0,newStack,0,newElementDepth);\n    fElementIndexStack=newStack;\n    newStack=new int[newElementDepth * 2];\n    System.arraycopy(fContentSpecTypeStack,0,newStack,0,newElementDepth);\n    fContentSpecTypeStack=newStack;\n  }\n}\n", "nl": "ensure element stack capacity"}
{"code": "public boolean deleteImage(String path){\n  return new File(path).delete();\n}\n", "nl": "Delete image file at 'path'"}
{"code": "public static void writeSwappedInteger(byte[] data,int offset,int value){\n  data[offset + 0]=(byte)((value >> 0) & 0xff);\n  data[offset + 1]=(byte)((value >> 8) & 0xff);\n  data[offset + 2]=(byte)((value >> 16) & 0xff);\n  data[offset + 3]=(byte)((value >> 24) & 0xff);\n}\n", "nl": "Writes a \"int\" value to a byte array at a given offset. The value is converted to the opposed endian system while writing."}
{"code": "private void readChunkHeader(InputStream stream,ResChunk_Header nextChunkHeader) throws IOException {\n  byte[] header=new byte[8];\n  stream.read(header);\n  readChunkHeader(nextChunkHeader,header,0);\n}\n", "nl": "Reads a chunk header from the input stream and stores the data in the given object."}
{"code": "public static String repeatString(String source,int repeat){\n  if (repeat < 0) {\n    throw new IllegalArgumentException(\"Cannot repeat \" + repeat + \" times.\");\n  }\n  if (repeat == 0 || source == null || source.length() == 0) {\n    return \"\";\n  }\n  StringBuffer buffer=new StringBuffer();\n  for (int i=0; i < repeat; i++) {\n    buffer.append(source);\n  }\n  return buffer.toString();\n}\n", "nl": "Repeat the string source repeat times. If repeats == 0 then empty String is returned if source is null, then empty string is returned"}
{"code": "public static Value concreteRef(Value val){\n  if (val == null)   return null;\n  if (val instanceof ConcreteRef)   return val;\n  return null;\n}\n", "nl": "only lets concrete references through. A concrete reference is either an array-ref or a field-ref.<br> returns <code>null</code> if <code>val</code> already was null."}
{"code": "public static boolean isExtension(String filename,String[] extensions){\n  if (filename == null) {\n    return false;\n  }\n  if (extensions == null || extensions.length == 0) {\n    return indexOfExtension(filename) == -1;\n  }\n  String fileExt=getExtension(filename);\n  for (  String extension : extensions) {\n    if (fileExt.equals(extension)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether the extension of the filename is one of those specified. <p> This method obtains the extension as the textual part of the filename after the last dot. There must be no directory separator after the dot. The extension check is case-sensitive on all platforms."}
{"code": "public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){\n  if (map == null || StringUtil.isEmpty(key)) {\n    return false;\n  }\n  map.put(key,value);\n  return true;\n}\n", "nl": "add key-value pair to map, and key need not null or empty"}
{"code": "public AccountChangePasswordQuery changePasswordHash(String value){\n  return unsafeParam(\"change_password_hash\",value);\n}\n", "nl": "Hash received after a successful OAuth authorization with a code got by SMS. (If the password is changed right after the access was restored)"}
{"code": "public void updateCache() throws SVNException {\n  ensurePreferencesStored();\n}\n", "nl": "add user and password to the keyring"}
{"code": "public ResourcesPoet addStringArray(String name,@NotNull List<String> values){\n  Element element=document.createElement(\"string-array\");\n  element.setAttribute(\"name\",name);\n  for (  String value : values) {\n    Element valueElement=document.createElement(\"item\");\n    valueElement.appendChild(document.createTextNode(value));\n    element.appendChild(valueElement);\n  }\n  resourceElement.appendChild(element);\n  return this;\n}\n", "nl": "Add a String array to the config"}
{"code": "public Template(ServiceTemplate tmpl) throws RemoteException {\n  serviceID=tmpl.serviceID;\n  serviceTypes=ClassMapper.toServiceType(tmpl.serviceTypes);\n  attributeSetTemplates=EntryRep.toEntryRep(tmpl.attributeSetTemplates,false);\n}\n", "nl": "Converts a ServiceTemplate to a Template.  Any exception that results is bundled up into a MarshalException."}
{"code": "public long nextLong(long least,long bound){\n  if (least >= bound)   throw new IllegalArgumentException();\n  return nextLong(bound - least) + least;\n}\n", "nl": "Returns a pseudorandom, uniformly distributed value between the given least value (inclusive) and bound (exclusive)."}
{"code": "public MessagesCreateChatQuery createChat(UserActor actor,List<Integer> userIds){\n  return new MessagesCreateChatQuery(getClient(),actor,userIds);\n}\n", "nl": "Creates a chat with several participants."}
{"code": "public WKTType(String name,boolean multipleCoordinates,int numOfPoints,String listItem,boolean canHaveMultipleShapes,boolean doFirstLastHaveToBeSame){\n  super();\n  this.name=name;\n  this.multipleCoordinates=multipleCoordinates;\n  this.numOfPoints=numOfPoints;\n  this.listItem=listItem;\n  this.canHaveMultipleShapes=canHaveMultipleShapes;\n  this.doFirstLastHaveToBeSame=doFirstLastHaveToBeSame;\n}\n", "nl": "Instantiates a new wkt type."}
{"code": "public boolean addSample(String sample,Map<String,Object> attribute2value,boolean allowReplaceSample,boolean allowAddAttribute){\n  if (!table.rowKeySet().contains(sample)) {\n    sampleOrder.add(sample);\n  }\n  if (allowReplaceSample || !table.rowKeySet().contains(sample)) {\n    for (    String attribute : attribute2value.keySet()) {\n      if (allowAddAttribute || getAttributeSet().contains(attribute))       put(sample,attribute,attribute2value.get(attribute));\n    }\n    return true;\n  }\n  return false;\n}\n", "nl": "add a sample to the table"}
{"code": "public static Matrix constructWithCopy(double[][] A){\n  int m=A.length;\n  int n=A[0].length;\n  Matrix X=new Matrix(m,n);\n  double[][] C=X.getArray();\n  for (int i=0; i < m; i++) {\n    if (A[i].length != n) {\n      throw new IllegalArgumentException(\"All rows must have the same length.\");\n    }\n    for (int j=0; j < n; j++) {\n      C[i][j]=A[i][j];\n    }\n  }\n  return X;\n}\n", "nl": "Construct a matrix from a copy of a 2-D array."}
{"code": "public boolean offer(E e){\n  if (e == null) {\n    throw new NullPointerException();\n  }\n  Node<E> n=new Node<E>(e,null);\n  for (; ; ) {\n    Node<E> t=tail;\n    n.setNext(t);\n    count.incrementAndGet();\n    if (casTail(t,n)) {\n      t.setPrev(n);\n      return true;\n    }\n  }\n}\n", "nl": "Enqueues the specified element at the tail of this queue."}
{"code": "private void storeLegionMemberExInCache(Player player){\n  if (this.allCachedLegionMembers.containsEx(player.getObjectId())) {\n    LegionMemberEx legionMemberEx=allCachedLegionMembers.getMemberEx(player.getObjectId());\n    legionMemberEx.setNickname(player.getLegionMember().getNickname());\n    legionMemberEx.setSelfIntro(player.getLegionMember().getSelfIntro());\n    legionMemberEx.setPlayerClass(player.getPlayerClass());\n    legionMemberEx.setExp(player.getCommonData().getExp());\n    legionMemberEx.setLastOnline(player.getCommonData().getLastOnline());\n    legionMemberEx.setWorldId(player.getPosition().getMapId());\n    legionMemberEx.setOnline(false);\n  }\n else {\n    LegionMemberEx legionMemberEx=new LegionMemberEx(player,player.getLegionMember(),false);\n    addCachedLegionMemberEx(legionMemberEx);\n  }\n}\n", "nl": "Stores legion member data into database"}
{"code": "public void unsubscribe(String subscriptionName) throws JMSException {\n  ensureOpen();\n  throw new JMSException(\"This version of JMS does not support durable subscribers.\");\n}\n", "nl": "Currently not supported."}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.users"}
{"code": "public static boolean contentEquals(Reader input1,Reader input2) throws IOException {\n  input1=toBufferedReader(input1);\n  input2=toBufferedReader(input2);\n  int ch=input1.read();\n  while (EOF != ch) {\n    int ch2=input2.read();\n    if (ch != ch2) {\n      return false;\n    }\n    ch=input1.read();\n  }\n  int ch2=input2.read();\n  return ch2 == EOF;\n}\n", "nl": "Compare the contents of two Readers to determine if they are equal or not. <p/> This method buffers the input internally using <code>BufferedReader</code> if they are not already buffered."}
{"code": "private void findEigenVectors(final double[][] householderMatrix){\n  final double[][] z=householderMatrix.clone();\n  final int n=main.length;\n  realEigenvalues=new double[n];\n  imagEigenvalues=new double[n];\n  final double[] e=new double[n];\n  for (int i=0; i < n - 1; i++) {\n    realEigenvalues[i]=main[i];\n    e[i]=secondary[i];\n  }\n  realEigenvalues[n - 1]=main[n - 1];\n  e[n - 1]=0;\n  double maxAbsoluteValue=0;\n  for (int i=0; i < n; i++) {\n    if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {\n      maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);\n    }\n    if (FastMath.abs(e[i]) > maxAbsoluteValue) {\n      maxAbsoluteValue=FastMath.abs(e[i]);\n    }\n  }\n  if (maxAbsoluteValue != 0) {\n    for (int i=0; i < n; i++) {\n      if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {\n        realEigenvalues[i]=0;\n      }\n      if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {\n        e[i]=0;\n      }\n    }\n  }\n  for (int j=0; j < n; j++) {\n    int its=0;\n    int m;\n    do {\n      for (m=j; m < n - 1; m++) {\n        double delta=FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);\n        if (FastMath.abs(e[m]) + delta == delta) {\n          break;\n        }\n      }\n      if (m != j) {\n        if (its == MAX_ITER) {\n          throw new MathIllegalStateException(LocalizedCoreFormats.CONVERGENCE_FAILED,MAX_ITER);\n        }\n        its++;\n        double q=(realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);\n        double t=FastMath.sqrt(1 + q * q);\n        if (q < 0.0) {\n          q=realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);\n        }\n else {\n          q=realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);\n        }\n        double u=0.0;\n        double s=1.0;\n        double c=1.0;\n        int i;\n        for (i=m - 1; i >= j; i--) {\n          double p=s * e[i];\n          double h=c * e[i];\n          if (FastMath.abs(p) >= FastMath.abs(q)) {\n            c=q / p;\n            t=FastMath.sqrt(c * c + 1.0);\n            e[i + 1]=p * t;\n            s=1.0 / t;\n            c*=s;\n          }\n else {\n            s=p / q;\n            t=FastMath.sqrt(s * s + 1.0);\n            e[i + 1]=q * t;\n            c=1.0 / t;\n            s*=c;\n          }\n          if (e[i + 1] == 0.0) {\n            realEigenvalues[i + 1]-=u;\n            e[m]=0.0;\n            break;\n          }\n          q=realEigenvalues[i + 1] - u;\n          t=(realEigenvalues[i] - q) * s + 2.0 * c * h;\n          u=s * t;\n          realEigenvalues[i + 1]=q + u;\n          q=c * t - h;\n          for (int ia=0; ia < n; ia++) {\n            p=z[ia][i + 1];\n            z[ia][i + 1]=s * z[ia][i] + c * p;\n            z[ia][i]=c * z[ia][i] - s * p;\n          }\n        }\n        if (t == 0.0 && i >= j) {\n          continue;\n        }\n        realEigenvalues[j]-=u;\n        e[j]=q;\n        e[m]=0.0;\n      }\n    }\n while (m != j);\n  }\n  for (int i=0; i < n; i++) {\n    int k=i;\n    double p=realEigenvalues[i];\n    for (int j=i + 1; j < n; j++) {\n      if (realEigenvalues[j] > p) {\n        k=j;\n        p=realEigenvalues[j];\n      }\n    }\n    if (k != i) {\n      realEigenvalues[k]=realEigenvalues[i];\n      realEigenvalues[i]=p;\n      for (int j=0; j < n; j++) {\n        p=z[j][i];\n        z[j][i]=z[j][k];\n        z[j][k]=p;\n      }\n    }\n  }\n  maxAbsoluteValue=0;\n  for (int i=0; i < n; i++) {\n    if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {\n      maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);\n    }\n  }\n  if (maxAbsoluteValue != 0.0) {\n    for (int i=0; i < n; i++) {\n      if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {\n        realEigenvalues[i]=0;\n      }\n    }\n  }\n  eigenvectors=new ArrayRealVector[n];\n  final double[] tmp=new double[n];\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < n; j++) {\n      tmp[j]=z[j][i];\n    }\n    eigenvectors[i]=new ArrayRealVector(tmp);\n  }\n}\n", "nl": "Find eigenvalues and eigenvectors (Dubrulle et al., 1971)"}
{"code": "public MonsterAilmentCursor queryAilmentsFromId(long id){\n  return mHelper.queryAilmentsFromMonster(id);\n}\n", "nl": "MONSTER AILMENT QUERIES"}
{"code": "public SynchronizedSymbolTable(SymbolTable symbolTable){\n  fSymbolTable=symbolTable;\n}\n", "nl": "Constructs a synchronized symbol table."}
{"code": "public HttpClient(URL url,Map<String,Object> parameters,Map<String,String> headers){\n  this.url=url.toExternalForm();\n  this.parameters=parameters;\n  this.headers=headers;\n}\n", "nl": "Creates a new HttpClient object."}
{"code": "public void addTypeDecl(TypeDecl node){\n  List<TypeDecl> list=(parent == null || state == null) ? getTypeDeclListNoTransform() : getTypeDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeDecl list."}
{"code": "public boolean isUrlWhiteListed(String uri){\n  if (whiteList == null)   return true;\n  Uri parsedUri=Uri.parse(uri);\n  Iterator<URLPattern> pit=whiteList.iterator();\n  while (pit.hasNext()) {\n    URLPattern p=pit.next();\n    if (p.matches(parsedUri)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Determine if URL is in approved list of URLs to load."}
{"code": "public Builder withStreaming(){\n  this.streaming=true;\n  return this;\n}\n", "nl": "Logs streaming events to client spans."}
{"code": "public boolean isDirty(){\n  return isTextDirty() || isPropDirty();\n}\n", "nl": "resource is considered dirty if properties are dirty or text is dirty"}
{"code": "@Override public boolean equals(Object other){\n  return this == other || (other instanceof Book && hashCode() == other.hashCode());\n}\n", "nl": "Equals implementation using a business key."}
{"code": "public static boolean swordSimilar(ItemStack a,ItemStack b){\n  if (a == null || b == null) {\n    return a == b;\n  }\n  if (a.getItem() != b.getItem())   return false;\n  if (a.getItem().isDamageable())   return true;\n  return a.getItemDamage() == b.getItemDamage();\n}\n", "nl": "Compare two items; ignores NBT; ignores damage on tools"}
{"code": "public void initialiseNode(){\n  nodeInitStageAdvancer.startInitialisation();\n}\n", "nl": "Initialise the node"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public SuperAccess fullCopy(){\n  SuperAccess tree=(SuperAccess)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public DerivativeStructure(final int parameters,final int order) throws MathIllegalArgumentException {\n  this(DSCompiler.getCompiler(parameters,order));\n}\n", "nl": "Build an instance with all values and derivatives set to 0."}
{"code": "public LabeledContext extract(List<Tuple2<String,String>> labeledSequence,int position){\n  Set<String> fs=new HashSet<String>();\n  fs.addAll(extractBasicFeatures(labeledSequence,position));\n  fs.addAll(extractWordFormFeatures(labeledSequence,position));\n  fs.addAll(extractJointFeatures(labeledSequence,position));\n  StringBuilder features=new StringBuilder(64);\n  for (  String s : fs) {\n    features.append(s);\n    features.append(' ');\n  }\n  LabeledContext context=new LabeledContext();\n  context.setWord(labeledSequence.get(position)._1());\n  context.setTag(labeledSequence.get(position)._2());\n  context.setFeatureStrings(features.toString().trim());\n  return context;\n}\n", "nl": "Extracts a labeled context at a position in a tagged sequence."}
{"code": "public FriendsEditListQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "IDs of users in the friend list."}
{"code": "public static boolean isNearBottom(EntityPlayer player){\n  Block toCheck=player.getEntityWorld().getBlockState(player.getPosition().down()).getBlock();\n  Block toCheck2=player.getEntityWorld().getBlockState(player.getPosition().down(2)).getBlock();\n  return !toCheck.isReplaceable(player.getEntityWorld(),player.getPosition().down()) || !toCheck2.isReplaceable(player.getEntityWorld(),player.getPosition().down(2));\n}\n", "nl": "This will at least keep players from sticking to the bottom of a pool."}
{"code": "public GossipService(String cluster,URI uri,String id,List<GossipMember> gossipMembers,GossipSettings settings,GossipListener listener) throws InterruptedException, UnknownHostException {\n  gossipManager=RandomGossipManager.newBuilder().withId(id).cluster(cluster).uri(uri).settings(settings).gossipMembers(gossipMembers).listener(listener).build();\n}\n", "nl": "Setup the client's lists, gossiping parameters, and parse the startup config file."}
{"code": "private void responseJson(String jsonstr){\n  this.setContentType(Model.MIME_JSON);\n  this.print(jsonstr);\n}\n", "nl": "output the string as \"application/json\" to end-userr."}
{"code": "protected BuildSystem buildSystem(){\n  return BuildSystem.Blaze;\n}\n", "nl": "Override to run tests with bazel specified as the project's build system."}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {\n  if (lines == null) {\n    return;\n  }\n  if (lineEnding == null) {\n    lineEnding=LINE_SEPARATOR;\n  }\n  Charset cs=Charsets.toCharset(encoding);\n  for (  Object line : lines) {\n    if (line != null) {\n      output.write(StringCodingUtils.getBytes(line.toString(),cs));\n    }\n    output.write(StringCodingUtils.getBytes(lineEnding,cs));\n  }\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the specified character encoding and the specified line ending."}
{"code": "public DefaultCredentialsProvider(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static synchronized DataSourceInterface createDataSource(DataSourceInterface override){\n  if (override != null) {\n    if ((dataSource == null) || override.getClass() != dataSource.getClass()) {\n      dataSource=override;\n      dataSource.setDataSourceCreation(internalDataSource,externalDataSource,inlineDataSource);\n    }\n  }\n else {\n    if (dataSource == null) {\n      dataSource=new DataSourceImpl();\n      dataSource.setDataSourceCreation(internalDataSource,externalDataSource,inlineDataSource);\n    }\n  }\n  return dataSource;\n}\n", "nl": "Creates a new DataSource object."}
{"code": "public <T>Some<T> some(Task<T> task){\n  return new Some<>(this.executor_,task);\n}\n", "nl": "Create an Some collection strategy."}
{"code": "private SubHyperplane<Euclidean3D> boundaryFacet(final Vector3D point,final BSPTree<Euclidean3D> node){\n  final Vector2D point2D=((Plane)node.getCut().getHyperplane()).toSubSpace((Point<Euclidean3D>)point);\n  @SuppressWarnings(\"unchecked\") final BoundaryAttribute<Euclidean3D> attribute=(BoundaryAttribute<Euclidean3D>)node.getAttribute();\n  if ((attribute.getPlusOutside() != null) && (((SubPlane)attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n    return attribute.getPlusOutside();\n  }\n  if ((attribute.getPlusInside() != null) && (((SubPlane)attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n    return attribute.getPlusInside();\n  }\n  return null;\n}\n", "nl": "Check if a point belongs to the boundary part of a node."}
{"code": "@Path(path=\"check\") public void check(){\n  JSON jo=new JSON();\n  String op=this.getString(\"op\");\n  if (\"db\".equals(op)) {\n    String url=this.getHtml(\"url\").trim();\n    try {\n      if (!X.isEmpty(url)) {\n        Connection c1=DB.getConnectionByUrl(url);\n        Statement stat=c1.createStatement();\n        stat.execute(\"create table test_ppp(X char(1))\");\n        stat.execute(\"drop table test_ppp\");\n      }\n      jo.put(X.STATE,200);\n    }\n catch (    Exception e1) {\n      log.error(e1.getMessage(),e1);\n      OpLog.error(setup.class,\"check\",e1.getMessage(),e1,login,this.getRemoteHost());\n      jo.put(X.STATE,201);\n      jo.put(X.MESSAGE,e1.getMessage());\n    }\n  }\n else   if (\"mongo\".equals(op)) {\n    String url=this.getHtml(\"url\").trim();\n    String dbname=this.getString(\"db\").trim();\n    if (!X.isEmpty(url) && !X.isEmpty(dbname)) {\n      log.debug(\"url=\" + url + \", db=\"+ dbname);\n      try {\n        MongoClientOptions.Builder opts=new MongoClientOptions.Builder().socketTimeout(5000).serverSelectionTimeout(1000);\n        MongoClient client=new MongoClient(new MongoClientURI(url,opts));\n        MongoDatabase g=client.getDatabase(dbname);\n        String name=\"test_\" + UID.digital(5);\n        g.createCollection(name);\n        MongoCollection<Document> c1=g.getCollection(name);\n        if (c1 != null) {\n          c1.drop();\n          jo.put(X.STATE,200);\n        }\n else {\n          jo.put(X.STATE,201);\n          jo.put(X.MESSAGE,\"can not access\");\n        }\n        client.close();\n      }\n catch (      Exception e1) {\n        log.error(e1.getMessage(),e1);\n        OpLog.error(setup.class,\"check\",e1.getMessage(),e1,login,this.getRemoteHost());\n        jo.put(X.STATE,201);\n        jo.put(X.MESSAGE,e1.getMessage());\n      }\n    }\n else {\n      jo.put(X.STATE,200);\n    }\n  }\n else   if (\"cache\".equals(op)) {\n    String url=this.getHtml(\"url\").trim();\n    String group=this.getString(\"group\").trim();\n    try {\n      if (!X.isEmpty(url)) {\n        Configuration conf=Config.getConfig();\n        conf.setProperty(\"cache.url\",url);\n        conf.setProperty(\"cache.group\",group);\n        Cache.init(conf);\n        DefaultCachable v1=new DefaultCachable();\n        Cache.set(\"test\",v1);\n        DefaultCachable v2=(DefaultCachable)Cache.get(\"test\");\n        if (v2 != null && v1.age() == v2.age()) {\n          jo.put(X.STATE,200);\n        }\n else {\n          jo.put(X.STATE,201);\n          jo.put(X.MESSAGE,\"cache system failed\");\n        }\n      }\n else {\n        jo.put(X.STATE,200);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"url=\" + url,e);\n      jo.put(X.STATE,201);\n      jo.put(X.MESSAGE,e.getMessage());\n    }\n  }\n else {\n    jo.put(X.STATE,201);\n  }\n  this.response(jo);\n}\n", "nl": "web api. <br> /setup/check"}
{"code": "public static Fill createDefaultGraphicFill(){\n  Graphic graphicFill=styleFactory.createDefaultGraphic();\n  Expression colour=ff.literal(DEFAULT_FILL_COLOUR);\n  Expression backgroundColour=null;\n  Expression opacity=ff.literal(1.0);\n  Fill fill=styleFactory.createFill(colour,backgroundColour,opacity,graphicFill);\n  return fill;\n}\n", "nl": "Creates a default graphic fill."}
{"code": "@Override public synchronized Edge addEdge(Vertex vHead,Vertex vTail) throws Exception {\n  Vertex vH=null, vT=null;\n  boolean bVertexMissed=false;\n  if ((vH=locateVertex(vHead)) == null) {\n    add(vH=vHead);\n    bVertexMissed=true;\n  }\n  if ((vT=locateVertex(vTail)) == null) {\n    add(vT=vTail);\n    bVertexMissed=true;\n  }\n  Edge e=null;\n  if (eclLocator == null) {\n    if (!bVertexMissed)     e=utils.locateDirectedEdgeInGraph(this,vH,vT);\n  }\n else {\n    if (!bVertexMissed)     e=eclLocator.locateDirectedEdgeInGraph(this,vH,vT);\n  }\n  if (e == null) {\n    e=super.addEdge(vH,vT);\n    if (eclLocator != null)     eclLocator.addedEdge(e);\n  }\n  return e;\n}\n", "nl": "Adds a new edge to the graph, checking for duplicate labels of its vertices."}
{"code": "public static Equipment buildCreateAllFieldsEquipment(Long id,Properties properties){\n  if (properties == null) {\n    properties=new Properties();\n  }\n  Equipment equipment=Equipment.create(\"E_TEST\" + id,\"cern.c2mon.daq.testhandler.TestMessageHandler\").id(id).description(\"foo\").commFaultTag(CommFaultTag.create(\"E_TEST\" + id + \":COMM_FAULT\").build()).aliveTag(AliveTag.create(\"E_TEST\" + id + \":ALIVE\").build(),70000).statusTag(StatusTag.create(\"E_TEST\" + id + \":STATUS\").build()).address(\"testAddress\").build();\n  equipment.setProcessId(1L);\n  properties.setProperty(\"name\",\"E_TEST\" + id);\n  properties.setProperty(\"description\",\"foo\");\n  properties.setProperty(\"statusTagId\",String.valueOf(101l));\n  properties.setProperty(\"commFaultTagId\",String.valueOf(102l));\n  properties.setProperty(\"aliveInterval\",String.valueOf(70000));\n  properties.setProperty(\"aliveTagId\",String.valueOf(100l));\n  properties.setProperty(\"processId\",String.valueOf(1l));\n  properties.setProperty(\"handlerClass\",\"cern.c2mon.daq.testhandler.TestMessageHandler\");\n  properties.setProperty(\"address\",\"testAddress\");\n  return equipment;\n}\n", "nl": "Expected process id is 1. Expected alive tag id is 100 Expected commFault tag id is 101 Expected status tag id is 102"}
{"code": "StackFrame(AsmMethodSource src){\n  this.src=src;\n}\n", "nl": "Constructs a new stack frame."}
{"code": "public static void clear(int notificationId){\n  MediaNotificationManager manager=getManager(notificationId);\n  if (manager == null)   return;\n  manager.clearNotification();\n  sManagers.remove(notificationId);\n}\n", "nl": "Hides notifications with the specified id for all tabs if shown."}
{"code": "private void updateSyncEverythingState(){\n  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();\n  mSyncEverything.setEnabled(isSyncEnabled);\n  mSyncEverything.setChecked(!isSyncEnabled || mProfileSyncService.hasKeepEverythingSynced());\n}\n", "nl": "Update the state of the sync everything switch. If sync is on, load the pref from native. Otherwise display sync everything as on but disable the switch."}
{"code": "void reportNewIdleState(boolean isIdle){\nsynchronized (mTrackedTasks) {\n    for (    JobStatus task : mTrackedTasks) {\n      task.idleConstraintSatisfied.set(isIdle);\n    }\n  }\n  mStateChangedListener.onControllerStateChanged();\n}\n", "nl": "Interaction with the task manager service"}
{"code": "public void clear(){\n  sharedPreferences.edit().clear().apply();\n}\n", "nl": "Clear all the preferences"}
{"code": "public Matrix plus(Matrix B){\n  checkMatrixDimensions(B);\n  Matrix X=new Matrix(m,n);\n  double[][] C=X.getArray();\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      C[i][j]=A[i][j] + B.A[i][j];\n    }\n  }\n  return X;\n}\n", "nl": "C = A + B"}
{"code": "public Code39Reader(boolean usingCheckDigit){\n  this(usingCheckDigit,false);\n}\n", "nl": "Creates a reader that can be configured to check the last character as a check digit. It will not decoded \"extended Code 39\" sequences."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REMAIN_TIME_10(String durationtime0){\n  return new SM_SYSTEM_MESSAGE(1400204,durationtime0);\n}\n", "nl": "The attack time remaining is %DURATIONTIME0."}
{"code": "public void complainIfNotSupported(final String name) throws MathIllegalArgumentException {\n  if (!isSupported(name)) {\n    throw new MathIllegalArgumentException(LocalizedODEFormats.UNKNOWN_PARAMETER,name);\n  }\n}\n", "nl": "Check if a parameter is supported and throw an IllegalArgumentException if not."}
{"code": "protected static LazyNode cNumberValue(int index){\n  return new LazyNode(VALUE_INTEGER,index);\n}\n", "nl": "Convenience method to create a new token with the type set to number value and with the starting index set to the given index."}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_NPC_GUILD(String value0){\n  return new SM_SYSTEM_MESSAGE(1300595,value0);\n}\n", "nl": "You must be a member of the %0 NPC Legion to receive this quest."}
{"code": "public void clear(int code){\n  MouseButton mb=this.buttons.get(code);\n  if (mb == null) {\n    return;\n  }\n  mb.clear();\n}\n", "nl": "Clears the state of the given MouseEvent code."}
{"code": "@Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {\n  if (MathArrays.verifyValues(values,begin,length)) {\n    double sampleSize=length;\n    double xbar=StatUtils.sum(values,begin,length) / sampleSize;\n    double correction=0;\n    for (int i=begin; i < begin + length; i++) {\n      correction+=values[i] - xbar;\n    }\n    return xbar + (correction / sampleSize);\n  }\n  return Double.NaN;\n}\n", "nl": "Returns the arithmetic mean of the entries in the specified portion of the input array, or <code>Double.NaN</code> if the designated subarray is empty."}
{"code": "public static SM_SYSTEM_MESSAGE STR_STIGMA_CANNT_UNEQUIP_STONE_OTHER_STONE_NEED_ITS_SKILL(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1300410,value1,value0);\n}\n", "nl": "You cannot remove the Stigma Stone because %1 is a prerequisite for the %0th Stigma Stone."}
{"code": "public boolean publish(final String publicationTopic,final byte[] payload,final int qos,final boolean retained){\n  if (canPublish()) {\n    try {\n      logger.info(\"Publishing message on topic \\\"\" + publicationTopic + \"\\\". Payload size = \"+ payload.length);\n      client.publish(publicationTopic,payload,qos,retained);\n      logger.trace(\"Published message on topic \\\"\" + publicationTopic + \"\\\". Payload size = \"+ payload.length);\n      return true;\n    }\n catch (    MqttException e) {\n      logger.error(\"Cannot publish message on \" + publicationTopic,e);\n    }\n  }\n else {\n    logger.warn(\"Publication attempt failure - no connection available...\");\n  }\n  return false;\n}\n", "nl": "Tries to publish a message to the given topic, with the provided payload, quality of service and retained flag."}
{"code": "static final TypeKey valueOf(Class<?> rawType,java.lang.reflect.Type[] typeArguments){\n  byte[] identityHashBytes=new byte[(typeArguments.length + 1) * 4];\n  intToByteArray(getTypeIndex(rawType),identityHashBytes,0);\n  for (int i=0, len=typeArguments.length; i < len; ++i) {\n    intToByteArray(getTypeIndex(typeArguments[i]),identityHashBytes,i + 1);\n  }\n  return new TypeKey(identityHashBytes);\n}\n", "nl": "Calculates an identity for a Class, Type[] pair; avoids maintaining a reference the actual class."}
{"code": "private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt){\n  if (JOptionPane.showConfirmDialog(this,\"Do you wish to end the application?\",\"Confirm\",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n    if (taskInProgress())     removeTask(getActiveTask());\n    this.setVisible(false);\n    this.dispose();\n  }\n}\n", "nl": "Terminates the application, stopping any running tasks."}
{"code": "private void fillBuf() throws IOException {\n  int result=in.read(buf,0,buf.length);\n  if (result == -1) {\n    throw new EOFException();\n  }\n  pos=0;\n  end=result;\n}\n", "nl": "Reads new input data into the buffer. Call only with pos == end or end == -1, depending on the desired outcome if the function throws."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200526,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] converted death to healing by using [%SkillName]."}
{"code": "public static String valueOf(Boolean value){\n  return value != null ? String.valueOf(value) : null;\n}\n", "nl": "Returns the string value of the given boolean. Returns null if argument is null."}
{"code": "private void encXORPass(byte[] data,int offset,int length,int key){\n  int stop=length - 8;\n  int pos=4 + offset;\n  int edx;\n  int ecx=key;\n  while (pos < stop) {\n    edx=(data[pos] & 0xFF);\n    edx|=(data[pos + 1] & 0xFF) << 8;\n    edx|=(data[pos + 2] & 0xFF) << 16;\n    edx|=(data[pos + 3] & 0xFF) << 24;\n    ecx+=edx;\n    edx^=ecx;\n    data[pos++]=(byte)(edx & 0xFF);\n    data[pos++]=(byte)(edx >> 8 & 0xFF);\n    data[pos++]=(byte)(edx >> 16 & 0xFF);\n    data[pos++]=(byte)(edx >> 24 & 0xFF);\n  }\n  data[pos++]=(byte)(ecx & 0xFF);\n  data[pos++]=(byte)(ecx >> 8 & 0xFF);\n  data[pos++]=(byte)(ecx >> 16 & 0xFF);\n  data[pos]=(byte)(ecx >> 24 & 0xFF);\n}\n", "nl": "First packet encryption with XOR key (integer - 4 bytes)"}
{"code": "public PolygonFillDetails(FunctionNameInterface functionManager){\n  super(PolygonFillDetails.class,configFile,functionManager);\n}\n", "nl": "Instantiates a new polygon fill details."}
{"code": "public LevenbergMarquardtOptimizer(final double initialStepBoundFactor,final double costRelativeTolerance,final double parRelativeTolerance,final double orthoTolerance,final double qrRankingThreshold){\n  this.initialStepBoundFactor=initialStepBoundFactor;\n  this.costRelativeTolerance=costRelativeTolerance;\n  this.parRelativeTolerance=parRelativeTolerance;\n  this.orthoTolerance=orthoTolerance;\n  this.qrRankingThreshold=qrRankingThreshold;\n}\n", "nl": "Construct an instance with all parameters specified."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200962,skilltarget,num0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget]'s flight time has decreased by %num0 because [%SkillCaster] used [%SkillName]."}
{"code": "@Override protected boolean scanRootElementHook() throws IOException, XNIException {\n  if (fExternalSubsetResolver != null && !fSeenDoctypeDecl && !fDisallowDoctype && (fValidation || fLoadExternalDTD)) {\n    scanStartElementName();\n    resolveExternalSubsetAndRead();\n    reconfigurePipeline();\n    if (scanStartElementAfterName()) {\n      setScannerState(SCANNER_STATE_TRAILING_MISC);\n      setDispatcher(fTrailingMiscDispatcher);\n      return true;\n    }\n  }\n else {\n    reconfigurePipeline();\n    if (scanStartElement()) {\n      setScannerState(SCANNER_STATE_TRAILING_MISC);\n      setDispatcher(fTrailingMiscDispatcher);\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Scan for root element hook. This method is a hook for subclasses to add code that handles scanning for the root element. This method will also attempt to remove DTD validator from the pipeline, if there is no DTD grammar. If DTD validator is no longer in the pipeline bind namespaces in the scanner."}
{"code": "public static ExpectedCondition<Boolean> listSizeIsConstant(final WebElement element,final By byElement){\n  return null;\n}\n", "nl": "List of WebElements found in provided scope using provided locator is constant"}
{"code": "public void drawChartTransposed(Graphics2D gc){\n  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  final String[] series=getChartData().getSeriesNames().toArray(new String[getChartData().getNumberOfSeries()]);\n  final double topY;\n  final double[] percentFactor;\nswitch (scalingType) {\ncase PERCENT:\n{\n      final String[] seriesIncludingDisabled=getChartData().getSeriesNamesIncludingDisabled();\n      percentFactor=computePercentFactorPerSampleForTransposedChart((DefaultChartData)getChartData(),seriesIncludingDisabled);\n      topY=computeMaxClassValueUsingPercentFactorPerSeries((DefaultChartData)getChartData(),seriesIncludingDisabled,percentFactor);\n      break;\n    }\ncase LOG:\n{\n    topY=computeMaxYAxisValueLogScale(getMaxValue());\n    percentFactor=null;\n    break;\n  }\ncase SQRT:\n{\n  topY=Math.sqrt(getMaxValue());\n  percentFactor=null;\n  break;\n}\ndefault :\ncase LINEAR:\n{\ntopY=1.1 * getMaxValue();\npercentFactor=null;\n}\n}\nfinal double yFactor=(y0 - y1) / topY;\nfinal int x0=leftMargin;\nfinal int x1=getWidth() - rightMargin;\nif (x0 >= x1) return;\nfinal int numberOfClasses=getChartData().getNumberOfClasses();\ndouble xStep=(x1 - x0) / (2 * numberOfClasses);\nfinal double bigSpace=Math.max(2,Math.min(10,xStep));\nxStep=(x1 - x0 - bigSpace * numberOfClasses) / numberOfClasses;\nPoint[] previousPoint=new Point[getChartData().getNumberOfSeries()];\njava.util.List<Triplet<String,String,int[]>> list=new LinkedList<>();\nint c=0;\nfor (String className : getChartData().getClassNames()) {\nif (showXAxis) {\ndouble xLabel=x0 + bigSpace + c * bigSpace + (c + 0.5) * xStep;\nPoint2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);\nDimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();\nif (classLabelAngle == 0) {\napt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());\n}\n else if (classLabelAngle > Math.PI / 2) {\napt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);\n}\nif (getChartData().getChartSelection().isSelected(null,className)) {\ngc.setColor(ProgramProperties.SELECTION_COLOR);\nfillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);\n}\ngc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\nif (sgc != null) sgc.setCurrentItem(new String[]{null,className});\ndrawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);\nif (sgc != null) sgc.clearCurrentItem();\n}\ndouble currentHeight=y0;\ndouble currentValueForLog=0;\nint d=0;\nfor (int i=0; i < series.length; i++) {\nfinal String seriesName=series[i];\ndouble value=getChartData().getValueAsDouble(seriesName,className);\nswitch (scalingType) {\ncase PERCENT:\n{\n  value*=percentFactor[i];\n  break;\n}\ncase LOG:\n{\nif (value >= 1) {\n  if (currentValueForLog <= 1) {\n    value=Math.log10(value);\n  }\n else {\n    value=Math.log10(value + currentValueForLog) - Math.log10(currentValueForLog);\n  }\n  currentValueForLog+=getChartData().getValueAsDouble(seriesName,className);\n}\n else value=0;\nbreak;\n}\ncase SQRT:\n{\nif (value >= 1) {\nif (currentValueForLog <= 1) {\n  value=Math.sqrt(value);\n}\n else {\n  value=Math.sqrt(value + currentValueForLog) - Math.sqrt(currentValueForLog);\n}\ncurrentValueForLog+=getChartData().getValueAsDouble(seriesName,className);\n}\n else value=0;\nbreak;\n}\n}\nfinal double xBar=x0 + bigSpace + c * bigSpace + c * xStep;\nfinal double height=value * yFactor;\nfinal Point aPt=new Point((int)Math.round(xBar + xStep / 2.0),(int)Math.round(currentHeight - height));\ncurrentHeight-=height;\nPoint bPt=previousPoint[d];\nif (bPt == null && numberOfClasses == 1) bPt=new Point(aPt.x - 2,aPt.y);\nif (bPt != null) {\nTriplet<String,String,int[]> triplet=new Triplet<>(seriesName,className,new int[]{bPt.x,bPt.y,aPt.x,aPt.y});\nlist.add(triplet);\n}\npreviousPoint[d]=aPt;\nd++;\n}\nc++;\n}\nlist=Basic.reverseList(list);\nfor (Triplet<String,String,int[]> triplet : list) {\nString seriesName=triplet.get1();\nString className=triplet.get2();\nint[] coords=triplet.get3();\nColor color=getChartColors().getSampleColor(seriesName);\ngc.setColor(color);\nint[] xs=new int[]{coords[0],coords[2],coords[2],coords[0]};\nint[] ys=new int[]{coords[1],coords[3],y0,y0};\ngc.fillPolygon(xs,ys,4);\ngc.setColor(color.darker());\nif (sgc != null) sgc.setCurrentItem(new String[]{seriesName,className});\ngc.drawLine(coords[0],coords[1],coords[2],coords[3]);\nif (sgc != null) sgc.clearCurrentItem();\n}\nTriplet<String,String,int[]> current=null;\nfor (Triplet<String,String,int[]> next : list) {\nif (current != null) {\nString seriesName=current.get1();\nString className=current.get2();\nint[] coords=current.get3();\nif (getChartData().getChartSelection().isSelected(seriesName,null)) {\ngc.setStroke(HEAVY_STROKE);\ngc.setColor(ProgramProperties.SELECTION_COLOR);\ngc.drawLine(coords[0],coords[1],coords[2],coords[3]);\ncoords=next.get3();\ngc.drawLine(coords[0],coords[1],coords[2],coords[3]);\ngc.setStroke(NORMAL_STROKE);\n}\n else if (getChartData().getChartSelection().isSelected(null,className)) {\ngc.setStroke(HEAVY_STROKE);\ngc.setColor(ProgramProperties.SELECTION_COLOR);\ngc.drawOval(coords[2] - 1,coords[3] - 1,2,2);\ngc.setStroke(NORMAL_STROKE);\n}\n}\ncurrent=next;\n}\nif (current != null) {\nString seriesName=current.get1();\nString className=current.get2();\nint[] coords=current.get3();\nif (getChartData().getChartSelection().isSelected(seriesName,null)) {\ngc.setStroke(HEAVY_STROKE);\ngc.setColor(ProgramProperties.SELECTION_COLOR);\ngc.drawLine(coords[0],coords[1],coords[2],coords[3]);\ngc.setStroke(NORMAL_STROKE);\n}\n else if (getChartData().getChartSelection().isSelected(null,className)) {\ngc.setStroke(HEAVY_STROKE);\ngc.setColor(ProgramProperties.SELECTION_COLOR);\ngc.drawOval(coords[2] - 1,coords[3] - 1,2,2);\ngc.setStroke(NORMAL_STROKE);\n}\n}\n}\n", "nl": "draw bars in which colors are by dataset"}
{"code": "public void processUtterance(Utterance utterance) throws ProcessException {\n  Relation segmentRelation=utterance.getRelation(Relation.SEGMENT);\n  Relation targetRelation=utterance.getRelation(Relation.TARGET);\n  Item segment=segmentRelation.getHead();\n  Item target=null;\n  if (targetRelation != null)   target=targetRelation.getHead();\n  float prevEnd=0f;\n  while (segment != null) {\n    String name=segment.getFeatures().getString(\"name\");\n    float end=segment.getFeatures().getFloat(\"end\");\n    int dur=(int)((end - prevEnd) * 1000);\n    StringBuffer targetStringBuffer=new StringBuffer();\n    while (target != null && target.getFeatures().getFloat(\"pos\") <= end) {\n      float pos=target.getFeatures().getFloat(\"pos\");\n      int percentage=((int)((pos - prevEnd) * 1000)) * 100 / dur;\n      int f0=(int)target.getFeatures().getFloat(\"f0\");\n      targetStringBuffer.append(\" \");\n      targetStringBuffer.append(percentage);\n      targetStringBuffer.append(\" \");\n      targetStringBuffer.append(f0);\n      target=target.getNext();\n    }\n    segment.getFeatures().setInt(\"mbr_dur\",dur);\n    segment.getFeatures().setString(\"mbr_targets\",targetStringBuffer.toString().trim());\n    prevEnd=end;\n    segment=segment.getNext();\n  }\n}\n", "nl": "Convert phoneme timing and f0-time targets into MBROLA format. The results are saved in the Segment relations, as features <code>\"mbr_dur\"</code> (int-valued) and <code>\"mbr_targets\"</code> (String-valued). MBROLA-converted targets are saved in the Segment relation because in MBROLA input, targets are represented as properties of the segments during which they occur."}
{"code": "static boolean isSystemWindows(){\n  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;\n}\n", "nl": "Determines if Windows file system is in use."}
{"code": "public NewsfeedSearchQueryWithExtended latitude(Float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Geographical latitude point (in degrees, -90 to 90) within which to search."}
{"code": "public int[] toNativeArray(){\n  return toNativeArray(0,_pos);\n}\n", "nl": "Copies the contents of the list into a native array."}
{"code": "public void safeTimeToSpeech(String time){\n  try {\n    if (time.equals(\"now\")) {\n      speakNow();\n    }\n else {\n      timeToSpeech(time);\n    }\n  }\n catch (  IllegalArgumentException iae) {\n    System.err.println(\"Bad time format\");\n  }\n}\n", "nl": "Speaks the given time.  Prints an error message if the time is ill-formed."}
{"code": "public synchronized final int evictionCount(){\n  return evictionCount;\n}\n", "nl": "Returns the number of values that have been evicted."}
{"code": "public synchronized void flush() throws IOException {\n  checkNotClosed();\n  trimToSize();\n  trimToFileCount();\n  journalWriter.flush();\n}\n", "nl": "Force buffered operations to the filesystem."}
{"code": "final public boolean isSyncReplicationEnabled(){\n  return _isSyncReplication;\n}\n", "nl": "is sync-replication enabled for at least one member in a clustered space."}
{"code": "public GroupsSetCallbackSettingsQuery boardPostNew(Boolean value){\n  return unsafeParam(\"board_post_new\",value);\n}\n", "nl": "New board posts notifications."}
{"code": "@Override protected void synchronizeData(){\n  needsSyncData(false);\n  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();\n  data=ownerDocument.getNodeValueString(fNodeIndex);\n}\n", "nl": "Synchronizes the data (name and value) for fast nodes."}
{"code": "public void addElementValue(ElementValue node){\n  List<ElementValue> list=(parent == null || state == null) ? getElementValueListNoTransform() : getElementValueList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the ElementValue list."}
{"code": "public static SM_SYSTEM_MESSAGE STR_ENSLAVE_PET_LEVEL_CHANGE(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300086,value0,value1);\n}\n", "nl": "%0 has reached level %1."}
{"code": "@NotNull public AddFaceToPersonAction addFaceToPerson(@NotNull String personGroupId,@NotNull String personId,@Nullable String userData,@NotNull String url){\n  Validation.validate(personGroupId,\"^[a-z0-9_-]{1,64}$\",new ParameterValidationException(\"personGroupId\",\"Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters.\"));\n  Validation.validate(userData,1,new ParameterValidationException(\"userData\",\"User-specified data for any purpose. The maximum length is 1KB.\"));\n  return new AddFaceToPersonAction(cognitiveContext,personGroupId,personId,userData,url);\n}\n", "nl": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle. It returns an persistedFaceId representing the added face and this persistedFaceId will not expire. <p> The persistedFaceId is only used in Face - Identify and Person - Delete a Person Face Each person has a maximum of 248 faces. <p> JPEG, PNG, GIF(the first frame), and BMP are supported. The image file size should be no larger than 4MB. <p> The detectable face size is between 36x36 to 4096x4096 pixels. The faces out of this range will not be detected. <p> Rectangle specified by targetFace should contain exactly one face. Zero or multiple faces will be regarded as an error. Out of detectable face size, large head-pose, or very large occlusions will also result in fail to add a person face. <p> The given rectangle specifies both face location and face size at the same time. There is no guarantee of corrent result if you are using rectangle which are not returned from Face - Detect."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_A_TO_ME(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200647,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] inflicted enmity %0 on you by using [%SkillName]."}
{"code": "public double crossProduct(final Vector2D p1,final Vector2D p2){\n  final double x1=p2.getX() - p1.getX();\n  final double y1=getY() - p1.getY();\n  final double x2=getX() - p1.getX();\n  final double y2=p2.getY() - p1.getY();\n  return MathArrays.linearCombination(x1,y1,-x2,y2);\n}\n", "nl": "Compute the cross-product of the instance and the given points. <p> The cross product can be used to determine the location of a point with regard to the line formed by (p1, p2) and is calculated as: \\[ P = (x_2 - x_1)(y_3 - y_1) - (y_2 - y_1)(x_3 - x_1) \\] with \\(p3 = (x_3, y_3)\\) being this instance. <p> If the result is 0, the points are collinear, i.e. lie on a single straight line L; if it is positive, this point lies to the left, otherwise to the right of the line formed by (p1, p2)."}
{"code": "private static File createReserveDiskCacheDir(Context context){\n  File cacheDir=StorageUtils.getCacheDirectory(context,false);\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return cacheDir;\n}\n", "nl": "Creates reserve disk cache folder which will be used if primary disk cache folder becomes unavailable"}
{"code": "public int peekChar() throws IOException {\n  if (DEBUG_BUFFER) {\n    System.out.print(\"(peekChar: \");\n    XMLEntityManager.print(fCurrentEntity);\n    System.out.println();\n  }\n  if (fCurrentEntity.position == fCurrentEntity.count) {\n    load(0,true);\n  }\n  int c=fCurrentEntity.ch[fCurrentEntity.position];\n  if (DEBUG_BUFFER) {\n    System.out.print(\")peekChar: \");\n    XMLEntityManager.print(fCurrentEntity);\n    if (fCurrentEntity.isExternal()) {\n      System.out.println(\" -> '\" + (c != '\\r' ? (char)c : '\\n') + \"'\");\n    }\n else {\n      System.out.println(\" -> '\" + (char)c + \"'\");\n    }\n  }\n  if (fCurrentEntity.isExternal()) {\n    return c != '\\r' ? c : '\\n';\n  }\n else {\n    return c;\n  }\n}\n", "nl": "Returns the next character on the input. <p/> <strong>Note:</strong> The character is <em>not</em> consumed."}
{"code": "public static Token newToken(int ofKind,String image){\nswitch (ofKind) {\ndefault :\n    return new Token(ofKind,image);\n}\n}\n", "nl": "Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions."}
{"code": "public boolean inRange(VersionData minimumVersion,VersionData maximumVersion){\n  if ((minimumVersion == null) || (maximumVersion == null)) {\n    return false;\n  }\n  boolean inRange=minimumVersion.greaterThan(this) && this.lessThan(maximumVersion);\n  return inRange;\n}\n", "nl": "Checks to see if this object is in the version range. Returns false if either supplied version is null."}
{"code": "public ControlScaleOptions build(){\n  ControlScaleOptions options=new ControlScaleOptions();\n  options.position=this.position;\n  options.maxWidth=maxWidth;\n  options.metric=metric;\n  options.imperial=imperial;\n  options.updateWhenIdle=updateWhenIdle;\n  return options;\n}\n", "nl": "Builds the ControlScaleOptions new instance"}
{"code": "@Override public synchronized long skip(final long length) throws IOException {\n  final long skip=super.skip(length);\n  this.count+=skip;\n  return skip;\n}\n", "nl": "Skips the stream over the specified number of bytes, adding the skipped amount to the count."}
{"code": "private double mahalanobis(double[] v1,double[] v2,double[] sig2){\n  if (v1.length != v2.length)   throw new RuntimeException(\"Given array lengths were not equal.\");\n  if (v1.length != sig2.length)   throw new RuntimeException(\"Given array lengths were not equal.\");\n  double sum=0.0;\n  double diff=0.0;\n  for (int i=0; i < v1.length; i++) {\n    diff=v1[i] - v2[i];\n    sum+=((diff * diff) / sig2[i]);\n  }\n  return (sum);\n}\n", "nl": "Mahalanobis distance between two feature vectors."}
{"code": "public SingularValueDecomposition svd(){\n  return new SingularValueDecomposition(this);\n}\n", "nl": "Singular Value Decomposition"}
{"code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n", "nl": "Creates the default cumulative probability density test input values."}
{"code": "public static void w(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg),e);\n  }\n}\n", "nl": "warning log"}
{"code": "private void updatePlacements(ResourcePoolService.ResourcePoolState resourcePoolState){\n  QueryTask queryTask=QueryUtil.buildPropertyQuery(GroupResourcePlacementService.GroupResourcePlacementState.class,GroupResourcePlacementService.GroupResourcePlacementState.FIELD_NAME_RESOURCE_POOL_LINK,resourcePoolState.documentSelfLink);\n  QueryUtil.addExpandOption(queryTask);\n  ServiceDocumentQuery<GroupResourcePlacementState> query=new ServiceDocumentQuery<>(getHost(),GroupResourcePlacementState.class);\n  List<GroupResourcePlacementState> placements=new ArrayList<>();\n  query.query(queryTask,null);\n}\n", "nl": "Update the placements if we have more resources reserved than what's actually in the resource pool. Sort the placements by priority and decrease from their reservations"}
{"code": "public ConflictsCompareInput(CompareConfiguration config){\n  super(config);\n}\n", "nl": "Creates an compare editor input for the given selection."}
{"code": "public void endObjectName(O object,String name){\n}\n", "nl": "Indicates the end of an object member name in the JSON input. This method will be called after reading the closing quote character (<code>'\"'</code>) of the member name."}
{"code": "public T distance(final FieldVector3D<T> v){\n  final T dx=v.x.subtract(x);\n  final T dy=v.y.subtract(y);\n  final T dz=v.z.subtract(z);\n  return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();\n}\n", "nl": "Compute the distance between the instance and another vector according to the L<sub>2</sub> norm. <p>Calling this method is equivalent to calling: <code>q.subtract(p).getNorm()</code> except that no intermediate vector is built</p>"}
{"code": "public PointF mapViewToImage(PointF viewPoint){\n  float[] points=mTempValues;\n  points[0]=viewPoint.x;\n  points[1]=viewPoint.y;\n  mActiveTransform.invert(mActiveTransformInverse);\n  mActiveTransformInverse.mapPoints(points,0,points,0,1);\n  mapAbsoluteToRelative(points,points,1);\n  return new PointF(points[0],points[1]);\n}\n", "nl": "Maps point from the view's to the image's relative coordinate system. This takes into account the zoomable transformation."}
{"code": "private double determineLMParameter(double[] qy,double delta,double[] diag,InternalData internalData,int solvedCols,double[] work1,double[] work2,double[] work3,double[] lmDir,double lmPar){\n  final double[][] weightedJacobian=internalData.weightedJacobian;\n  final int[] permutation=internalData.permutation;\n  final int rank=internalData.rank;\n  final double[] diagR=internalData.diagR;\n  final int nC=weightedJacobian[0].length;\n  for (int j=0; j < rank; ++j) {\n    lmDir[permutation[j]]=qy[j];\n  }\n  for (int j=rank; j < nC; ++j) {\n    lmDir[permutation[j]]=0;\n  }\n  for (int k=rank - 1; k >= 0; --k) {\n    int pk=permutation[k];\n    double ypk=lmDir[pk] / diagR[pk];\n    for (int i=0; i < k; ++i) {\n      lmDir[permutation[i]]-=ypk * weightedJacobian[i][pk];\n    }\n    lmDir[pk]=ypk;\n  }\n  double dxNorm=0;\n  for (int j=0; j < solvedCols; ++j) {\n    int pj=permutation[j];\n    double s=diag[pj] * lmDir[pj];\n    work1[pj]=s;\n    dxNorm+=s * s;\n  }\n  dxNorm=FastMath.sqrt(dxNorm);\n  double fp=dxNorm - delta;\n  if (fp <= 0.1 * delta) {\n    lmPar=0;\n    return lmPar;\n  }\n  double sum2;\n  double parl=0;\n  if (rank == solvedCols) {\n    for (int j=0; j < solvedCols; ++j) {\n      int pj=permutation[j];\n      work1[pj]*=diag[pj] / dxNorm;\n    }\n    sum2=0;\n    for (int j=0; j < solvedCols; ++j) {\n      int pj=permutation[j];\n      double sum=0;\n      for (int i=0; i < j; ++i) {\n        sum+=weightedJacobian[i][pj] * work1[permutation[i]];\n      }\n      double s=(work1[pj] - sum) / diagR[pj];\n      work1[pj]=s;\n      sum2+=s * s;\n    }\n    parl=fp / (delta * sum2);\n  }\n  sum2=0;\n  for (int j=0; j < solvedCols; ++j) {\n    int pj=permutation[j];\n    double sum=0;\n    for (int i=0; i <= j; ++i) {\n      sum+=weightedJacobian[i][pj] * qy[i];\n    }\n    sum/=diag[pj];\n    sum2+=sum * sum;\n  }\n  double gNorm=FastMath.sqrt(sum2);\n  double paru=gNorm / delta;\n  if (paru == 0) {\n    paru=Precision.SAFE_MIN / FastMath.min(delta,0.1);\n  }\n  lmPar=FastMath.min(paru,FastMath.max(lmPar,parl));\n  if (lmPar == 0) {\n    lmPar=gNorm / dxNorm;\n  }\n  for (int countdown=10; countdown >= 0; --countdown) {\n    if (lmPar == 0) {\n      lmPar=FastMath.max(Precision.SAFE_MIN,0.001 * paru);\n    }\n    double sPar=FastMath.sqrt(lmPar);\n    for (int j=0; j < solvedCols; ++j) {\n      int pj=permutation[j];\n      work1[pj]=sPar * diag[pj];\n    }\n    determineLMDirection(qy,work1,work2,internalData,solvedCols,work3,lmDir);\n    dxNorm=0;\n    for (int j=0; j < solvedCols; ++j) {\n      int pj=permutation[j];\n      double s=diag[pj] * lmDir[pj];\n      work3[pj]=s;\n      dxNorm+=s * s;\n    }\n    dxNorm=FastMath.sqrt(dxNorm);\n    double previousFP=fp;\n    fp=dxNorm - delta;\n    if (FastMath.abs(fp) <= 0.1 * delta || (parl == 0 && fp <= previousFP && previousFP < 0)) {\n      return lmPar;\n    }\n    for (int j=0; j < solvedCols; ++j) {\n      int pj=permutation[j];\n      work1[pj]=work3[pj] * diag[pj] / dxNorm;\n    }\n    for (int j=0; j < solvedCols; ++j) {\n      int pj=permutation[j];\n      work1[pj]/=work2[j];\n      double tmp=work1[pj];\n      for (int i=j + 1; i < solvedCols; ++i) {\n        work1[permutation[i]]-=weightedJacobian[i][pj] * tmp;\n      }\n    }\n    sum2=0;\n    for (int j=0; j < solvedCols; ++j) {\n      double s=work1[permutation[j]];\n      sum2+=s * s;\n    }\n    double correction=fp / (delta * sum2);\n    if (fp > 0) {\n      parl=FastMath.max(parl,lmPar);\n    }\n else     if (fp < 0) {\n      paru=FastMath.min(paru,lmPar);\n    }\n    lmPar=FastMath.max(parl,lmPar + correction);\n  }\n  return lmPar;\n}\n", "nl": "Determines the Levenberg-Marquardt parameter. <p>This implementation is a translation in Java of the MINPACK <a href=\"http://www.netlib.org/minpack/lmpar.f\">lmpar</a> routine.</p> <p>This method sets the lmPar and lmDir attributes.</p> <p>The authors of the original fortran function are:</p> <ul> <li>Argonne National Laboratory. MINPACK project. March 1980</li> <li>Burton  S. Garbow</li> <li>Kenneth E. Hillstrom</li> <li>Jorge   J. More</li> </ul> <p>Luc Maisonobe did the Java translation.</p>"}
{"code": "public void writeBoolean(boolean value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.writeBoolean(value);\n  }\n catch (  IOException ioe) {\n    JMSException jmsEx=new JMSException(\"Could not write data:\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Writes a <code>boolean</code> to the bytes message stream as a 1-byte value. The value <code>true</code> is written as the value <code>(byte)1</code>; the value <code>false</code> is written as the value <code>(byte)0</code>."}
{"code": "public AggregateTranslator(final CharSequenceTranslator... translators){\n  this.translators=clone(translators);\n}\n", "nl": "Specify the translators to be used at creation time."}
{"code": "public boolean hasAuthorities(){\n  for (  UserAuthorityGroup group : userAuthorityGroups) {\n    if (group != null && group.getAuthorities() != null && !group.getAuthorities().isEmpty()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this user credentials has at least one authority through its user authority groups."}
{"code": "public final void yyclose() throws java.io.IOException {\n  zzAtEOF=true;\n  zzEndRead=zzStartRead;\n  if (zzReader != null)   zzReader.close();\n}\n", "nl": "Closes the input stream."}
{"code": "@Override public String toString(){\n  StringBuilder buffer=new StringBuilder();\n  buffer.append(super.toString());\n  buffer.append(\"(\");\n  if (names != null) {\n    for (int i=0; i < names.length; i++) {\n      if (i > 0) {\n        buffer.append(\",\");\n      }\n      buffer.append(names[i]);\n    }\n  }\n  buffer.append(\")\");\n  return buffer.toString();\n}\n", "nl": "Provide a String representaion of this file filter."}
{"code": "public VideoGetAlbumByIdQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of a user or community to add a video to. Use a negative value to designate a community ID."}
{"code": "private void transferToSpecificBuilderAndReset(){\n  if (currentTag == Tag.VERSION) {\n    dataBuilder.setVersion(buffer.toString());\n  }\n  addToRobotBuilder();\n  addToBrowserBuilder();\n  addToOperatingSystemBuilder();\n  addToBrowserPatternBuilder();\n  addToBrowserTypeBuilder();\n  addToBrowserOsMappingBuilder();\n  addToOperatingSystemPatternBuilder();\n  addToDeviceBuilder();\n  addToDevicePatternBuilder();\n  buffer=new StringBuilder();\n}\n", "nl": "Transfers all characters of a specific tag to the corresponding builder and resets the string buffer."}
{"code": "public boolean isInterfaceDirectSuperinterfaceOf(SootClass parent,SootClass possibleChild){\n  parent.checkLevel(SootClass.HIERARCHY);\n  possibleChild.checkLevel(SootClass.HIERARCHY);\n  return getDirectSuperinterfacesOf(possibleChild).contains(parent);\n}\n", "nl": "Returns true if parent is a direct superinterface of possibleChild."}
{"code": "public void addSuperInterfaceId(Access node){\n  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the SuperInterfaceId list."}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());\n  result=prime * result + ((getGroupName() == null) ? 0 : getGroupName().hashCode());\n  result=prime * result + ((getTaskName() == null) ? 0 : getTaskName().hashCode());\n  result=prime * result + ((getStartTime() == null) ? 0 : getStartTime().hashCode());\n  result=prime * result + ((getEndTime() == null) ? 0 : getEndTime().hashCode());\n  result=prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());\n  result=prime * result + ((getServerHost() == null) ? 0 : getServerHost().hashCode());\n  result=prime * result + ((getServerDuid() == null) ? 0 : getServerDuid().hashCode());\n  result=prime * result + ((getFireInfo() == null) ? 0 : getFireInfo().hashCode());\n  return result;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table task_fire_log"}
{"code": "public MessagesSearchQuery q(String value){\n  return unsafeParam(\"q\",value);\n}\n", "nl": "Search query string."}
{"code": "protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){\n  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;\n}\n", "nl": "<p>Computes an average estimated module size based on estimated derived from the positions of the three finder patterns.</p>"}
{"code": "private void updateSharedPreferencesEntry(int notificationId,boolean remove){\n  Set<String> notificationIds=new HashSet<String>(mSharedPreferences.getStringSet(WEBRTC_NOTIFICATION_IDS,new HashSet<String>()));\n  if (remove && !notificationIds.isEmpty() && notificationIds.contains(String.valueOf(notificationId))) {\n    notificationIds.remove(String.valueOf(notificationId));\n  }\n else   if (!remove) {\n    notificationIds.add(String.valueOf(notificationId));\n  }\n  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();\n  sharedPreferenceEditor.putStringSet(WEBRTC_NOTIFICATION_IDS,notificationIds);\n  sharedPreferenceEditor.apply();\n}\n", "nl": "Update shared preferences entry with ids of the visible notifications."}
{"code": "static public void normalize(Node node){\n  for (int i=0; i < node.getChildNodes().getLength(); i++) {\n    Node childNode=node.getChildNodes().item(i);\n    if (childNode.getNodeType() == Node.TEXT_NODE && childNode.getNodeValue().trim().length() == 0) {\n      node.removeChild(childNode);\n      i--;\n    }\n else     normalize(childNode);\n  }\n}\n", "nl": "Normalize DOM tree. Remove all white spaces between tags. for example: <a> <b>value</b> </a> Normalize to <a><b>value</b></a>"}
{"code": "protected Dfp trap(int type,String what,Dfp oper,Dfp def,Dfp result){\n  return def;\n}\n", "nl": "Trap handler.  Subclasses may override this to provide trap functionality per IEEE 854-1987."}
{"code": "@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {\n  fAllWhitespace=true;\n}\n", "nl": "Ignorable whitespace. For this method to be called, the document source must have some way of determining that the text containing only whitespace characters should be considered ignorable. For example, the validator can determine if a length of whitespace characters in the document are ignorable based on the element content model."}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getJList().setSelectionInterval(0,viewer.getListModel().getSize() - 1);\n  viewer.getJList().setSelectionInterval(0,viewer.getListModel().getSize() - 1);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public DefaultingDictionary(V defaultValue){\n  this.defaultValue=defaultValue;\n}\n", "nl": "Construct the defaultingDictionary using the defaultValue provided."}
{"code": "public static byte[] toByteArray(Reader input) throws IOException {\n  return toByteArray(input,Charset.defaultCharset());\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>."}
{"code": "public int addSeries(Color color){\n  int i=this.series.size();\n  this.series.add(new Series(color));\n  return i;\n}\n", "nl": "Adds a new series to the list of series."}
{"code": "public void notifyDataChanged(){\n  init();\n}\n", "nl": "Call this method to let the ChartData know that the underlying data has changed. Calling this performs all necessary recalculations needed when the contained data has changed."}
{"code": "public BoardGetCommentsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of comments."}
{"code": "public double det(){\n  return new LUDecomposition(this).det();\n}\n", "nl": "Matrix determinant"}
{"code": "void addNeighbourRegion(MapRegion neighbour){\n  neighbours=(MapRegion[])ArrayUtils.add(neighbours,neighbour);\n}\n", "nl": "Add neighbour region to this region neighbours list."}
{"code": "private void updateSize(){\n  int newLineCount=ActionUtils.getLineCount(pane);\n  if (newLineCount == lineCount) {\n    return;\n  }\n  lineCount=newLineCount;\n  int h=lineCount * charHeight + pane.getHeight();\n  int d=(int)Math.log10(lineCount) + 1;\n  if (d < 1) {\n    d=1;\n  }\n  int w=d * charWidth + r_margin + l_margin;\n  format=\"%\" + d + \"d\";\n  setPreferredSize(new Dimension(w,h));\n  if (getParent() != null) {\n    getParent().doLayout();\n  }\n}\n", "nl": "Update the size of the line numbers based on the length of the document"}
{"code": "public static char[] toCharArray(InputStream is) throws IOException {\n  return toCharArray(is,Charset.defaultCharset());\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>."}
{"code": "private boolean handleException(Throwable ex){\n  if (ex == null) {\n    return false;\n  }\n  collectDeviceInfo(mContext);\n  return true;\n}\n", "nl": "Custom error handling, error messages sent to collect error reports and other operations were performed here."}
{"code": "private void updateNamespaceBundles(NamespaceName nsname,NamespaceBundles nsBundles,StatCallback callback) throws Exception {\n  checkNotNull(nsname);\n  checkNotNull(nsBundles);\n  String path=joinPath(LOCAL_POLICIES_ROOT,nsname.toString());\n  LocalPolicies policies=null;\n  try {\n    policies=this.pulsar.getLocalZkCacheService().policiesCache().get(path);\n  }\n catch (  KeeperException.NoNodeException ne) {\n    this.pulsar.getLocalZkCacheService().createPolicies(path,false);\n    policies=this.pulsar.getLocalZkCacheService().policiesCache().get(path);\n  }\n  policies.bundles=getBundlesData(nsBundles);\n  this.pulsar.getLocalZkCache().getZooKeeper().setData(path,ObjectMapperFactory.getThreadLocal().writeValueAsBytes(policies),-1,callback,null);\n}\n", "nl": "update new bundle-range to LocalZk (create a new node if not present)"}
{"code": "@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){\n  dateTimeUnit.setMonth(1);\n  dateTimeUnit.setDay(1);\n  List<Period> periods=Lists.newArrayList();\n  int year=dateTimeUnit.getYear();\n  Calendar calendar=getCalendar();\n  while (year == dateTimeUnit.getYear()) {\n    periods.add(createPeriod(dateTimeUnit,null));\n    dateTimeUnit=calendar.plusDays(dateTimeUnit,1);\n  }\n  return periods;\n}\n", "nl": "Generates daily Periods for the whole year in which the given Period's startDate exists."}
{"code": "private Vector resolveAllLocalSystem(String systemId){\n  Vector map=new Vector();\n  String osname=System.getProperty(\"os.name\");\n  boolean windows=(osname.indexOf(\"Windows\") >= 0);\n  Enumeration en=catalogEntries.elements();\n  while (en.hasMoreElements()) {\n    CatalogEntry e=(CatalogEntry)en.nextElement();\n    if (e.getEntryType() == SYSTEM && (e.getEntryArg(0).equals(systemId) || (windows && e.getEntryArg(0).equalsIgnoreCase(systemId)))) {\n      map.addElement(e.getEntryArg(1));\n    }\n  }\n  if (map.size() == 0) {\n    return null;\n  }\n else {\n    return map;\n  }\n}\n", "nl": "Return all applicable SYSTEM system identifiers in this catalog. <p/> <p>If one or more SYSTEM entries exists in the catalog file for the system ID specified, return the mapped values.</p>"}
{"code": "@Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){\n  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {\n    event.getText().clear();\n    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;\n    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);\n    event.getText().add(dateString);\n    return true;\n  }\n  return super.dispatchPopulateAccessibilityEvent(event);\n}\n", "nl": "Announce the currently-selected date when launched."}
{"code": "public int validSamplesInFrame(){\n  return validSamplesInFrame;\n}\n", "nl": "This tells how many valid samples have been read into the current frame (before applying the optional data processor!)."}
{"code": "public int download_file1(String file_id,long file_offset,long download_bytes,DownloadCallback callback) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.download_file(parts[0],parts[1],file_offset,download_bytes,callback);\n}\n", "nl": "download file from storage server"}
{"code": "@Override public void valueChanged(ListSelectionEvent e){\n  if (!e.getValueIsAdjusting()) {\n    int selectedIndex=multiList.getSelectedIndex();\n    if (selectedIndex >= 0) {\n      populateSegmentList(selectedIndex);\n    }\n  }\n}\n", "nl": "Value changed."}
{"code": "private void createRecordHolderQueue(File[] listFiles){\n  this.recordHolderHeapLocal=new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);\n}\n", "nl": "This method will be used to create the heap which will be used to hold the chunk of data"}
{"code": "private static byte[] copyOfRange(byte[] from,int start,int end){\n  int length=end - start;\n  byte[] result=new byte[length];\n  System.arraycopy(from,start,result,0,length);\n  return result;\n}\n", "nl": "Copy the elements from the start to the end"}
{"code": "public ArrayFieldVector<T> append(ArrayFieldVector<T> v){\n  return new ArrayFieldVector<T>(this,v);\n}\n", "nl": "Construct a vector by appending a vector to this vector."}
{"code": "public void addEntryForMigration(Entry entry){\n  addTabId(getCount(),entry.tabId);\n  if (mEntryMap.indexOfKey(entry.tabId) >= 0)   return;\n  mEntryMap.put(entry.tabId,entry);\n}\n", "nl": "Add an entry to the entry map for migration purposes."}
{"code": "public void testStandaloneTaskEvents() throws Exception {\n  Task task=null;\n  try {\n    task=taskService.newTask();\n    task.setCategory(\"123\");\n    task.setDescription(\"Description\");\n    taskService.saveTask(task);\n    assertEquals(3,listener.getEventsReceived().size());\n    ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);\n    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());\n    assertTrue(event.getEntity() instanceof Task);\n    Task taskFromEvent=(Task)event.getEntity();\n    assertEquals(task.getId(),taskFromEvent.getId());\n    assertNull(event.getProcessDefinitionId());\n    assertNull(event.getProcessInstanceId());\n    assertNull(event.getExecutionId());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);\n    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);\n    assertEquals(ActivitiEventType.TASK_CREATED,event.getType());\n    listener.clearEventsReceived();\n    taskService.setOwner(task.getId(),\"owner\");\n    assertEquals(1,listener.getEventsReceived().size());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);\n    assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());\n    assertTrue(event.getEntity() instanceof Task);\n    taskFromEvent=(Task)event.getEntity();\n    assertEquals(task.getId(),taskFromEvent.getId());\n    assertEquals(\"owner\",taskFromEvent.getOwner());\n    assertNull(event.getProcessDefinitionId());\n    assertNull(event.getProcessInstanceId());\n    assertNull(event.getExecutionId());\n    listener.clearEventsReceived();\n    taskService.setAssignee(task.getId(),\"kermit\");\n    assertEquals(2,listener.getEventsReceived().size());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);\n    assertEquals(ActivitiEventType.TASK_ASSIGNED,event.getType());\n    assertTrue(event.getEntity() instanceof Task);\n    taskFromEvent=(Task)event.getEntity();\n    assertEquals(task.getId(),taskFromEvent.getId());\n    assertEquals(\"kermit\",taskFromEvent.getAssignee());\n    assertNull(event.getProcessDefinitionId());\n    assertNull(event.getProcessInstanceId());\n    assertNull(event.getExecutionId());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);\n    assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());\n    assertTrue(event.getEntity() instanceof Task);\n    taskFromEvent=(Task)event.getEntity();\n    assertEquals(task.getId(),taskFromEvent.getId());\n    assertNull(event.getProcessDefinitionId());\n    assertNull(event.getProcessInstanceId());\n    assertNull(event.getExecutionId());\n    listener.clearEventsReceived();\n    taskService.complete(task.getId());\n    assertEquals(2,listener.getEventsReceived().size());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);\n    assertEquals(ActivitiEventType.TASK_COMPLETED,event.getType());\n    assertTrue(event.getEntity() instanceof Task);\n    taskFromEvent=(Task)event.getEntity();\n    assertEquals(task.getId(),taskFromEvent.getId());\n    assertNull(event.getProcessDefinitionId());\n    assertNull(event.getProcessInstanceId());\n    assertNull(event.getExecutionId());\n    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);\n    assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());\n    assertTrue(event.getEntity() instanceof Task);\n    taskFromEvent=(Task)event.getEntity();\n    assertEquals(task.getId(),taskFromEvent.getId());\n    assertNull(event.getProcessDefinitionId());\n    assertNull(event.getProcessInstanceId());\n    assertNull(event.getExecutionId());\n  }\n  finally {\n    if (task != null) {\n      String taskId=task.getId();\n      task=taskService.createTaskQuery().taskId(taskId).singleResult();\n      if (task != null) {\n        taskService.deleteTask(taskId);\n      }\n      historyService.deleteHistoricTaskInstance(taskId);\n    }\n  }\n}\n", "nl": "Check all events for tasks not related to a process-instance"}
{"code": "private Throwable afterConsumption(boolean successful,long lastProcessedKey){\n  try {\n    getReplicationInFacade().afterConsumption(getReplicationInContext(),successful,lastProcessedKey);\n    return null;\n  }\n catch (  Throwable ex) {\n    if (_specificLogger.isLoggable(Level.SEVERE)) {\n      _specificLogger.log(Level.SEVERE,\"failure during after consumption\",ex);\n    }\n    final long possibleRevertedKey=calcLastProcessedkey();\n    if (possibleRevertedKey != _lastProcessedKey) {\n      if (_specificLogger.isLoggable(Level.SEVERE)) {\n        _specificLogger.log(Level.SEVERE,\"reverting last processed redo key from: \" + _lastProcessedKey + \" to \"+ possibleRevertedKey,ex);\n      }\n      _lastProcessedKey=possibleRevertedKey;\n    }\n    return ex;\n  }\n}\n", "nl": "This method should be called under lock!"}
{"code": "private MetricName(List<String> path){\n  path_=unmodifiableList(new ArrayList<>(path));\n}\n", "nl": "Use valueOf() instead."}
{"code": "public void add(Unit u){\n  getBody().getUnits().add(u);\n}\n", "nl": "Add unit to this body."}
{"code": "public static String[] tokenizeToStringArray(String str,String delimiters,boolean trimTokens,boolean ignoreEmptyTokens){\n  StringTokenizer st=new StringTokenizer(str,delimiters);\n  List<String> tokens=new ArrayList<String>();\n  while (st.hasMoreTokens()) {\n    String token=st.nextToken();\n    if (trimTokens) {\n      token=token.trim();\n    }\n    if (!ignoreEmptyTokens || token.length() > 0) {\n      tokens.add(token);\n    }\n  }\n  return toStringArray(tokens);\n}\n", "nl": "Tokenize the given String into a String array via a StringTokenizer. <p>The given delimiters string is supposed to consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using <code>delimitedListToStringArray</code>"}
{"code": "AsmClassSource(String cls,InputStream data){\n  super(cls);\n  this.data=data;\n}\n", "nl": "Constructs a new ASM class source."}
{"code": "private InferenceTestUtils(){\n  super();\n}\n", "nl": "Prevent instantiation."}
{"code": "private synchronized ContentModelValidator createChildModel(int contentSpecIndex){\n  XMLContentSpec contentSpec=new XMLContentSpec();\n  getContentSpec(contentSpecIndex,contentSpec);\n  if ((contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL) {\n  }\n else   if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_LEAF) {\n    if (contentSpec.value == null && contentSpec.otherValue == null)     throw new RuntimeException(\"ImplementationMessages.VAL_NPCD\");\n    fQName.setValues(null,(String)contentSpec.value,(String)contentSpec.value,(String)contentSpec.otherValue);\n    return new SimpleContentModel(contentSpec.type,fQName,null);\n  }\n else   if ((contentSpec.type == XMLContentSpec.CONTENTSPECNODE_CHOICE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_SEQ)) {\n    XMLContentSpec contentSpecLeft=new XMLContentSpec();\n    XMLContentSpec contentSpecRight=new XMLContentSpec();\n    getContentSpec(((int[])contentSpec.value)[0],contentSpecLeft);\n    getContentSpec(((int[])contentSpec.otherValue)[0],contentSpecRight);\n    if ((contentSpecLeft.type == XMLContentSpec.CONTENTSPECNODE_LEAF) && (contentSpecRight.type == XMLContentSpec.CONTENTSPECNODE_LEAF)) {\n      fQName.setValues(null,(String)contentSpecLeft.value,(String)contentSpecLeft.value,(String)contentSpecLeft.otherValue);\n      fQName2.setValues(null,(String)contentSpecRight.value,(String)contentSpecRight.value,(String)contentSpecRight.otherValue);\n      return new SimpleContentModel(contentSpec.type,fQName,fQName2);\n    }\n  }\n else   if ((contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE)) {\n    XMLContentSpec contentSpecLeft=new XMLContentSpec();\n    getContentSpec(((int[])contentSpec.value)[0],contentSpecLeft);\n    if (contentSpecLeft.type == XMLContentSpec.CONTENTSPECNODE_LEAF) {\n      fQName.setValues(null,(String)contentSpecLeft.value,(String)contentSpecLeft.value,(String)contentSpecLeft.otherValue);\n      return new SimpleContentModel(contentSpec.type,fQName,null);\n    }\n  }\n else {\n    throw new RuntimeException(\"ImplementationMessages.VAL_CST\");\n  }\n  fLeafCount=0;\n  fLeafCount=0;\n  CMNode cmn=buildSyntaxTree(contentSpecIndex,contentSpec);\n  return new DFAContentModel(cmn,fLeafCount,false);\n}\n", "nl": "When the element has a 'CHILDREN' model, this method is called to create the content model object. It looks for some special case simple models and creates SimpleContentModel objects for those. For the rest it creates the standard DFA style model."}
{"code": "public static synchronized JSpaceAttributes loadConfigDCache(String fileName) throws SpaceConfigurationException, IOException, SAXException, ParserConfigurationException {\n  JSpaceAttributes prop=dCacheConfigFilesMap.get(fileName);\n  if (prop == null) {\n    InputStream dCacheInputStream=ResourceLoader.findConfigDCache(fileName);\n    if (dCacheInputStream != null) {\n      prop=(JSpaceAttributes)JProperties.convertXML(dCacheInputStream);\n      dCacheConfigFilesMap.put(fileName,prop);\n    }\n  }\n  return (JSpaceAttributes)prop.clone();\n}\n", "nl": "Returns the DCache configuration as specified in the file. Changes on the returned Properties object will not affect the original data."}
{"code": "public static List<String> readLines(InputStream input) throws IOException {\n  return readLines(input,Charset.defaultCharset());\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a list of Strings, one entry per line, using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>."}
{"code": "public void addHeaderView(View v,Object data,boolean isSelectable){\n  ListAdapter adapter=getAdapter();\n  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {\n    throw new IllegalStateException(\"Cannot add header view to grid -- setAdapter has already been called.\");\n  }\n  ViewGroup.LayoutParams lyp=v.getLayoutParams();\n  FixedViewInfo info=new FixedViewInfo();\n  FrameLayout fl=new FullWidthFixedViewLayout(getContext());\n  if (lyp != null) {\n    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));\n    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));\n  }\n  fl.addView(v);\n  info.view=v;\n  info.viewContainer=fl;\n  info.data=data;\n  info.isSelectable=isSelectable;\n  mHeaderViewInfos.add(info);\n  if (adapter != null) {\n    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();\n  }\n}\n", "nl": "Add a fixed view to appear at the top of the grid. If addHeaderView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. <p/> NOTE: Call this before calling setAdapter. This is so HeaderGridView can wrap the supplied cursor with one that will also account for header views."}
{"code": "public static final double footPoundsToNewtonMeters(double footPound){\n  return footPound * FOOT_POUND_TO_NEWTON_METER;\n}\n", "nl": "Converts foot-pounds to newton-meters."}
{"code": "@Override public final void writeLong(long v) throws IOException {\n  work[0]=(byte)v;\n  work[1]=(byte)(v >> 8);\n  work[2]=(byte)(v >> 16);\n  work[3]=(byte)(v >> 24);\n  work[4]=(byte)(v >> 32);\n  work[5]=(byte)(v >> 40);\n  work[6]=(byte)(v >> 48);\n  work[7]=(byte)(v >> 56);\n  dis.write(work,0,8);\n}\n", "nl": "Write a long, 64-bits. like DataOutputStream.writeLong."}
{"code": "public static PublicKey generatePublicKey(String encodedPublicKey){\n  try {\n    byte[] decodedKey=Base64.decode(encodedPublicKey);\n    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);\n    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvalidKeySpecException e) {\n    Log.e(TAG,\"Invalid key specification.\");\n    throw new IllegalArgumentException(e);\n  }\ncatch (  Base64DecoderException e) {\n    Log.e(TAG,\"Base64 decoding failed.\");\n    throw new IllegalArgumentException(e);\n  }\n}\n", "nl": "Generates a PublicKey instance from a string containing the Base64-encoded public key."}
{"code": "public void stop() throws IOException {\n  logger.info(\"Stopping storage process...\");\n  ProcessBuilder stopBuilder=process(getStopCommand());\n  Process stopper=stopBuilder.start();\n  sleeper.sleepQuietly(SCRIPT_EXECUTE_WAIT_TIME_MS);\n  try {\n    int code=stopper.exitValue();\n    if (code == 0) {\n      logger.info(\"Storage process has been stopped\");\n      instanceState.setStorageProxyAlive(false);\n    }\n else {\n      logger.error(\"Unable to stop storage process. Error code: {}\",code);\n      logProcessOutput(stopper);\n    }\n  }\n catch (  Exception e) {\n    logger.warn(\"Could not shut down storage process correctly: \",e);\n  }\n}\n", "nl": "Stop the storage engine (Redis, Memcached)."}
{"code": "@Override public Object call(){\n  cachePersistenceDAO.persistBatch(keyList);\n  return null;\n}\n", "nl": "Retrieves the cache elements and persists them. Requires a new transaction."}
{"code": "public static UserFeedback createUserFeedback(){\n  UserFeedback userFeedback=new UserFeedback(Constants.DEFAULT_PREFIX_USER_FEEDBACK + internalId++);\n  return userFeedback;\n}\n", "nl": "Creates a user feedback with the required default values."}
{"code": "public NeighborIterator(Node n,Iterator edges){\n  m_node=n;\n  m_edges=edges;\n}\n", "nl": "Create a new NeighborIterator."}
{"code": "public void rectValueToPixel(RectF r){\n  mMatrixValueToPx.mapRect(r);\n  mViewPortHandler.getMatrixTouch().mapRect(r);\n  mMatrixOffset.mapRect(r);\n}\n", "nl": "Transform a rectangle with all matrices."}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new List(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public void connect(final MqttCallback callback,final Runnable connectionRunnable) throws SpyException {\n  createClient(callback);\n  final ReconnectionSettings reconnectionSettings=getMqttConnectionDetails().getReconnectionSettings();\n  if (reconnectionSettings == null) {\n    new Thread(connectionRunnable).start();\n  }\n else {\n    reconnectionManager.addConnection(this,connectionRunnable);\n  }\n}\n", "nl": "Connects to the specified server(s)."}
{"code": "public VideoEditQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Privacy settings in a special format. Privacy setting is available for videos uploaded to own profile by user."}
{"code": "public LineIterator(final Reader reader){\n  if (reader == null) {\n    throw new IllegalArgumentException(\"Reader must not be null\");\n  }\n  if (reader instanceof BufferedReader) {\n    bufferedReader=(BufferedReader)reader;\n  }\n else {\n    bufferedReader=new BufferedReader(reader);\n  }\n}\n", "nl": "Constructs an iterator of the lines for a <code>Reader</code>."}
{"code": "public static boolean startsWith(String columnPath,String tableName){\n  if (tableName == null || columnPath == null)   return false;\n  return columnPath.startsWith(tableName + \".\");\n}\n", "nl": "Returns true if given columnPath startsWith given tableName"}
{"code": "public boolean isCannotShare(){\n  if (cannotShare == null) {\n    return false;\n  }\n else {\n    return cannotShare;\n  }\n}\n", "nl": "Gets the value of the cannotShare property."}
{"code": "public Object clone(){\n  MultipleReturnValueRuleExpression clone=(MultipleReturnValueRuleExpression)super.clone();\n  clone.conditions=new ArrayList<IRuleCondition>();\n  Iterator<IRuleCondition> i=conditions.iterator();\n  while (i.hasNext()) {\n    clone.conditions.add((IRuleCondition)i.next().clone());\n  }\n  return clone;\n}\n", "nl": "Clone method implementation"}
{"code": "public static Charset toCharset(String charset){\n  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);\n}\n", "nl": "Returns a Charset for the named charset. If the name is null, return the default Charset."}
{"code": "private void hamming(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.54;\n  double factor=twoPI / (double)size;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (25.0 / 46.0 - 21.0 / 46.0 * Math.cos(factor * i));\n}\n", "nl": "Fill an array with the values of a standard Hamming window function"}
{"code": "private static Class<?>[] reloadClasses(Class<?> root,Class<?>[] suiteClasses) throws InitializationError {\n  URL[] urls=new URL[]{classpathOf(root),classpathOf(IsolatedClassLoaderSuite.class)};\n  Class<?> sc=null;\n  try {\n    for (int i=0; i < suiteClasses.length; i++) {\n      sc=suiteClasses[i];\n      ClassLoader cl=new IsolatedClassLoader(urls,IsolatedClassLoaderSuite.class.getClassLoader());\n      suiteClasses[i]=cl.loadClass(sc.getName());\n    }\n    return suiteClasses;\n  }\n catch (  ClassNotFoundException cex) {\n    throw new InitializationError(\"could not reload class: \" + sc);\n  }\n}\n", "nl": "Reloads the classes in a separate class loader."}
{"code": "public static DataFrame zeromeanUnitVariance(DataFrame frame){\n  return zeromeanUnitVariance(frame,Collections.<String>emptyList());\n}\n", "nl": "Normalize by zero mean unit variance"}
{"code": "@CallSuper public void bind(@NonNull PreferenceData preferenceData){\n  if (DesignConfig.DEBUG_RECYCLER_VIEW) {\n    Log.v(TAG,getLogPrefix() + \"bind to \" + preferenceData.title+ getLogSuffix());\n  }\n  bindTextView(titleView,preferenceData.title);\n  bindTextView(summaryView,preferenceData.summary);\n  boolean removeIcon=preferenceData.removeIconIfEmpty && preferenceData.icon == null;\n  if (iconView != null) {\n    if (preferenceData.icon != null) {\n      iconView.setImageDrawable(preferenceData.icon);\n    }\n    iconView.setVisibility(removeIcon ? View.GONE : View.VISIBLE);\n  }\n  if (iconFrame != null) {\n    iconFrame.setVisibility(removeIcon ? View.GONE : View.VISIBLE);\n  }\n}\n", "nl": "Binds the created View to the data for this Preference. <p> This is a good place to grab references to custom Views in the layout and set properties on them. <p> Make sure to call through to the superclass's implementation."}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public ZWaveMtpWindowCoveringCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){\n  super(node,controller,endpoint);\n}\n", "nl": "Creates a new instance of the ZWaveMtpWindowCoveringCommandClass class."}
{"code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,double min,double max,List<String> skipColumns){\n  DataFrame frame=DataFrames.toDataFrame(schema,data);\n  return DataFrames.toRecords(normalize(frame,min,max,skipColumns)).getSecond();\n}\n", "nl": "Scale based on min,max"}
{"code": "@Override public List<Module> searchModule(Module module){\n  return sessionTemplate.selectList(NAMESPACE + \".searchModule\",module);\n}\n", "nl": "Get system module list"}
{"code": "public boolean select(Viewer viewer,Object parentElement,Object element){\n  return false;\n}\n", "nl": "Returns always false in order to generate"}
{"code": "protected static void showLogin(){\n  if (loginListener != null) {\n    loginListener.shouldAuthenticate();\n  }\n}\n", "nl": "Calls the appropriate method in the login listener"}
{"code": "private void indexSplitDoc(){\n  try {\n    _indexSplitDoc();\n  }\n  finally {\n    shardState.indexState.globalState.indexingJobsRunning.release();\n    semaphore.release();\n    ctx.inFlightChunks.arriveAndDeregister();\n  }\n}\n", "nl": "Indexes the one document that spans across the end of our chunk.  This is invoked when the chunk after us first starts, or when we finish processing all whole docs in our chunk, whichever comes last."}
{"code": "public static byte[] decode(String s,int options) throws java.io.IOException {\n  if (s == null) {\n    throw new NullPointerException(\"Input string was null.\");\n  }\n  byte[] bytes;\n  try {\n    bytes=s.getBytes(PREFERRED_ENCODING);\n  }\n catch (  java.io.UnsupportedEncodingException uee) {\n    bytes=s.getBytes();\n  }\n  bytes=decode(bytes,0,bytes.length,options);\n  boolean dontGunzip=(options & DONT_GUNZIP) != 0;\n  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n      java.io.ByteArrayInputStream bais=null;\n      java.util.zip.GZIPInputStream gzis=null;\n      java.io.ByteArrayOutputStream baos=null;\n      byte[] buffer=new byte[2048];\n      int length=0;\n      try {\n        baos=new java.io.ByteArrayOutputStream();\n        bais=new java.io.ByteArrayInputStream(bytes);\n        gzis=new java.util.zip.GZIPInputStream(bais);\n        while ((length=gzis.read(buffer)) >= 0) {\n          baos.write(buffer,0,length);\n        }\n        bytes=baos.toByteArray();\n      }\n catch (      java.io.IOException e) {\n        e.printStackTrace();\n      }\n finally {\n        try {\n          baos.close();\n        }\n catch (        Exception e) {\n        }\n        try {\n          gzis.close();\n        }\n catch (        Exception e) {\n        }\n        try {\n          bais.close();\n        }\n catch (        Exception e) {\n        }\n      }\n    }\n  }\n  return bytes;\n}\n", "nl": "Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it."}
{"code": "public boolean isApplicable(){\n  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getChildCount(remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot()) > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public String process(Item item) throws ProcessException {\n  int count=0;\n  Item ss=item.getItemAs(Relation.SYLLABLE);\n  Item firstSyllable=FIRST_SYLLABLE_PATH.findItem(item);\n  for (Item p=ss.getPrevious(); p != null && !p.equalsShared(firstSyllable); p=p.getPrevious()) {\n    if (\"1\".equals(p.getFeatures().getString(\"stress\"))) {\n      count++;\n    }\n  }\n  return Integer.toString(rail(count));\n}\n", "nl": "Performs some processing on the given item."}
{"code": "public static String checkNull(String string1){\n  if (string1 != null)   return string1;\n else   return \"\";\n}\n", "nl": "Checks to see if the passed string is null, if it is returns an empty but non-null string."}
{"code": "public void error(Object elementOrLocation,String message,Object... params){\n  model.getDiagCollector().addDiag(Diag.error(getLocation(elementOrLocation),Model.diagPrefix(aspectName) + message,params));\n}\n", "nl": "Helper for subclasses to report an error."}
{"code": "@Override public FDistribution makeDistribution(){\n  return new FDistribution(5.0,6.0);\n}\n", "nl": "Creates the default continuous distribution instance to use in tests."}
{"code": "@LegacyNetworkConstant private int convertConstraintsToLegacyNetConstant(int constraintMap){\n  int reqNet=LEGACY_NETWORK_ANY;\n  reqNet=(constraintMap & Constraint.ON_ANY_NETWORK) == Constraint.ON_ANY_NETWORK ? LEGACY_NETWORK_CONNECTED : reqNet;\n  reqNet=(constraintMap & Constraint.ON_UNMETERED_NETWORK) == Constraint.ON_UNMETERED_NETWORK ? LEGACY_NETWORK_UNMETERED : reqNet;\n  return reqNet;\n}\n", "nl": "Converts a bitmap of Constraint values into a LegacyNetworkConstraint constant (int)."}
{"code": "public Entry copy(){\n  return new Entry(mVal,mXIndex,mData);\n}\n", "nl": "returns an exact copy of the entry"}
{"code": "private boolean equals(SimpleRegression model1,SimpleRegression model2,double tol){\n  if (model1.getN() != model2.getN()) {\n    return false;\n  }\n  if (FastMath.abs(model1.getIntercept() - model2.getIntercept()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getInterceptStdErr() - model2.getInterceptStdErr()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getMeanSquareError() - model2.getMeanSquareError()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getR() - model2.getR()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getRegressionSumSquares() - model2.getRegressionSumSquares()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getRSquare() - model2.getRSquare()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getSignificance() - model2.getSignificance()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getSlope() - model2.getSlope()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getSlopeConfidenceInterval() - model2.getSlopeConfidenceInterval()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getSlopeStdErr() - model2.getSlopeStdErr()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getSumOfCrossProducts() - model2.getSumOfCrossProducts()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getSumSquaredErrors() - model2.getSumSquaredErrors()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getTotalSumSquares() - model2.getTotalSumSquares()) > tol) {\n    return false;\n  }\n  if (FastMath.abs(model1.getXSumSquares() - model2.getXSumSquares()) > tol) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Returns true iff the statistics reported by model1 are all within tol of those reported by model2."}
{"code": "private boolean firstParamIsSelf(TypeElement classElement,SkylarkModule skyModule,DeclaredType objectType){\n  return !skyModule.namespace() && objectType.toString().equals(classElement.toString());\n}\n", "nl": "Detect if the first parameter is 'self' object."}
{"code": "public SpaceTypeDescriptorBuilder addCompoundIndex(String[] paths,boolean unique){\n  return addIndex(SpaceIndexFactory.createCompoundIndex(paths,SpaceIndexType.BASIC,null,unique));\n}\n", "nl": "Adds an index of the specified type for the specified path."}
{"code": "public static MultivaluedMap<String,String> decodeMatrix(String pathSegment,boolean decode){\n  MultivaluedMap<String,String> matrixMap=EmoMultivaluedMap.create();\n  int s=pathSegment.indexOf(';') + 1;\n  if (s == 0 || s == pathSegment.length()) {\n    return matrixMap;\n  }\n  do {\n    int e=pathSegment.indexOf(';',s);\n    if (e == -1) {\n      decodeMatrixParam(matrixMap,pathSegment.substring(s),decode);\n    }\n else     if (e > s) {\n      decodeMatrixParam(matrixMap,pathSegment.substring(s,e),decode);\n    }\n    s=e + 1;\n  }\n while (s > 0 && s < pathSegment.length());\n  return matrixMap;\n}\n", "nl": "Decode the matrix component of a URI path segment."}
{"code": "public static UUID maximumUuid(){\n  return new UUID(getMostSignificantBits(Long.MAX_VALUE),getLeastSignificantBits(Integer.MAX_VALUE,Long.MAX_VALUE));\n}\n", "nl": "Returns a UUID that sorts greater than or equal to all RFC 4122 timestamp UUIDs (version = 1, variant = 2)."}
{"code": "public String namespace(){\n  return theNamespace;\n}\n", "nl": "Returns the namespace name of this element type."}
{"code": "public void updateExpandableItem(int expandableItemPosition,ExpandableItem expandableItem){\n  validateExpandableItem(expandableItem);\n  expandableItems.remove(expandableItemPosition);\n  expandableItems.add(expandableItemPosition,expandableItem);\n  int buttonPosition=buttons.size() - 1 - expandableItemPosition;\n  configureButtonContent(buttons.get(buttonPosition),expandableItem);\n}\n", "nl": "Changes the ExpandableItem associated to a given position and updates the Button widget to show the new ExpandableItem information."}
{"code": "public static Object deserialize(String content,Delegator delegator) throws SerializeException, SAXException, ParserConfigurationException, IOException {\n  Document document=UtilXml.readXmlDocument(content,false);\n  if (document != null) {\n    if (!\"ofbiz-ser\".equals(document.getDocumentElement().getTagName())) {\n      return UtilXml.fromXml(content);\n    }\n    return deserialize(document,delegator);\n  }\n else {\n    Debug.logWarning(\"Serialized document came back null\",module);\n    return null;\n  }\n}\n", "nl": "Deserialize a Java object from an XML string. <p>This method should be used with caution. If the XML string contains a serialized <code>GenericValue</code> or <code>GenericPK</code> then it is possible to unintentionally corrupt the database.</p>"}
{"code": "public void destroy(){\n}\n", "nl": "Clean up all <code>LogFile</code> objects on behalf of caller."}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {\n  if (lines == null) {\n    return;\n  }\n  if (lineEnding == null) {\n    lineEnding=LINE_SEPARATOR;\n  }\n  Charset cs=Charsets.toCharset(encoding);\n  for (  Object line : lines) {\n    if (line != null) {\n      output.write(StringCodingUtils.getBytes(line.toString(),cs));\n    }\n    output.write(StringCodingUtils.getBytes(lineEnding,cs));\n  }\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the specified character encoding and the specified line ending."}
{"code": "public FileWriterWithEncoding(File file,Charset encoding,boolean append) throws IOException {\n  super();\n  this.out=initWriter(file,encoding,append);\n}\n", "nl": "Constructs a FileWriterWithEncoding with a file encoding."}
{"code": "public boolean isDrawEntryLabelsEnabled(){\n  return mDrawEntryLabels;\n}\n", "nl": "Returns true if drawing the entry labels is enabled, false if not."}
{"code": "public ImageIcon loadImage(String imageName){\n  try {\n    ClassLoader classloader=getClass().getClassLoader();\n    java.net.URL url=classloader.getResource(imageName);\n    if (url != null) {\n      ImageIcon icon=new ImageIcon(url);\n      return icon;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  throw new IllegalArgumentException(\"Unable to load image: \" + imageName);\n}\n", "nl": "Helper method to load an image file from the CLASSPATH"}
{"code": "public void addTypeArgument(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeArgument list."}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public ASBSessionCursor queryASBSession(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_ASB_SETS;\n  qh.Selection=\"ar.\" + S.COLUMN_ASB_SET_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=\"1\";\n  return new ASBSessionCursor(wrapJoinHelper(builderASBSession(),qh));\n}\n", "nl": "Retrieves a specific Armor Set Builder set in the database."}
{"code": "public DecorationCursor queryDecorationsSearch(String filter){\n  filter=(filter == null) ? \"\" : filter.trim();\n  if (filter.equals(\"\"))   return mHelper.queryDecorations();\n  return mHelper.queryDecorationsSearch(filter);\n}\n", "nl": "Gets a cursor that has a list of decorations that pass the filter. Having a null or empty filter is the same as calling without a filter"}
{"code": "private void movePos(float deltaY){\n  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {\n    if (DEBUG) {\n      PtrCLog.e(LOG_TAG,String.format(\"has reached the top\"));\n    }\n    return;\n  }\n  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;\n  if (mPtrIndicator.willOverTop(to)) {\n    if (DEBUG) {\n      PtrCLog.e(LOG_TAG,String.format(\"over top\"));\n    }\n    to=PtrIndicator.POS_START;\n  }\n  mPtrIndicator.setCurrentPos(to);\n  int change=to - mPtrIndicator.getLastPosY();\n  updatePos(change);\n}\n", "nl": "if deltaY > 0, move the content down"}
{"code": "public static int generateBackgroundColor(BookmarkItem item){\n  int normalizedIndex=MathUtils.positiveModulo(item.getUrl().hashCode(),DEFAULT_BACKGROUND_COLORS.length);\n  return DEFAULT_BACKGROUND_COLORS[normalizedIndex];\n}\n", "nl": "Generate color based on bookmarked url's hash code. Same color will always be returned given same bookmark item."}
{"code": "public GaussianRandomGenerator(final RandomGenerator generator){\n  this.generator=generator;\n}\n", "nl": "Create a new generator."}
{"code": "public static void write(File file,CharSequence data) throws IOException {\n  write(file,data,Charset.defaultCharset(),false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist using the default encoding for the VM."}
{"code": "public void scrollToFinishActivity(){\n  final int childWidth=mContentView.getWidth();\n  int left=0, top=0;\n  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;\n  mDragHelper.smoothSlideViewTo(mContentView,left,top);\n  invalidate();\n}\n", "nl": "Scroll out contentView and finish the activity"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200838,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] received %num0 damage as it used [%SkillName]."}
{"code": "private void terminateTaskMgr(){\nsynchronized (taskManager) {\n    List pendingTasks=taskManager.getPending();\n    for (int i=0; i < pendingTasks.size(); i++) {\n      taskManager.remove((TaskManager.Task)pendingTasks.get(i));\n    }\nsynchronized (pendingDiscoveries) {\n      for (Iterator iter=pendingDiscoveries.iterator(); iter.hasNext(); ) {\n        Object req=iter.next();\n        iter.remove();\n        if (req instanceof Socket) {\n          try {\n            ((Socket)req).close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n    }\n    taskManager.terminate();\n  }\nsynchronized (pendingNotifies) {\n    pendingNotifies.clear();\n  }\n}\n", "nl": "This method removes all pending and active tasks from the TaskManager for this instance. It also clears the set of pendingDiscoveries, and closes all associated sockets."}
{"code": "public void clearParams(){\n  params.clear();\n}\n", "nl": "Clears all parameters."}
{"code": "public boolean shouldInterceptNavigation(ExternalNavigationHandler externalNavHandler,NavigationParams navigationParams){\n  return true;\n}\n", "nl": "Determine if a particular navigation should be intercepted."}
{"code": "public boolean isShowLabel(){\n  return showTitle;\n}\n", "nl": "Checks if is show label."}
{"code": "public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_TRADE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400400,value0);\n}\n", "nl": "Characters under level %0 who are playing a free trial cannot trade."}
{"code": "protected void actionPerformed(GuiButton button) throws IOException {\n  if (button.id == 0) {\n    this.mc.displayGuiScreen(new GuiAchievements(this,this.mc.thePlayer.getStatFileWriter()));\n  }\n  if (button.id == 1) {\n    this.mc.displayGuiScreen(new GuiStats(this,this.mc.thePlayer.getStatFileWriter()));\n  }\n}\n", "nl": "Called by the controls from the buttonList when activated. (Mouse pressed for buttons)"}
{"code": "public IsEqualToExtended(Expression expression1,Expression expression2,boolean matchCase){\n  super(expression1,expression2,matchCase);\n}\n", "nl": "Instantiates a new checks if is equal to extended."}
{"code": "public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){\n  return !canChildScrollUp(content);\n}\n", "nl": "Default implement for check can perform pull to refresh"}
{"code": "@Override protected void handleIOException(IOException e) throws IOException {\n  throw new TaggedIOException(e,tag);\n}\n", "nl": "Tags any IOExceptions thrown, wrapping and re-throwing."}
{"code": "public double cond(){\n  return new SingularValueDecomposition(this).cond();\n}\n", "nl": "Matrix condition (2 norm)"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_Instant_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200413,num0,skillname);\n}\n", "nl": "You received %num0 damage due to [%SkillName]."}
{"code": "protected PolicyAuditor(){\n}\n", "nl": "Make it non-obvious to accidentally instantiate this outside of ChromeApplication."}
{"code": "public static Point size(URL url){\n  if (url == null)   return null;\n  try {\n    return size(url.openStream());\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n  return null;\n}\n", "nl": "get the size of image by url."}
{"code": "public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){\n  List<Interceptor> allInters=new ArrayList<Interceptor>();\n  for (  Interceptor defaultInter : defaultInters) {\n    allInters.add(defaultInter);\n  }\n  for (  Interceptor resourceInter : resourceInters) {\n    allInters.add(resourceInter);\n  }\n  for (  Interceptor methodInter : methodInters) {\n    allInters.add(methodInter);\n  }\n  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);\n  Class<? extends Interceptor>[] methodClears=getMethodClears(method);\n  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {\n    for (int i=0; i < allInters.size(); i++) {\n      i=clearInterceptor(allInters,resourceClears,i);\n      i=clearInterceptor(allInters,methodClears,i);\n    }\n  }\n  return allInters.toArray(new Interceptor[allInters.size()]);\n}\n", "nl": "Build interceptors of Action"}
{"code": "public Response<?> response(){\n  return response;\n}\n", "nl": "The full HTTP response. This may be null if the exception was serialized."}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_ITEM_WIN(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390003,value0,value1);\n}\n", "nl": "%0 has acquired %1."}
{"code": "public Response(int init){\n  out=new byte[init];\n  offset=0;\n}\n", "nl": "Instantiates a new response."}
{"code": "private int compareDates(Duration duration1,Duration duration2){\n  int resultA=DatatypeConstants.INDETERMINATE;\n  int resultB=DatatypeConstants.INDETERMINATE;\n  XMLGregorianCalendar tempA=(XMLGregorianCalendar)TEST_POINTS[0].clone();\n  XMLGregorianCalendar tempB=(XMLGregorianCalendar)TEST_POINTS[0].clone();\n  tempA.add(duration1);\n  tempB.add(duration2);\n  resultA=tempA.compare(tempB);\n  if (resultA == DatatypeConstants.INDETERMINATE) {\n    return DatatypeConstants.INDETERMINATE;\n  }\n  tempA=(XMLGregorianCalendar)TEST_POINTS[1].clone();\n  tempB=(XMLGregorianCalendar)TEST_POINTS[1].clone();\n  tempA.add(duration1);\n  tempB.add(duration2);\n  resultB=tempA.compare(tempB);\n  resultA=compareResults(resultA,resultB);\n  if (resultA == DatatypeConstants.INDETERMINATE) {\n    return DatatypeConstants.INDETERMINATE;\n  }\n  tempA=(XMLGregorianCalendar)TEST_POINTS[2].clone();\n  tempB=(XMLGregorianCalendar)TEST_POINTS[2].clone();\n  tempA.add(duration1);\n  tempB.add(duration2);\n  resultB=tempA.compare(tempB);\n  resultA=compareResults(resultA,resultB);\n  if (resultA == DatatypeConstants.INDETERMINATE) {\n    return DatatypeConstants.INDETERMINATE;\n  }\n  tempA=(XMLGregorianCalendar)TEST_POINTS[3].clone();\n  tempB=(XMLGregorianCalendar)TEST_POINTS[3].clone();\n  tempA.add(duration1);\n  tempB.add(duration2);\n  resultB=tempA.compare(tempB);\n  resultA=compareResults(resultA,resultB);\n  return resultA;\n}\n", "nl": "Compares 2 given durations. (refer to W3C Schema Datatypes \"3.2.6 duration\")"}
{"code": "public static FragmentIntroBase newInstance(String type){\n  FragmentIntroBase fragment=new FragmentIntroBase();\n  Bundle args=new Bundle();\n  args.putString(\"type\",type);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters."}
{"code": "public boolean has(String key){\n  return this.map.containsKey(key);\n}\n", "nl": "Determine if the JSONObject contains a specific key."}
{"code": "public MarketGetQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset based on a first matching item to get a certain items subset"}
{"code": "public boolean isRequiredEncode(){\n  return requiredEncode;\n}\n", "nl": "is require encode?"}
{"code": "public int currentId(){\n  return currentSlot;\n}\n", "nl": "Returns the ID of the current record."}
{"code": "public String process(Item item) throws ProcessException {\n  int count=0;\n  Item ss=item.getItemAs(Relation.SYLLABLE);\n  Item firstSyllable=LAST_LAST_SYLLABLE_PATH.findItem(item);\n  for (Item p=ss; p != null; p=p.getNext()) {\n    if (p.equalsShared(firstSyllable)) {\n      break;\n    }\n    count++;\n  }\n  return Integer.toString(rail(count));\n}\n", "nl": "Performs some processing on the given item."}
{"code": "private void parseAttributes(TypedArray a){\n  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth_progress,barWidth);\n  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth_progress,rimWidth);\n  spinSpeed=(int)a.getInteger(R.styleable.ProgressWheel_spinSpeed_progress,spinSpeed);\n  delayMillis=(int)a.getInteger(R.styleable.ProgressWheel_delayMillis_progress,delayMillis);\n  if (delayMillis < 0) {\n    delayMillis=0;\n  }\n  barColor=a.getColor(R.styleable.ProgressWheel_barColor_progress,barColor);\n  barLength=(int)a.getDimension(R.styleable.ProgressWheel_barLength_progress,barLength);\n  textSize=(int)a.getDimension(R.styleable.ProgressWheel_textSize_progress,textSize);\n  textColor=(int)a.getColor(R.styleable.ProgressWheel_textColor_progress,textColor);\n  setText(a.getString(R.styleable.ProgressWheel_text_progress));\n  rimColor=(int)a.getColor(R.styleable.ProgressWheel_rimColor_progress,rimColor);\n  spinRimColor=(int)a.getColor(R.styleable.ProgressWheel_spinRimColor_progress,spinRimColor);\n  circleColor=(int)a.getColor(R.styleable.ProgressWheel_circleColor_progress,circleColor);\n  spinCircleColor=(int)a.getColor(R.styleable.ProgressWheel_spinCircleColor_progress,spinCircleColor);\n  barDegree=(int)a.getInteger(R.styleable.ProgressWheel_barDegree_progress,-1);\n}\n", "nl": "Parse the attributes passed to the view from the XML"}
{"code": "@POST @Path(\"applications/{applicationName}/experiments/{experimentLabel}/users/{userID}\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Submit a single event or a batch of events for the specified assigned user(customer)\",notes=\"*NOTE*: For a given user, please make sure that you have the user assignment done using the \" + \"assignments API before using this API. An event is either an impression, indicating the user \" + \"has been exposed to the treatment, or an action, indicating that the user has done something \"+ \"that you want to track. Please record impressions first and then action - use event \"+ \"name = \\\"IMPRESSION\\\" for impressions.\") @Timed public Response recordEvents(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@PathParam(\"experimentLabel\") @ApiParam(value=\"Experiment Label\") final Experiment.Label experimentLabel,@PathParam(\"userID\") @ApiParam(value=\"Customer User ID that is already assigned using assignments API\") final User.ID userID,@ApiParam(name=\"eventList\",required=true,value=\"For impression\",defaultValue=DEFAULT_EVENT) final EventList eventList) throws Exception {\n  final Date NOW=new Date();\n  Set<Context> contextSet=new HashSet<>();\n  for (  Event event : eventList.getEvents()) {\n    if (event.getTimestamp() == null) {\n      event.setTimestamp(NOW);\n    }\n    contextSet.add(event.getContext());\n    if (event.getName() == null || isBlank(event.getName().toString())) {\n      throw new IllegalArgumentException(\"Event name cannot be null or an empty string\");\n    }\n  }\n  events.recordEvents(applicationName,experimentLabel,userID,eventList,contextSet);\n  return httpHeader.headers(CREATED).build();\n}\n", "nl": "Submit events for the specified user within the context of a specific application and experiment. Each event is an impression or action. Example events structure \"events\": [ { \"timestamp\": \"...\", \"name\": \"...\" \"IMPRESSION\" for impressions anything else for action \"payload\": \"...\" json string (with escaped quotes). \"value\": ... null: binary action success number: continuous/counting action string: categorical action boolean: not currently used }"}
{"code": "public static synchronized List<Proxy> noProxyList(){\n  if (noProxyList == null) {\n    ArrayList<Proxy> list=new ArrayList<Proxy>(1);\n    list.add(Proxy.NO_PROXY);\n    noProxyList=Collections.unmodifiableList(list);\n  }\n  return noProxyList;\n}\n", "nl": "Gets an unmodifiable proxy list that will have as it's only entry an DIRECT proxy."}
{"code": "public synchronized void add(String name,long threadId){\n  if (mFinished) {\n    throw new IllegalStateException(\"Marker added to finished log\");\n  }\n  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));\n}\n", "nl": "Adds a marker to this log with the specified name."}
{"code": "@Override public void onConnectionCreated(Session session,Connection connection){\n  WritableMap payload=Arguments.createMap();\n  payload.putString(\"connectionId\",connection.getConnectionId());\n  payload.putString(\"creationTime\",connection.getCreationTime().toString());\n  payload.putString(\"data\",connection.getData());\n  sendEvent(Events.EVENT_CLIENT_CONNECTED,payload);\n}\n", "nl": "Connection listener"}
{"code": "public static void w(String tag,String msg){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg);\n}\n", "nl": "Send a WARNING log message"}
{"code": "public void init$Children(){\n  children=new ASTNode[4];\n  setChild(new List(),1);\n  setChild(new List(),2);\n  setChild(new Opt(),3);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public void remove(int id){\n  String name=id2name.get(id);\n  if (name != null)   name2id.remove(name);\n  id2name.remove(id);\n}\n", "nl": "remove an id from the map"}
{"code": "public void clearChanged(){\n  changed.set(false);\n}\n", "nl": "Clears the changed flag."}
{"code": "private void bindSession(){\n  SessionFactory sessionFactory=(SessionFactory)getBean(\"sessionFactory\");\n  Session session=sessionFactory.openSession();\n  TransactionSynchronizationManager.bindResource(sessionFactory,new SessionHolder(session));\n}\n", "nl": "Binds a Hibernate Session to the current thread."}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners"}
{"code": "public static boolean isEcKey(Key key){\n  return \"EC\".equals(key.getAlgorithm());\n}\n", "nl": "Returns true if the key is an elliptic curve public or private key."}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){\n  final int deltaValue, currentScrollValue, scrollValue;\nswitch (view.getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    deltaValue=deltaX;\n  scrollValue=scrollX;\ncurrentScrollValue=view.getScrollX();\nbreak;\ncase VERTICAL:\ndefault :\ndeltaValue=deltaY;\nscrollValue=scrollY;\ncurrentScrollValue=view.getScrollY();\nbreak;\n}\nif (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {\nfinal Mode mode=view.getMode();\nif (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {\nfinal int newScrollValue=(deltaValue + scrollValue);\nif (PullToRefreshBase.DEBUG) {\nLog.d(LOG_TAG,\"OverScroll. DeltaX: \" + deltaX + \", ScrollX: \"+ scrollX+ \", DeltaY: \"+ deltaY+ \", ScrollY: \"+ scrollY+ \", NewY: \"+ newScrollValue+ \", ScrollRange: \"+ scrollRange+ \", CurrentScroll: \"+ currentScrollValue);\n}\nif (newScrollValue < (0 - fuzzyThreshold)) {\nif (mode.showHeaderLoadingLayout()) {\nif (currentScrollValue == 0) {\nview.setState(State.OVERSCROLLING);\n}\nview.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));\n}\n}\n else if (newScrollValue > (scrollRange + fuzzyThreshold)) {\nif (mode.showFooterLoadingLayout()) {\nif (currentScrollValue == 0) {\nview.setState(State.OVERSCROLLING);\n}\nview.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));\n}\n}\n else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {\nview.setState(State.RESET);\n}\n}\n else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {\nview.setState(State.RESET);\n}\n}\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This is the advanced version of the call."}
{"code": "public EnumeratedRealDistribution(final double[] singletons,final double[] probabilities) throws MathIllegalArgumentException {\n  super();\n  innerDistribution=new EnumeratedDistribution<Double>(createDistribution(singletons,probabilities));\n}\n", "nl": "Create a discrete real-valued distribution using the given probability mass function enumeration."}
{"code": "private void rdp_decoding_rd(char[][] g_data,int disks,int stripe_unit_size,int w,int x,int y){\n  int packet_size=stripe_unit_size / w;\n  int ccount, count, rcount;\n  char[] rdata, xdata, ydata, row_data, diag_data;\n  int g, gx, gy, coffset, i, j, k, c;\n  int row_disk, diag_disk;\n  rcount=stripe_unit_size;\n  rdata=g_data[0];\n  xdata=g_data[x];\n  ydata=g_data[y];\n  gx=(x >= 3 ? x - 3 : pnumRdp - 1);\n  gy=(y >= 3 ? y - 3 : pnumRdp - 1);\n  row_disk=x;\n  diag_disk=y;\n  row_data=xdata;\n  diag_data=ydata;\n  g=gx;\n  while (true) {\n    if (g == pnumRdp - 1) {\n      if (gx == (row_disk >= 3 ? row_disk - 3 : row_disk + pnumRdp - 3)) {\n        row_disk=y;\n        diag_disk=x;\n        row_data=ydata;\n        diag_data=xdata;\n        g=gy;\n        continue;\n      }\n else       break;\n    }\n else {\n      int row_index;\n      char[] cdata;\n      int diag_count;\n      int row_count;\n      diag_count=stripe_unit_size;\n      row_count=stripe_unit_size;\n      row_index=(g - diag_disk + pnumRdp + 2) % pnumRdp;\n      coffset=(row_index + diag_disk - 2 + pnumRdp) % pnumRdp * packet_size;\n      cdata=g_data[1];\n      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && k < packet_size; i++, j++, k++) {\n        diag_data[i]=cdata[j];\n      }\n      for (c=2; c < (disks + 2); c++) {\n        if (c == diag_disk)         continue;\n        ccount=stripe_unit_size;\n        cdata=g_data[c];\n        coffset=(row_index + diag_disk - c + pnumRdp) % pnumRdp * packet_size;\n        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {\n          diag_data[i]^=cdata[j];\n        }\n      }\n      ccount=rcount;\n      cdata=rdata;\n      coffset=(row_index + diag_disk - 1 + pnumRdp) % pnumRdp * packet_size;\n      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {\n        diag_data[i]^=cdata[j];\n      }\n      coffset=row_index * packet_size;\n      for (c=2; c < (disks + 2); c++) {\n        if (c == row_disk)         continue;\n        ccount=stripe_unit_size;\n        cdata=g_data[c];\n        coffset=row_index * packet_size;\n        for (i=coffset, k=0; i < ccount && k < packet_size; i++, k++) {\n          row_data[i]^=cdata[i];\n        }\n      }\n      cdata=rdata;\n      coffset=row_index * packet_size;\n      count=row_count;\n      for (i=coffset, k=0; i < count && k < packet_size; i++, k++) {\n        row_data[i]^=cdata[i];\n      }\n      g=(row_index + row_disk - 2) % pnumRdp;\n    }\n  }\n}\n", "nl": "rdp decoding according r and d checkouts. x/y:  the first/second error disk in g_data"}
{"code": "public FastFourierTransformer(final DftNormalization normalization){\n  this.normalization=normalization;\n}\n", "nl": "Creates a new instance of this class, with various normalization conventions."}
{"code": "public void addCoreEquipmentConfigurationChanger(final long equipmentId,final ICoreEquipmentConfigurationChanger coreEquipmentConfigurationChanger){\n  List<ICoreEquipmentConfigurationChanger> changers=coreEquipmentConfigurationChangers.get(equipmentId);\n  if (changers == null) {\n    changers=new ArrayList<>();\n    coreEquipmentConfigurationChangers.put(equipmentId,changers);\n  }\n  changers.add(coreEquipmentConfigurationChanger);\n}\n", "nl": "Adds a core equipment configuration changer to the controller."}
{"code": "int baselineFrequency(int time){\n  if (time < startTime || time > endTime) {\n    throw new RuntimeException(\"Invalid time \" + time + \"(startTime \"+ startTime+ \", endTime \"+ endTime+ \")\");\n  }\n  return baseStart + (int)(baseSlope * (time - startTime));\n}\n", "nl": "Calculate the frequency of the baseline at time <code>time</code>. This is calculated as a linear function of baseStart, baseEnd and time."}
{"code": "@Override public int hashCode(){\n  return this.name.hashCode();\n}\n", "nl": "The equals and hashCode methods are imnplemented just case this object is ever accidently used as a Map key"}
{"code": "protected VideoReorderVideosQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the video."}
{"code": "public boolean testAttribute(String sldContentString,TreeSelectionData selectionData,FieldIdEnum field,XMLSetFieldAttribute testValue){\n  boolean passed=false;\n  Document doc=getXMLDocument(sldContentString);\n  String extractedString=getString(doc,selectionData,field,XPATH_CHILD_ELEMENT_VALUE);\n  String valueToTest=testValue.getAttribute();\n  passed=(valueToTest.compareTo(extractedString) == 0);\n  System.out.println(\"Checking : \" + field + \" \"+ extractedString+ \" \"+ (passed ? \"PASS\" : \"FAIL\"));\n  return passed;\n}\n", "nl": "Test attribute."}
{"code": "public void processUtterance(Utterance utterance) throws ProcessException {\n  String silence=utterance.getVoice().getFeatures().getString(Voice.FEATURE_SILENCE);\n  Item phraseHead=utterance.getRelation(Relation.PHRASE).getHead();\n  if (phraseHead == null) {\n    return;\n  }\n  Relation segment=utterance.getRelation(Relation.SEGMENT);\n  Item s=segment.getHead();\n  if (s == null) {\n    s=segment.appendItem(null);\n  }\n else {\n    s=s.prependItem(null);\n  }\n  s.getFeatures().setString(\"name\",silence);\n  for (Item phrase=phraseHead; phrase != null; phrase=phrase.getNext()) {\n    Item word=phrase.getLastDaughter();\n    while (word != null) {\n      Item seg=segmentPath.findItem(word);\n      if (seg != null) {\n        Item pause=seg.appendItem(null);\n        pause.getFeatures().setString(\"name\",silence);\n        break;\n      }\n      word=word.getPrevious();\n    }\n  }\n}\n", "nl": "Annotates an utterance with pause information."}
{"code": "public static String version(){\n  return version;\n}\n", "nl": "The version of the project."}
{"code": "private void bringToBodies(SootClass sc){\n  if (sc.resolvingLevel() >= SootClass.BODIES)   return;\n  bringToSignatures(sc);\n  if (Options.v().debug_resolver())   G.v().out.println(\"bringing to BODIES: \" + sc);\n  sc.setResolvingLevel(SootClass.BODIES);\n{\n    Collection<Type> references=classToTypesHierarchy.get(sc);\n    if (references != null) {\n      Iterator<Type> it=references.iterator();\n      while (it.hasNext()) {\n        final Type t=it.next();\n        addToResolveWorklist(t,SootClass.HIERARCHY);\n      }\n    }\n  }\n{\n    Collection<Type> references=classToTypesSignature.get(sc);\n    if (references != null) {\n      Iterator<Type> it=references.iterator();\n      while (it.hasNext()) {\n        final Type t=it.next();\n        addToResolveWorklist(t,SootClass.SIGNATURES);\n      }\n    }\n  }\n}\n", "nl": "Bodies - we can now start loading the bodies of methods for all referred to methods and fields in the bodies, requires signatures for the method receiver and field container, and hierarchy for all other classes referenced in method references. Current implementation does not distinguish between the receiver and other references. Therefore, it is conservative and brings all of them to signatures. But this could/should be improved."}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public GuiControllerSettings(){\n  title=\"\";\n  resizeable=true;\n  maximized=false;\n  stageStyle=StageStyle.DECORATED;\n  changeToPrimaryStage=true;\n}\n", "nl": "Instantiate a GuiControllerSettings with the default value."}
{"code": "public boolean isSetLoadInfo(){\n  return this.loadInfo != null;\n}\n", "nl": "Returns true if field loadInfo is set (has been assigned a value) and false otherwise"}
{"code": "public ZWaveAlarmCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){\n  super(node,controller,endpoint);\n  versionMax=MAX_SUPPORTED_VERSION;\n}\n", "nl": "Creates a new instance of the ZWaveAlarmCommandClass class."}
{"code": "public void save() throws IOException {\n  if (myFilename == null) {\n    throw new IOException(\"No filename specified for PreferenceStore.\");\n  }\n  if (myChanged) {\n    FileOutputStream out=new FileOutputStream(myFilename);\n    try {\n      save(out,null);\n      myChanged=false;\n    }\n  finally {\n      out.close();\n    }\n  }\n}\n", "nl": "Save the current store if any value has changed since the last load."}
{"code": "public XMLStreamException(String msg,Location location,Throwable th){\n  super(\"ParseError at [row,col]:[\" + location.getLineNumber() + \",\"+ location.getColumnNumber()+ \"]\\n\"+ \"Message: \"+ msg);\n  nested=th;\n  this.location=location;\n}\n", "nl": "Construct an exception with the assocated message, exception and location."}
{"code": "public SuffixFSM(URL url) throws IOException {\n  super(url,false);\n}\n", "nl": "Constructs a SuffixFSM."}
{"code": "@Override public void write(byte[] b,int off,int len){\n  if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return;\n  }\n  int newcount=ensureCapacity(len);\n  System.arraycopy(b,off,buf,count,len);\n  count=newcount;\n}\n", "nl": "Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream."}
{"code": "public void showLoading(){\n  switchState(LOADING,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide content and show the progress bar"}
{"code": "public static EditShareFragment newInstance(OCShare shareToEdit,OCFile sharedFile,Account account){\n  EditShareFragment fragment=new EditShareFragment();\n  Bundle args=new Bundle();\n  args.putParcelable(ARG_SHARE,shareToEdit);\n  args.putParcelable(ARG_FILE,sharedFile);\n  args.putParcelable(ARG_ACCOUNT,account);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Public factory method to create new EditShareFragment instances."}
{"code": "public static SM_SYSTEM_MESSAGE STR_ABYSS_CHANGE_RANK(String value0){\n  return new SM_SYSTEM_MESSAGE(1390232,value0);\n}\n", "nl": "Your Abyss Rank has changed to %0."}
{"code": "public static boolean sectionLike(Item tokenItem){\n  String sectionType=((String)tokenItem.findFeature(\"p.name\")).toLowerCase();\n  return inKingSectionLikeHash(sectionType,SECTION_TYPES);\n}\n", "nl": "Returns true if the given token item contains a token that is in a section-like context, e.g., \"chapter\" or \"act\"."}
{"code": "public boolean startTheRoomGame(String clientName,boolean setReady){\n  for (  Client client : roomClients)   if (client.getClientName().equals(clientName))   client.setGameStartSet(setReady);\n  for (  Client client : roomClients)   if (client.isGameStartSet() == false)   return false;\n  if (Settings.nGameCatchMe == getGameType()) {\n    for (    Client client : roomClients) {\n      String query;\n      client.getCatchMe().setPlayTimes(client.getCatchMe().getPlayTimes() + 1);\n      try {\n        query=\"update catchme set playtimes =\" + client.getCatchMe().getPlayTimes() + \" where id='\"+ client.getClientName()+ \"'\";\n        stmt.executeUpdate(query);\n      }\n catch (      SQLException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n else   if (Settings.nGameTicTacToc == getGameType()) {\n    for (    Client client : roomClients) {\n      String query;\n      System.out.println(client.getTicTacToc().getPlayTimes());\n      client.getTicTacToc().setPlayTimes(client.getTicTacToc().getPlayTimes() + 1);\n      try {\n        query=\"update tictactoc set playtimes =\" + client.getTicTacToc().getPlayTimes() + \" where id='\"+ client.getClientName()+ \"'\";\n        System.out.println(client.getTicTacToc().getPlayTimes() + \" testing\");\n        stmt.executeUpdate(query);\n      }\n catch (      SQLException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n else   if (Settings.nGameMeteorGame == getGameType()) {\n    for (    Client client : roomClients) {\n      String query;\n      client.getMeteor().setPlayTimes(client.getMeteor().getPlayTimes() + 1);\n      try {\n        query=\"update meteor set playtimes =\" + client.getMeteor().getPlayTimes() + \" where id='\"+ client.getClientName()+ \"'\";\n        stmt.executeUpdate(query);\n      }\n catch (      SQLException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n else   if (Settings.nGamePangPang == getGameType()) {\n    for (    Client client : roomClients) {\n      String query;\n      client.getPangPang().setPlayTimes(client.getPangPang().getPlayTimes() + 1);\n      try {\n        query=\"update pangpang set playtimes =\" + client.getPangPang().getPlayTimes() + \" where id='\"+ client.getClientName()+ \"'\";\n        stmt.executeUpdate(query);\n      }\n catch (      SQLException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n  setGameRunning(true);\n  if (Settings.nGameMeteorGame == getGameType())   initMeteorGameWhenConditionStart();\n else   if (Settings.nGamePangPang == getGameType())   initPangPangWhenConditionStart();\n else   roomClients.get(playTokenPositionNumber).setPlayToken(true);\n  return true;\n}\n", "nl": "this method is called when client click the game start button"}
{"code": "public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){\n  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);\n}\n", "nl": "Manage attack status rate"}
{"code": "@Override public boolean hasIntercept(){\n  return hasIntercept;\n}\n", "nl": "Returns true if the model includes an intercept term."}
{"code": "public static int ushortToInt(short s){\n  return s & MAX_USHORT;\n}\n", "nl": "Returns an integer with the unsigned value of the given short."}
{"code": "public static void showProfile(Fragment fragment,String pilotId,@Nullable HashMap<String,String> extras){\n  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {\n    pilotId=AirMap.getUserId();\n  }\n  Intent intent=new Intent(fragment.getActivity(),ProfileActivity.class);\n  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);\n  if (extras != null) {\n    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);\n  }\n  fragment.startActivity(intent);\n}\n", "nl": "Display the authenticated pilot's profile"}
{"code": "public void testBoundaryEventSubscrptionsDeletedOnProcessInstanceDelete(){\n  String deploymentId1=deployBoundaryMessageTestProcess();\n  runtimeService.startProcessInstanceByKeyAndTenantId(\"messageTest\",TENANT_ID);\n  assertEquals(\"My Task\",taskService.createTaskQuery().singleResult().getName());\n  String deploymentId2=deployBoundaryMessageTestProcess();\n  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKeyAndTenantId(\"messageTest\",TENANT_ID);\n  assertEquals(2,taskService.createTaskQuery().count());\n  assertEquals(2,getAllEventSubscriptions().size());\n  runtimeService.deleteProcessInstance(processInstance2.getId(),\"testing\");\n  assertEquals(\"My Task\",taskService.createTaskQuery().singleResult().getName());\n  assertEquals(1,getAllEventSubscriptions().size());\n  runtimeService.messageEventReceived(\"myMessage\",getExecutionIdsForMessageEventSubscription(\"myMessage\").get(0));\n  assertEquals(0,getAllEventSubscriptions().size());\n  assertEquals(\"Task after message\",taskService.createTaskQuery().singleResult().getName());\n  cleanup(deploymentId1,deploymentId2);\n}\n", "nl": "Verifying that the event subscriptions do get removed when removing a process instance."}
{"code": "public static ArrayList<CompanyInfo.Company> searchCompany(String keyword){\n  keyword=ZHConverter.convert(keyword,ZHConverter.SIMPLIFIED);\n  ArrayList<CompanyInfo.Company> src=new ArrayList<>();\n  if (keyword != null && keyword.trim().length() > 0) {\n    for (int i=0; i < CompanyInfo.info.size(); i++) {\n      if (!CompanyInfo.names[i].contains(keyword) && !CompanyInfo.pinyin[i].contains(keyword)) {\n        continue;\n      }\n      src.add(CompanyInfo.info.get(i));\n    }\n  }\n else {\n    return CompanyInfo.info;\n  }\n  return src;\n}\n", "nl": "Filter companies by keyword"}
{"code": "public double[] breadthFirstSearch(double intialValue,double firstValue,IBFSTraversable<N> traversable,IDoubleBfsNextLevelValueIterator<N> nextValueIterator,List<Integer> sources){\n  double[] results=new double[nodes.length];\n  Arrays.fill(results,intialValue);\n  boolean[] alreadyScanned=new boolean[nodes.length];\n  Arrays.fill(alreadyScanned,false);\n  Set<Integer> currentNodesIndex=new HashSet<>(sources);\n  iterativeDoubleBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);\n  return results;\n}\n", "nl": "Breadth-first search implementation on your graph. It will iteratively: assign current level value to all source nodes scan source nodes neighbor to find the reachable nodes that have not been reached yet Compute next level value and consider all the reachable neighbors as the new source nodes Note: sadly I did not find a way to template this method as I would do in C++ without degrading performances. So I must implement it also for int..."}
{"code": "public void defaultCase(Object object){\n  throw new RuntimeException(\"Internal error: \" + object + \" unhandled case.\");\n}\n", "nl": "No default case, we implement explicit handling for each situation."}
{"code": "private static ColumnType selectType(List<ColumnType> typeCandidates){\n  if (typeCandidates.isEmpty()) {\n    return CATEGORY;\n  }\n else {\n    return typeCandidates.get(0);\n  }\n}\n", "nl": "Returns the selected candidate for a column of data, by picking the first value in the given list"}
{"code": "public static long readVLong(byte[] bytes,int start) throws IOException {\n  return WritableComparator.readVLong(bytes,start);\n}\n", "nl": "Reads a zero-compressed encoded long from a byte array and returns it."}
{"code": "@Override public void mark(int readAheadLimit) throws IOException {\n  fInputStream.mark(readAheadLimit);\n}\n", "nl": "Mark the present position in the stream.  Subsequent calls to reset() will attempt to reposition the stream to this point.  Not all character-input streams support the mark() operation."}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.teams"}
{"code": "public void swapItems(List<T> items){\n  this.items=items;\n  notifyDataSetChanged();\n}\n", "nl": "Swaps the current list of items in this adapter with a new list."}
{"code": "@Override public void start(){\n  m_line.start();\n  super.start();\n}\n", "nl": "Starts the recording. To accomplish this, (i) the line is started and (ii) the thread is started."}
{"code": "private String generateReportTableHtml(ReportTable reportTable,User user){\n  StringWriter stringWriter=new StringWriter();\n  GridUtils.toHtmlInlineCss(reportTableService.getReportTableGridByUser(reportTable.getUid(),new Date(),user.getOrganisationUnit().getUid(),user),stringWriter);\n  return stringWriter.toString().replaceAll(\"\\\\R\",\"\");\n}\n", "nl": "Builds a HTML table representing the ReportTable input"}
{"code": "public GSObjectMessageImpl(GSSessionImpl session,Serializable objBody) throws JMSException {\n  super(session,GSMessageImpl.OBJECT);\n  setObject(objBody);\n}\n", "nl": "Instantiates a new <code>GSObjectMessageImpl</code>."}
{"code": "private void updateFixutreFilterMask(int mask){\n  Filter filter=bodyFixture.getFilter();\n  if (filter == Filter.DEFAULT_FILTER) {\n    CategoryFilter cf=new CategoryFilter(Integer.MAX_VALUE,mask);\n    bodyFixture.setFilter(cf);\n  }\n else {\n    CategoryFilter cf=new CategoryFilter(((CategoryFilter)filter).getCategory(),mask);\n    bodyFixture.setFilter(cf);\n  }\n}\n", "nl": "Updates the fixture's filter with the respective mask value."}
{"code": "public T[] computeDerivatives(final T t,final T[] y) throws MathIllegalArgumentException, MathIllegalStateException, NullPointerException {\n  evaluations.increment();\n  return equations.computeDerivatives(t,y);\n}\n", "nl": "Compute the derivatives and check the number of evaluations."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PAY_DISTRIBUTE(long highestValue,int num2,long distributeKinah){\n  return new SM_SYSTEM_MESSAGE(1390187,highestValue,num2,distributeKinah);\n}\n", "nl": "%num0 Kinah is distributed %num2 Kinah each to %1 members."}
{"code": "public void handleRollbackSA(RollbackBusPacket packet) throws SAException {\n  Context context=null;\n  ISAdapterIterator iter=null, entriesIter=null;\n  ILockObject templateLock=null, entryLock=null;\n  final XtnEntry xtnEntry=packet._xtnEntry;\n  final XtnData pXtn=xtnEntry.getXtnData();\n  try {\n    context=_cacheManager.getCacheContext();\n    try {\n      iter=_cacheManager.makeUnderXtnTemplatesIter(context,xtnEntry);\n      if (iter != null) {\n        while (true) {\n          ITemplateHolder template=(ITemplateHolder)iter.next();\n          if (template == null)           break;\n          try {\n            templateLock=getTemplateLockObject(template);\nsynchronized (templateLock) {\n              if (template.isDeleted())               continue;\n              if (template.isExpired(xtnEntry.m_CommitRollbackTimeStamp))               context.setOperationAnswer(template,null,null);\n else               context.setOperationAnswer(template,null,new TransactionException(\"Transaction not active : \" + xtnEntry.m_Transaction));\n              _cacheManager.removeTemplate(context,template,false,true,false);\n            }\n          }\n  finally {\n            if (templateLock != null)             freeTemplateLockObject(templateLock);\n          }\n        }\n      }\n    }\n  finally {\n      if (iter != null)       iter.close();\n    }\n    _engine.getFifoGroupsHandler().handleNeedFgOnlyScanOnXtnEnd(context,xtnEntry);\n    try {\n      entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_ENTRIES,true);\n      if (entriesIter != null) {\n        Collection<ITemplateHolder> wf=null;\n        ENTRY_LOOP:         while (true) {\n          IEntryCacheInfo entryCacheHolder=(IEntryCacheInfo)entriesIter.next();\n          if (entryCacheHolder == null)           break ENTRY_LOOP;\n          IEntryHolder entry=_cacheManager.getEntryFromCacheHolder(entryCacheHolder);\n          if (entry == null)           continue ENTRY_LOOP;\n          if ((_cacheManager.isMemorySpace() || _cacheManager.isResidentEntriesCachePolicy()) && entry.isDeleted())           continue ENTRY_LOOP;\n          boolean entry_has_wf=false;\n          try {\n            entryLock=getEntryLockObject(entry);\nsynchronized (entryLock) {\n              IEntryHolder eh=_cacheManager.getEntry(context,entry,true,true,true);\n              if (eh == null || eh.isDeleted())               continue ENTRY_LOOP;\n              if (!entry.isSameEntryInstance(eh) && _cacheManager.getLockManager().isPerLogicalSubjectLockObject(_cacheManager.isEvictableCachePolicy()))               continue ENTRY_LOOP;\n              entry=eh;\n              boolean updatedEntry=pXtn.isUpdatedEntry(entry);\n              _cacheManager.disconnectEntryFromXtn(context,entry,xtnEntry,true);\n              if (entry.isExpired(xtnEntry.m_CommitRollbackTimeStamp) && !entry.isEntryUnderWriteLockXtn()) {\n                if (!_engine.isExpiredEntryStayInSpace(entry) && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp))) {\n                  if (entry.isOffHeapEntry())                   _cacheManager.getEntry(context,entry,true,true,true);\n                  IServerTypeDesc typeDesc=_engine.getTypeManager().getServerTypeDesc(entry.getClassName());\n                  _engine.removeEntrySA(context,entry,typeDesc,false,true,SpaceEngine.EntryRemoveReasonCodes.LEASE_EXPIRED,false,false,false);\n                  continue ENTRY_LOOP;\n                }\n              }\n              if (updatedEntry && entry.isHasWaitingFor())               _engine.checkWFValidityAfterUpdate(context,entry);\n              if (entry.isHasWaitingFor()) {\n                entry_has_wf=true;\n                wf=entry.getCopyOfTemplatesWaitingForEntry();\n              }\n            }\n          }\n  finally {\n            if (entryLock != null)             freeEntryLockObject(entryLock);\n            entryLock=null;\n          }\n          if (entry_has_wf && wf != null) {\n            TEMPLATE_LOOP:             for (            ITemplateHolder template : wf) {\n              if (template.isDeleted()) {\n                handleRemoveWaitingForInfoSA_EntryBased(context,entry,template);\n                continue TEMPLATE_LOOP;\n              }\n              if (template.isFifoTemplate())               continue TEMPLATE_LOOP;\n              try {\n                _engine.performTemplateOnEntrySA(context,template,entry,true);\n              }\n catch (              TransactionConflictException ex) {\n                continue TEMPLATE_LOOP;\n              }\ncatch (              TemplateDeletedException ex) {\n                continue TEMPLATE_LOOP;\n              }\ncatch (              NoMatchException ex) {\n                continue TEMPLATE_LOOP;\n              }\ncatch (              FifoException ex) {\n                continue TEMPLATE_LOOP;\n              }\ncatch (              TransactionNotActiveException ex) {\n                continue TEMPLATE_LOOP;\n              }\ncatch (              EntryDeletedException ex) {\n                continue ENTRY_LOOP;\n              }\ncatch (              RuntimeException ex) {\n                after_xtn_activity_error(context,template,ex,false);\n                continue ENTRY_LOOP;\n              }\n            }\n          }\n          try {\n            _engine.touchLastEntryTimestamp();\n            _engine.getTemplateScanner().scanNonNotifyTemplates(context,entry,null,FifoSearch.NO,FifoGroupsSearch.NO);\n          }\n catch (          EntryDeletedException ex) {\n            continue ENTRY_LOOP;\n          }\n        }\n      }\n    }\n  finally {\n      if (entriesIter != null)       entriesIter.close();\n    }\n    _engine.getTransactionHandler().removeTransactionAfterEnd(xtnEntry);\n  }\n  finally {\n    _cacheManager.freeCacheContext(context);\n  }\n}\n", "nl": "Handles rollback SA."}
{"code": "public static SM_SYSTEM_MESSAGE STR_IS_NOT_WILLING_TO_RECEIVE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300382,value0);\n}\n", "nl": "%0 is currently refusing to accept items."}
{"code": "public static String simpleHostname(String fullHostname){\n  int offset=fullHostname.indexOf('.');\n  if (offset != -1) {\n    return fullHostname.substring(0,offset);\n  }\n  return fullHostname;\n}\n", "nl": "Given a full hostname, return the word upto the first dot."}
{"code": "public void checkAndHide(){\n  if ((hideRequested() && mouseFurtherThan(5)) || (mouseFurtherThan(15))) {\n    hideTooltip();\n  }\n}\n", "nl": "Checks if the tooltip should be hidden, and if so, does it."}
{"code": "public ResponseListener() throws IOException {\n  super(\"GS-multicast-discovery-response-listener\");\n  setDaemon(true);\n  serv=new ServerSocket(0,100,InetAddress.getByName(SystemInfo.singleton().network().getHostId()));\n}\n", "nl": "Create a daemon thread"}
{"code": "Offset(Point drag,Point drop){\n  this.x=drop.getX() - drag.getX();\n  this.y=drop.getY() - drag.getY();\n}\n", "nl": "Distance and direction from point drag to point drop in two-dimensional plane"}
{"code": "private View fillFromTop(int nextTop){\n  mFirstPosition=Math.min(mFirstPosition,-1);\n  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);\n  if (mFirstPosition < 0) {\n    mFirstPosition=0;\n  }\n  return fillDown(mFirstPosition,nextTop);\n}\n", "nl": "Fills the list from top to bottom, starting with mFirstPosition"}
{"code": "public void dump(){\n  System.out.println(\"Diphone: \" + name);\n  System.out.println(\"    MP : \" + midPoint);\n  for (int i=0; i < samples.length; i++) {\n    samples[i].dump();\n  }\n}\n", "nl": "dumps out this Diphone."}
{"code": "public GenomicCoords goToNextFeatureOnFile(String trackId,GenomicCoords currentGc,double slop) throws InvalidGenomicCoordsException, IOException, InvalidCommandLineException {\n  Track tr=matchIntervalFeatureTrack(trackId.trim());\n  if (tr == null) {\n    return currentGc;\n  }\n  TrackIntervalFeature tif=(TrackIntervalFeature)tr;\n  if (slop < 0) {\n    return tif.getIntervalFeatureSet().coordsOfNextFeature(currentGc);\n  }\n else {\n    GenomicCoords featureGc=tif.getIntervalFeatureSet().startEndOfNextFeature(currentGc);\n    if (featureGc.equalCoords(currentGc)) {\n      return currentGc;\n    }\n else {\n      featureGc.centerAndExtendGenomicCoords(featureGc,featureGc.getGenomicWindowSize(),slop);\n      return featureGc;\n    }\n  }\n}\n", "nl": "Go to the next feature on trackId given the current GenomicCoordinates.  If slop is > 0, the output coordinates are centered on the feature and extended slop times the size of the feature left and right. With slop= 0 the coordinates  are exactly spanning the feature. With slop < 0 the output coordinates have  the feature right at the start."}
{"code": "DataSourceProvider(){\n}\n", "nl": "Creates new instance of DataSourceProvider."}
{"code": "@Override protected void configurePipeline(){\n  super.configurePipeline();\n  if (fXIncludeEnabled) {\n    if (fXIncludeHandler == null) {\n      fXIncludeHandler=new XIncludeHandler();\n      setProperty(XINCLUDE_HANDLER,fXIncludeHandler);\n      addCommonComponent(fXIncludeHandler);\n      fXIncludeHandler.reset(this);\n    }\n    if (fCurrentNSContext != fXIncludeNSContext) {\n      if (fXIncludeNSContext == null) {\n        fXIncludeNSContext=new XIncludeNamespaceSupport();\n      }\n      fCurrentNSContext=fXIncludeNSContext;\n      setProperty(NAMESPACE_CONTEXT,fXIncludeNSContext);\n    }\n    fDTDScanner.setDTDHandler(fDTDProcessor);\n    fDTDProcessor.setDTDSource(fDTDScanner);\n    fDTDProcessor.setDTDHandler(fXIncludeHandler);\n    fXIncludeHandler.setDTDSource(fDTDProcessor);\n    fXIncludeHandler.setDTDHandler(fDTDHandler);\n    if (fDTDHandler != null) {\n      fDTDHandler.setDTDSource(fXIncludeHandler);\n    }\n    XMLDocumentSource prev=null;\n    if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {\n      prev=fSchemaValidator.getDocumentSource();\n    }\n else {\n      prev=fLastComponent;\n      fLastComponent=fXIncludeHandler;\n    }\n    XMLDocumentHandler next=prev.getDocumentHandler();\n    prev.setDocumentHandler(fXIncludeHandler);\n    fXIncludeHandler.setDocumentSource(prev);\n    if (next != null) {\n      fXIncludeHandler.setDocumentHandler(next);\n      next.setDocumentSource(fXIncludeHandler);\n    }\n  }\n else {\n    if (fCurrentNSContext != fNonXIncludeNSContext) {\n      fCurrentNSContext=fNonXIncludeNSContext;\n      setProperty(NAMESPACE_CONTEXT,fNonXIncludeNSContext);\n    }\n  }\n}\n", "nl": "Configures the pipeline."}
{"code": "protected boolean raycast(Vector2 start,double length,double invDx,double invDy,AABB aabb){\n  double tx1=(aabb.getMinX() - start.x) * invDx;\n  double tx2=(aabb.getMaxX() - start.x) * invDx;\n  double tmin=Math.min(tx1,tx2);\n  double tmax=Math.max(tx1,tx2);\n  double ty1=(aabb.getMinY() - start.y) * invDy;\n  double ty2=(aabb.getMaxY() - start.y) * invDy;\n  tmin=Math.max(tmin,Math.min(ty1,ty2));\n  tmax=Math.min(tmax,Math.max(ty1,ty2));\n  if (tmax < 0)   return false;\n  if (tmin > length)   return false;\n  return tmax >= tmin;\n}\n", "nl": "Returns true if the ray and AABB intersect. <p/> This method is ideally called for a number of AABBs where the invDx and invDy can be computed once."}
{"code": "public static String guessBuildSystemName(){\n  Project project=guessCurrentProject();\n  return buildSystemName(project);\n}\n", "nl": "Tries to guess the current project, and uses that to determine the build system name.<br> Should only be used in situations where the current project is not accessible."}
{"code": "public WebappUrlBar(Context context,AttributeSet attrSet){\n  super(context,attrSet);\n  mIconResourceWidths=new SparseIntArray();\n  mUrlBar=new TextView(context);\n  mUrlBar.setSingleLine(true);\n  mUrlBar.setGravity(Gravity.CENTER_VERTICAL);\n  mUrlBar.setMovementMethod(ScrollingMovementMethod.getInstance());\n  mUrlBar.setHorizontalFadingEdgeEnabled(true);\n  mSeparator=new View(context);\n  addView(mUrlBar,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.CENTER));\n  addView(mSeparator,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,1,Gravity.BOTTOM));\n  mSeparator.setBackgroundColor(ApiCompatibilityUtils.getColor(context.getResources(),R.color.webapp_url_bar_separator));\n  setBackgroundColor(ApiCompatibilityUtils.getColor(context.getResources(),R.color.webapp_url_bar_bg));\n  mUrlBar.addOnLayoutChangeListener(this);\n}\n", "nl": "Creates a WebappUrlBar."}
{"code": "public void reset(byte[] buf){\n  if (buf != null) {\n    reset(buf,0,buf.length);\n  }\n else {\n    clear();\n  }\n}\n", "nl": "reset values"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> pathAny(String path,ISpacePredicate... predicates){\n  return path(path,any(predicates));\n}\n", "nl": "Shortcut for path(path, any(predicates))."}
{"code": "public static int dip2px(Context context,float dpValue){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n", "nl": "convert dip to px"}
{"code": "BinarySearchTreeNode<E> contains(BinarySearchTreeNode<E> node,E comparable){\n  while (node != null) {\n    E nodeData=node.comparable;\n    int diff=comparable.compareTo(nodeData);\n    if (diff == 0) {\n      if (node.comparable.equals(comparable)) {\n        return node;\n      }\n else {\n        return null;\n      }\n    }\n else     if (diff < 0) {\n      node=node.left;\n    }\n else {\n      node=node.right;\n    }\n  }\n  return null;\n}\n", "nl": "Internal iterative method to find an item in the tree."}
{"code": "public LazyArray(String raw) throws LazyException {\n  LazyParser parser=new LazyParser(raw);\n  parser.tokenize();\n  if (parser.root.type != LazyNode.ARRAY) {\n    throw new LazyException(\"JSON Array must start with [\",0);\n  }\n  root=parser.root;\n  cbuf=parser.cbuf;\n}\n", "nl": "Create a new Lazy JSON array based on the JSON representation in the given string."}
{"code": "public String[] upload_appender_file(String group_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,null,null,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);\n}\n", "nl": "upload appender file to storage server (by file buff)"}
{"code": "void fling(float velocityAngle){\n  mMode=FLING_MODE;\n  mFinished=false;\n  float velocity=velocityAngle;\n  mVelocity=velocity;\n  mDurationMillis=(int)(250.0f * Math.sqrt(2.0f * mCoeffVelocity * Math.abs(velocity) / DECELERATION));\n  mStartMillis=AnimationUtils.currentAnimationTimeMillis();\n}\n", "nl": "Start scrolling based on a fling gesture. The distance traveled will depend on the initial velocity of the fling."}
{"code": "private static void addAllComplexTypeChildren(CarbonDimension dimension,StringBuilder dimString,String parent){\n  dimString.append(dimension.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + dimension.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ parent+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColumnId()+ CarbonCommonConstants.HASH_SPC_CHARACTER);\n  for (int i=0; i < dimension.getNumberOfChild(); i++) {\n    CarbonDimension childDim=dimension.getListOfChildDimensions().get(i);\n    if (childDim.getNumberOfChild() > 0) {\n      addAllComplexTypeChildren(childDim,dimString,dimension.getColName());\n    }\n else {\n      dimString.append(childDim.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + childDim.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColName()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getColumnId()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getOrdinal()+ CarbonCommonConstants.HASH_SPC_CHARACTER);\n    }\n  }\n}\n", "nl": "This method will return all the child dimensions under complex dimension"}
{"code": "public LogicalMetric(TemplateDruidQuery templateDruidQuery,ResultSetMapper calculation,String name){\n  this(templateDruidQuery,calculation,name,name,DEFAULT_CATEGORY,name);\n}\n", "nl": "Build a partly specified Logical Metric. <p> Note: The description is set to the same as the name."}
{"code": "private void checkIndex(final int index) throws MathIllegalArgumentException {\n  if (index < 0 || index >= getDimension()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX,index,0,getDimension() - 1);\n  }\n}\n", "nl": "Check if an index is valid."}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANT_EQUIP(String value0){\n  return new SM_SYSTEM_MESSAGE(1300386,value0);\n}\n", "nl": "You cannot equip %0."}
{"code": "private void persistNewTemp(File fileCfg){\n  if (hsDeleteOnExit.size() == 0) {\n    logDebug(LogArea.CONFIG,\"No temp file names to persist on exit.\");\n    fileCfg.delete();\n    return;\n  }\n  logDebug(LogArea.CONFIG,\"Persisting %d temp file names into %s\",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());\n  BufferedWriter writer=null;\n  try {\n    writer=new BufferedWriter(new FileWriter(fileCfg));\n    for (    File file : hsDeleteOnExit) {\n      if (!file.delete()) {\n        String f=file.getCanonicalPath();\n        writer.write(f);\n        writer.newLine();\n        logWarn(LogArea.JAR,\"JVM failed to release %s\",f);\n      }\n    }\n  }\n catch (  IOException e) {\n  }\n finally {\n    if (writer != null) {\n      try {\n        writer.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}\n", "nl": "Creates file with temporary files list. This list will be used to delete temporary files on the next application launch. The method is called from shutdown()."}
{"code": "public ZeroException(Localizable specific,Object... arguments){\n  super(specific,INTEGER_ZERO,arguments);\n}\n", "nl": "Construct the exception with a specific context."}
{"code": "public E peek(){\n  for (; ; ) {\n    Node<E> node=top.get();\n    if (node == null) {\n      return null;\n    }\n    E e=node.get();\n    if (e == null) {\n      top.compareAndSet(node,node.next);\n    }\n else {\n      return e;\n    }\n  }\n}\n", "nl": "Retrieves, but does not remove, the top of the stack (in other words, the last element pushed), or returns <tt>null</tt> if this stack is empty."}
{"code": "public PolynomialFunction negate(){\n  double[] newCoefficients=new double[coefficients.length];\n  for (int i=0; i < coefficients.length; ++i) {\n    newCoefficients[i]=-coefficients[i];\n  }\n  return new PolynomialFunction(newCoefficients);\n}\n", "nl": "Negate the instance."}
{"code": "public PhotosGetAlbumsQuery(VkApiClient client){\n  super(client,\"photos.getAlbums\",GetAlbumsResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static synchronized boolean prepareDirectory(File directory){\n  if (directory.exists())   return true;\n  directory.mkdirs();\n  return directory.exists();\n}\n", "nl": "Tries to create the directory incl. all super directories, returns true if at the end of the operation the directory exists."}
{"code": "@Override protected Expression generateExpression(){\n  Expression expression=getFilterFactory().literal(getStringValue());\n  return expression;\n}\n", "nl": "Generate expression."}
{"code": "public void draw(Graphics2D gc,Dimension size){\n  if (doc.getNumberOfSamples() > 1) {\n    boolean vertical=viewer.getShowLegend().equals(\"vertical\");\n    gc.setFont(getFont());\n    boolean doDraw=(size == null);\n    int yStart=20;\n    int x=3;\n    int maxX=x;\n    if (doDraw) {\n      String legend=\"Legend:\";\n      gc.setColor(Color.BLACK);\n      gc.drawString(legend,x,yStart);\n      Dimension labelSize=Basic.getStringSize(gc,legend,gc.getFont()).getSize();\n      maxX=Math.max(maxX,labelSize.width);\n    }\n    int y=yStart + (int)(1.5 * gc.getFont().getSize());\n    Set<String> samples=new HashSet<>();\n    samples.addAll(doc.getSampleNames());\n    if (viewer.getGraphView() != null) {\n      for (Node v=viewer.getGraphView().getGraph().getFirstNode(); v != null; v=v.getNext()) {\n        String sampleName=((PhyloTree)viewer.getGraphView().getGraph()).getLabel(v);\n        if (sampleName != null && samples.contains(sampleName)) {\n          String label=doc.getSampleLabelGetter().getLabel(sampleName);\n          if (!label.equals(sampleName))           label+=\" (\" + sampleName + \")\";\n          final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();\n          int boxSize=labelSize.height - 2;\n          if (x + boxSize + labelSize.width+ 2 > getWidth() || vertical) {\n            x=3;\n            y+=1.5 * gc.getFont().getSize();\n          }\n          if (doDraw) {\n            final Image image=GraphicsUtilities.makeSampleIconSwing(doc,sampleName,true,true,boxSize + 1);\n            gc.drawImage(image,x,y - boxSize,this);\n            gc.setColor(getFontColor());\n            gc.drawString(label,x + boxSize + 2,y);\n          }\n          maxX=Math.max(maxX,x);\n          x+=boxSize + 2 + labelSize.width+ 10;\n          if (vertical)           maxX=Math.max(maxX,x);\n        }\n        if (size != null)         size.setSize(maxX,y);\n      }\n    }\n  }\n}\n", "nl": "draw a legend for sample colors"}
{"code": "public static ShoppingCart makeShoppingListCart(ShoppingCart listCart,LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){\n  Delegator delegator=dispatcher.getDelegator();\n  if (shoppingList != null && shoppingList.get(\"productStoreId\") != null) {\n    String productStoreId=shoppingList.getString(\"productStoreId\");\n    String currencyUom=shoppingList.getString(\"currencyUom\");\n    if (currencyUom == null) {\n      GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);\n      if (productStore == null) {\n        return null;\n      }\n      currencyUom=productStore.getString(\"defaultCurrencyUomId\");\n    }\n    if (locale == null) {\n      locale=Locale.getDefault();\n    }\n    List<GenericValue> items=null;\n    try {\n      items=shoppingList.getRelated(\"ShoppingListItem\",null,UtilMisc.toList(\"shoppingListItemSeqId\"),false);\n    }\n catch (    GenericEntityException e) {\n      Debug.logError(e,module);\n    }\n    if (UtilValidate.isNotEmpty(items)) {\n      if (listCart == null) {\n        listCart=new ShoppingCart(delegator,productStoreId,locale,currencyUom);\n        listCart.setOrderPartyId(shoppingList.getString(\"partyId\"));\n        listCart.setAutoOrderShoppingListId(shoppingList.getString(\"shoppingListId\"));\n      }\n else {\n        if (!listCart.getPartyId().equals(shoppingList.getString(\"partyId\"))) {\n          Debug.logError(\"CANNOT add shoppingList: \" + shoppingList.getString(\"shoppingListId\") + \" of partyId: \"+ shoppingList.getString(\"partyId\")+ \" to a shoppingcart with a different orderPartyId: \"+ listCart.getPartyId(),module);\n          return listCart;\n        }\n      }\n      ProductConfigWrapper configWrapper=null;\n      for (      GenericValue shoppingListItem : items) {\n        String productId=shoppingListItem.getString(\"productId\");\n        BigDecimal quantity=shoppingListItem.getBigDecimal(\"quantity\");\n        Timestamp reservStart=shoppingListItem.getTimestamp(\"reservStart\");\n        BigDecimal reservLength=null;\n        String configId=shoppingListItem.getString(\"configId\");\n        if (shoppingListItem.get(\"reservLength\") != null) {\n          reservLength=shoppingListItem.getBigDecimal(\"reservLength\");\n        }\n        BigDecimal reservPersons=null;\n        if (shoppingListItem.get(\"reservPersons\") != null) {\n          reservPersons=shoppingListItem.getBigDecimal(\"reservPersons\");\n        }\n        if (UtilValidate.isNotEmpty(productId) && quantity != null) {\n          if (UtilValidate.isNotEmpty(configId)) {\n            configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,configId,productId,listCart.getProductStoreId(),null,listCart.getWebSiteId(),listCart.getCurrency(),listCart.getLocale(),listCart.getAutoUserLogin());\n          }\n          String listId=shoppingListItem.getString(\"shoppingListId\");\n          String itemId=shoppingListItem.getString(\"shoppingListItemSeqId\");\n          Map<String,Object> attributes=UtilMisc.<String,Object>toMap(\"shoppingListId\",listId,\"shoppingListItemSeqId\",itemId);\n          try {\n            listCart.addOrIncreaseItem(productId,null,quantity,reservStart,reservLength,reservPersons,null,null,null,null,null,attributes,null,configWrapper,null,null,null,dispatcher);\n          }\n catch (          CartItemModifyException e) {\n            Debug.logError(e,\"Unable to add product to List Cart - \" + productId,module);\n          }\ncatch (          ItemNotFoundException e) {\n            Debug.logError(e,\"Product not found - \" + productId,module);\n          }\n        }\n      }\n      if (listCart.size() > 0) {\n        if (UtilValidate.isNotEmpty(shoppingList.get(\"paymentMethodId\"))) {\n          listCart.addPayment(shoppingList.getString(\"paymentMethodId\"));\n        }\n        if (UtilValidate.isNotEmpty(shoppingList.get(\"contactMechId\"))) {\n          listCart.setAllShippingContactMechId(shoppingList.getString(\"contactMechId\"));\n        }\n        if (UtilValidate.isNotEmpty(shoppingList.get(\"shipmentMethodTypeId\"))) {\n          listCart.setAllShipmentMethodTypeId(shoppingList.getString(\"shipmentMethodTypeId\"));\n        }\n        if (UtilValidate.isNotEmpty(shoppingList.get(\"carrierPartyId\"))) {\n          listCart.setAllCarrierPartyId(shoppingList.getString(\"carrierPartyId\"));\n        }\n        if (UtilValidate.isNotEmpty(shoppingList.getString(\"productPromoCodeId\"))) {\n          listCart.addProductPromoCode(shoppingList.getString(\"productPromoCodeId\"),dispatcher);\n        }\n      }\n    }\n  }\n  return listCart;\n}\n", "nl": "Add a shoppinglist to an existing shoppingcart"}
{"code": "public void performQuery() throws IOException, PIRException {\n  logger.info(\"Performing query: \");\n  JavaDStream<MapWritable> inputRDD=null;\n  if (dataInputFormat.equals(InputFormatConst.BASE_FORMAT)) {\n    inputRDD=readData();\n  }\n else   if (dataInputFormat.equals(InputFormatConst.ES)) {\n    inputRDD=readDataES();\n  }\n else {\n    throw new PIRException(\"Unknown data input format \" + dataInputFormat);\n  }\n  performQuery(inputRDD);\n}\n", "nl": "Method to read in data from an allowed input source/format and perform the query"}
{"code": "public GroupsGetMembersQuery sort(GroupsGetMembersSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public double minValue(){\n  Iterator iIter=asTreeMap().values().iterator();\n  Double dMin=Double.POSITIVE_INFINITY;\n  while (iIter.hasNext()) {\n    Double dVal=(Double)iIter.next();\n    dMin=(dVal < dMin) ? dVal : dMin;\n  }\n  return dMin;\n}\n", "nl": "Looks up the minimum value appearing in the distribution."}
{"code": "public void initialize() throws CarbonSortKeyAndGroupByException {\n  prefetch=Boolean.parseBoolean(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_MERGE_SORT_PREFETCH,CarbonCommonConstants.CARBON_MERGE_SORT_PREFETCH_DEFAULT));\n  bufferSize=CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE;\n  this.isSortTempFileCompressionEnabled=Boolean.parseBoolean(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED,CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE));\n  if (this.isSortTempFileCompressionEnabled) {\n    LOGGER.info(\"Compression was used while writing the sortTempFile\");\n  }\n  try {\n    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION,CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE));\n    if (this.sortTempFileNoOFRecordsInCompression < 1) {\n      LOGGER.error(\"Invalid value for: \" + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + \": Only Positive Integer value(greater than zero) is allowed.Default value will\"+ \" be used\");\n      this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);\n    }\n  }\n catch (  NumberFormatException e) {\n    LOGGER.error(\"Invalid value for: \" + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + \", only Positive Integer value is allowed.Default value will be used\");\n    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);\n  }\n  initialise();\n}\n", "nl": "This method will be used to initialize"}
{"code": "public void clear(){\n  if (data != null) {\n    for (int i=0; i < (length * 5); i++)     data[i]=null;\n  }\n  length=0;\n}\n", "nl": "Clear the attribute list for reuse. <p> <p> Note that little memory is freed by this call: the current array is kept so it can be reused. </p>"}
{"code": "public SegmentIntervalsHashIdGenerator(PhysicalTableDictionary physicalTableDictionary,DataSourceMetadataService dataSourceMetadataService){\n  this(physicalTableDictionary,dataSourceMetadataService,new DefaultingDictionary<>(null));\n}\n", "nl": "Build a SegmentIntervalsHashIdGenerator that uses the raw simplified intervals of a druidAggregationQuery to create a segmentId."}
{"code": "public EsriFileGDB(){\n  addFieldTranslation(\"DATABASE\",DataSourceConnectorFileGDB.FIELD_DATABASE);\n}\n", "nl": "Instantiates a new Esri file gdb."}
{"code": "public static <T extends RealFieldElement<T>>T distance(final FieldVector3D<T> v1,final FieldVector3D<T> v2){\n  return v1.distance(v2);\n}\n", "nl": "Compute the distance between two vectors according to the L<sub>2</sub> norm. <p>Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm()</code> except that no intermediate vector is built</p>"}
{"code": "private void induceRec(Node v,Node vCpy,PhyloTree treeCpy,NodeSet keep,Set<Integer> stopIds,Map<Integer,NodeData> id2data,Map<Node,Node> node2copy){\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    Node w=e.getTarget();\n    if (keep.contains(w)) {\n      int id=(Integer)w.getInfo();\n      Node wCpy=null;\n      if (node2copy != null)       wCpy=node2copy.get(w);\n      if (wCpy == null) {\n        wCpy=treeCpy.newNode();\n        if (node2copy != null)         node2copy.put(w,wCpy);\n        wCpy.setInfo(id);\n      }\n      NodeData nodeData=id2data.get(id);\n      if (nodeData != null)       wCpy.setData(nodeData);\n else       wCpy.setData(new NodeData(new int[0],new int[0]));\n      treeCpy.newEdge(vCpy,wCpy);\n      if (wCpy.getInDegree() > 1) {\n        for (Edge f=wCpy.getFirstInEdge(); f != null; f=wCpy.getNextInEdge(f))         treeCpy.setSpecial(f,true);\n      }\n      if (!stopIds.contains((Integer)w.getInfo()))       induceRec(w,wCpy,treeCpy,keep,stopIds,id2data,node2copy);\n    }\n  }\n}\n", "nl": "induce the tree"}
{"code": "public static long calculateBrokerMaxCapacity(SystemResourceUsage systemResourceUsage,ResourceQuota defaultQuota){\n  double bandwidthOutLimit=systemResourceUsage.bandwidthOut.limit * KBITS_TO_BYTES;\n  double bandwidthInLimit=systemResourceUsage.bandwidthIn.limit * KBITS_TO_BYTES;\n  long capacity=calculateBrokerCapacity(defaultQuota,systemResourceUsage.cpu.limit,systemResourceUsage.memory.limit,bandwidthOutLimit,bandwidthInLimit);\n  return capacity;\n}\n", "nl": "Estimate the maximum number namespace bundles a ResourceUnit is able to handle with all resource"}
{"code": "public void onPrepared(MediaPlayer player){\n  mState=State.PLAYING;\n  updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName()));\n  if (mMediaController != null) {\n    mMediaController.setEnabled(true);\n  }\n  player.seekTo(mStartPosition);\n  configAndStartMediaPlayer();\n  if (!mPlayOnPrepared) {\n    processPauseRequest();\n  }\n  if (mMediaController != null) {\n    mMediaController.updatePausePlay();\n  }\n}\n", "nl": "Called when media player is done preparing.  Time to start."}
{"code": "public static void w(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.w(clazz.getSimpleName(),msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public void notifySummonReleaseObservers(){\n  notifyObservers(ObserverType.SUMMONRELEASE);\n}\n", "nl": "notify that abnormalstate is setted in effectcontroller"}
{"code": "public void loadBcpFile(String bcpFilename,String delimiter,List<Attribute> attributes,String dateFormatString,ObjectSourceConnectionManager connectionManager,String sourceAttribute){\n  loadBcpFile(bcpFilename,delimiter,attributes,connectionManager,dateFormatString != null ? new SimpleDateFormat(dateFormatString) : null,sourceAttribute);\n}\n", "nl": "Loads the content of a delimited file into a test database."}
{"code": "@Nullable public static String readTextFromDisk(@NotNull File file){\n  return readTextFromDisk(file,true);\n}\n", "nl": "Reads the given file as text."}
{"code": "public boolean spansMultiplePartitions(){\n  return partitions != null && partitions.isMultiple();\n}\n", "nl": "Indicates whether the filters of this query spans more than one partition. If true it means that a period filter exists and that the periods span multiple years."}
{"code": "private static Key generateKey64bits(){\n  byte[] keyValue=null;\n  MessageDigest sha=null;\n  try {\n    keyValue=Settings.keyStr.getBytes(\"UTF-8\");\n    sha=MessageDigest.getInstance(\"SHA-1\");\n    keyValue=sha.digest(keyValue);\n    keyValue=Arrays.copyOf(keyValue,16);\n    Key key=new SecretKeySpec(keyValue,Settings.ALGO);\n    return key;\n  }\n catch (  UnsupportedEncodingException e) {\n    System.out.println(e);\n  }\ncatch (  NoSuchAlgorithmException e) {\n    System.out.println(e);\n  }\n  return null;\n}\n", "nl": "this method generate key for 64bits AES Encryption"}
{"code": "public void componentMoved(ComponentEvent ev){\n}\n", "nl": "component moved"}
{"code": "public boolean isUptoDate(){\n  return true;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public void reset(){\n  mGestureDetector.reset();\n  mPreviousTransform.reset();\n  mActiveTransform.reset();\n}\n", "nl": "Rests the controller."}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> propertyAnd(String propertyName,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){\n  return property(propertyName,and(leftPredicate,rightPredicate));\n}\n", "nl": "Shortcut for property(propertyName, and(leftPredicate, rightPredicate))."}
{"code": "public static void mergeStacks(IStorage sourceStorage,IStorage destStorage,Item sourceItem,Item targetItem,long count){\n  if (sourceItem.getItemCount() >= count) {\n    long freeCount=targetItem.getFreeCount();\n    count=count > freeCount ? freeCount : count;\n    long leftCount=destStorage.increaseItemCount(targetItem,count,sourceStorage.getStorageType() == destStorage.getStorageType() ? ItemUpdateType.INC_ITEM_MERGE : ItemUpdateType.INC_ITEM_COLLECT);\n    sourceStorage.decreaseItemCount(sourceItem,count - leftCount,sourceStorage.getStorageType() == destStorage.getStorageType() ? ItemUpdateType.DEC_ITEM_SPLIT : ItemUpdateType.DEC_ITEM_SPLIT_MOVE);\n  }\n}\n", "nl": "Merge 2 stacks with simple validation"}
{"code": "private void updateEquipmentStatus(){\n  boolean down=false;\n  StringBuilder invalidationMessage=new StringBuilder();\n  for (  SupervisionEvent event : equipmentSupervisionStatus.values()) {\n    if (event != null) {\n      boolean isDown=false;\n      isDown|=event.getStatus().equals(SupervisionStatus.DOWN);\n      isDown|=event.getStatus().equals(SupervisionStatus.STOPPED);\n      if (isDown) {\n        down=true;\n        if (invalidationMessage.length() > 0) {\n          invalidationMessage.append(\"; \");\n        }\n        invalidationMessage.append(event.getMessage());\n      }\n    }\n  }\n  if (down) {\n    tagQuality.addInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN,invalidationMessage.toString());\n  }\n else {\n    tagQuality.removeInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN);\n  }\n}\n", "nl": "Inner method for updating the equipment status of this tag and computing the error message, if one of the linked equipments is down."}
{"code": "public Boolean deleteProduct(EntityManager em,String productId){\n  Boolean status=true;\n  Product product=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    product=em.find(Product.class,productId);\n    if (product != null) {\n      em.remove(product);\n      em.getTransaction().commit();\n    }\n else {\n      logger.info(\"Product \" + productId + \" does not exist in the db\");\n      status=false;\n    }\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during delete of product. Detailed info: \" + e);\n  }\n  return status;\n}\n", "nl": "Helper method to delete Product"}
{"code": "@Override public final int readInt() throws IOException {\n  dis.readFully(work,0,4);\n  return (work[3]) << 24 | (work[2] & 0xff) << 16 | (work[1] & 0xff) << 8 | (work[0] & 0xff);\n}\n", "nl": "Read an int, 32-bits. Like DataInputStream.readInt except little endian."}
{"code": "private void writeObject(ObjectOutputStream out) throws IOException {\n  if (needsSyncChildren()) {\n    synchronizeChildren();\n  }\n  out.defaultWriteObject();\n}\n", "nl": "Serialize object."}
{"code": "public NativeImageLoader(int height,int width,int channels){\n  this.height=height;\n  this.width=width;\n  this.channels=channels;\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "public PagesGetQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Wiki page title."}
{"code": "public boolean isZoomOverItem(){\n  return m_zoomOverItem;\n}\n", "nl": "Indicates if the zoom control will work while the mouse is over a VisualItem."}
{"code": "@Override public void closeKeepAliveService(){\nsynchronized (this) {\n    if (this.scheduledFuture != null) {\n      this.keepAliveRequestStreamObserver.onCompleted();\n      this.keepAliveRequestStreamObserver=null;\n      this.keepAliveResponseStreamObserver=null;\n      this.scheduledFuture.cancel(true);\n      this.scheduledFuture=null;\n    }\n else {\n      throw new IllegalStateException(\"Lease keep alive service not start yet\");\n    }\n  }\n}\n", "nl": "end the schedule for keep alive and remove dead leases"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201051,num0,skillname);\n}\n", "nl": "Your flight time decreased by %num0 due to the effect of [%SkillName]."}
{"code": "private BattlePokemonInfo createBattlePokemon(Pokemon pokemon){\n  return BattlePokemonInfo.newBuilder().setCurrentEnergy(0).setCurrentHealth(100).setPokemonData(pokemon.getDefaultInstanceForType()).build();\n}\n", "nl": "Creates a battle pokemon object to send with the request."}
{"code": "public void addCommandClass(ZWaveCommandClass commandClass){\n  CommandClass key=commandClass.getCommandClass();\n  if (!supportedCommandClasses.containsKey(key)) {\n    logger.debug(\"NODE {}: Adding command class {} to the list of supported command classes.\",nodeId,commandClass.getCommandClass().getLabel());\n    supportedCommandClasses.put(key,commandClass);\n    if (commandClass instanceof ZWaveEventListener) {\n      this.controller.addEventListener((ZWaveEventListener)commandClass);\n    }\n  }\n}\n", "nl": "Adds a command class to the list of supported command classes by this node. Does nothing if command class is already added."}
{"code": "public static Dfp computeLn(final Dfp a,final Dfp one,final Dfp two){\n  int den=1;\n  Dfp x=a.add(new Dfp(a.getField(),-1)).divide(a.add(one));\n  Dfp y=new Dfp(x);\n  Dfp num=new Dfp(x);\n  Dfp py=new Dfp(y);\n  for (int i=0; i < 10000; i++) {\n    num=num.multiply(x);\n    num=num.multiply(x);\n    den+=2;\n    Dfp t=num.divide(den);\n    y=y.add(t);\n    if (y.equals(py)) {\n      break;\n    }\n    py=new Dfp(y);\n  }\n  return y.multiply(two);\n}\n", "nl": "Compute ln(a). Let f(x) = ln(x), We know that f'(x) = 1/x, thus from Taylor's theorem we have: -----          n+1         n f(x) =   \\           (-1)    (x - 1) /          ----------------    for 1 <= n <= infinity -----             n or 2        3       4 (x-1)   (x-1)    (x-1) ln(x) =  (x-1) - ----- + ------ - ------ + ... 2       3        4 alternatively, 2    3   4 x    x   x ln(x+1) =  x - -  + - - - + ... 2    3   4 This series can be used to compute ln(x), but it converges too slowly. If we substitute -x for x above, we get 2    3    4 x    x    x ln(1-x) =  -x - -  - -  - - + ... 2    3    4 Note that all terms are now negative.  Because the even powered ones absorbed the sign.  Now, subtract the series above from the previous one to get ln(x+1) - ln(1-x).  Note the even terms cancel out leaving only the odd ones 3     5      7 2x    2x     2x ln(x+1) - ln(x-1) = 2x + --- + --- + ---- + ... 3     5      7 By the property of logarithms that ln(a) - ln(b) = ln (a/b) we have: 3        5        7 x+1           /          x        x        x          \\ ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  | x-1           \\          3        5        7          / But now we want to find ln(a), so we need to find the value of x such that a = (x+1)/(x-1).   This is easily solved to find that x = (a-1)/(a+1)."}
{"code": "public AudioGetBroadcastListQuery active(Boolean value){\n  return unsafeParam(\"active\",value);\n}\n", "nl": "Return only friends and communities that are broadcasting at the moment."}
{"code": "public int increment(int offset){\n  CharSequence txt=getText();\n  int i;\n  if (txt != null) {\n    try {\n      i=Integer.parseInt(txt.toString());\n    }\n catch (    NumberFormatException e) {\n      i=0;\n    }\n  }\n else {\n    i=0;\n  }\n  i=i + offset;\n  setText(String.valueOf(i));\n  return i;\n}\n", "nl": "Increment the numeric badge label. If the current badge label cannot be converted to an integer value, its label will be set to \"0\"."}
{"code": "public void reset(){\n  Iterator iter=m_vis.visibleItems(m_nodeGroup);\n  while (iter.hasNext()) {\n    VisualItem item=(VisualItem)iter.next();\n    ForceItem fitem=(ForceItem)item.get(FORCEITEM);\n    if (fitem != null) {\n      fitem.location[0]=(float)item.getEndX();\n      fitem.location[1]=(float)item.getEndY();\n      fitem.force[0]=fitem.force[1]=0;\n      fitem.velocity[0]=fitem.velocity[1]=0;\n    }\n  }\n  m_lasttime=-1L;\n}\n", "nl": "Reset the force simulation state for all nodes processed by this layout."}
{"code": "public DeterministicHashMap(int initialCapacity,float loadFactor){\n  super(initialCapacity,loadFactor);\n}\n", "nl": "Constructs a DeterministicHashMap with the given initial capacity and load factor."}
{"code": "public VertexBuffer(Type type){\n  super(GLObject.Type.VertexBuffer);\n  this.bufType=type;\n}\n", "nl": "Creates an empty, uninitialized buffer. Must call setupData() to initialize."}
{"code": "@Deprecated public static byte matchColor(Color color){\n  if (color.getAlpha() < 128)   return 0;\n  int index=0;\n  double best=-1;\n  for (int i=4; i < colors.length; i++) {\n    double distance=getDistance(color,colors[i]);\n    if (distance < best || best == -1) {\n      best=distance;\n      index=i;\n    }\n  }\n  return (byte)(index < 128 ? index : -129 + (index - 127));\n}\n", "nl": "Get the index of the closest matching color in the palette to the given color."}
{"code": "@Override public long readDouble(String filePath,long offset){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);\n  return byteBffer.getLong();\n}\n", "nl": "This method will be used to read int from file from postion(offset), here length will be always 4 bacause int byte size if 4"}
{"code": "public static <T>boolean containsDuplicates(List<T> list,Comparator<T> comparator){\n  Collections.sort(list,comparator);\n  T previous=null;\n  for (  T entry : list) {\n    if (previous != null && previous.equals(entry)) {\n      return true;\n    }\n    previous=entry;\n  }\n  return false;\n}\n", "nl": "Checks whether the given list contains duplicates. List entries are compared using the given comparator."}
{"code": "public static String millisToText(long millis){\n  return Strings.millisToString(millis,true);\n}\n", "nl": "Convert time to a string"}
{"code": "public static double[] lsfInHz2lpc(double[] lsf,int samplingRate){\n  double[] normalised_lsf=new double[lsf.length];\n  for (int i=0; i < lsf.length; i++) {\n    normalised_lsf[i]=lsf[i] / samplingRate;\n    assert 0 <= normalised_lsf[i];\n    assert normalised_lsf[i] <= 0.5;\n  }\n  return lsf2lpc(normalised_lsf);\n}\n", "nl": "Convert LSF frequencies into LPC coefficients. The analysis filter may be reconstructed: A(z) = 1/2 [ P(z) + Q(z) ]"}
{"code": "private boolean maintainSelectorMinimizationBugExperimentEnabled(){\n  return (model != null && model.isExperimentEnabled(MAINTAIN_SELECTOR_MINIMIZATION_BUG));\n}\n", "nl": "Returns true if experiment maintain_selector_minimization_bug is enabled; false otherwise."}
{"code": "public static ProcessEngineInfo retry(String resourceUrl){\n  log.debug(\"retying initializing of resource {}\",resourceUrl);\n  try {\n    return initProcessEnginFromResource(new URL(resourceUrl));\n  }\n catch (  MalformedURLException e) {\n    throw new ActivitiIllegalArgumentException(\"invalid url: \" + resourceUrl,e);\n  }\n}\n", "nl": "retries to initialize a process engine that previously failed."}
{"code": "public void resetTask(){\n  this.mate=null;\n  this.spawnBabyDelay=0;\n}\n", "nl": "Resets the task"}
{"code": "public synchronized void press(int value){\n  if (this.state != Input.State.WAITING_FOR_RELEASE) {\n    this.value=this.value + value;\n    if (this.holdType == Input.Hold.HOLD) {\n      this.state=Input.State.WAITING_FOR_RELEASE;\n    }\n else {\n      this.state=Input.State.PRESSED;\n    }\n  }\n}\n", "nl": "Notify that the input was pressed."}
{"code": "@Override public void startCDATA(Augmentations augs) throws XNIException {\n  try {\n    if (fLexicalHandler != null) {\n      fLexicalHandler.startCDATA();\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}\n", "nl": "The start of a CDATA section."}
{"code": "public Builder certificateInfo(CertificateInfo certificateInfo){\n  this.certificateInfo=certificateInfo;\n  return this;\n}\n", "nl": "Certificate info to use to generate the root certificate. Reasonable default values will be used if certificate info is not supplied."}
{"code": "public static String slurpReader(Reader reader){\n  BufferedReader r=new BufferedReader(reader);\n  StringBuilder buff=new StringBuilder();\n  try {\n    char[] chars=new char[SLURPBUFFSIZE];\n    while (true) {\n      int amountRead=r.read(chars,0,SLURPBUFFSIZE);\n      if (amountRead < 0) {\n        break;\n      }\n      buff.append(chars,0,amountRead);\n    }\n    r.close();\n  }\n catch (  Exception e) {\n    throw new RuntimeException();\n  }\n  return buff.toString();\n}\n", "nl": "Returns all the text from the given Reader."}
{"code": "private void updateSequence(){\n  setLong(mBuffers[mBufferIn],++mSeq,2,4);\n}\n", "nl": "Increments the sequence number."}
{"code": "public boolean intersects(S2CellUnion union){\n  for (  S2CellId id : union) {\n    if (intersects(id)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Return true if this cell union contain/intersects the given other cell union."}
{"code": "public boolean profiling(){\n  return soot.PhaseOptions.getBoolean(options,\"profiling\");\n}\n", "nl": "Profiling -- Profile the results of array bounds check analysis.. Profile the results of array bounds check analysis. The  inserted profiling code assumes the existence of a MultiCounter  class implementing the methods invoked. For details, see the  ArrayBoundsChecker source code."}
{"code": "@Override public void createIndex(){\n  Clusterer=new AverageLinkClusterer();\n  initComparator();\n  ProgressEvent peCreation=new ProgressEvent(\"Index creation\",0.0);\n  if (Notifier != null)   Notifier.Notify(this,peCreation.updateSubtask(\"Calculating clusters...\"));\n  Clusterer.calculateClusters(NamedObjects,Comparator);\n  if (Notifier != null)   Notifier.Notify(this,peCreation.updateSubtask(\"Getting hierarchy...\"));\n  Hierarchy=Clusterer.getHierarchy();\n}\n", "nl": "Creates the index, by creating the clusters, and the corresponding  representing graphs for each cluster."}
{"code": "public void shutdown(){\n  this.handlerEnabled=false;\nsynchronized (threadMonitorObject) {\n    threadMonitorObject.notify();\n  }\n  while (!incomingQueue.isEmpty()) {\n    try {\n      Thread.sleep(500);\n    }\n catch (    InterruptedException e) {\n      LOGGER.error(\"Interrupted while waiting.\");\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Wait for the all incoming values to be dealt with, then expire the thread. Does nothing if already shutdown."}
{"code": "private static Throwable extractException(Exception ex){\n  if (ex instanceof UnableToTakeScreenshotException) {\n    return ex.getCause();\n  }\n  return ex;\n}\n", "nl": "Method to avoid multiple wrapping. If there is already our exception, just wrap the cause again"}
{"code": "public boolean isPrimaryKey(){\n  return isPrimaryKey(false);\n}\n", "nl": "Returns true if the entity contains all of the primary key fields, but NO others."}
{"code": "@Override public String toString(){\n  String ivString=Base64.encodeToString(iv,BASE64_FLAGS);\n  String cipherTextString=Base64.encodeToString(cipherText,BASE64_FLAGS);\n  String macString=Base64.encodeToString(mac,BASE64_FLAGS);\n  return String.format(ivString + \":\" + macString+ \":\"+ cipherTextString);\n}\n", "nl": "Encodes this ciphertext, IV, mac as a string."}
{"code": "@Override public void actionPerformed(ActionEvent e){\n}\n", "nl": "Method actionPerformed."}
{"code": "@Override public boolean accepts(Field field){\n  return isList(field) && AnnotationsHelper.isFindByAnnotationPresent(field) && AnnotationsHelper.isGenericTypeAnnotedWithPageObject(field);\n}\n", "nl": "PageObjectInjectorListener calls this method to check if the provider is able to handle currently injected field. <p> PageObjectListProxyProvider handles fields that are: <ul> <li>lists of PageObjects, <li>annotated with one of FindBy annotations. </ul>"}
{"code": "private List<String> pickTableNamesFromTableModels(){\n  List<String> tableNames=new ArrayList<String>();\n  for (  TableModel tableModel : mTableModels) {\n    tableNames.add(tableModel.getTableName());\n  }\n  return tableNames;\n}\n", "nl": "Get a list only with table names."}
{"code": "public static S2LatLngRect fromEdge(S2Point a,S2Point b){\n  S2LatLngRect r=fromPointPair(new S2LatLng(a),new S2LatLng(b));\n  S2Point ab=S2.robustCrossProd(a,b);\n  S2Point dir=S2Point.crossProd(ab,new S2Point(0,0,1));\n  double da=dir.dotProd(a);\n  double db=dir.dotProd(b);\n  if (da * db >= 0) {\n    return r;\n  }\n  double absLat=Math.acos(Math.abs(ab.z / ab.norm()));\n  if (da < 0) {\n    return new S2LatLngRect(new R1Interval(r.lat().lo(),absLat),r.lng());\n  }\n else {\n    return new S2LatLngRect(new R1Interval(-absLat,r.lat().hi()),r.lng());\n  }\n}\n", "nl": "Return a latitude-longitude rectangle that contains the edge from \"a\" to \"b\". Both points must be unit-length. Note that the bounding rectangle of an edge can be larger than the bounding rectangle of its endpoints."}
{"code": "private void showMessage(String message,boolean error){\n  lblError.setForeground(error ? Color.RED : Color.BLACK);\n  lblError.setText(message);\n}\n", "nl": "Show message, set text colour according to whether message is informational (black) or an error (red)."}
{"code": "public Object clone() throws CloneNotSupportedException {\n  AlarmPublication alarmPublication=(AlarmPublication)super.clone();\n  if (this.publicationTime != null) {\n    alarmPublication.publicationTime=(Timestamp)this.publicationTime.clone();\n  }\n  return alarmPublication;\n}\n", "nl": "Clone implementation."}
{"code": "private boolean expungeStaleEntries(){\n  if (size == 0)   return false;\n  Object r;\n  boolean result=false;\n  while ((r=queue.poll()) != null) {\n    result=true;\n    Entry e=(Entry)r;\n    int h=e.hash;\n    int i=indexFor(h,table.length);\n    Entry prev=table[i];\n    Entry p=prev;\n    while (p != null) {\n      Entry next=p.next;\n      if (p == e) {\n        if (prev == e)         table[i]=next;\n else         prev.next=next;\n        e.next=null;\n        size--;\n        break;\n      }\n      prev=p;\n      p=next;\n    }\n  }\n  return result;\n}\n", "nl": "Expunge stale entries from the table."}
{"code": "public void dumpBinary(CART cart,DataOutput os) throws IOException {\n  try {\n    toWagonFormat(cart.getRootNode(),(DataOutputStream)os,null,null);\n  }\n catch (  IOException ioe) {\n    IOException newIOE=new IOException(\"Error dumping CART to output stream\");\n    newIOE.initCause(ioe);\n    throw newIOE;\n  }\n}\n", "nl": "Dumps this CART to the output stream in WagonFormat."}
{"code": "private void digitsToWords(String tokenVal){\n  FeatureSet featureSet=tokenItem.getFeatures();\n  String nsw=\"\";\n  if (featureSet.isPresent(\"nsw\")) {\n    nsw=featureSet.getString(\"nsw\");\n  }\n  if (nsw.equals(\"nide\")) {\n    NumberExpander.expandID(tokenVal,wordRelation);\n  }\n else {\n    String rName=featureSet.getString(\"name\");\n    String digitsType=null;\n    if (tokenVal.equals(rName)) {\n      digitsType=(String)cart.interpret(tokenItem);\n    }\n else {\n      featureSet.setString(\"name\",tokenVal);\n      digitsType=(String)cart.interpret(tokenItem);\n      featureSet.setString(\"name\",rName);\n    }\n    if (digitsType.equals(\"ordinal\")) {\n      NumberExpander.expandOrdinal(tokenVal,wordRelation);\n    }\n else     if (digitsType.equals(\"digits\")) {\n      NumberExpander.expandDigits(tokenVal,wordRelation);\n    }\n else     if (digitsType.equals(\"year\")) {\n      NumberExpander.expandID(tokenVal,wordRelation);\n    }\n else {\n      NumberExpander.expandNumber(tokenVal,wordRelation);\n    }\n  }\n}\n", "nl": "Convert the given digit token into (word) Items in the WordRelation."}
{"code": "public BaseViewHolder addOnLongClickListener(int viewId){\n  itemChildLongClickViewIds.add(viewId);\n  return this;\n}\n", "nl": "add long click view id"}
{"code": "@Override public QueryTemplatePacket and(QueryTemplatePacket template){\n  LinkedList<QueryTemplatePacket> optimizedPackets=new LinkedList<QueryTemplatePacket>();\n  for (  QueryTemplatePacket packet : getPackets()) {\n    QueryTemplatePacket result=new QueryTemplatePacket(packet);\n    result.intersectRanges(template);\n    result.intersectUids(template);\n    if (!result.isAlwaysEmpty())     optimizedPackets.add(result);\n  }\n  setPackets(optimizedPackets);\n  if (optimizedPackets.isEmpty())   setAlwaysEmpty(true);\n  return this;\n}\n", "nl": "Merge given templates into one template. for example: x=3 and (y=5 or z=8) ==> (x=3 and y=5) or (x=3 and z=8)"}
{"code": "public boolean isSecondPhase(){\n  return _secondPhase;\n}\n", "nl": "the second phase is reached if the templateHolder enters the cache and is being matched by a different (later) call (thread) this flag is used to avoid sending a response twice to the client."}
{"code": "public static boolean addUIdToSetOfOpenFiles(String name,long uId){\n  final Pair<String,Long> pair=new Pair<>(name,uId);\n  Integer count=openFiles.get(pair);\n  if (count == null) {\n    openFiles.put(pair,1);\n    return true;\n  }\n else {\n    openFiles.put(pair,count + 1);\n    return false;\n  }\n}\n", "nl": "add the unique identify of a file to the set of open files"}
{"code": "@NotNull public static BufferedImage pad(@NotNull BufferedImage image,int paddingPercent){\n  if (image.getWidth() <= 1 || image.getHeight() <= 1) {\n    return image;\n  }\n  if (paddingPercent > 100) {\n    paddingPercent=100;\n  }\n  int largerSide=Math.max(image.getWidth(),image.getHeight());\n  int smallerSide=Math.min(image.getWidth(),image.getHeight());\n  int padding=(largerSide * paddingPercent / 100);\n  padding=Math.max(-(smallerSide / 2 - 1),padding);\n  return AssetUtil.paddedImage(image,padding);\n}\n", "nl": "Pad the image with extra space. The padding percent works by taking the largest side of the current image, multiplying that with the percent value, and adding that portion to each side of the image. So for example, an image that's 100x100, with 50% padding percent, ends up resized to (50+100+50)x(50+100+50), or 200x200. The 100x100 portion is then centered, taking up what looks like 50% of the final image. The same 100x100 image, with 100% padding, ends up at 300x300, looking in the final image like it takes up ~33% of the space. Padding can also be negative, which eats into the space of the original asset, causing a zoom in effect."}
{"code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean hasMagicalStateEffect(){\n  Iterator<Effect> effectIterator=this.abnormalEffectMap.values().iterator();\n  while (effectIterator.hasNext()) {\n    Effect localEffect=effectIterator.next();\n    if (localEffect.isMagicalState()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Used to scan effects for Stun/Paralysis"}
{"code": "private void selectEngine(PacScriptSource pacSource){\n  try {\n    Logger.log(getClass(),LogLevel.INFO,\"Using javax.script JavaScript engine.\");\n    this.pacScriptParser=new JavaxPacScriptParser(pacSource);\n  }\n catch (  Exception e) {\n    Logger.log(getClass(),LogLevel.ERROR,\"PAC parser error.\",e);\n  }\n}\n", "nl": "Selects one of the available PAC parser engines."}
{"code": "public char nextClean() throws JSONException {\n  for (; ; ) {\n    char c=next();\n    if (c == 0 || c > ' ') {\n      return c;\n    }\n  }\n}\n", "nl": "Get the next char in the string, skipping whitespace."}
{"code": "public void requestTransfer(int taskId,String name,byte[] db){\n  PlayerTransferTask task=this.tasks.get(taskId);\n  GameServerInfo targetServer=GameServerTable.getGameServerInfo(task.targetServerId);\n  if (targetServer == null || targetServer.getConnection() == null) {\n    log.error(\"Player transfer requests offline server! #\" + task.targetServerId);\n    return;\n  }\n  GameServerInfo server=GameServerTable.getGameServerInfo(task.sourceServerId);\n  if (server == null || server.getConnection() == null) {\n    log.error(\"Player transfer requests offline server! #\" + task.sourceServerId);\n    return;\n  }\n  if (targetServer.isAccountOnGameServer(task.targetAccountId)) {\n    log.error(\"Player transfer cant be performed while target account is online at server #\" + task.targetServerId + \". \"+ task.targetAccountId);\n    server.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.ERROR,taskId,\"transfer cant be performed while target account is online at server\"));\n    return;\n  }\n  if (transfers.containsKey(taskId)) {\n    log.error(\"Player transfer cant be performed while it is already active #\" + task.targetServerId + \". \"+ task.targetAccountId);\n    server.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.ERROR,taskId,\"transfer cant be performed while it is already active\"));\n    return;\n  }\n  Account account=AccountController.loadAccount(task.targetAccountId);\n  Account saccount=AccountController.loadAccount(task.sourceAccountId);\n  PlayerTransferRequest request=new PlayerTransferRequest(PlayerTransferStatus.STEP1);\n  request.serverId=task.sourceServerId;\n  request.targetServerId=task.targetServerId;\n  request.targetAccountId=task.targetAccountId;\n  request.db=db;\n  request.name=name;\n  request.targetAccount=account;\n  request.account=account;\n  request.saccount=saccount;\n  request.taskId=taskId;\n  transfers.put(taskId,request);\n  account.setActivated((byte)0);\n  saccount.setActivated((byte)0);\n  DAOManager.getDAO(AccountDAO.class).updateAccount(account);\n  DAOManager.getDAO(AccountDAO.class).updateAccount(saccount);\n  targetServer.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.SEND_INFO,request));\n  log.info(\"player transfer account \" + task.targetServerId + \" became active.\");\n}\n", "nl": "sended from source server to login with character information"}
{"code": "private DataType fromExternalToWrapperDataType(org.apache.carbondata.format.DataType dataType){\n  if (null == dataType) {\n    return null;\n  }\nswitch (dataType) {\ncase STRING:\n    return DataType.STRING;\ncase INT:\n  return DataType.INT;\ncase SHORT:\nreturn DataType.SHORT;\ncase LONG:\nreturn DataType.LONG;\ncase DOUBLE:\nreturn DataType.DOUBLE;\ncase DECIMAL:\nreturn DataType.DECIMAL;\ncase TIMESTAMP:\nreturn DataType.TIMESTAMP;\ncase ARRAY:\nreturn DataType.ARRAY;\ncase STRUCT:\nreturn DataType.STRUCT;\ndefault :\nreturn DataType.STRING;\n}\n}\n", "nl": "convert from external to wrapper data type"}
{"code": "public LogNormalDistribution(double scale,double shape) throws MathIllegalArgumentException {\n  this(scale,shape,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);\n}\n", "nl": "Create a log-normal distribution using the specified scale and shape."}
{"code": "public DatabaseGetRegionsQuery(VkApiClient client,int countryId){\n  super(client,\"database.getRegions\",GetRegionsResponse.class);\n  countryId(countryId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Dfp asin(final Dfp a){\n  return atan(a.divide(a.getOne().subtract(a.multiply(a)).sqrt()));\n}\n", "nl": "computes the arc-sine of the argument."}
{"code": "public char readChar() throws JMSException {\n  initializeReading();\n  try {\n    this.dataIn.mark(Integer.MAX_VALUE);\n    return this.dataIn.readChar();\n  }\n catch (  EOFException eof) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException e) {\n      JMSException jmsEx=new JMSException(e.toString());\n      jmsEx.setLinkedException(e);\n      throw jmsEx;\n    }\n    JMSException jmsEx=new MessageEOFException(eof.toString());\n    jmsEx.setLinkedException(eof);\n    throw jmsEx;\n  }\ncatch (  IOException ioe) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException e) {\n      JMSException jmsEx=new JMSException(e.toString());\n      jmsEx.setLinkedException(e);\n      throw jmsEx;\n    }\n    JMSException jmsEx=new MessageFormatException(\"Format error occurred\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Reads a Unicode character value from the bytes message stream."}
{"code": "private void checkSufficientData(final RealMatrix matrix){\n  int nRows=matrix.getRowDimension();\n  int nCols=matrix.getColumnDimension();\n  if (nRows < 2 || nCols < 2) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_ROWS_AND_COLUMNS,nRows,nCols);\n  }\n}\n", "nl": "Throws MathIllegalArgumentException if the matrix does not have at least two columns and two rows."}
{"code": "private byte[] patchExploit(byte[] exploit,Map<String,String> params) throws Exception {\n  if (params.size() != 7) {\n    throw new Exception(\"invalid argument count\");\n  }\n  ArrayList<Long> args=new ArrayList<>();\n  args.add(0L);\n  for (int i=1; i <= 7; ++i) {\n    String arg=String.format(\"a%s\",i);\n    if (params.containsKey(arg)) {\n      args.add(Long.parseLong(params.get(arg),16));\n    }\n else {\n      throw new Exception(String.format(\"argument %s is missing\",arg));\n    }\n  }\n  byte[] copy=new byte[exploit.length];\n  System.arraycopy(exploit,0,copy,0,exploit.length);\n  ByteBuffer buf=ByteBuffer.wrap(copy).order(ByteOrder.LITTLE_ENDIAN);\n  int size_words=buf.getInt(0);\n  int dsize=buf.getInt(4 + 0x10);\n  int csize=buf.getInt(4 + 0x20);\n  long data_base=args.get(1) + csize;\n  for (int i=1; i < size_words; ++i) {\n    long add=0;\n    byte x=buf.get(size_words * 4 + 4 + i - 1);\n    if (x == 1) {\n      add=data_base;\n    }\n else     if (x != 0) {\n      add=args.get(x);\n    }\n    buf.putInt(i * 4,buf.getInt(i * 4) + (int)add);\n  }\n  byte[] out=new byte[dsize + csize];\n  System.arraycopy(copy,4 + 0x40,out,csize,dsize);\n  System.arraycopy(copy,4 + 0x40 + dsize,out,0,csize);\n  return out;\n}\n", "nl": "Finalize the exploit with the addesses from the device"}
{"code": "public GSQueueSessionImpl(GSConnectionImpl connection,boolean transacted,int acknowledgeMode) throws JMSException {\n  super(connection,transacted,acknowledgeMode);\n}\n", "nl": "Constructs a queue session."}
{"code": "void balanceTree(BinarySearchTreeNode<E> node){\n  while (node != null) {\n    node=balance(node);\n    node=node.parent;\n  }\n}\n", "nl": "Balances the tree iteratively to the root starting at the given node."}
{"code": "public boolean naive_side_effect(){\n  return soot.PhaseOptions.getBoolean(options,\"naive-side-effect\");\n}\n", "nl": "Naive Side Effect Tester -- Use a naive side effect analysis even if interprocedural  information is available. If Naive Side Effect Tester is set to true, Lazy Code Motion  uses the conservative side effect information provided by the  NaiveSideEffectTester class, even if interprocedural information  about side effects is available. The naive side effect analysis  is based solely on the information available locally about a  statement. It assumes, for example, that any method call has the  potential to write and read all instance and static fields in  the program. If Naive Side Effect Tester is set to false and  Soot is in whole program mode, then Lazy Code Motion uses the  side effect information provided by the PASideEffectTester  class. PASideEffectTester uses a points-to analysis to determine  which fields and statics may be written or read by a given  statement. If whole program analysis is not performed, naive  side effect information is used regardless of the setting of  Naive Side Effect Tester."}
{"code": "private char[] convertToVararg(char[] typeName){\n  if (typeName == null)   return typeName;\n  final int len=typeName.length;\n  if (len < 2)   return typeName;\n  if (typeName[len - 1] != ']')   return typeName;\n  if (typeName[len - 2] != '[')   return typeName;\n  char[] vararg=new char[len + 1];\n  System.arraycopy(typeName,0,vararg,0,len - 2);\n  vararg[len - 2]='.';\n  vararg[len - 1]='.';\n  vararg[len]='.';\n  return vararg;\n}\n", "nl": "Converts the display name for an array type into a variable arity display name. <p> Examples: <ul> <li> \"int[]\" -> \"int...\"</li> <li> \"Object[][]\" -> \"Object[]...\"</li> <li> \"String\" -> \"String\"</li> </ul> </p> <p> If <code>typeName</code> does not include the substring \"[]\", it is returned unchanged. </p>"}
{"code": "public static final Future<?> newFollowingToTargetCheckTask(Summon follower,Creature leading){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowSummonTaskAI(leading,follower),1000,1000);\n}\n", "nl": "Schedule new following checker task"}
{"code": "public static boolean isFileExists(String fileName){\n  try {\n    FileFactory.FileType fileType=FileFactory.getFileType(fileName);\n    if (FileFactory.isFileExist(fileName,fileType)) {\n      return true;\n    }\n  }\n catch (  IOException e) {\n    LOGGER.error(\"@@@@@@  File not found at a given location @@@@@@ : \" + fileName);\n  }\n  return false;\n}\n", "nl": "This method will check the existence of a file at a given path"}
{"code": "@Override public void saveRep(Repository rep,ObjectId idTransformation,ObjectId idStep) throws KettleException {\n  try {\n    rep.saveStepAttribute(idTransformation,idStep,\"TableName\",tabelName);\n    rep.saveStepAttribute(idTransformation,idStep,\"MDKeySize\",mdkeySize);\n    rep.saveStepAttribute(idTransformation,idStep,\"Measurecount\",measureCount);\n    rep.saveStepAttribute(idTransformation,idStep,\"HeirAndKeySize\",heirAndKeySize);\n    rep.saveStepAttribute(idTransformation,idStep,\"tableName\",tableName);\n    rep.saveStepAttribute(idTransformation,idStep,\"databaseName\",databaseName);\n    rep.saveStepAttribute(idTransformation,idStep,\"isGroupByEnabled\",groupByEnabled);\n    rep.saveStepAttribute(idTransformation,idStep,\"aggregatorClassString\",aggregatorClassString);\n    rep.saveStepAttribute(idTransformation,idStep,\"aggregatorString\",aggregatorString);\n    rep.saveStepAttribute(idTransformation,idStep,\"factDimLensString\",factDimLensString);\n    rep.saveStepAttribute(idTransformation,idStep,\"levelAnddataTypeString\",levelAnddataTypeString);\n    rep.saveStepAttribute(idTransformation,idStep,\"partitionID\",partitionID);\n    rep.saveStepAttribute(idTransformation,idStep,\"segmentId\",segmentId);\n    rep.saveStepAttribute(idTransformation,idStep,\"taskNo\",taskNo);\n  }\n catch (  Exception e) {\n    throw new KettleException(BaseMessages.getString(PKG,\"TemplateStep.Exception.UnableToSaveStepInfoToRepository\") + idStep,e);\n  }\n}\n", "nl": "Save the steps data into a Kettle repository"}
{"code": "public void write(char[] cbuf) throws IOException {\n  writeIntoClob(new String(cbuf));\n}\n", "nl": "Characters are inserted into the clob based on the position given of the clob. The emphasis is on insert rather than overwrite."}
{"code": "private void performAction(byte action){\nswitch (action) {\ncase -9:\n    if (!pop(MODE_KEY)) {\n      event1=JsonEvent.ERROR;\n      return;\n    }\n  state=OK;\nevent1=JsonEvent.END_OBJECT;\nbreak;\ncase -8:\nif (!pop(MODE_OBJECT)) {\nevent1=JsonEvent.ERROR;\nreturn;\n}\nstate=OK;\nevent1=JsonEvent.END_OBJECT;\nbreak;\ncase -7:\nif (!pop(MODE_ARRAY)) {\nevent1=JsonEvent.ERROR;\nreturn;\n}\nevent1=stateToEvent();\nif (event1 == JsonEvent.NEED_MORE_INPUT) {\nevent1=JsonEvent.END_ARRAY;\n}\n else {\nevent2=JsonEvent.END_ARRAY;\n}\nstate=OK;\nbreak;\ncase -6:\nif (!push(MODE_KEY)) {\nevent1=JsonEvent.ERROR;\nreturn;\n}\nstate=OB;\nevent1=JsonEvent.START_OBJECT;\nbreak;\ncase -5:\nif (!push(MODE_ARRAY)) {\nevent1=JsonEvent.ERROR;\nreturn;\n}\nstate=AR;\nevent1=JsonEvent.START_ARRAY;\nbreak;\ncase -4:\nswitch (stack[top]) {\ncase MODE_KEY:\nstate=CO;\nevent1=JsonEvent.FIELD_NAME;\nbreak;\ncase MODE_ARRAY:\ncase MODE_OBJECT:\nstate=OK;\nevent1=JsonEvent.VALUE_STRING;\nbreak;\ndefault :\nevent1=JsonEvent.ERROR;\nreturn;\n}\nbreak;\ncase -3:\nswitch (stack[top]) {\ncase MODE_OBJECT:\nif (!pop(MODE_OBJECT) || !push(MODE_KEY)) {\nevent1=JsonEvent.ERROR;\nreturn;\n}\nevent1=stateToEvent();\nstate=KE;\nbreak;\ncase MODE_ARRAY:\nevent1=stateToEvent();\nstate=VA;\nbreak;\ndefault :\nevent1=JsonEvent.ERROR;\nreturn;\n}\nbreak;\ncase -2:\nif (!pop(MODE_KEY) || !push(MODE_OBJECT)) {\nevent1=JsonEvent.ERROR;\nreturn;\n}\nstate=VA;\nbreak;\ndefault :\nevent1=JsonEvent.ERROR;\nreturn;\n}\n}\n", "nl": "Perform an action that changes the parser state"}
{"code": "public static void v(String tag,String msg){\n  if (sLevel > LEVEL_VERBOSE) {\n    return;\n  }\n  Log.v(tag,msg);\n}\n", "nl": "Send a VERBOSE log message."}
{"code": "public static Integer[] transformIntArray(int[] source){\n  Integer[] destin=new Integer[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert int array to Integer array"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public Builder opacity(Number opacity){\n  this.opacity=opacity;\n  return this;\n}\n", "nl": "The opacity of the image overlay. </br> default 1.0"}
{"code": "public AsyncPropertyChangeSupport(Object sourceBean){\n  super(sourceBean);\n}\n", "nl": "Constructs a AsyncPropertyChangeSupport object."}
{"code": "public void initialise() throws XMLException {\n  loader=new MqttSpyDaemonConfigLoader();\n  showInfo();\n}\n", "nl": "This is an internal method - initialises the daemon class."}
{"code": "public static S2CellId fromFaceIJ(int face,int i,int j){\n  long n[]={0,face << (POS_BITS - 33)};\n  int bits=(face & SWAP_MASK);\n  for (int k=7; k >= 0; --k) {\n    bits=getBits(n,i,j,k,bits);\n  }\n  S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1);\n  return s;\n}\n", "nl": "Return a leaf cell given its cube face (range 0..5) and i- and j-coordinates (see s2.h)."}
{"code": "public final Observable<T> read(final Object group){\n  return Observable.defer(null);\n}\n", "nl": "Read from cache by group and throw if no data is available."}
{"code": "public GotoStmt newGotoStmt(Unit target){\n  return Jimple.v().newGotoStmt(target);\n}\n", "nl": "Constructs a GotoStmt(Stmt) grammar chunk."}
{"code": "private void sendBroadcastUploadStarted(UploadFileOperation upload){\n  Intent start=new Intent(getUploadStartMessage());\n  start.putExtra(EXTRA_REMOTE_PATH,upload.getRemotePath());\n  start.putExtra(EXTRA_OLD_FILE_PATH,upload.getOriginalStoragePath());\n  start.putExtra(ACCOUNT_NAME,upload.getAccount().name);\n  sendStickyBroadcast(start);\n}\n", "nl": "Sends a broadcast in order to the interested activities can update their view TODO - no more broadcasts, replace with a callback to subscribed listeners"}
{"code": "public boolean forEachEntry(TObjectIntProcedure<K> procedure){\n  K[] keys=(K[])_set;\n  int[] values=_values;\n  for (int i=keys.length; i-- > 0; ) {\n    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Executes <tt>procedure</tt> for each key/value entry in the map."}
{"code": "private void reindexTypeEntries(TypeData updatedTypeData,boolean indexAddition){\n  if (!indexAddition)   throw new RuntimeException(\"dropindex not supported\");\n  IStoredList<IEntryCacheInfo> entriesList=updatedTypeData.getEntries();\n  IStoredListIterator pos=null;\n  Context context=getCacheContext();\n  try {\n    for (pos=entriesList.establishListScan(true); pos != null; pos=entriesList.next(pos)) {\n      IEntryCacheInfo pEntry=(IEntryCacheInfo)pos.getSubject();\n      if (pEntry == null || (isEvictableCachePolicy() && pEntry.isRemoving()))       continue;\n      IEntryHolder entry=pEntry.getEntryHolder(this);\n      if (entry.isDeleted())       continue;\n      if (pEntry.isRecentDelete())       continue;\n      ILockObject entryLock=getLockManager().getLockObject(entry);\n      try {\n        boolean needUnpin=false;\nsynchronized (entryLock) {\n          try {\n            if (entry.isDeleted())             continue;\n            if (isEvictableCachePolicy()) {\n              if (pEntry.setPinned(true,true)) {\n                needUnpin=true;\n              }\n else               continue;\n            }\n else             if (entry.isOffHeapEntry()) {\n              entry=getEntry(context,entry,true,true);\n              needUnpin=true;\n            }\n            TypeDataIndex.reindexEntry(this,pEntry,updatedTypeData);\n          }\n catch (          SAException ex) {\n            if (_logger.isLoggable(Level.SEVERE))             _logger.log(Level.SEVERE,\"Reindex entry problem uid=\" + entry.getUID(),ex);\n            throw new RuntimeException(\"Reindex problem: \" + ex);\n          }\n finally {\n            if (needUnpin)             unpinIfNeeded(context,entry,null,null);\n          }\n        }\n      }\n  finally {\n        if (entryLock != null) {\n          getLockManager().freeLockObject(entryLock);\n        }\n      }\n    }\n  }\n  finally {\n    entriesList.freeSLHolder(pos);\n    freeCacheContext(context);\n  }\n}\n", "nl": "given a tppe data which indexes where added/deleted from it index the entries & templates of this type. updatedTypeData contains the new indexes structures"}
{"code": "@CalledByNative public static Bitmap generateHomeScreenIcon(Context context,String url,int red,int green,int blue){\n  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n  final int outerSize=am.getLauncherLargeIconSize();\n  final int iconDensity=am.getLauncherLargeIconDensity();\n  Bitmap bitmap=null;\n  try {\n    bitmap=Bitmap.createBitmap(outerSize,outerSize,Bitmap.Config.ARGB_8888);\n  }\n catch (  OutOfMemoryError e) {\n    Log.w(TAG,\"OutOfMemoryError while trying to draw bitmap on canvas.\");\n    return null;\n  }\n  Canvas canvas=new Canvas(bitmap);\n  int padding=(int)(GENERATED_ICON_PADDING_RATIO * outerSize);\n  Rect outerBounds=new Rect(0,0,outerSize,outerSize);\n  Bitmap bookmarkWidgetBg=getBitmapFromResourceId(context,R.mipmap.bookmark_widget_bg,iconDensity);\n  Paint paint=new Paint(Paint.FILTER_BITMAP_FLAG);\n  canvas.drawBitmap(bookmarkWidgetBg,null,outerBounds,paint);\n  int innerSize=outerSize - 2 * padding;\n  int cornerRadius=Math.round(ICON_CORNER_RADIUS_RATIO * outerSize);\n  int fontSize=Math.round(GENERATED_ICON_FONT_SIZE_RATIO * outerSize);\n  int color=Color.rgb(red,green,blue);\n  RoundedIconGenerator generator=new RoundedIconGenerator(innerSize,innerSize,cornerRadius,color,fontSize);\n  Bitmap icon=generator.generateIconForUrl(url);\n  if (icon == null)   return null;\n  canvas.drawBitmap(icon,padding,padding,null);\n  return bitmap;\n}\n", "nl": "Generates a generic icon to be used in the launcher. This is just a rounded rectangle with a letter in the middle taken from the website's domain name."}
{"code": "public static Map<String,Object> removeCategoryMembersOfDiscProducts(DispatchContext dctx,Map<String,? extends Object> context){\n  Delegator delegator=dctx.getDelegator();\n  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();\n  Locale locale=(Locale)context.get(\"locale\");\n  String errMsg=null;\n  try {\n    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition(\"salesDiscontinuationDate\",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition(\"salesDiscontinuationDate\",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp)),EntityOperator.AND);\n    EntityListIterator eli=EntityQuery.use(delegator).from(\"Product\").where(condition).queryIterator();\n    GenericValue product=null;\n    int numSoFar=0;\n    while ((product=eli.next()) != null) {\n      String productId=product.getString(\"productId\");\n      List<GenericValue> productCategoryMemberList=EntityQuery.use(delegator).from(\"ProductCategoryMember\").where(\"productId\",productId).queryList();\n      if (productCategoryMemberList.size() > 0) {\n        for (        GenericValue productCategoryMember : productCategoryMemberList) {\n          productCategoryMember.remove();\n        }\n        numSoFar++;\n        if (numSoFar % 500 == 0) {\n          Debug.logInfo(\"Removed category members for \" + numSoFar + \" sales discontinued products.\",module);\n        }\n      }\n    }\n    eli.close();\n    Debug.logInfo(\"Completed - Removed category members for \" + numSoFar + \" sales discontinued products.\",module);\n  }\n catch (  GenericEntityException e) {\n    Map<String,String> messageMap=UtilMisc.toMap(\"errMessage\",e.toString());\n    errMsg=UtilProperties.getMessage(resourceError,\"productutilservices.entity_error_running_removeCategoryMembersOfDiscProducts\",messageMap,locale);\n    Debug.logError(e,errMsg,module);\n    return ServiceUtil.returnError(errMsg);\n  }\n  return ServiceUtil.returnSuccess();\n}\n", "nl": "for all disc products, remove from category memberships"}
{"code": "@Override public void onCreate(Bundle icicle){\n  super.onCreate(icicle);\n  setContentView(R.layout.slice_fileselect);\n  listView=(ListView)findViewById(R.id.listView);\n  boolean bBrowseToRoot=true;\n  Bundle extras=getIntent().getExtras();\n  if (extras != null) {\n    msPathSelectedFile=extras.getString(PATH_FILE_IN_ID);\n    if (!msPathSelectedFile.equals(\"\")) {\n      File CurrentFile=new File(msPathSelectedFile);\n      if (CurrentFile != null && CurrentFile.exists()) {\n        if (CurrentFile.getParent() != null) {\n          this.browseTo(CurrentFile.getParentFile());\n          bBrowseToRoot=false;\n        }\n      }\n    }\n  }\n  if (bBrowseToRoot == true)   browseToRoot();\n  listView.setSelection(0);\n  listView.setOnItemClickListener(this);\n}\n", "nl": "Called when the activity is first created."}
{"code": "public String upload_appender_file1(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_appender_file(group_name,file_size,callback,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n", "nl": "upload appender file to storage server (by callback)"}
{"code": "private long timeSinceLastPrecacheMs(Context context){\n  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  long lastPrecacheTimeMs=prefs.getLong(PREF_PRECACHE_LAST_TIME,-WAIT_UNTIL_NEXT_PRECACHE_MS);\n  return getElapsedRealtimeOnSystem() - lastPrecacheTimeMs;\n}\n", "nl": "Returns the number of milliseconds since the last precache run completed."}
{"code": "public static boolean isUSPhoneNumber(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);\n  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneNumber);\n}\n", "nl": "isUSPhoneNumber returns true if string s is a valid U.S. Phone Number.  Must be 10 digits."}
{"code": "UnicodeEscapesDecodingReader(Reader reader){\n  if (reader == null) {\n    throw new NullPointerException(\"reader is null\");\n  }\n  this.reader=reader;\n}\n", "nl": "Creates an instance of this class."}
{"code": "public FriendsGetQuery(VkApiClient client){\n  super(client,\"friends.get\",GetResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private String stripTags(String content){\n  return Jsoup.parse(content).text();\n}\n", "nl": "Strips the tags from an element"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_WIN_FIELDARTIFACT(String value1,String value0,String value2){\n  return new SM_SYSTEM_MESSAGE(1400301,value1,value0,value2);\n}\n", "nl": "%1 of %0 obtained the Artifact %2."}
{"code": "private int start(){\n  if ((this.status == AccelListener.RUNNING) || (this.status == AccelListener.STARTING)) {\n    startTimeout();\n    return this.status;\n  }\n  this.setStatus(AccelListener.STARTING);\n  List<Sensor> list=this.sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER);\n  if ((list != null) && (list.size() > 0)) {\n    this.mSensor=list.get(0);\n    if (this.sensorManager.registerListener(this,this.mSensor,SensorManager.SENSOR_DELAY_UI)) {\n      this.setStatus(AccelListener.STARTING);\n    }\n else {\n      this.setStatus(AccelListener.ERROR_FAILED_TO_START);\n      this.fail(AccelListener.ERROR_FAILED_TO_START,\"Device sensor returned an error.\");\n      return this.status;\n    }\n    ;\n  }\n else {\n    this.setStatus(AccelListener.ERROR_FAILED_TO_START);\n    this.fail(AccelListener.ERROR_FAILED_TO_START,\"No sensors found to register accelerometer listening to.\");\n    return this.status;\n  }\n  startTimeout();\n  return this.status;\n}\n", "nl": "Start listening for acceleration sensor."}
{"code": "static void calcConsole(){\n  Scanner read=new Scanner(System.in);\n  System.out.println(\"Enter separated by space: Integer [+|-|*|/] Integer\");\n  int first=read.nextInt();\n  String operator=read.next();\n  int second=read.nextInt();\nswitch (operator) {\ncase \"+\":\n    System.out.println(\"= \" + (first + second));\n  break;\ncase \"-\":\nSystem.out.println(\"= \" + (first - second));\nbreak;\ncase \"*\":\nSystem.out.println(\"= \" + (first * second));\nbreak;\ncase \"/\":\nif (second != 0) {\nSystem.out.println(\"= \" + (first / second));\n}\n else {\nSystem.out.println(\"Error: Division by zero\");\n}\nbreak;\ndefault :\nSystem.out.println(\"Error: Undefined operation\");\n}\n}\n", "nl": "a simple console calculator"}
{"code": "public static void init(String conf_filename) throws FileNotFoundException, IOException, MyException {\n  IniFileReader iniReader;\n  String[] szTrackerServers;\n  String[] parts;\n  iniReader=new IniFileReader(conf_filename);\n  g_connect_timeout=iniReader.getIntValue(\"connect_timeout\",DEFAULT_CONNECT_TIMEOUT);\n  if (g_connect_timeout < 0) {\n    g_connect_timeout=DEFAULT_CONNECT_TIMEOUT;\n  }\n  g_connect_timeout*=1000;\n  g_network_timeout=iniReader.getIntValue(\"network_timeout\",DEFAULT_NETWORK_TIMEOUT);\n  if (g_network_timeout < 0) {\n    g_network_timeout=DEFAULT_NETWORK_TIMEOUT;\n  }\n  g_network_timeout*=1000;\n  g_charset=iniReader.getStrValue(\"charset\");\n  if (g_charset == null || g_charset.length() == 0) {\n    g_charset=\"ISO8859-1\";\n  }\n  szTrackerServers=iniReader.getValues(\"tracker_server\");\n  if (szTrackerServers == null) {\n    throw new MyException(\"item \\\"tracker_server\\\" in \" + conf_filename + \" not found\");\n  }\n  InetSocketAddress[] tracker_servers=new InetSocketAddress[szTrackerServers.length];\n  for (int i=0; i < szTrackerServers.length; i++) {\n    parts=szTrackerServers[i].split(\"\\\\:\",2);\n    if (parts.length != 2) {\n      throw new MyException(\"the value of item \\\"tracker_server\\\" is invalid, the correct format is host:port\");\n    }\n    tracker_servers[i]=new InetSocketAddress(parts[0].trim(),Integer.parseInt(parts[1].trim()));\n  }\n  g_tracker_group=new TrackerGroup(tracker_servers);\n  g_tracker_http_port=iniReader.getIntValue(\"http.tracker_http_port\",80);\n  g_anti_steal_token=iniReader.getBoolValue(\"http.anti_steal_token\",false);\n  if (g_anti_steal_token) {\n    g_secret_key=iniReader.getStrValue(\"http.secret_key\");\n  }\n}\n", "nl": "load global variables"}
{"code": "public void onSaveInstanceState(Bundle outState){\n  outState.putInt(CURRENT_SELECTED_ITEM_BUNDLE_KEY,currentSelectedItem);\n  outState.putInt(CENTRE_BUTTON_ICON_KEY,centreButtonIcon);\n  outState.putInt(SPACE_BACKGROUND_COLOR_KEY,spaceBackgroundColor);\n  outState.putBoolean(BADGE_FULL_TEXT_KEY,shouldShowBadgeWithNinePlus);\n  if (badgeSaveInstanceHashMap.size() > 0)   outState.putSerializable(BUDGES_ITEM_BUNDLE_KEY,badgeSaveInstanceHashMap);\n  if (changedItemAndIconHashMap.size() > 0)   outState.putSerializable(CHANGED_ICON_AND_TEXT_BUNDLE_KEY,changedItemAndIconHashMap);\n}\n", "nl": "Save budges and current position"}
{"code": "public void addGatingSequences(Sequence... gatingSequences){\n  sequencer.addGatingSequences(gatingSequences);\n}\n", "nl": "Add the specified gating sequences to this instance of the Disruptor.  They will safely and atomically added to the list of gating sequences."}
{"code": "public boolean typedEquals(IdentifiableObject other){\n  if (other == null) {\n    return false;\n  }\n  if (getUid() != null ? !getUid().equals(other.getUid()) : other.getUid() != null) {\n    return false;\n  }\n  if (getCode() != null ? !getCode().equals(other.getCode()) : other.getCode() != null) {\n    return false;\n  }\n  if (getName() != null ? !getName().equals(other.getName()) : other.getName() != null) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Equality check against typed identifiable object. This method is not vulnerable to proxy issues, where an uninitialized object class type fails comparison to a real class."}
{"code": "public void recover(long cookie,LogRecord rec) throws LogException {\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(TxnManagerImpl.class.getName(),\"recover\",new Object[]{new Long(cookie),rec});\n  }\n  TxnManagerTransaction tmt=enterTMT(cookie);\n  TxnLogRecord trec=(TxnLogRecord)rec;\n  trec.recover(tmt);\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.exiting(TxnManagerImpl.class.getName(),\"recover\");\n  }\n}\n", "nl": "This method recovers state changes resulting from committing a transaction.  This re-creates the internal representation of the transaction."}
{"code": "public static boolean shouldUseOpaqueTextboxBackground(int color){\n  return getLightnessForColor(color) > LIGHTNESS_OPAQUE_BOX_THRESHOLD;\n}\n", "nl": "Check which version of the textbox background should be used depending on the given color."}
{"code": "public boolean isAltDown(){\n  return mIsAltDown;\n}\n", "nl": "Accessor for alt down check"}
{"code": "public static PolynomialCluster[] train(Polynomial[] polynomials,KMeansClusteringTrainerParams kmeansParams){\n  int[] totalObservationsInClusters;\n  int[] clusterIndices;\n  int observations=polynomials.length;\n  int polynomialOrder=polynomials[0].getOrder();\n  Polynomial[] m_new=new Polynomial[kmeansParams.numClusters];\n  boolean[][] b=new boolean[observations][kmeansParams.numClusters];\n  boolean[][] b_old=new boolean[observations][kmeansParams.numClusters];\n  Polynomial[] clusterMeans=new Polynomial[kmeansParams.numClusters];\n  for (int k=0; k < kmeansParams.numClusters; k++)   clusterMeans[k]=new Polynomial(polynomialOrder);\n  for (int t=1; t <= observations; t++) {\n    Arrays.fill(b[t - 1],false);\n  }\n  Polynomial mAll=Polynomial.mean(polynomials);\n  double[] dists=new double[observations];\n  double[] tmp=new double[kmeansParams.numClusters + 1];\n  for (int k=1; k <= kmeansParams.numClusters; k++) {\n    for (int t=1; t <= observations; t++) {\n      if (k > 1) {\n        for (int i=1; i <= k - 1; i++) {\n          tmp[i - 1]=clusterMeans[i - 1].polynomialDistance(polynomials[t - 1]);\n        }\n        tmp[k - 1]=mAll.polynomialDistance(polynomials[t - 1]);\n        dists[t - 1]=MathUtils.mean(tmp,0,k - 1);\n      }\n else {\n        dists[t - 1]=mAll.polynomialDistance(polynomials[t - 1]);\n      }\n    }\n    double maxD=Double.MIN_VALUE;\n    int maxInd=-1;\n    for (int t=1; t <= observations; t++) {\n      if (dists[t - 1] > maxD) {\n        maxD=dists[t - 1];\n        maxInd=t;\n      }\n    }\n    clusterMeans[k - 1].copyCoeffs(polynomials[maxInd - 1]);\n  }\n  int[] tinyClusterInds=new int[kmeansParams.numClusters];\n  int numTinyClusters=0;\n  totalObservationsInClusters=new int[kmeansParams.numClusters];\n  clusterIndices=new int[observations];\n  int iter=0;\n  boolean bCont=true;\n  while (bCont) {\n    for (int t=1; t <= observations; t++) {\n      double minDist=Double.MAX_VALUE;\n      int ind=-1;\n      for (int i=1; i <= kmeansParams.numClusters; i++) {\n        double tmpDist=clusterMeans[i - 1].polynomialDistance(polynomials[t - 1]);\n        b[t - 1][i - 1]=false;\n        if (tmpDist < minDist) {\n          minDist=tmpDist;\n          ind=i;\n        }\n      }\n      b[t - 1][ind - 1]=true;\n    }\n    for (int i=1; i <= kmeansParams.numClusters; i++) {\n      totalObservationsInClusters[i - 1]=0;\n      tinyClusterInds[i - 1]=0;\n    }\n    int c=1;\n    for (int i=1; i <= kmeansParams.numClusters; i++) {\n      m_new[i - 1]=new Polynomial(polynomialOrder);\n      for (int t=1; t <= observations; t++) {\n        if (b[t - 1][i - 1]) {\n          for (int d=0; d <= polynomialOrder; d++)           m_new[i - 1].coeffs[d]+=polynomials[t - 1].coeffs[d];\n          clusterIndices[t - 1]=i - 1;\n          (totalObservationsInClusters[i - 1])++;\n        }\n      }\n      if ((double)totalObservationsInClusters[i - 1] < kmeansParams.minSamplesInOneCluster) {\n        tinyClusterInds[c - 1]=i;\n        numTinyClusters++;\n        c++;\n      }\n    }\n    c=0;\n    double[] tmps=new double[totalObservationsInClusters.length];\n    for (int a=0; a < tmps.length; a++) {\n      tmps[a]=totalObservationsInClusters[a];\n    }\n    int[] inds=MathUtils.quickSort(tmps,0,kmeansParams.numClusters - 1);\n    for (int i=1; i <= kmeansParams.numClusters; i++) {\n      if (totalObservationsInClusters[i - 1] >= kmeansParams.minSamplesInOneCluster) {\n        for (int d=0; d <= polynomialOrder; d++) {\n          clusterMeans[i - 1].coeffs[d]=m_new[i - 1].coeffs[d] / totalObservationsInClusters[i - 1];\n        }\n      }\n else {\n        for (int d=0; d <= polynomialOrder; d++) {\n          double rnd=2 * (Math.random() - 0.5) * clusterMeans[inds[kmeansParams.numClusters - c - 1]].coeffs[d]* 0.01;\n          clusterMeans[i - 1].coeffs[d]=clusterMeans[inds[kmeansParams.numClusters - c - 1]].coeffs[d] + rnd;\n        }\n        c++;\n      }\n    }\n    int[] prev_totals=totalObservationsInClusters.clone();\n    iter++;\n    int totChanged=0;\n    if (iter > 1) {\n      if (iter >= kmeansParams.maxIterations) {\n        bCont=false;\n      }\n      for (int t=1; t <= observations; t++) {\n        for (int i=1; i <= kmeansParams.numClusters; i++) {\n          if (b_old[t - 1][i - 1] != b[t - 1][i - 1]) {\n            totChanged++;\n            break;\n          }\n        }\n      }\n      double changedPerc=(double)totChanged / observations * 100.0;\n      if (changedPerc < kmeansParams.minClusterChangePercent) {\n        bCont=false;\n      }\n    }\n    for (int t=1; t <= observations; t++) {\n      System.arraycopy(b[t - 1],0,b_old[t - 1],0,b[t - 1].length);\n    }\n  }\n  PolynomialCluster[] clusters=new PolynomialCluster[kmeansParams.numClusters];\n  for (int i=1; i <= kmeansParams.numClusters; i++) {\n    Polynomial[] members=new Polynomial[totalObservationsInClusters[i - 1]];\n    int m=0;\n    for (int t=1; t <= observations; t++) {\n      if (b[t - 1][i - 1]) {\n        members[m]=polynomials[t - 1];\n        m++;\n      }\n    }\n    assert m == members.length;\n    clusters[i - 1]=new PolynomialCluster(clusterMeans[i - 1],members);\n  }\n  return clusters;\n}\n", "nl": "This function clusters polynomials using K-Means clustering procedure, using a polynomial distance function. Training consists of four steps: (a) Initialization (random assignment of cluster means using data points that are far away from each other + slight random shifts) (b) Hard clustering of samples according to new cluster means (c) Update of cluster means using assigned samples (d) Re-iteration of (b) and (c) until convergence, i.e. when overall cluster occupancy does not change much"}
{"code": "public Window(Collection<String> words,int windowSize,int begin,int end){\n  if (words == null)   throw new IllegalArgumentException(\"Words must be a list of size 3\");\n  this.words=new ArrayList<>(words);\n  int windowSize1=windowSize;\n  this.begin=begin;\n  this.end=end;\n  initContext();\n}\n", "nl": "Initialize a window with the given size"}
{"code": "static <ParameterType>void checkParameterArrayIsNotNull(final String parameterName,final ParameterType[] parameterValues){\n  checkParameterIsNotNull(parameterName,parameterValues);\n  if (parameterValues.length == 0) {\n    throw new IllegalArgumentException(parameterName + \" cannot be empty.\");\n  }\n  for (  final ParameterType parameterValue : parameterValues) {\n    if (parameterValue == null) {\n      throw new IllegalArgumentException(parameterName + \" cannot contain null.\");\n    }\n  }\n}\n", "nl": "Checks that an array does not contain null reference."}
{"code": "public static String toString(final int intValue){\n  return Integer.toHexString(intValue);\n}\n", "nl": "Turns an integer into a hexadecimal string."}
{"code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  LoadBalancingPolicy copy=(LoadBalancingPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n", "nl": "Test read and write full ClusterPolicy object"}
{"code": "public static Timestamp stringToTimeStamp(String dateTimeString,String dateTimeFormat,TimeZone tz,Locale locale) throws ParseException {\n  DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale);\n  Date parsedDate=dateFormat.parse(dateTimeString);\n  return new Timestamp(parsedDate.getTime());\n}\n", "nl": "Localized String to Timestamp conversion. To be used in tandem with timeStampToString()."}
{"code": "public final int hashCode(){\n  if (toString() == null) {\n    return 0;\n  }\n  return toString().hashCode();\n}\n", "nl": "Finalizes the hashCode method"}
{"code": "synchronized void unregisterToNotifications() throws JMSException {\n  if (eventSession == null) {\n    return;\n  }\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.log(Level.FINE,toString2() + \"GSMessageConsumerImpl.unregisterToNotifications(): unregistering from notifications\");\n  }\n  try {\n    eventSession.close();\n  }\n catch (  IOException e) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,toString2() + \"GSMessageConsumerImpl.stopAsynchronous(): IOException while closing event session\" + e);\n    }\n    JMSException e1=new JMSException(\"Failed to close event session.\");\n    e1.setLinkedException(e);\n    throw e1;\n  }\ncatch (  UnknownLeaseException e) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,toString2() + \"GSMessageConsumerImpl.stopAsynchronous(): UnknownLeaseException while closing event session\" + e);\n    }\n    JMSException e1=new JMSException(\"Failed to close event session.\");\n    e1.setLinkedException(e);\n    throw e1;\n  }\ncatch (  Exception e) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,toString2() + \"GSMessageConsumerImpl.stopAsynchronous(): UnknownLeaseException while closing event session\" + e);\n    }\n    JMSException e1=new JMSException(\"Failed to close event session.\");\n    e1.setLinkedException(e);\n    throw e1;\n  }\n finally {\n    eventSession=null;\n  }\n}\n", "nl": "Closes the NotifyDelegator so no more notifications will arrive."}
{"code": "public Object nextEntity(char a) throws JSONException {\n  StringBuilder sb=new StringBuilder();\n  for (; ; ) {\n    char c=next();\n    if (Character.isLetterOrDigit(c) || c == '#') {\n      sb.append(Character.toLowerCase(c));\n    }\n else     if (c == ';') {\n      break;\n    }\n else {\n      throw syntaxError(\"Missing ';' in XML entity: &\" + sb);\n    }\n  }\n  String s=sb.toString();\n  Object e=entity.get(s);\n  return e != null ? e : a + s + \";\";\n}\n", "nl": "Return the next entity. These entities are translated to Characters: <code>&amp;  &apos;  &gt;  &lt;  &quot;</code>."}
{"code": "public PointList(int dimension,int capacity) throws IllegalArgumentException {\n  if (dimension < 1)   throw new IllegalArgumentException(\"the dimension must be at least one\");\n  if (capacity < 1)   throw new IllegalArgumentException(\"the initial capacity must be at least one\");\n  this.data=new Matrix[capacity];\n  this.dimension=dimension;\n  this.min=new double[dimension];\n  this.max=new double[dimension];\n  this.sum=new Matrix(dimension,1);\n  this.squaredSum=new Matrix(dimension,1);\n}\n", "nl": "Creates a new point list."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200849,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] received %num0 damage as it used [%SkillName]."}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public BKLogSegmentWriter startLogSegment(long txId) throws IOException {\n  return startLogSegment(txId,false,false);\n}\n", "nl": "Start a new log segment in a BookKeeper ledger. First ensure that we have the write lock for this journal. Then create a ledger and stream based on that ledger. The ledger id is written to the inprogress znode, so that in the case of a crash, a recovery process can find the ledger we were writing to when we crashed."}
{"code": "public synchronized void flush() throws IOException {\n  checkNotClosed();\n  trimToSize();\n  journalWriter.flush();\n}\n", "nl": "Force buffered operations to the filesystem."}
{"code": "private boolean isWidgetNewlyCreated(){\n  long currentFolder=mPreferences.getLong(STATE_CURRENT_FOLDER,ChromeBrowserProviderClient.INVALID_BOOKMARK_ID);\n  return currentFolder == ChromeBrowserProviderClient.INVALID_BOOKMARK_ID;\n}\n", "nl": "This method relies on the fact that STATE_CURRENT_FOLDER pref is not yet set when onCreate is called for a newly created widget."}
{"code": "public IntDataType(byte[] buf){\n  if (buf.length != this.getSize()) {\n    throw new DataTypeException(\"Wrong size buffer for int\");\n  }\n  this.i=ByteBuffer.wrap(buf).getInt();\n}\n", "nl": "Construct an IntDataType from the bytes in buf."}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isReWrittenEntry(String uid){\n  return _reWrittenEntries != null && _reWrittenEntries.containsKey(uid);\n}\n", "nl": "check weather an entry is rewritten under xtn"}
{"code": "public NewsfeedSearchQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of posts to return."}
{"code": "@Override protected void parseOptimizationData(OptimizationData... optData){\n  super.parseOptimizationData(optData);\n  for (  OptimizationData data : optData) {\n    if (data instanceof ObjectiveFunctionGradient) {\n      gradient=((ObjectiveFunctionGradient)data).getObjectiveFunctionGradient();\n      break;\n    }\n  }\n}\n", "nl": "Scans the list of (required and optional) optimization data that characterize the problem."}
{"code": "public void finish() throws IOException {\n  if (out == null) {\n    throw new IOException(\"Stream is closed\");\n  }\n  if (cDir == null) {\n    return;\n  }\n  if (entries.isEmpty()) {\n    throw new ZipException(\"No entries\");\n  }\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int cdirEntriesSize=cDir.size();\n  writeLongAsUint32(cDir,ENDSIG);\n  writeIntAsUint16(cDir,0);\n  writeIntAsUint16(cDir,0);\n  if (archiveNeedsZip64EocdRecord) {\n    writeIntAsUint16(cDir,0xFFFF);\n    writeIntAsUint16(cDir,0xFFFF);\n    writeLongAsUint32(cDir,0xFFFFFFFF);\n    writeLongAsUint32(cDir,0xFFFFFFFF);\n  }\n else {\n    writeIntAsUint16(cDir,entries.size());\n    writeIntAsUint16(cDir,entries.size());\n    writeLongAsUint32(cDir,cdirEntriesSize);\n    writeLongAsUint32(cDir,offset);\n  }\n  writeIntAsUint16(cDir,commentBytes.length);\n  if (commentBytes.length > 0) {\n    cDir.write(commentBytes);\n  }\n  cDir.writeTo(out);\n  cDir=null;\n}\n", "nl": "Indicates that all entries have been written to the stream. Any terminal information is written to the underlying stream."}
{"code": "public void java_lang_Package_getSystemPackages0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());\n}\n", "nl": "private static native java.lang.String getSystemPackages0()[];"}
{"code": "@Override public boolean input(I input){\n  if (getAvailableInputSlot() <= 0) {\n    return false;\n  }\n  int bufferIndex=(int)(inputCnt % bufferSize);\n  inputs.set(bufferIndex,input);\n  inputCnt++;\n  scheduleRun();\n  return true;\n}\n", "nl": "Thread UNSAFE"}
{"code": "public T key(){\n  return k;\n}\n", "nl": "The key."}
{"code": "private boolean shouldIgnoreSelection(){\n  return ignoreSelection;\n}\n", "nl": "Return ignore selection flag state."}
{"code": "public void trim(double leftTrimSecond,double rightTrimSecond){\n  int sampleRate=waveHeader.getSampleRate();\n  int bitsPerSample=waveHeader.getBitsPerSample();\n  int channels=waveHeader.getChannels();\n  int leftTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * leftTrimSecond);\n  int rightTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * rightTrimSecond);\n  trim(leftTrimNumberOfSample,rightTrimNumberOfSample);\n}\n", "nl": "Trim the wave data"}
{"code": "public double tTest(final double mu,final StatisticalSummary sampleStats) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {\n  checkSampleData(sampleStats);\n  return tTest(sampleStats.getMean(),mu,sampleStats.getVariance(),sampleStats.getN());\n}\n", "nl": "Returns the <i>observed significance level</i>, or <i>p-value</i>, associated with a one-sample, two-tailed t-test comparing the mean of the dataset described by <code>sampleStats</code> with the constant <code>mu</code>. <p> The number returned is the smallest significance level at which one can reject the null hypothesis that the mean equals <code>mu</code> in favor of the two-sided alternative that the mean is different from <code>mu</code>. For a one-sided test, divide the returned value by 2.</p> <p> <strong>Usage Note:</strong><br> The validity of the test depends on the assumptions of the parametric t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\"> here</a></p> <p> <strong>Preconditions</strong>: <ul> <li>The sample must contain at least 2 observations. </li></ul></p>"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views"}
{"code": "public void addResource(InputStream in){\n  addResourceObject(in);\n}\n", "nl": "Add a configuration resource. The properties of this resource will override properties of previously added resources, unless they were marked <a href=\"#Final\">final</a>."}
{"code": "public MultipartParser(HttpRequest req,int maxSize,boolean buffer,boolean limitLength) throws IOException {\n  this(req,maxSize,buffer,limitLength,null);\n}\n", "nl": "Creates a <code>MultipartParser</code> from the specified request, which limits the upload size to the specified length, and optionally buffers for performance and prevents attempts to read past the amount specified by the Content-Length."}
{"code": "public void testQueryExcludeSubtasksSorted() throws Exception {\n  TaskQuery query=taskService.createTaskQuery().orderByTaskAssignee().asc();\n  assertEquals(10,query.count());\n  assertEquals(10,query.list().size());\n  query=taskService.createTaskQuery().excludeSubtasks().orderByTaskAssignee().desc();\n  assertEquals(3,query.count());\n  assertEquals(3,query.list().size());\n}\n", "nl": "test for task inclusion/exclusion (no other filters, order by task assignee )"}
{"code": "private static boolean nsEquals(String nsURI_1,String nsURI_2){\n  if (nsURI_1 == null) {\n    return (nsURI_2 == null);\n  }\n else {\n    return nsURI_1.equals(nsURI_2);\n  }\n}\n", "nl": "Compares two namespace URIs with an extra case for null entries"}
{"code": "public static <T>Observable<T> whileDo(ObservableSource<? extends T> source,BooleanSupplier preCondition){\n  ObjectHelper.requireNonNull(source,\"source is null\");\n  ObjectHelper.requireNonNull(preCondition,\"preCondition is null\");\n  return RxJavaPlugins.onAssembly(new ObservableWhileDoWhile<T>(source,preCondition,preCondition));\n}\n", "nl": "Return an Observable that re-emits the emissions from the source Observable as long as the condition is true before the first or subsequent subscribe() calls. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/whileDo.png\" alt=\"\">"}
{"code": "public static final List bubbleSortVerticesByStringLength(List l){\n  boolean bChanged=true;\n  while (bChanged) {\n    bChanged=false;\n    for (int iCnt=0; iCnt < l.size() - 1; iCnt++) {\n      if ((l.get(iCnt + 1).toString()).length() > (l.get(iCnt).toString()).length()) {\n        VertexImpl vTmp=(VertexImpl)(l.get(iCnt + 1));\n        l.set(iCnt + 1,l.get(iCnt));\n        l.set(iCnt,vTmp);\n        bChanged=true;\n      }\n    }\n  }\n  return l;\n}\n", "nl": "Bubble sorts the strings in a given String list, where the longest string is the first checked."}
{"code": "protected boolean atToken(TokenKind kind){\n  return currentToken() == kind;\n}\n", "nl": "Checks if the current token matches the expected kind. Doesn't advance the parser."}
{"code": "public String process(Item word) throws ProcessException {\n  return wordBreak(word);\n}\n", "nl": "Performs some processing on the given item."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_SCORE_ALARM(int num0){\n  return new SM_SYSTEM_MESSAGE(1400236,num0);\n}\n", "nl": "Exceeded %num0 points!"}
{"code": "private Object invokeLRMIProxy(final IMethod method,Object[] args) throws Exception {\n  return method.invoke(this,args);\n}\n", "nl": "perform special handling of ILRMIProxy method"}
{"code": "public ViewBinder linkify(int viewId){\n  TextView view=retrieveView(viewId);\n  Linkify.addLinks(view,Linkify.ALL);\n  return this;\n}\n", "nl": "Add links into a TextView."}
{"code": "public boolean isPublic(){\n  return Modifier.isPublic(this.getModifiers());\n}\n", "nl": "Convenience method; returns true if this class is public."}
{"code": "protected void writeEntityToNBT(NBTTagCompound compound){\n  compound.setShort(\"Fuse\",(short)this.getFuse());\n  compound.setByte(\"Facing\",(byte)this.getFacing().getIndex());\n}\n", "nl": "(abstract) Protected helper method to write subclass entity data to NBT."}
{"code": "public static boolean attemptSmelting(EntityPlayerMP player,ItemStack input){\n  if (player == null || input == null)   return false;\n  List<ItemStack> ingredients=new ArrayList<ItemStack>();\n  ingredients.add(input);\n  ItemStack isOutput=(ItemStack)FurnaceRecipes.instance().getSmeltingList().get(input);\n  if (isOutput == null)   return false;\n  int cookingTime=200;\n  if (playerHasIngredients(player,ingredients) && totalBurnTimeInInventory(player) >= cookingTime) {\n    removeIngredientsFromPlayer(player,ingredients);\n    burnInventory(player,cookingTime,input);\n    ItemStack resultForInventory=isOutput.copy();\n    ItemStack resultForReward=isOutput.copy();\n    player.inventory.addItemStackToInventory(resultForInventory);\n    RewardForCollectingItemImplementation.GainItemEvent event=new RewardForCollectingItemImplementation.GainItemEvent(resultForReward);\n    MinecraftForge.EVENT_BUS.post(event);\n    return true;\n  }\n  return false;\n}\n", "nl": "Attempt to smelt the given item.<br> This returns instantly, callously disregarding such frivolous niceties as cooking times or the presence of a furnace.<br> It will, however, consume fuel from the player's inventory."}
{"code": "public static final void addPlayer(PlayerAlliance alliance,Player player){\n  Preconditions.checkNotNull(alliance,\"Alliance should not be null\");\n  alliance.onEvent(new PlayerEnteredEvent(alliance,player));\n}\n", "nl": "Add player to alliance"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public static String join(String... paths){\n  return PATH_JOINER.join(paths);\n}\n", "nl": "Joins a set of segment into a string, separating each segments with a host-specific path separator."}
{"code": "private void onGoogleAuthBtnClicked(final ActionEvent ignored){\n  final LoginData loginData=new LoginData();\n  if (configLoginData.hasToken()) {\n    loginData.setToken(configLoginData.getToken());\n    loginData.setSavedToken(true);\n  }\n else {\n    loginData.setToken(tokenField.getText());\n  }\n  loginData.setLoginType(LoginType.GOOGLE_AUTH);\n  tryLogin(loginData);\n}\n", "nl": "Event handler for googleAuthBtn."}
{"code": "public static boolean isBoundsEnabled(){\n  return boundsEnabled;\n}\n", "nl": "Returns true if the bounds should be rendered."}
{"code": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n  if (DEBUG)   debugPrintln(\"debug is on\");\n  ClassLoader cl=findClassLoader();\n  try {\n    String systemProp=SecuritySupport.getSystemProperty(factoryId);\n    if (systemProp != null && systemProp.length() > 0) {\n      if (DEBUG)       debugPrintln(\"found system property, value=\" + systemProp);\n      return newInstance(systemProp,cl,true);\n    }\n  }\n catch (  SecurityException se) {\n  }\n  String factoryClassName=null;\n  if (propertiesFilename == null) {\n    File propertiesFile=null;\n    boolean propertiesFileExists=false;\n    try {\n      String javah=SecuritySupport.getSystemProperty(\"java.home\");\n      propertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;\n      propertiesFile=new File(propertiesFilename);\n      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);\n    }\n catch (    SecurityException e) {\n      fLastModified=-1;\n      fXercesProperties=null;\n    }\nsynchronized (ObjectFactory.class) {\n      boolean loadProperties=false;\n      FileInputStream fis=null;\n      try {\n        if (fLastModified >= 0) {\n          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {\n            loadProperties=true;\n          }\n else {\n            if (!propertiesFileExists) {\n              fLastModified=-1;\n              fXercesProperties=null;\n            }\n          }\n        }\n else {\n          if (propertiesFileExists) {\n            loadProperties=true;\n            fLastModified=SecuritySupport.getLastModified(propertiesFile);\n          }\n        }\n        if (loadProperties) {\n          fXercesProperties=new Properties();\n          fis=SecuritySupport.getFileInputStream(propertiesFile);\n          fXercesProperties.load(fis);\n        }\n      }\n catch (      Exception x) {\n        fXercesProperties=null;\n        fLastModified=-1;\n      }\n finally {\n        if (fis != null) {\n          try {\n            fis.close();\n          }\n catch (          IOException exc) {\n          }\n        }\n      }\n    }\n    if (fXercesProperties != null) {\n      factoryClassName=fXercesProperties.getProperty(factoryId);\n    }\n  }\n else {\n    FileInputStream fis=null;\n    try {\n      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));\n      Properties props=new Properties();\n      props.load(fis);\n      factoryClassName=props.getProperty(factoryId);\n    }\n catch (    Exception x) {\n    }\n finally {\n      if (fis != null) {\n        try {\n          fis.close();\n        }\n catch (        IOException exc) {\n        }\n      }\n    }\n  }\n  if (factoryClassName != null) {\n    if (DEBUG)     debugPrintln(\"found in \" + propertiesFilename + \", value=\"+ factoryClassName);\n    return newInstance(factoryClassName,cl,true);\n  }\n  Object provider=findJarServiceProvider(factoryId);\n  if (provider != null) {\n    return provider;\n  }\n  if (fallbackClassName == null) {\n    throw new ConfigurationError(\"Provider for \" + factoryId + \" cannot be found\",null);\n  }\n  if (DEBUG)   debugPrintln(\"using fallback, value=\" + fallbackClassName);\n  return newInstance(fallbackClassName,cl,true);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>$java.home/lib/<i>propertiesFilename</i></code> file <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>"}
{"code": "public CreatePageWindow openCreatePageWindow(){\n  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);\n  return createPageWindow;\n}\n", "nl": "Click button New on SiteAdminActionBar"}
{"code": "@deprecated public char last(){\n  if (this.end != this.begin) {\n    this.pos=(this.end - 1);\n  }\n else {\n    this.pos=this.end;\n  }\n  return current();\n}\n", "nl": "/*    "}
{"code": "public boolean equalStranded(IntervalFeature x){\n  if (x == null) {\n    return false;\n  }\n  return (this.chrom.equals(x.chrom) && this.from == x.from && this.to == x.to && this.strand == x.strand);\n}\n", "nl": "Return true if x has the same coordinates of this object. Strand *is* taken into account"}
{"code": "public static boolean writeFile(File file,InputStream stream){\n  return writeFile(file,stream,false);\n}\n", "nl": "write file, the bytes will be written to the begin of the file"}
{"code": "public List<Writable> execute(List<Writable> input){\n  List<Writable> currValues=input;\n  for (  DataAction d : actionList) {\n    if (d.getTransform() != null) {\n      Transform t=d.getTransform();\n      currValues=t.map(currValues);\n    }\n else     if (d.getFilter() != null) {\n      Filter f=d.getFilter();\n      if (f.removeExample(currValues))       return null;\n    }\n else     if (d.getConvertToSequence() != null) {\n      throw new RuntimeException(\"Cannot execute examples individually: TransformProcess contains a ConvertToSequence operation\");\n    }\n else     if (d.getConvertFromSequence() != null) {\n      throw new RuntimeException(\"Unexpected operation: TransformProcess contains a ConvertFromSequence operation\");\n    }\n else     if (d.getSequenceSplit() != null) {\n      throw new RuntimeException(\"Cannot execute examples individually: TransformProcess contains a SequenceSplit operation\");\n    }\n else {\n      throw new RuntimeException(\"Unknown action: \" + d);\n    }\n  }\n  return currValues;\n}\n", "nl": "Execute the full sequence of transformations for a single example. May return null if example is filtered <b>NOTE:</b> Some TransformProcess operations cannot be done on examples individually. Most notably, ConvertToSequence and ConvertFromSequence operations require the full data set to be processed at once"}
{"code": "@Override public void onResults(Bundle bundle){\n  ArrayList<String> matches=bundle.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);\n  for (  String result : matches)   Log.i(TAG,\"A FINAL RESULTS: \" + result);\n  etQuestion.setText(matches.get(0));\n}\n", "nl": "We get an array of possible sentences framed from which only the first String is considered"}
{"code": "public static boolean isValidNmtoken(String nmtoken){\n  final int length=nmtoken.length();\n  if (length == 0) {\n    return false;\n  }\n  for (int i=0; i < length; ++i) {\n    char ch=nmtoken.charAt(i);\n    if (!isName(ch)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation"}
{"code": "public int addChildEdge(int parent,int child){\n  return super.addEdge(parent,child);\n}\n", "nl": "Add a child edge between the given nodes."}
{"code": "public MarketGetByIdQuery(VkApiClient client,UserActor actor,List<String> itemIds){\n  super(client,\"market.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return MESSAGE_TYPE;\ncase 2:\n  return REQUEST_INFO;\ncase 3:\nreturn RESPONSE_INFO;\ncase 4:\nreturn TRACE_INFO;\ncase 5:\nreturn GLOBAL_CONTEXT;\ncase 6:\nreturn LOCAL_CONTEXT;\ncase 7:\nreturn HEARTBEAT_INFO;\ndefault :\nreturn null;\n}\n}\n", "nl": "Find the _Fields constant that matches fieldId, or null if its not found."}
{"code": "public AwsIotCompletion(String topic,AWSIotQos qos,long timeout){\n  super(topic,qos);\n  this.timeout=timeout;\n  this.request=null;\n  this.isAsync=false;\n}\n", "nl": "Instantiates a new completion object with a synchronous request."}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if (groupCheckbox != null) {\n    Boolean oldValue=(Boolean)undoRedoObject.getOldValue();\n    groupCheckbox.setSelected(oldValue.booleanValue());\n    enableSubGroups(oldValue.booleanValue());\n  }\n}\n", "nl": "Undo action."}
{"code": "public Boolean createProductCategory(EntityManager em,String productCategory){\n  Boolean status=true;\n  ProductCategory prodcat=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    prodcat=new ProductCategory();\n    prodcat.setCategory(productCategory);\n    prodcat.setCategoryName(productCategory);\n    em.persist(prodcat);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during creation of Product category . Detailed info: \" + e);\n  }\n  return status;\n}\n", "nl": "Helper method to create Stock"}
{"code": "public Bundler putCharSequence(String key,CharSequence value){\n  bundle.putCharSequence(key,value);\n  return this;\n}\n", "nl": "Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null."}
{"code": "public static Matrix random(int m,int n){\n  Matrix A=new Matrix(m,n);\n  double[][] X=A.getArray();\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      X[i][j]=Math.random();\n    }\n  }\n  return A;\n}\n", "nl": "Generate matrix with random elements"}
{"code": "private void adjustBottomByAspectRatio(RectF rect,float aspectRatio){\n  rect.bottom=rect.top + rect.width() / aspectRatio;\n}\n", "nl": "Adjust bottom edge by current crop window width and the given aspect ratio, the top edge remains in possition while the top adjusts to keep aspect ratio to the width."}
{"code": "public int size(){\n  return elements.size();\n}\n", "nl": "Returns the number of elements in the array."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_ME_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200467,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget]'s attack speed has decreased because [%SkillCaster] used [%SkillName]."}
{"code": "@Override public int[] startContentModel(){\n  int[] state=new int[fNumElements + 1];\n  for (int i=0; i <= fNumElements; i++) {\n    state[i]=STATE_START;\n  }\n  return state;\n}\n", "nl": "This methods to be called on entering a first element whose type has this content model. It will return the initial state of the content model"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200751,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer afraid."}
{"code": "protected boolean confirmCommit(IResource[] modifiedResources,ProjectProperties projectProperties) throws SVNException {\n  IPreferenceStore preferenceStore=SVNUIPlugin.getPlugin().getPreferenceStore();\n  boolean commitToTagsPathWithoutWarning=preferenceStore.getBoolean(ISVNUIConstants.PREF_COMMIT_TO_TAGS_PATH_WITHOUT_WARNING);\n  if (!commitToTagsPathWithoutWarning && onTagPath(modifiedResources)) {\n    CommitToTagsWarningDialog dialog=new CommitToTagsWarningDialog(getShell());\n    if (dialog.open() != CommitToTagsWarningDialog.OK) {\n      return false;\n    }\n  }\n  int highestProblemSeverity=getHighestProblemSeverity(modifiedResources);\nswitch (highestProblemSeverity) {\ncase IMarker.SEVERITY_WARNING:\n    String allowCommitsWithWarnings=preferenceStore.getString(ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_WARNINGS);\n  if (MessageDialogWithToggle.PROMPT.equals(allowCommitsWithWarnings) || MessageDialogWithToggle.NEVER.equals(allowCommitsWithWarnings)) {\n    MessageDialogWithToggle warningDialog=MessageDialogWithToggle.openYesNoQuestion(shell,Policy.bind(\"CommitWizard.commitResources\"),Policy.bind(\"CommitWizard.warningMarkers\"),Policy.bind(\"CommitWizard.warningQuestion\"),false,preferenceStore,ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_WARNINGS);\n    if (IDialogConstants.YES_ID != warningDialog.getReturnCode()) {\n      return false;\n    }\n  }\nbreak;\ncase IMarker.SEVERITY_ERROR:\nString allowCommitsWithErrors=preferenceStore.getString(ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_ERRORS);\nif (MessageDialogWithToggle.PROMPT.equals(allowCommitsWithErrors) || MessageDialogWithToggle.NEVER.equals(allowCommitsWithErrors)) {\nMessageDialogWithToggle errorDialog=MessageDialogWithToggle.openYesNoQuestion(shell,Policy.bind(\"CommitWizard.commitResources\"),Policy.bind(\"CommitWizard.errorMarkers\"),Policy.bind(\"CommitWizard.errorQuestion\"),false,preferenceStore,ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_ERRORS);\nif (IDialogConstants.YES_ID != errorDialog.getReturnCode()) {\nreturn false;\n}\n}\nbreak;\n}\nSvnWizardCommitPage commitPage=new SvnWizardCommitPage(modifiedResources,url,projectProperties,statusMap,null,false);\nSvnWizard wizard=new SvnWizard(commitPage);\nSvnWizardDialog dialog=new SvnWizardDialog(getShell(),wizard);\nif (proposedComment == null || proposedComment.length() == 0) {\ncommitPage.setComment(getProposedComment(modifiedResources));\n}\n else {\ncommitPage.setComment(proposedComment);\n}\nwizard.setParentDialog(dialog);\nboolean commitOK=(dialog.open() == SvnWizardDialog.OK);\nurl=null;\ncommitComment=commitPage.getComment();\nresourcesToCommit=commitPage.getSelectedResources();\nkeepLocks=commitPage.isKeepLocks();\nreturn commitOK;\n}\n", "nl": "prompt commit of selected resources."}
{"code": "public FeatureVector[] featureVectorMapping(FeatureDefinition newFeatureDefinition){\n  if (!this.featureDefinition.contains(newFeatureDefinition)) {\n    throw new RuntimeException(\"the new feature definition is not a subset of original feature definition\");\n  }\n  int numberOfFeatures=newFeatureDefinition.getNumberOfFeatures();\n  int noByteFeatures=newFeatureDefinition.getNumberOfByteFeatures();\n  int noShortFeatures=newFeatureDefinition.getNumberOfShortFeatures();\n  int noContiniousFeatures=newFeatureDefinition.getNumberOfContinuousFeatures();\n  if (numberOfFeatures != (noByteFeatures + noShortFeatures + noContiniousFeatures)) {\n    throw new RuntimeException(\"The sum of byte, short and continious features are not equal to number of features\");\n  }\n  String[] featureNames=new String[numberOfFeatures];\n  for (int j=0; j < numberOfFeatures; j++) {\n    featureNames[j]=newFeatureDefinition.getFeatureName(j);\n  }\n  int[] featureIndexes=featureDefinition.getFeatureIndexArray(featureNames);\n  FeatureVector[] newFV=new FeatureVector[this.getNumberOfUnits()];\n  for (int i=0; i < this.getNumberOfUnits(); i++) {\n    byte[] byteFeatures=new byte[noByteFeatures];\n    short[] shortFeatures=new short[noShortFeatures];\n    float[] continiousFeatures=new float[noContiniousFeatures];\n    int countByteFeatures=0;\n    int countShortFeatures=0;\n    int countFloatFeatures=0;\n    for (int j=0; j < featureIndexes.length; j++) {\n      if (newFeatureDefinition.isByteFeature(j)) {\n        byteFeatures[countByteFeatures++]=featureVectors[i].getByteFeature(featureIndexes[j]);\n      }\n else       if (newFeatureDefinition.isShortFeature(j)) {\n        shortFeatures[countShortFeatures++]=featureVectors[i].getShortFeature(featureIndexes[j]);\n      }\n else       if (newFeatureDefinition.isContinuousFeature(j)) {\n        continiousFeatures[countFloatFeatures++]=featureVectors[i].getContinuousFeature(featureIndexes[j]);\n      }\n    }\n    newFV[i]=newFeatureDefinition.toFeatureVector(i,byteFeatures,shortFeatures,continiousFeatures);\n  }\n  return newFV;\n}\n", "nl": "feature vector mapping according to new feature definition Note: The new feature definition should be a subset of original feature definition"}
{"code": "public static <T>T[] readArray(Class<T> clazz,PacketBuffer buf,Function<PacketBuffer,T> reader){\n  T[] value=(T[])Array.newInstance(clazz,buf.readInt());\n  for (int i=0; i < value.length; i++) {\n    value[i]=reader.apply(buf);\n  }\n  return value;\n}\n", "nl": "Reads an array from the buffer"}
{"code": "public void addModule(Module module){\n  if (module instanceof HttpAdapterAware) {\n    ((HttpAdapterAware)module).setHttpAdapter(getHttpAdapter());\n  }\n  this.moduleRegistry.addModule(module);\n}\n", "nl": "Adds the given module."}
{"code": "public boolean isUseCompression(){\n  return useCompression;\n}\n", "nl": "compress strings?"}
{"code": "public boolean store(){\n  try {\n    prefs.sync();\n    return true;\n  }\n catch (  BackingStoreException ex) {\n    LOGGER.log(Level.SEVERE,\"Error saving preferences\",ex);\n  }\n  return false;\n}\n", "nl": "Persistently stores preferences values. This method is called automatically, typically you don't need to call it explicitely."}
{"code": "public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){\n  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;\n  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();\n  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,\"uil-pool-\"));\n}\n", "nl": "Creates default implementation of task executor"}
{"code": "public boolean skipString(String s) throws IOException {\n  if (DEBUG_BUFFER) {\n    System.out.print(\"(skipString, \\\"\" + s + \"\\\": \");\n    XMLEntityManager.print(fCurrentEntity);\n    System.out.println();\n  }\n  if (fCurrentEntity.position == fCurrentEntity.count) {\n    load(0,true);\n  }\n  final int length=s.length();\n  for (int i=0; i < length; i++) {\n    char c=fCurrentEntity.ch[fCurrentEntity.position++];\n    if (c != s.charAt(i)) {\n      fCurrentEntity.position-=i + 1;\n      if (DEBUG_BUFFER) {\n        System.out.print(\")skipString, \\\"\" + s + \"\\\": \");\n        XMLEntityManager.print(fCurrentEntity);\n        System.out.println(\" -> false\");\n      }\n      return false;\n    }\n    if (i < length - 1 && fCurrentEntity.position == fCurrentEntity.count) {\n      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.count - i - 1,fCurrentEntity.ch,0,i + 1);\n      if (load(i + 1,false)) {\n        fCurrentEntity.startPosition-=i + 1;\n        fCurrentEntity.position-=i + 1;\n        if (DEBUG_BUFFER) {\n          System.out.print(\")skipString, \\\"\" + s + \"\\\": \");\n          XMLEntityManager.print(fCurrentEntity);\n          System.out.println(\" -> false\");\n        }\n        return false;\n      }\n    }\n  }\n  if (DEBUG_BUFFER) {\n    System.out.print(\")skipString, \\\"\" + s + \"\\\": \");\n    XMLEntityManager.print(fCurrentEntity);\n    System.out.println(\" -> true\");\n  }\n  fCurrentEntity.columnNumber+=length;\n  return true;\n}\n", "nl": "Skips the specified string appearing immediately on the input. <p/> <strong>Note:</strong> The characters are consumed only if they are space characters."}
{"code": "public static void checkArgument(boolean expression){\n  if (!expression) {\n    throw new IllegalArgumentException();\n  }\n}\n", "nl": "Ensures the truth of an expression involving one or more parameters to the calling method."}
{"code": "public login(){\n  frame=new JFrame();\n  frame.getContentPane().setFont(new Font(\"Tahoma\",Font.PLAIN,11));\n  frame.setSize(6000,5000);\n  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  frame.getContentPane().setLayout(null);\n  JLabel lblNewLabel=new JLabel(\"Connect To The World :\");\n  lblNewLabel.setFont(new Font(\"Tahoma\",Font.BOLD,40));\n  lblNewLabel.setBounds(38,26,3290,42);\n  frame.getContentPane().add(lblNewLabel);\n  JLabel lblEmail=new JLabel(\"Email\");\n  lblEmail.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  lblEmail.setBounds(101,288,129,31);\n  frame.getContentPane().add(lblEmail);\n  textField=new JTextField();\n  textField.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  textField.setBounds(345,290,221,28);\n  frame.getContentPane().add(textField);\n  textField.setColumns(10);\n  JLabel lblPassword=new JLabel(\"Password\");\n  lblPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  lblPassword.setBounds(101,347,102,21);\n  frame.getContentPane().add(lblPassword);\n  passwordField=new JPasswordField();\n  passwordField.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  passwordField.setBounds(345,344,221,28);\n  frame.getContentPane().add(passwordField);\n  btnLogin=new JButton(\"Login\");\n  btnLogin.addActionListener(this);\n  btnLogin.setFont(new Font(\"Tahoma\",Font.PLAIN,18));\n  btnLogin.setBounds(101,435,129,42);\n  frame.getContentPane().add(btnLogin);\n  JLabel lblOr=new JLabel(\"or\");\n  lblOr.setBounds(709,299,46,14);\n  frame.getContentPane().add(lblOr);\n  btnSignup=new JButton(\"SignUp\");\n  btnSignup.addActionListener(this);\n  btnSignup.setFont(new Font(\"Tahoma\",Font.PLAIN,25));\n  btnSignup.setBounds(900,309,202,42);\n  frame.getContentPane().add(btnSignup);\n  JLabel lblLoginInExisting=new JLabel(\"Login existing account\");\n  lblLoginInExisting.setFont(new Font(\"Tahoma\",Font.PLAIN,14));\n  lblLoginInExisting.setBounds(101,238,210,21);\n  frame.getContentPane().add(lblLoginInExisting);\n  JLabel lblCreateNewAccount=new JLabel(\"Create New Account :\");\n  lblCreateNewAccount.setFont(new Font(\"Tahoma\",Font.PLAIN,14));\n  lblCreateNewAccount.setBounds(906,234,188,28);\n  frame.getContentPane().add(lblCreateNewAccount);\n}\n", "nl": "Create the application."}
{"code": "public void renewFor(Lease lease,long desiredDuration,long renewDuration,LeaseListener listener){\n  validateDuration(renewDuration,desiredDuration == Lease.FOREVER,\"desiredDuration\");\n  long now=SystemTime.timeMillis();\n  long desiredExpiration;\n  if (desiredDuration < Lease.FOREVER - now) {\n    desiredExpiration=now + desiredDuration;\n  }\n else {\n    desiredExpiration=Lease.FOREVER;\n  }\n  addLease(lease,desiredExpiration,renewDuration,listener,now);\n}\n", "nl": "Include a lease in the managed set for a specified duration and with specified renewal duration. <p> The semantics of this method are similar to those of the four-argument form of <code>renewUntil</code>, with <code>desiredDuration</code> + current time being used for the value of the <code>desiredExpiration</code> argument of <code>renewUntil</code>. The only exception to this is that, in the context of <code>renewFor</code>, the value of the <code>renewDuration</code> argument may only be <code>Lease.ANY</code> if the value of the <code>desiredDuration</code> argument is <em>exactly</em> <code>Lease.FOREVER.</code> <p> This method tests for arithmetic overflow in the desired expiration time computed from the value of <code>desiredDuration</code> argument (<code>desiredDuration</code> + current time). Should such overflow be present, a value of <code>Lease.FOREVER</code> is used to represent the lease's desired expiration time."}
{"code": "@Override protected void drawLabels(Canvas c,float pos,PointF anchor){\n  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();\n  float[] position=new float[]{0f,0f};\n  BarData bd=mChart.getData();\n  int step=bd.getDataSetCount();\n  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {\n    position[1]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;\n    if (step > 1) {\n      position[1]+=((float)step - 1f) / 2f;\n    }\n    mTrans.pointValuesToPixel(position);\n    if (mViewPortHandler.isInBoundsY(position[1])) {\n      String label=mXAxis.getValues().get(i);\n      drawLabel(c,label,i,pos,position[1],anchor,labelRotationAngleDegrees);\n    }\n  }\n}\n", "nl": "draws the x-labels on the specified y-position"}
{"code": "public void resetUploadSettings(){\n  this.isUploading=false;\n  this.uploadedSize=0;\n  this.uploadData=null;\n}\n", "nl": "This method will clear out all upload data"}
{"code": "private void expand(int i){\n  if (count + i <= buf.length) {\n    return;\n  }\n  byte[] newbuf=mPool.getBuf((count + i) * 2);\n  System.arraycopy(buf,0,newbuf,0,count);\n  mPool.returnBuf(buf);\n  buf=newbuf;\n}\n", "nl": "Ensures there is enough space in the buffer for the given number of additional bytes."}
{"code": "public H263Stream(int cameraId){\n  super(cameraId);\n  mCameraImageFormat=ImageFormat.NV21;\n  mVideoEncoder=MediaRecorder.VideoEncoder.H263;\n  mPacketizer=new H263Packetizer();\n}\n", "nl": "Constructs the H.263 stream."}
{"code": "Dict parse(Element element) throws XmlParseException {\n  if (!\"plist\".equalsIgnoreCase(element.getNodeName())) {\n    throw new XmlParseException(\"Expected plist top element, was: \" + element.getNodeName());\n  }\n  Node n=element.getFirstChild();\n  while (n != null && !n.getNodeName().equals(\"dict\")) {\n    n=n.getNextSibling();\n  }\n  Dict result=(Dict)parseElement(n);\n  return result;\n}\n", "nl": "Parses a plist top element into a map dictionary containing all the data in the plist."}
{"code": "public LeaseDeniedException(){\n  super();\n}\n", "nl": "Constructs an LeaseDeniedException with no detail message."}
{"code": "@Override public void endPrefixMapping(String prefix) throws SAXException {\n  return;\n}\n", "nl": "The SAX <code>endPrefixMapping</code> method does nothing."}
{"code": "public ImageLoader(int height,int width){\n  super();\n  this.height=height;\n  this.width=width;\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "public String timestamp(){\n  float totalSeconds=this.length();\n  float second=totalSeconds % 60;\n  int minute=(int)totalSeconds / 60 % 60;\n  int hour=(int)(totalSeconds / 3600);\n  StringBuilder sb=new StringBuilder();\n  if (hour > 0) {\n    sb.append(hour + \":\");\n  }\n  if (minute > 0) {\n    sb.append(minute + \":\");\n  }\n  sb.append(second);\n  return sb.toString();\n}\n", "nl": "Timestamp of the wave length"}
{"code": "public static boolean equalInterfaces(Object obj1,Object obj2){\n  Class[] intf1=obj1.getClass().getInterfaces();\n  Class[] intf2=obj2.getClass().getInterfaces();\n  if (intf1.length != intf2.length) {\n    return false;\n  }\n else {\n    for (int i=0; i < intf1.length; i++) {\n      if (intf1[i] != intf2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n", "nl": "Returns true if the interfaces implemented by obj1's class are the same (and in the same order) as obj2's class."}
{"code": "public static boolean shuffle(Object[] objArray){\n  if (objArray == null) {\n    return false;\n  }\n  return shuffle(objArray,getRandom(objArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified array using a default source of randomness"}
{"code": "public CarouselOptions minQuantity(int minQuantity){\n  mMinQuantity=minQuantity;\n  return this;\n}\n", "nl": "Specifies min quantity of views."}
{"code": "private void writeObject(ObjectOutputStream out) throws IOException {\n  final Map oldUserData=this.userData;\n  final Map oldNodeTable=this.nodeTable;\n  try {\n    if (oldUserData != null) {\n      this.userData=new Hashtable(oldUserData);\n    }\n    if (oldNodeTable != null) {\n      nodeTable=new Hashtable(oldNodeTable);\n    }\n    out.defaultWriteObject();\n  }\n  finally {\n    this.userData=oldUserData;\n    this.nodeTable=oldNodeTable;\n  }\n}\n", "nl": "To allow DOM trees serialized by newer versions of Xerces to be read by older versions briefly move the user data and node table into Hashtables."}
{"code": "public static Map<String,Object> badExpireEvenProcessor(DispatchContext dctx,Map<String,? extends Object> context){\n  GenericValue creditCard=(GenericValue)context.get(\"creditCard\");\n  String expireDate=creditCard.getString(\"expireDate\");\n  String lastNumberStr=expireDate.substring(expireDate.length() - 1);\n  int lastNumber=Integer.parseInt(lastNumberStr);\n  if (lastNumber % 2.0 == 0.0) {\n    return alwaysBadExpireProcessor(dctx,context);\n  }\n else {\n    return alwaysApproveProcessor(dctx,context);\n  }\n}\n", "nl": "Fail/bad expire date when year is even processor"}
{"code": "public void addAllFiles(File[] files){\n  for (  File f : files)   addEntry(f.getPath());\n}\n", "nl": "Adds all the files to the classpath"}
{"code": "public ChangePassword(String email){\n  Email=email;\n  System.out.println(\"change password\" + Email);\n  Name=sql_object.retunnNameByEmail(Email);\n  System.out.println(\"change password\" + Name);\n  frame=new JFrame();\n  frame.getContentPane().setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  frame.setSize(6000,5000);\n  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  frame.getContentPane().setLayout(null);\n  JLabel lblChangePassword=new JLabel(\"Change Password :\");\n  lblChangePassword.setFont(new Font(\"Tahoma\",Font.BOLD,30));\n  lblChangePassword.setBounds(125,11,359,64);\n  frame.getContentPane().add(lblChangePassword);\n  JButton btnNewButton=new JButton(\"Log Out\");\n  btnNewButton.addActionListener(this);\n  btnNewButton.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  btnNewButton.setBounds(1099,31,232,29);\n  frame.getContentPane().add(btnNewButton);\n  JButton btnMyAccount=new JButton(\"My Account\");\n  btnMyAccount.addActionListener(this);\n  btnMyAccount.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  btnMyAccount.setBounds(1099,90,232,29);\n  frame.getContentPane().add(btnMyAccount);\n  passwordField=new JPasswordField();\n  passwordField.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  passwordField.setBounds(438,217,177,29);\n  frame.getContentPane().add(passwordField);\n  JLabel lblOldPassword=new JLabel(\"Old Password\");\n  lblOldPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  lblOldPassword.setBounds(205,217,157,29);\n  frame.getContentPane().add(lblOldPassword);\n  JLabel lblNewPassword=new JLabel(\"New Password\");\n  lblNewPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  lblNewPassword.setBounds(205,301,157,29);\n  frame.getContentPane().add(lblNewPassword);\n  passwordField_1=new JPasswordField();\n  passwordField_1.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  passwordField_1.setBounds(438,301,177,29);\n  frame.getContentPane().add(passwordField_1);\n  JLabel lblConfirmPassword=new JLabel(\"Confirm Password\");\n  lblConfirmPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  lblConfirmPassword.setBounds(205,384,157,29);\n  frame.getContentPane().add(lblConfirmPassword);\n  passwordField_2=new JPasswordField();\n  passwordField_2.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  passwordField_2.setBounds(438,384,177,27);\n  frame.getContentPane().add(passwordField_2);\n  JButton btnNewButton_1=new JButton(\"Confirm\");\n  btnNewButton_1.addActionListener(this);\n  btnNewButton_1.setFont(new Font(\"Tahoma\",Font.PLAIN,17));\n  btnNewButton_1.setBounds(540,484,205,38);\n  frame.getContentPane().add(btnNewButton_1);\n  JLabel lblNewLabel=new JLabel(\"Hi \" + Name);\n  lblNewLabel.setFont(new Font(\"Tahoma\",Font.PLAIN,22));\n  lblNewLabel.setBounds(642,31,232,55);\n  frame.getContentPane().add(lblNewLabel);\n}\n", "nl": "Create the application."}
{"code": "protected VideoGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "public DocumentNGramDistroGraph intersectDistroGraph(DocumentNGramDistroGraph dgOtherGraph){\n  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);\n  EdgeCachedLocator ecLocator=new EdgeCachedLocator(10);\n  EdgeCachedLocator ecNewLocator=new EdgeCachedLocator(10);\n  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {\n    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iCurLvl);\n    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);\n    UniqueVertexGraph gNewGraph=gRes.getGraphLevelByNGramSize(iCurLvl);\n    if (gOtherGraph == null)     continue;\n    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();\n    while (iIter.hasNext()) {\n      WeightedEdge weCurItem=(WeightedEdge)iIter.next();\n      WeightedEdge eEdge=(WeightedEdge)ecLocator.locateDirectedEdgeInGraph(gGraph,weCurItem.getVertexA(),weCurItem.getVertexB());\n      WeightedEdge weNewEdge=null;\n      String sHead=weCurItem.getVertexA().getLabel();\n      String sTail=weCurItem.getVertexB().getLabel();\n      if (eEdge != null) {\n        try {\n          List l=new ArrayList();\n          l.add(sTail);\n          createWeightedEdgesConnecting(gNewGraph,sHead,l,eEdge.getWeight() + weCurItem.getWeight(),eEdge.getWeight() + weCurItem.getWeight(),1.0);\n          weNewEdge=(WeightedEdge)gr.demokritos.iit.jinsect.utils.locateDirectedEdgeInGraph(gNewGraph,weCurItem.getVertexA(),weCurItem.getVertexB());\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n        }\n        Distribution d1=(Distribution)this.EdgeDistros.get(eEdge);\n        if (d1 == null)         d1=new Distribution();\n        Distribution d2=(Distribution)dgOtherGraph.EdgeDistros.get(weCurItem);\n        if (d2 == null)         d2=new Distribution();\n        if (weNewEdge != null)         gRes.EdgeDistros.put(weNewEdge,d2.addTo(d1));\n      }\n    }\n  }\n  return gRes;\n}\n", "nl": "Returns the intersection of two graphs as a new graph, containing only common nodes and their  corresponding edges. The values of the edges are updated by summing the histogram distro values of the edges."}
{"code": "private static byte[] streamToBytes(InputStream in,int length) throws IOException {\n  byte[] bytes=new byte[length];\n  int count;\n  int pos=0;\n  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {\n    pos+=count;\n  }\n  if (pos != length) {\n    throw new IOException(\"Expected \" + length + \" bytes, read \"+ pos+ \" bytes\");\n  }\n  return bytes;\n}\n", "nl": "Reads the contents of an InputStream into a byte[]."}
{"code": "@Override public final MaryData process(MaryData d) throws Exception {\n  assert state == MODULE_RUNNING;\n  Log.i(Mary.LOG,\"Adding request\");\n  ExternalModuleRequest request=new ExternalModuleRequest(d);\n  addRequest(request);\n  doNotifyAll();\n  Log.i(Mary.LOG,\"Now waiting for request to be processed\");\n  long tStart=System.currentTimeMillis();\n  while (!request.problemOccurred() && request.getOutput() == null && System.currentTimeMillis() - tStart < timeLimit) {\n    doWait(timeLimit);\n  }\n  if (request.getOutput() == null) {\n    if (request.problemOccurred()) {\n      Log.i(Mary.LOG,\"Problem occurred. Rescheduling request.\");\n    }\n else {\n      Log.i(Mary.LOG,\"Timeout occurred. Requesting module restart and rescheduling request.\");\n      setNeedToRestart(true);\n    }\n    removeRequest(request);\n    request.setProblemOccurred(false);\n    addRequest(request);\n    doNotifyAll();\n    Log.i(Mary.LOG,\"Waiting for request to be processed (2nd try)\");\n    tStart=System.currentTimeMillis();\n    while (!request.problemOccurred() && request.getOutput() == null && System.currentTimeMillis() - tStart < timeLimit) {\n      doWait(timeLimit);\n    }\n    if (request.getOutput() == null) {\n      if (request.problemOccurred()) {\n        Log.i(Mary.LOG,\"Problem occurred again. Giving up.\");\n      }\n else {\n        Log.i(Mary.LOG,\"Timeout occurred again. Requesting module restart, but giving up on this request.\");\n        setNeedToRestart(true);\n      }\n      removeRequest(request);\n      throw new IOException(\"Module \" + name() + \" cannot process.\");\n    }\n  }\n  Log.i(Mary.LOG,\"Request processed\");\n  return request.getOutput();\n}\n", "nl": "Feed the input data into the external module, and return the result. This method is responsible for the timer and timeout handling and is regarded as generic for all external modules, thus <code>final</code>. The actual input and output is performed by <code>externalIO()</code> and may be overridden by subclasses to account for module-specifics. <p/> If timeout occurs, the external module is restarted, and a second attempt is made. If it fails again, an IOException is thrown. Even in case of the second failure, the external process is restarted, because failure may have been provoked by this particular input. <p/> For the time being, external modules are thread-safe simply by this method being <code>synchronized</code>."}
{"code": "public T search(final double[] key) throws KeySizeException {\n  if (key.length != m_K) {\n    throw new KeySizeException();\n  }\n  final KDNode<T> kd=KDNode.srch(new HPoint(key),m_root,m_K);\n  return (kd == null ? null : kd.v);\n}\n", "nl": "Find KD-tree node whose key is identical to key. Uses algorithm translated from 352.srch.c of Gonnet & Baeza-Yates."}
{"code": "public static void useHotspotTeleport(HotspotTeleportTemplate template,int teleportGoal,Player player,int kinah,int level){\n  Race race=player.getRace();\n  if (template.getLocId() != teleportGoal)   log.warn(\"[HOTSPOT] packet loc id dont equals server loc id! Packet id=\" + teleportGoal + \" Server id=\"+ template.getLocId());\n  if (template.getRace() != race)   return;\n  if (player.getLevel() < level)   return;\n  if (!checkKinahForTransportation(template,player,kinah,false)) {\n    return;\n  }\n  int instanceId=1;\n  int mapId=template.getMapId();\n  if (player.getWorldId() == mapId) {\n    instanceId=player.getInstanceId();\n  }\n  sendLoc(player,mapId,instanceId,template.getX(),template.getY(),template.getZ(),(byte)template.getHeading(),teleportGoal,1);\n}\n", "nl": "Performs hotspot teleportation"}
{"code": "public Iterator<Map.Entry<T,Long>> entrySetIterator(){\n  return freqTable.entrySet().iterator();\n}\n", "nl": "Return an Iterator over the set of keys and values that have been added. Using the entry set to iterate is more efficient in the case where you need to access respective counts as well as values, since it doesn't require a \"get\" for every key...the value is provided in the Map.Entry."}
{"code": "public void where(String column,PredicateOperator comparison,DataType value) throws QueryPlanException {\n  this.whereColumnNames.add(column);\n  this.whereOperators.add(comparison);\n  this.whereDataTypes.add(value);\n}\n", "nl": "Add a where operator. Only returns columns in which the column fulfills the predicate relative to value."}
{"code": "public int readUnsignedByte() throws JMSException {\n  initializeReading();\n  try {\n    this.dataIn.mark(Integer.MAX_VALUE);\n    return this.dataIn.readUnsignedByte();\n  }\n catch (  EOFException eof) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException e) {\n      JMSException jmsEx=new JMSException(e.toString());\n      jmsEx.setLinkedException(e);\n      throw jmsEx;\n    }\n    JMSException jmsEx=new MessageEOFException(eof.toString());\n    jmsEx.setLinkedException(eof);\n    throw jmsEx;\n  }\ncatch (  IOException ioe) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException e) {\n      JMSException jmsEx=new JMSException(e.toString());\n      jmsEx.setLinkedException(e);\n      throw jmsEx;\n    }\n    JMSException jmsEx=new MessageFormatException(\"Format error occurred\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Reads an unsigned 8-bit number from the bytes message stream."}
{"code": "private UnitsOfMeasure(){\n  unitMap.put(\"pixel\",NonSI.PIXEL);\n  unitMap.put(\"metre\",SI.METRE);\n  unitMap.put(\"foot\",NonSI.FOOT);\n}\n", "nl": "Instantiates a new units of measure."}
{"code": "Ack(String producerKey,String consumerKey,String ackedMessageID,String destNameToBeAcked){\n  this.producerKey=producerKey;\n  this.consumerKey=consumerKey;\n  this.ackedMessageID=ackedMessageID;\n  this.destNameToBeAcked=destNameToBeAcked;\n}\n", "nl": "Const for the Inner-Class"}
{"code": "@Override public void changePresenter(@NonNull final CoreContract.Presenter presenter){\n  this.presenter=requireNonNull(presenter);\n  delegate.setPresenter(presenter);\n}\n", "nl": "For change presenter by someone"}
{"code": "public void reAddAllInserts(@NonNull Collection<? extends Insertion> collection){\n  if (collection.size() == 0) {\n    return;\n  }\n  mInserts.addAll(collection);\n  getItems().addAll(createEmptyItemsList(collection.size()));\n}\n", "nl": "Add all inserts without update counters"}
{"code": "private void processConfigurationReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {\n  int parameter=serialMessage.getMessagePayloadByte(offset + 1);\n  int size=serialMessage.getMessagePayloadByte(offset + 2);\n  if (size == 0) {\n    logger.warn(\"NODE {}: Parameter {} response has 0 length\",getNode().getNodeId(),parameter);\n    return;\n  }\n  try {\n    int value=extractValue(serialMessage.getMessagePayload(),offset + 3,size);\n    logger.debug(\"NODE {}: Node configuration report, parameter = {}, value = {}, size = {}\",getNode().getNodeId(),parameter,value,size);\n    ZWaveConfigurationParameter configurationParameter;\n    configurationParameter=configParameters.get(parameter);\n    if (configurationParameter == null) {\n      configurationParameter=new ZWaveConfigurationParameter(parameter,value,size);\n    }\n else {\n      configurationParameter.setValue(value);\n    }\n    configParameters.put(parameter,configurationParameter);\n    ZWaveConfigurationParameterEvent zEvent=new ZWaveConfigurationParameterEvent(getNode().getNodeId(),configurationParameter);\n    getController().notifyEventListeners(zEvent);\n  }\n catch (  NumberFormatException e) {\n    return;\n  }\n}\n", "nl": "Processes a CONFIGURATIONCMD_REPORT / CONFIGURATIONCMD_SET message."}
{"code": "public final int hashCode(){\n  return Hash;\n}\n", "nl": "Returns the hashcode of this word."}
{"code": "public boolean string_constants(){\n  return soot.PhaseOptions.getBoolean(options,\"string-constants\");\n}\n", "nl": "Propagate All String Constants -- Propagate all string constants, not just class names. When this option is set to false, Paddle only distinguishes  string constants that may be the name of a class loaded  dynamically using reflection, and all other string constants are  lumped together into a single string constant node. Setting this  option to true causes all string constants to be propagated  individually."}
{"code": "protected void assertHasHeaderValue(String name,String value){\n  MultivaluedMap<String,String> headers=getLastReceivedHeaders();\n  Assert.assertNotNull(headers);\n  List<String> values=headers.get(name);\n  Assert.assertNotNull(values);\n  Assert.assertTrue(values.contains(value));\n}\n", "nl": "Assert the specified header name has the specified value."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_JOIN_ROUND_IDARENA(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400931,value0,value1);\n}\n", "nl": "You join Stage %0 Round %1!"}
{"code": "@Nullable public static MediaSource from(String sourceId){\n  assert sourceId != null;\n  Uri sourceUri=Uri.parse(sourceId);\n  if (!CAST_SOURCE_ID_HOST.equals(sourceUri.getHost()))   return null;\n  if (!CAST_SOURCE_ID_PATH.equals(sourceUri.getPath()))   return null;\n  String uriFragment=sourceUri.getFragment();\n  if (uriFragment == null)   return null;\n  String[] parameters=uriFragment.split(CAST_SOURCE_ID_SEPARATOR);\n  String applicationId=extractParameter(parameters,CAST_SOURCE_ID_APPLICATION_ID);\n  if (applicationId == null)   return null;\n  String clientId=extractParameter(parameters,CAST_SOURCE_ID_CLIENT_ID);\n  String autoJoinPolicy=extractParameter(parameters,CAST_SOURCE_ID_AUTOJOIN_POLICY);\n  return new MediaSource(sourceId,applicationId,clientId,autoJoinPolicy);\n}\n", "nl": "Initializes the media source from the source id."}
{"code": "@Override public Dimension minimumLayoutSize(Container target){\n  Dimension minimum=layoutSize(target,false);\n  minimum.width-=(getHgap() + 1);\n  return minimum;\n}\n", "nl": "Returns the minimum dimensions needed to layout the <i>visible</i> components contained in the specified target container."}
{"code": "static <T>T checkNotNull(T reference){\n  if (reference == null) {\n    throw new NullPointerException();\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null."}
{"code": "public void loading(){\n  mHintView.setVisibility(View.GONE);\n  mProgressBar.setVisibility(View.VISIBLE);\n}\n", "nl": "loading status"}
{"code": "@Override public Double analyse(double[] frame){\n  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException(\"Expected frame of length \" + getFrameLengthSamples() + \", got \"+ frame.length);\n  double totalEnergy=0;\n  for (int i=0; i < frame.length; i++) {\n    if (frame[i] != 0)     totalEnergy+=MathUtils.db(frame[i] * frame[i]);\n  }\n  rememberFrameEnergy(totalEnergy);\n  return new Double(totalEnergy);\n}\n", "nl": "Apply this FrameBasedAnalyser to the given data."}
{"code": "public boolean deleteStorage(TrackerGroup trackerGroup,String groupName,String storageIpAddr) throws IOException {\n  int serverIndex;\n  int notFoundCount;\n  TrackerServer trackerServer;\n  notFoundCount=0;\n  for (serverIndex=0; serverIndex < trackerGroup.tracker_servers.length; serverIndex++) {\n    try {\n      trackerServer=trackerGroup.getConnection(serverIndex);\n    }\n catch (    IOException ex) {\n      ex.printStackTrace(System.err);\n      this.errno=ProtoCommon.ECONNREFUSED;\n      return false;\n    }\n    try {\n      StructStorageStat[] storageStats=listStorages(trackerServer,groupName,storageIpAddr);\n      if (storageStats == null) {\n        if (this.errno == ProtoCommon.ERR_NO_ENOENT) {\n          notFoundCount++;\n        }\n else {\n          return false;\n        }\n      }\n else       if (storageStats.length == 0) {\n        notFoundCount++;\n      }\n else       if (storageStats[0].getStatus() == ProtoCommon.FDFS_STORAGE_STATUS_ONLINE || storageStats[0].getStatus() == ProtoCommon.FDFS_STORAGE_STATUS_ACTIVE) {\n        this.errno=ProtoCommon.ERR_NO_EBUSY;\n        return false;\n      }\n    }\n  finally {\n      try {\n        trackerServer.close();\n      }\n catch (      IOException ex1) {\n        ex1.printStackTrace();\n      }\n    }\n  }\n  if (notFoundCount == trackerGroup.tracker_servers.length) {\n    this.errno=ProtoCommon.ERR_NO_ENOENT;\n    return false;\n  }\n  notFoundCount=0;\n  for (serverIndex=0; serverIndex < trackerGroup.tracker_servers.length; serverIndex++) {\n    try {\n      trackerServer=trackerGroup.getConnection(serverIndex);\n    }\n catch (    IOException ex) {\n      System.err.println(\"connect to server \" + trackerGroup.tracker_servers[serverIndex].getAddress().getHostAddress() + \":\"+ trackerGroup.tracker_servers[serverIndex].getPort()+ \" fail\");\n      ex.printStackTrace(System.err);\n      this.errno=ProtoCommon.ECONNREFUSED;\n      return false;\n    }\n    try {\n      if (!this.deleteStorage(trackerServer,groupName,storageIpAddr)) {\n        if (this.errno != 0) {\n          if (this.errno == ProtoCommon.ERR_NO_ENOENT) {\n            notFoundCount++;\n          }\n else           if (this.errno != ProtoCommon.ERR_NO_EALREADY) {\n            return false;\n          }\n        }\n      }\n    }\n  finally {\n      try {\n        trackerServer.close();\n      }\n catch (      IOException ex1) {\n        ex1.printStackTrace();\n      }\n    }\n  }\n  if (notFoundCount == trackerGroup.tracker_servers.length) {\n    this.errno=ProtoCommon.ERR_NO_ENOENT;\n    return false;\n  }\n  if (this.errno == ProtoCommon.ERR_NO_ENOENT) {\n    this.errno=0;\n  }\n  return this.errno == 0;\n}\n", "nl": "delete a storage server from the FastDFS cluster"}
{"code": "public boolean contains(T dataSet){\n  for (  T set : mDataSets) {\n    if (set.equals(dataSet))     return true;\n  }\n  return false;\n}\n", "nl": "Checks if this data object contains the specified DataSet. Returns true if so, false if not."}
{"code": "public static final MediaFormat createVideoFormat(String mime,int width,int height){\n  MediaFormat format=new MediaFormat();\n  format.setString(KEY_MIME,mime);\n  format.setInteger(KEY_WIDTH,width);\n  format.setInteger(KEY_HEIGHT,height);\n  return format;\n}\n", "nl": "Creates a minimal video format."}
{"code": "public SlickForm(Context context,AttributeSet attrs,int defStyle){\n  super(context,attrs,defStyle);\n  initAttrs(context,attrs);\n}\n", "nl": "Instantiates a new PairingCode field."}
{"code": "public SourceContextAndPath extendPath(Abstraction abs){\n  return extendPath(abs,true);\n}\n", "nl": "Extends the taint propagation path with the given abstraction"}
{"code": "public void updateCloud(int pointCount,FloatBuffer pointBuffer){\n  calculateColors(pointCount,pointBuffer);\n  updatePoints(pointCount,pointBuffer,mColorArray);\n}\n", "nl": "Update the points and colors in the point cloud."}
{"code": "public static double toDouble(Object obj){\n  Double result=toDoubleObject(obj);\n  return result == null ? 0.0 : result.doubleValue();\n}\n", "nl": "Converts an <code>Object</code> to a <code>double</code>. Returns zero if conversion is not possible."}
{"code": "public NotificationsGetQuery endTime(Integer value){\n  return unsafeParam(\"end_time\",value);\n}\n", "nl": "Latest timestamp (in Unix time) of a notification to return. By default, the current time."}
{"code": "@Override public Future<BoxedUnit> advanceCommitPosition(DLSN newPosition){\n  if (null == lastCommittedPosition.get() || (newPosition.compareTo(lastCommittedPosition.get()) > 0)) {\n    lastCommittedPosition.set(newPosition);\n    return Utils.zkAsyncCreateFullPathOptimisticAndSetData(zooKeeperClient,zkPath,newPosition.serialize().getBytes(Charsets.UTF_8),zooKeeperClient.getDefaultACL(),CreateMode.PERSISTENT);\n  }\n else {\n    return Future.Done();\n  }\n}\n", "nl": "Advances the position associated with the subscriber"}
{"code": "public boolean isHighlightEnabled(){\n  for (  IDataSet set : mDataSets) {\n    if (!set.isHighlightEnabled())     return false;\n  }\n  return true;\n}\n", "nl": "Returns true if highlighting of all underlying values is enabled, false if not."}
{"code": "public static String slurpFileNoExceptions(String filename){\n  try {\n    return slurpFile(filename);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return null;\n  }\n}\n", "nl": "Returns all the text in the given File."}
{"code": "@POST @Path(\"/roles\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Assign roles for a list of users and applications\") @Timed public Response assignUserRoles(@ApiParam(name=\"userRoleList\",value=\"Please see model example\",required=true) final UserRoleList userRoleList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  List<Map> status=updateUserRole(userRoleList,authorizationHeader);\n  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put(\"assignmentStatuses\",status).build()).build();\n}\n", "nl": "Assign roles for a list of users and applications"}
{"code": "protected Type(String name){\n  super(name);\n}\n", "nl": "Constructs a new compound control type."}
{"code": "public EncodingException(){\n  super();\n}\n", "nl": "Constructs an <code>EncodingException</code> with no detail message."}
{"code": "public PlacesGetByIdQuery(VkApiClient client,UserActor actor,List<Integer> places){\n  super(client,\"places.getById\",Utils.buildParametrizedType(List.class,Place.class));\n  accessToken(actor.getAccessToken());\n  places(places);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static final int daysBetween(Date early,Date late){\n  Calendar c1=Calendar.getInstance();\n  Calendar c2=Calendar.getInstance();\n  c1.setTime(early);\n  c2.setTime(late);\n  return daysBetween(c1,c2);\n}\n", "nl": "Returns the days between two dates. Positive values indicate that the second date is after the first, and negative values indicate, well, the opposite. Relying on specific times is problematic."}
{"code": "public FormScalingUtil(Class clazz){\n  this(clazz,JBUI.scale(1.0f));\n}\n", "nl": "Constructs a <code>FormScalingUtil</code> for the given <code>.form</code> class using the default <code>JBUI</code> scaling factor."}
{"code": "public boolean removeDataSet(T d){\n  if (d == null)   return false;\n  boolean removed=mDataSets.remove(d);\n  if (removed) {\n    mYValCount-=d.getEntryCount();\n    calcMinMax(0,mYValCount);\n  }\n  return removed;\n}\n", "nl": "Removes the given DataSet from this data object. Also recalculates all minimum and maximum values. Returns true if a DataSet was removed, false if no DataSet could be removed."}
{"code": "public void clearSounds(){\n  mSoundMap.clear();\n}\n", "nl": "Clears all of the previously set sounds and events."}
{"code": "public void invokeMain(String sClass,String[] args) throws Throwable {\n  Class<?> clazz=loadClass(sClass);\n  logInfo(LogArea.CONFIG,\"Launch: %s.main(); Loader: %s\",sClass,clazz.getClassLoader());\n  Method method=clazz.getMethod(\"main\",new Class<?>[]{String[].class});\n  boolean bValidModifiers=false;\n  boolean bValidVoid=false;\n  if (method != null) {\n    method.setAccessible(true);\n    int nModifiers=method.getModifiers();\n    bValidModifiers=Modifier.isPublic(nModifiers) && Modifier.isStatic(nModifiers);\n    Class<?> clazzRet=method.getReturnType();\n    bValidVoid=(clazzRet == void.class);\n  }\n  if (method == null || !bValidModifiers || !bValidVoid) {\n    throw new NoSuchMethodException(\"The main() method in class \\\"\" + sClass + \"\\\" not found.\");\n  }\n  try {\n    method.invoke(null,(Object)args);\n  }\n catch (  InvocationTargetException e) {\n    throw e.getTargetException();\n  }\n}\n", "nl": "Invokes main() method on class with provided parameters."}
{"code": "public static String toString(URL url) throws IOException {\n  return toString(url,Charset.defaultCharset());\n}\n", "nl": "Gets the contents at the given URL."}
{"code": "public static String toInternalName(SootClass cls){\n  return toInternalName(cls.getName());\n}\n", "nl": "Determines and returns the internal name of a class."}
{"code": "@Override public LogNormalDistribution makeDistribution(){\n  return new LogNormalDistribution(2.1,1.4);\n}\n", "nl": "Creates the default real distribution instance to use in tests."}
{"code": "private Object legalOrIllegal(Metadata<Optional> metadata){\n  Type type=metadata.getType();\n  if (type.equals(String.class)) {\n    return safetyCast.with(\"\",type);\n  }\n  for (  Type numericType : SupportedTypes.NUMERIC) {\n    if (type.equals(numericType)) {\n      return safetyCast.with(0,type);\n    }\n  }\n  return null;\n}\n", "nl": "Return empty if type is String, 0 if it is a number, and otherwise return a null reference."}
{"code": "public static boolean isUnmatched(int mod){\n  return (mod & NOTIFY_UNMATCHED) != 0;\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>NOTIFY_UNMATCHED</tt> modifier, <tt>false</tt> otherwise."}
{"code": "public static boolean hasJellyBeanMr1(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;\n}\n", "nl": ">= 4.2 17"}
{"code": "public boolean isValidPoint(double x,double y,double z){\n  if (x < xval[0] || x > xval[xval.length - 1] || y < yval[0] || y > yval[yval.length - 1] || z < zval[0] || z > zval[zval.length - 1]) {\n    return false;\n  }\n else {\n    return true;\n  }\n}\n", "nl": "Indicates whether a point is within the interpolation range."}
{"code": "public JsonObject(JsonObject object){\n  this(object,false);\n}\n", "nl": "Creates a new JsonObject, initialized with the contents of the specified JSON object."}
{"code": "public static boolean isRedirect(HttpResponse httpResponse){\nswitch (httpResponse.getStatus().code()) {\ncase 300:\ncase 301:\ncase 302:\ncase 303:\ncase 307:\n    return true;\ndefault :\n  return false;\n}\n}\n", "nl": "Returns true if the specified response is an HTTP redirect response, i.e. a 300, 301, 302, 303, or 307."}
{"code": "private void updateAndValidate(final T dataTag,final Object value,final String valueDescription,final Timestamp timestamp){\n  if (!filteroutValid(dataTag,value,valueDescription,timestamp)) {\n    updateAndValidateQuietly(dataTag,value,valueDescription,null,null,timestamp);\n  }\n else {\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(\"Filtering out repeated update for datatag \" + dataTag.getId());\n    }\n  }\n}\n", "nl": "To be called internally only within a dataTag synchronized block. Should not be made public."}
{"code": "public Conversation(Plugin plugin,Conversable forWhom,Prompt firstPrompt){\n  this(plugin,forWhom,firstPrompt,new HashMap<Object,Object>());\n}\n", "nl": "Initializes a new Conversation."}
{"code": "private Base64(){\n}\n", "nl": "Defeats instantiation."}
{"code": "public static Player newPlayer(PlayerCommonData playerCommonData,PlayerAppearance playerAppearance,Account account){\n  PlayerInitialData playerInitialData=DataManager.PLAYER_INITIAL_DATA;\n  LocationData ld=playerInitialData.getSpawnLocation(playerCommonData.getRace());\n  WorldPosition position=World.getInstance().createPosition(ld.getMapId(),ld.getX(),ld.getY(),ld.getZ(),ld.getHeading(),0);\n  playerCommonData.setPosition(position);\n  Player newPlayer=new Player(new PlayerController(),playerCommonData,playerAppearance,account);\n  newPlayer.setSkillList(new PlayerSkillList());\n  SkillLearnService.addNewSkills(newPlayer);\n  PlayerCreationData playerCreationData=playerInitialData.getPlayerCreationData(playerCommonData.getPlayerClass());\n  Storage playerInventory=new PlayerStorage(StorageType.CUBE);\n  Storage regularWarehouse=new PlayerStorage(StorageType.REGULAR_WAREHOUSE);\n  Storage accountWarehouse=new PlayerStorage(StorageType.ACCOUNT_WAREHOUSE);\n  newPlayer.setStorage(playerInventory,StorageType.CUBE);\n  newPlayer.setStorage(regularWarehouse,StorageType.REGULAR_WAREHOUSE);\n  newPlayer.setStorage(accountWarehouse,StorageType.ACCOUNT_WAREHOUSE);\n  Equipment equipment=new Equipment(newPlayer);\n  if (playerCreationData != null) {\n    List<ItemType> items=playerCreationData.getItems();\n    for (    ItemType itemType : items) {\n      int itemId=itemType.getTemplate().getTemplateId();\n      Item item=ItemFactory.newItem(itemId,itemType.getCount());\n      if (item == null) {\n        continue;\n      }\n      ItemTemplate itemTemplate=item.getItemTemplate();\n      if ((itemTemplate.isArmor() || itemTemplate.isWeapon()) && !(equipment.isSlotEquipped(itemTemplate.getItemSlot()))) {\n        item.setEquipped(true);\n        ItemSlot itemSlot=ItemSlot.getSlotFor(itemTemplate.getItemSlot());\n        item.setEquipmentSlot(itemSlot.getSlotIdMask());\n        equipment.onLoadHandler(item);\n      }\n else {\n        playerInventory.onLoadHandler(item);\n      }\n    }\n  }\n  newPlayer.setEquipment(equipment);\n  newPlayer.setMailbox(new Mailbox(newPlayer));\n  for (int petBagId=StorageType.PET_BAG_MIN; petBagId <= StorageType.PET_BAG_MAX; petBagId++) {\n    Storage petBag=new PlayerStorage(StorageType.getStorageTypeById(petBagId));\n    newPlayer.setStorage(petBag,StorageType.getStorageTypeById(petBagId));\n  }\n  for (int houseWhId=StorageType.HOUSE_WH_MIN; houseWhId <= StorageType.HOUSE_WH_MAX; houseWhId++) {\n    StorageType whType=StorageType.getStorageTypeById(houseWhId);\n    if (whType != null) {\n      Storage cabinet=new PlayerStorage(whType);\n      newPlayer.setStorage(cabinet,StorageType.getStorageTypeById(houseWhId));\n    }\n  }\n  playerInventory.setPersistentState(PersistentState.UPDATE_REQUIRED);\n  equipment.setPersistentState(PersistentState.UPDATE_REQUIRED);\n  return newPlayer;\n}\n", "nl": "This method is used for creating new players"}
{"code": "public void print(PrintStream out){\n  if (rootNodes != null) {\n    for (    TreeSearchNode<M,G> node : rootNodes) {\n      printNode(node,out);\n    }\n  }\n}\n", "nl": "Print the entire tree representation to the PrintStream. Particularly useful to understand why the best move has been chosen"}
{"code": "public void mousePressed(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myMouseInteraction != null) {\n    myMouseInteraction.mousePressed(pxToDp(x),pxToDp(y),false);\n    myMouseInteraction.setAutoConnect(ConstraintModel.isAutoConnect());\n  }\n}\n", "nl": "Handles mouse press in the user interaction with our model"}
{"code": "public void updateData(LegendOptionData newOptionData){\n  data=newOptionData;\n  populate(newOptionData);\n}\n", "nl": "Update data."}
{"code": "public WriteModifiers(WriteModifiers... modifiers){\n  super(modifiers);\n}\n", "nl": "Creates a new modifiers from the specified modifiers."}
{"code": "@RequestMapping(value=\"/\",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<BookDTO> update(@RequestBody BookDTO bookDTO) throws URISyntaxException {\n  log.debug(\"Update BookDTO : {}\",bookDTO);\n  if (!bookDTO.isIdSet()) {\n    return create(bookDTO);\n  }\n  BookDTO result=bookDTOService.save(bookDTO);\n  return ResponseEntity.ok().body(result);\n}\n", "nl": "Update Book."}
{"code": "public R1Interval addPoint(double p){\n  if (isEmpty()) {\n    return R1Interval.fromPoint(p);\n  }\n else   if (p < lo()) {\n    return new R1Interval(p,hi());\n  }\n else   if (p > hi()) {\n    return new R1Interval(lo(),p);\n  }\n else {\n    return new R1Interval(lo(),hi());\n  }\n}\n", "nl": "Expand the interval so that it contains the given point \"p\"."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_CAPTCHA_UNRESTRICT_FAILED_RETRY(String value0){\n  return new SM_SYSTEM_MESSAGE(1400271,value0);\n}\n", "nl": "Your incantation was incorrect; you failed to purify the poison. You have %0 attempts left."}
{"code": "public static LineIterator lineIterator(File file) throws IOException {\n  return lineIterator(file,null);\n}\n", "nl": "Returns an Iterator for the lines in a <code>File</code> using the default encoding for the VM."}
{"code": "@Override public Writer append(CharSequence csq,int start,int end) throws IOException {\n  try {\n    beforeWrite(end - start);\n    out.append(csq,start,end);\n    afterWrite(end - start);\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\n  return this;\n}\n", "nl": "Invokes the delegate's <code>append(CharSequence, int, int)</code> method."}
{"code": "public void stopRecording(){\n  if (this.recorder != null) {\n    try {\n      if (this.state == STATE.MEDIA_RUNNING) {\n        this.recorder.stop();\n        this.setState(STATE.MEDIA_STOPPED);\n      }\n      this.recorder.reset();\n      this.moveFile(this.audioFile);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Stop recording and save to the file specified when recording started."}
{"code": "public boolean isCellEditable(int row,int col){\n  if (!m_rows.isValidRow(row)) {\n    return false;\n  }\n else {\n    return getColumn(col).isCellEditable(row);\n  }\n}\n", "nl": "Indicates if the value of the given table cell can be changed."}
{"code": "private List<Map<String,byte[]>> prepareFavorites(){\n  List<Map<String,byte[]>> queryResult=new ArrayList<>();\n  for (int i=0; i < 8; ++i) {\n    Map<String,byte[]> row=new HashMap<>();\n    byte[] id=new byte[16];\n    new Random().nextBytes(id);\n    id[0]=(byte)i;\n    row.put(\"experiment_id\",id);\n    queryResult.add(row);\n  }\n  return queryResult;\n}\n", "nl": "Simulates a database response with multiple rows."}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_HE_IS_BANISHED(String value0){\n  return new SM_SYSTEM_MESSAGE(1301021,value0);\n}\n", "nl": "%0 has been kicked out of the alliance."}
{"code": "private void initModels(){\n  File root=new File(path + \"/model\");\n  File[] list=root.listFiles();\n  if (list != null) {\n    for (    File f : list) {\n      if (f.getName().endsWith(\".jar\")) {\n        classLoader.addJar(f.getAbsolutePath());\n        log.debug(\"loading: \" + f.getAbsolutePath());\n      }\n    }\n  }\n}\n", "nl": "loading all jar files in /model"}
{"code": "public Vector1DFormat(final NumberFormat format){\n  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,format);\n}\n", "nl": "Create an instance with a custom number format for components."}
{"code": "private int findSmallestFrom(int startId,List<String> sortFlds,List<Integer> sortDirs){\n  int minId=startId;\n  moveToId(startId);\n  while (super.next()) {\n    int id=currentId();\n    if (minId < 0 || compareRecords(minId,id,sortFlds,sortDirs) > 0)     minId=id;\n    moveToId(id);\n  }\n  return minId;\n}\n", "nl": "Scan id larger than startId to find smallest record (included startId)"}
{"code": "private void readFeatureSimilarityMatrices(BufferedReader input) throws IOException {\n  String line=null;\n  similarityMatrices=new float[this.getNumberOfByteFeatures()][][];\n  for (int i=0; i < this.getNumberOfByteFeatures(); i++) {\n    similarityMatrices[i]=null;\n  }\n  while ((line=input.readLine()) != null) {\n    if (\"\".equals(line)) {\n      return;\n    }\n    String[] featureUniqueValues=line.trim().split(\"\\\\s+\");\n    String featureName=featureUniqueValues[0];\n    if (!isByteFeature(featureName)) {\n      throw new RuntimeException(\"Similarity matrix support is for bytefeatures only, but not for other feature types...\");\n    }\n    int featureIndex=this.getFeatureIndex(featureName);\n    int noUniqValues=featureUniqueValues.length - 1;\n    similarityMatrices[featureIndex]=new float[noUniqValues][noUniqValues];\n    for (int i=1; i <= noUniqValues; i++) {\n      Arrays.fill(similarityMatrices[featureIndex][i - 1],0);\n      String featureValue=featureUniqueValues[i];\n      String matLine=input.readLine();\n      if (matLine == null) {\n        throw new RuntimeException(\"Feature definition file is having unexpected format...\");\n      }\n      String[] lines=matLine.trim().split(\"\\\\s+\");\n      if (!featureValue.equals(lines[0])) {\n        throw new RuntimeException(\"Feature definition file is having unexpected format...\");\n      }\n      if (lines.length != i) {\n        throw new RuntimeException(\"Feature definition file is having unexpected format...\");\n      }\n      for (int j=1; j < i; j++) {\n        float similarity=(new Float(lines[j])).floatValue();\n        similarityMatrices[featureIndex][i - 1][j - 1]=similarity;\n        similarityMatrices[featureIndex][j - 1][i - 1]=similarity;\n      }\n    }\n  }\n}\n", "nl": "read similarity matrices from feature definition file"}
{"code": "public Path[] updatePhare(@FloatRange(from=0,to=1.0) float percentage,final boolean async){\n  if (mSubPathsOutputStore != null) {\n    mPathMeasure.setPath(mPath,false);\n    int i=0;\n    do {\n      mSubPathsOutputStore[i].reset();\n      if (async) {\n        boolean success=mPathMeasure.getSegment(0,mSubPathLengths[i] * percentage,mSubPathsOutputStore[i],true);\n        if (success) {\n          mSubPathsOutputStore[i].rLineTo(0,0);\n          mSubPathsOutput[i]=mSubPathsOutputStore[i];\n        }\n else {\n          mSubPathsOutput[i]=null;\n        }\n      }\n else {\n        float subPathStart=mSubPathPercentageRanges[i * 3];\n        float subPathEnd=mSubPathPercentageRanges[i * 3 + 1];\n        float multiples=mSubPathPercentageRanges[i * 3 + 2];\n        if (subPathStart >= percentage) {\n          mSubPathsOutput[i]=null;\n        }\n else {\n          float endD=subPathEnd >= percentage ? (percentage - subPathStart) * multiples * mSubPathLengths[i] : mSubPathLengths[i];\n          boolean success=mPathMeasure.getSegment(0,endD,mSubPathsOutputStore[i],true);\n          if (success) {\n            mSubPathsOutputStore[i].rLineTo(0,0);\n            mSubPathsOutput[i]=mSubPathsOutputStore[i];\n          }\n else {\n            mSubPathsOutput[i]=null;\n          }\n        }\n      }\n      i++;\n    }\n while (i < mSubPathsOutputStore.length && mPathMeasure.nextContour());\n    mPathMeasure.setPath(mPath,false);\n    return mSubPathsOutput;\n  }\n  return null;\n}\n", "nl": "Return sub paths based on percentage, notice that the return array with always be same length which is the sub-path count of the main path, so for those sub-paths not covered by percentage will return null;"}
{"code": "public boolean fire(Context context){\n  return Utils.openIntentSafely(context,action);\n}\n", "nl": "Fires the given action"}
{"code": "public List<DexlibAbstractInstruction> instructionsAfter(DexlibAbstractInstruction instruction){\n  int i=instructions.indexOf(instruction);\n  if (i == -1)   throw new IllegalArgumentException(\"Instruction\" + instruction + \"not part of this body.\");\n  return instructions.subList(i + 1,instructions.size());\n}\n", "nl": "Return the instructions that appear (lexically) after the given instruction."}
{"code": "private double extractDouble(JsonObject jsonObj,String field){\n  double value=0.0;\n  if (jsonObj != null) {\n    JsonElement element=jsonObj.get(field);\n    if (element != null) {\n      value=element.getAsDouble();\n    }\n  }\n  return value;\n}\n", "nl": "Extract double."}
{"code": "private void addOrDeleteBoundaries(Document doc){\n  NodeIterator it=((DocumentTraversal)doc).createNodeIterator(doc,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.BOUNDARY),false);\n  Element boundary=null;\n  List<Element> bi1prosodyElements=null;\n  while ((boundary=(Element)it.nextNode()) != null) {\n    int minBI=3;\n    Element prosody=(Element)DomUtils.getAncestor(boundary,MaryXML.PROSODY);\n    if (prosody != null) {\n      ProsodicSettings settings=prosodyMap.get(prosody);\n      assert settings != null;\n      int rate=settings.rate();\n      int numberOfPauses=settings.numberOfPauses();\n      if (numberOfPauses <= 50)       minBI=5;\n else       if (numberOfPauses <= 75)       minBI=4;\n else       if (numberOfPauses > 150)       minBI=1;\n else       if (numberOfPauses > 125)       minBI=2;\n      if (rate < 90 && minBI > 1)       minBI--;\n      if (minBI == 1) {\n        if (bi1prosodyElements == null)         bi1prosodyElements=new ArrayList<Element>();\n        bi1prosodyElements.add(prosody);\n      }\n    }\n    int bi=3;\n    try {\n      bi=Integer.parseInt(boundary.getAttribute(\"breakindex\"));\n    }\n catch (    NumberFormatException e) {\n      Log.i(Mary.LOG,\"Unexpected breakindex value `\" + boundary.getAttribute(\"breakindex\") + \"', assuming \"+ bi);\n    }\n  }\n  if (bi1prosodyElements != null) {\n    Iterator<Element> elIt=bi1prosodyElements.iterator();\n    while (elIt.hasNext()) {\n      Element prosody=elIt.next();\n      NodeIterator nodeIt=((DocumentTraversal)doc).createNodeIterator(prosody,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.TOKEN,MaryXML.BOUNDARY),false);\n      Element el=null;\n      Element prevEl=null;\n      while ((el=(Element)nodeIt.nextNode()) != null) {\n        if (el.getTagName().equals(MaryXML.TOKEN) && prevEl != null && prevEl.getTagName().equals(MaryXML.TOKEN)) {\n          Element newBoundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);\n          newBoundary.setAttribute(\"breakindex\",\"1\");\n          el.getParentNode().insertBefore(newBoundary,el);\n        }\n        prevEl=el;\n      }\n    }\n  }\n}\n", "nl": "Adjust the number of boundaries according to rate and the \"number-of-pauses\" attribute."}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public void removeFromHouse(){\n  this.setX(0);\n  this.setY(0);\n  this.setZ(0);\n  this.setHeading((byte)0);\n}\n", "nl": "Removes house from spawn but it remains in registry"}
{"code": "public static void checkZoneLevels(Player player){\n  World world=World.getInstance();\n  float z=player.getZ();\n  if (player.getLifeStats().isAlreadyDead()) {\n    return;\n  }\n  if (z < world.getWorldMap(player.getWorldId()).getDeathLevel()) {\n    player.getController().die();\n    return;\n  }\n  float playerheight=player.getPlayerAppearance().getHeight() * 1.6f;\n  if (z < world.getWorldMap(player.getWorldId()).getWaterLevel() - playerheight) {\n    startDrowning(player);\n  }\n else {\n    stopDrowning(player);\n  }\n}\n", "nl": "Check water level (start drowning) and map death level (die)"}
{"code": "protected void querySegmentMetadata(final PhysicalTable table){\n  String resourcePath=String.format(SEGMENT_METADATA_QUERY_FORMAT,table.getName());\n  SuccessCallback success=buildSegmentMetadataSuccessCallback(table);\n  druidWebService.getJsonObject(success,errorCallback,failureCallback,resourcePath);\n}\n", "nl": "Queries the data mart for updated Segment Metadata and ten updates the physical table."}
{"code": "public boolean hasPermissionsByInternalId(String internalId,Collection<Permission> permissions){\n  AuthorizationInfo authorizationInfo=getAuthorizationInfoByInternalId(internalId);\n  return authorizationInfo != null && isPermittedAll(permissions,authorizationInfo);\n}\n", "nl": "Test for whether an API key has specific permissions using its internal ID."}
{"code": "public BasePresenter create(String tag){\n  return mPresenterStorage.create(tag);\n}\n", "nl": "Create new instance of presenter"}
{"code": "@Override public void onTabClosing(long time,int id){\n  reset();\n  forceAnimationToFinish();\n  TabModel model=mTabModelSelector.getModelForTabId(id);\n  if (model != null) {\n    mClosedTab=createLayoutTab(id,model.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE);\n    mClosedTab.setBorderAlpha(0.0f);\n    mLayoutTabs=new LayoutTab[]{mClosedTab};\n    updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id)));\n  }\n else {\n    mLayoutTabs=null;\n    mClosedTab=null;\n  }\n  super.onTabClosing(time,id);\n}\n", "nl": "Set up for the tab closing animation"}
{"code": "@Override public synchronized void initialize(){\n  if (!mRootDirectory.exists()) {\n    if (!mRootDirectory.mkdirs()) {\n      VolleyLog.e(\"Unable to create cache dir %s\",mRootDirectory.getAbsolutePath());\n    }\n    return;\n  }\n  File[] files=mRootDirectory.listFiles();\n  if (files == null) {\n    return;\n  }\n  for (  File file : files) {\n    BufferedInputStream fis=null;\n    try {\n      fis=new BufferedInputStream(new FileInputStream(file));\n      CacheHeader entry=CacheHeader.readHeader(fis);\n      entry.size=file.length();\n      putEntry(entry.key,entry);\n    }\n catch (    IOException e) {\n      if (file != null) {\n        file.delete();\n      }\n    }\n finally {\n      try {\n        if (fis != null) {\n          fis.close();\n        }\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}\n", "nl": "Initializes the DiskBasedCache by scanning for all files currently in the specified root directory. Creates the root directory if necessary."}
{"code": "private ArrayList<ContentProviderOperation> prepareInsertShares(ArrayList<OCShare> shares,ArrayList<ContentProviderOperation> operations){\n  if (shares != null) {\n    for (    OCShare share : shares) {\n      ContentValues cv=new ContentValues();\n      cv.put(ProviderTableMeta.OCSHARES_FILE_SOURCE,share.getFileSource());\n      cv.put(ProviderTableMeta.OCSHARES_ITEM_SOURCE,share.getItemSource());\n      cv.put(ProviderTableMeta.OCSHARES_SHARE_TYPE,share.getShareType().getValue());\n      cv.put(ProviderTableMeta.OCSHARES_SHARE_WITH,share.getShareWith());\n      cv.put(ProviderTableMeta.OCSHARES_PATH,share.getPath());\n      cv.put(ProviderTableMeta.OCSHARES_PERMISSIONS,share.getPermissions());\n      cv.put(ProviderTableMeta.OCSHARES_SHARED_DATE,share.getSharedDate());\n      cv.put(ProviderTableMeta.OCSHARES_EXPIRATION_DATE,share.getExpirationDate());\n      cv.put(ProviderTableMeta.OCSHARES_TOKEN,share.getToken());\n      cv.put(ProviderTableMeta.OCSHARES_SHARE_WITH_DISPLAY_NAME,share.getSharedWithDisplayName());\n      cv.put(ProviderTableMeta.OCSHARES_IS_DIRECTORY,share.isFolder() ? 1 : 0);\n      cv.put(ProviderTableMeta.OCSHARES_USER_ID,share.getUserId());\n      cv.put(ProviderTableMeta.OCSHARES_ID_REMOTE_SHARED,share.getRemoteId());\n      cv.put(ProviderTableMeta.OCSHARES_ACCOUNT_OWNER,mAccount.name);\n      operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI_SHARE).withValues(cv).build());\n    }\n  }\n  return operations;\n}\n", "nl": "Prepare operations to insert or update files to save in the given folder"}
{"code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}\n", "nl": "Removes wheel changing listener"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FACTION_LEAVE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300526,value0);\n}\n", "nl": "You have left %0."}
{"code": "public static Map<String,Object> findOrdersInternal(DispatchContext dctx,Map<String,? extends Object> context){\n  return findOrders(dctx,context,false);\n}\n", "nl": "SCIPIO: stock findOrders service with additions for internal calls."}
{"code": "protected void removeAt(int index){\n  _values[index]=0;\n  super.removeAt(index);\n}\n", "nl": "removes the mapping at <tt>index</tt> from the map."}
{"code": "public void prevImage() throws IOException {\n  super.prev();\n}\n", "nl": "Move the cursor to the previous image."}
{"code": "@Override protected void processLPC(LpCoeffs coeffs,double[] residual){\n  double totalResidualEnergy=coeffs.getGain() * coeffs.getGain();\n  double avgAbsAmplitude=Math.sqrt(totalResidualEnergy / residual.length);\n  double maxAbsAmplitude=2 * avgAbsAmplitude;\n  double spread=2 * maxAbsAmplitude;\n  for (int i=0; i < residual.length; i++)   residual[i]=whisperAmount * spread * (Math.random() - 0.5) + oneMinusWhisperAmount * residual[i];\n}\n", "nl": "Replace residual with white noise"}
{"code": "@Override protected StateManagerImpl newStateManagerImpl(Object oid,ClassMetaData meta){\n  return new StateManager(oid,meta,this);\n}\n", "nl": "Create a state manager for the given oid and metadata."}
{"code": "public String upload_file1(String master_file_id,String prefix_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(master_file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  parts=this.upload_file(parts[0],parts[1],prefix_name,file_size,callback,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n", "nl": "upload file to storage server (by callback)"}
{"code": "public static URI toLocation(URI sourceUri,String table){\n  getLocationType(sourceUri);\n  return UriBuilder.fromUri(sourceUri).path(table).build();\n}\n", "nl": "Returns a Location URI from a source URI and table name."}
{"code": "protected FriendsGetAvailableForCallQueryWithFields fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return."}
{"code": "public SM_UPDATE_SESSION(SessionKey key){\n  super(0x0c);\n  this.accountId=key.accountId;\n  this.loginOk=key.loginOk;\n}\n", "nl": "Constructs new instance of <tt>SM_UPDATE_SESSION </tt> packet."}
{"code": "private static String massageURI(String uri){\n  uri=uri.trim();\n  int protocolEnd=uri.indexOf(':');\n  if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) {\n    uri=\"http://\" + uri;\n  }\n  return uri;\n}\n", "nl": "Transforms a string that represents a URI into something more proper, by adding or canonicalizing the protocol."}
{"code": "public Logo(String img,String url){\n  super(new BorderLayout());\n  Icon image=new ImageIcon(ImageUtilities.loadImage(img,true));\n  JLabel label=new JLabel(image);\n  label.setBorder(BorderFactory.createEmptyBorder());\n  label.setOpaque(false);\n  label.addMouseListener(this);\n  setOpaque(false);\n  add(label,BorderLayout.CENTER);\n  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n  this.url=url;\n}\n", "nl": "Creates a new instance of RecentProjects"}
{"code": "public static Complex valueOf(double realPart){\n  if (Double.isNaN(realPart)) {\n    return NaN;\n  }\n  return new Complex(realPart);\n}\n", "nl": "Create a complex number given only the real part."}
{"code": "public boolean isUsePercentValuesEnabled(){\n  return mUsePercentValues;\n}\n", "nl": "Returns true if using percentage values is enabled for the chart."}
{"code": "@Override public void reset() throws IOException {\n  fInputStream.reset();\n}\n", "nl": "Reset the stream.  If the stream has been marked, then attempt to reposition it at the mark.  If the stream has not been marked, then attempt to reset it in some way appropriate to the particular stream, for example by repositioning it to its starting point.  Not all character-input streams support the reset() operation, and some support reset() without supporting mark()."}
{"code": "public boolean areTransmitOptionsSet(){\n  return transmitOptions != TRANSMIT_OPTIONS_NOT_SET;\n}\n", "nl": "Identifies if transmit options have been set yet for this SendData Req"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.challenges"}
{"code": "public int geom_eval(){\n  return soot.PhaseOptions.getInt(options,\"geom-eval\");\n}\n", "nl": "Precision evaluation methodologies -- Precision evaluation methodologies. We internally provide some precision evaluation  methodologies and classify the evaluation strength into three  levels. If level is 0, we do nothing. If level is 1, we report  the statistical information about the points-to result. If level  is 2, we perform the virtual callsite resolution, static cast  safety and all-pairs alias evaluations. \t\t\t\t\t\t"}
{"code": "public NewInvokeExpr newNewInvokeExpr(RefType base,SootMethodRef method,List args){\n  return new GNewInvokeExpr(base,method,args);\n}\n", "nl": "Constructs a NewInvokeExpr(Local base, List of Expr) grammar chunk."}
{"code": "public static void polygon(double[] x,double[] y){\n  if (x == null)   throw new NullPointerException();\n  if (y == null)   throw new NullPointerException();\n  int n1=x.length;\n  int n2=y.length;\n  if (n1 != n2)   throw new IllegalArgumentException(\"arrays must be of the same length\");\n  int n=n1;\n  GeneralPath path=new GeneralPath();\n  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));\n  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));\n  path.closePath();\n  offscreen.draw(path);\n  draw();\n}\n", "nl": "Draws a polygon with the vertices  (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>), (<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>), ..., (<em>x</em><sub><em>n</em>&minus;1</sub>, <em>y</em><sub><em>n</em>&minus;1</sub>)."}
{"code": "public boolean contains(long val){\n  return index(val) >= 0;\n}\n", "nl": "Searches the set for <tt>val</tt>"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(getClass().getSimpleName());\n  sb.append(\" [\");\n  sb.append(\"Hash = \").append(hashCode());\n  sb.append(\", roleId=\").append(roleId);\n  sb.append(\", menuId=\").append(menuId);\n  sb.append(\", permission=\").append(permission);\n  sb.append(\"]\");\n  return sb.toString();\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table sys_role_menu"}
{"code": "public UserAlreadyExistsException(String s){\n  super(s);\n}\n", "nl": "Constructs a <code>UserAlreadyExistsException</code> with the specified detail message."}
{"code": "public static boolean isUpdateOrWrite(int mod){\n  return Modifiers.contains(mod,UpdateModifiers.UPDATE_OR_WRITE);\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>UPDATE_OR_WRITE</tt> modifier, <tt>false</tt> otherwise."}
{"code": "public void hideToolbar(boolean clearSelection){\n  if (mFindToolbar == null)   return;\n  mFindToolbar.deactivate(clearSelection);\n}\n", "nl": "Hides the toolbar."}
{"code": "public synchronized void addLocators(LookupLocator[] locators){\n  testSetForNull(locators);\n  if (terminated) {\n    throw new IllegalStateException(\"discovery terminated\");\n  }\n  discoverLocators(locators);\n}\n", "nl": "Adds a set of locators to the managed set of locators. Elements in the input set that duplicate (using the <code>LookupLocator.equals</code> method) elements already in the managed set will be ignored. If the empty array is input, the managed set of locators will not change."}
{"code": "public MessagesGetChatUsersQueryWithChatIds(VkApiClient client,UserActor actor,List<Integer> chatIds){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "static public void validateClusterDocument(Node validatedXmlDocument) throws SAXException, IOException {\n  if (validXMLSchema) {\n    Validator validator=null;\n    try {\n      initClusterXSDSchema();\n    }\n catch (    SAXException saxE) {\n      if (_logger.isLoggable(Level.SEVERE)) {\n        _logger.log(Level.SEVERE,\"Failed to create XML xsd validator. Will not validate the cluster configuration due to:  \" + saxE.toString(),saxE);\n      }\n    }\ncatch (    IllegalArgumentException iae) {\n      if (_logger.isLoggable(Level.SEVERE)) {\n        _logger.log(Level.SEVERE,\"Failed to create XML xsd validator. Will not validate the cluster configuration due to:  \" + iae.toString(),iae);\n      }\n    }\n    if (schemaXSD != null) {\n      validator=schemaXSD.newValidator();\n      validator.setErrorHandler(new DefaultErrorHandler());\n      Attr xpathAttr=null;\n      boolean exceptionThrown=false;\n      try {\n        Node attrNode=validatedXmlDocument.getFirstChild();\n        if (attrNode != null && attrNode instanceof Element) {\n          Attr attr=(Attr)attrNode.getAttributes().getNamedItem(\"xmlns\");\n          if (attr != null) {\n            xpathAttr=((Element)attrNode).removeAttributeNode(attr);\n            if (xpathAttr != null && _logger.isLoggable(Level.FINE)) {\n              _logger.log(Level.FINE,\"In order the cluster schema xsl validation succeeds you need to remove the following xsl \" + \" header attribute. \\n\" + xpathAttr + \"\\nCurrently we bypassed the validation and continued as expected.\");\n            }\n          }\n        }\n      }\n catch (      Exception e) {\n        if (_logger.isLoggable(Level.FINE)) {\n          _logger.log(Level.FINE,\"In order the cluster schema xsl validation succeeds you need to remove the following xsl \" + \" header attribute. \\n\" + xpathAttr + \"\\nException thrown before validating: \"+ e.getMessage());\n        }\n        exceptionThrown=true;\n      }\n      if (xpathAttr == null && !exceptionThrown) {\n        if (validator != null && validXMLSchema)         validator.validate(new DOMSource(validatedXmlDocument));\n        if (_logger.isLoggable(Level.FINE)) {\n          _logger.log(Level.FINE,\"Validated successfully the cluster configuration using the XML xsd validator: \" + validator.toString());\n        }\n      }\n    }\n  }\n}\n", "nl": "If -Dcom.gs.xmlschema.validation=true (which is the default) it will parse the final xml configuration document (XML DOM tree) against the stricter XSD schema (the clusterXML-Schema.xsd schema). Throws exception if it fails to validate or can't create the validator."}
{"code": "void mirror(){\n  for (int x=0; x < bitMatrix.getWidth(); x++) {\n    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {\n      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {\n        bitMatrix.flip(y,x);\n        bitMatrix.flip(x,y);\n      }\n    }\n  }\n}\n", "nl": "Mirror the bit matrix in order to attempt a second reading."}
{"code": "public boolean isCaseSensitive(){\n  return sensitive;\n}\n", "nl": "Does the object represent case sensitive comparison."}
{"code": "private void loadSettings(){\n  Properties pIn=new Properties();\n  try {\n    if (!(new File(\"AutoSummENGGUI.properties\").exists()))     return;\n    FileInputStream fsIn=new FileInputStream(\"AutoSummENGGUI.properties\");\n    pIn.loadFromXML(fsIn);\n    fsIn.close();\n  }\n catch (  IOException ioe) {\n    ioe.printStackTrace(System.err);\n    return;\n  }\n  try {\n    ModelsRootDirEdt.setText(pIn.getProperty(\"ModelDir\",\"./models\"));\n    SummariesRootDirEdt.setText(pIn.getProperty(\"SummaryDir\",\"./summaries\"));\n    OutputFileEdt.setText(pIn.getProperty(\"OutputFile\",\"./jinsect.table\"));\n    ThreadCntEdt.setValue(Integer.valueOf(pIn.getProperty(\"Threads\",\"2\")));\n    SilentChk.setSelected(Boolean.valueOf(pIn.getProperty(\"Silent\",Boolean.TRUE.toString())));\n    ProgressChk.setSelected(Boolean.valueOf(pIn.getProperty(\"ShowProgress\",Boolean.TRUE.toString())));\n    DoWordChk.setSelected(Boolean.valueOf(pIn.getProperty(\"DoWord\",Boolean.TRUE.toString())));\n    DoWordChkStateChanged(new ChangeEvent(DoWordChk));\n    DoCharChk.setSelected(Boolean.valueOf(pIn.getProperty(\"DoChar\",Boolean.TRUE.toString())));\n    DoCharChkStateChanged(new ChangeEvent(DoCharChk));\n    if (pIn.getProperty(\"Use\",\"Occurences\").equals(\"Occurences\"))     OccurencesChk.setSelected(true);\n else     DistrosChk.setSelected(true);\n    CharMinEdt.setValue(Integer.valueOf(pIn.getProperty(\"CharMin\",\"3\")));\n    CharMaxEdt.setValue(Integer.valueOf(pIn.getProperty(\"CharMax\",\"3\")));\n    CharDistEdt.setValue(Integer.valueOf(pIn.getProperty(\"CharDist\",\"3\")));\n    WordMinEdt.setValue(Integer.valueOf(pIn.getProperty(\"WordMin\",\"1\")));\n    WordMaxEdt.setValue(Integer.valueOf(pIn.getProperty(\"WordMax\",\"2\")));\n    WordDistEdt.setValue(Integer.valueOf(pIn.getProperty(\"WordDist\",\"3\")));\n  }\n catch (  Exception e) {\n    System.err.println(\"Could not load settings...\");\n    return;\n  }\n  PerformanceTableModel tTmp=new PerformanceTableModel();\n  DetailedResultsTbl.setModel(tTmp);\n}\n", "nl": "Load GUI settings from file."}
{"code": "public List<Supplier> loadSuppliers(){\n  EntityManager em=emf.createEntityManager();\n  TypedQuery<Supplier> queryBP;\n  List<Supplier> resBP=null;\n  try {\n    em.getTransaction().begin();\n    queryBP=em.createQuery(\"SELECT s FROM Supplier s\",Supplier.class);\n    resBP=queryBP.getResultList();\n    if (resBP.size() > 5) {\n      logger.info(resBP.size() + \" Suppliers already available in the db\");\n    }\n else {\n      new XMLParser().readSuppliers(em,\"com/sap/espm/model/data/Business_Partners.xml\");\n      em.getTransaction().commit();\n      queryBP=em.createQuery(\"SELECT s FROM Supplier s\",Supplier.class);\n      resBP=queryBP.getResultList();\n      logger.info(resBP.size() + \" suppliers loaded into the db\");\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"Exception occured\",e);\n  }\n finally {\n    em.close();\n  }\n  return resBP;\n}\n", "nl": "Load Customers to db from Business_Partners.xml."}
{"code": "public boolean containsDetailsView(DetailsView detailsView){\n  return getDisplayArea(detailsView.getTab()) != null;\n}\n", "nl": "Returns true if DataViewComponent contains the DetailsView, false otherwise."}
{"code": "@Deprecated public int _INVALID_getDamage(){\n  return NumberConversions.ceil(getDamage());\n}\n", "nl": "This method exists for legacy reasons to provide backwards compatibility. It will not exist at runtime and should not be used under any circumstances."}
{"code": "public static final void shuffle(int[] a,int start,int len,Random r){\n  for (int i=start + len; --i > 0; ) {\n    int t=a[i], j=r.nextInt(i);\n    a[i]=a[j];\n    a[j]=t;\n  }\n}\n", "nl": "Randomly permute the contents of a range an array."}
{"code": "public SpringPlugin(){\n  this.configFiles=new String[]{\"classpath:applicationContext.xml\"};\n}\n", "nl": "Use configuration under the path of WebRoot/WEB-INF."}
{"code": "public static float distance(float eventX,float startX,float eventY,float startY){\n  float dx=eventX - startX;\n  float dy=eventY - startY;\n  return (float)Math.sqrt(dx * dx + dy * dy);\n}\n", "nl": "Return the distance between two points."}
{"code": "public boolean oneofScoped(){\n  return oneof != null;\n}\n", "nl": "Returns true if field is oneof-scoped."}
{"code": "final public boolean isMultipart(){\n  return _multipart;\n}\n", "nl": "is multipart request"}
{"code": "public MarketEditQuery deleted(Boolean value){\n  return unsafeParam(\"deleted\",value);\n}\n", "nl": "Item status"}
{"code": "public static <L,R>Either<L,R> right(R right){\n  return new Either<>(null,right,false);\n}\n", "nl": "Constructs an Either containing a right value."}
{"code": "public String toString(){\n  return \"\" + offset;\n}\n", "nl": "Returns the offset in a string."}
{"code": "public static SM_SYSTEM_MESSAGE STR_STIGMA_EXHAUST(int num0sp){\n  return new SM_SYSTEM_MESSAGE(1300411,num0sp);\n}\n", "nl": "You have spent %num0sp."}
{"code": "public PhotosCreateCommentQuery attachments(String... value){\n  return unsafeParam(\"attachments\",value);\n}\n", "nl": "(Required if \"message\" is not set.) List of objects attached to the post, in the following format: \"type\"\"owner_id\"_\"media_id\" \"\"type\"\" - Type of media attachment: \"photo\" - photo \"video\" - video \"audio\" - audio \"doc\" - document \"\"owner_id\"\" - Media attachment owner ID. \"\"media_id\"\" - Media attachment ID. <p> Example: photo100172_166443618,photo66748_265827614"}
{"code": "public DistanceEstimator(Distribution tmSymbolsPerRank,Distribution tmNonSymbolsPerRank,NGramSizeEstimator nseEstimator){\n  SymbolsPerRank=new Distribution();\n  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());\n  NonSymbolsPerRank=new Distribution();\n  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());\n  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());\n  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());\n  Estimator=nseEstimator;\n}\n", "nl": "Creates a new instance of DistanceEstimator, given two distribution of symbols and non-symbols, by getting a copy of the distributions."}
{"code": "private List<Result> makeLookbackResults(JsonNode jsonResult,Set<DimensionColumn> dimensionColumns,Set<MetricColumn> metricColumns,DateTimeZone dateTimeZone){\n  List<Result> results=new ArrayList<>();\n  for (  JsonNode record : jsonResult) {\n    DateTime timeStamp=new DateTime(record.get(\"timestamp\").asText(),dateTimeZone);\n    JsonNode result=record.get(\"result\");\n    LinkedHashMap<MetricColumn,Object> metricValues=extractMetricValues(metricColumns,result);\n    LinkedHashMap<DimensionColumn,DimensionRow> dimensionRows;\n    dimensionRows=dimensionColumns == null ? new LinkedHashMap<>() : extractDimensionRows(dimensionColumns,result);\n    results.add(new Result(dimensionRows,metricValues,timeStamp));\n  }\n  return results;\n}\n", "nl": "Create a list of results from a JsonNode of a lookback response."}
{"code": "@Override public void populateExpression(Object objValue){\n  Double value=defaultValue;\n  if (objValue instanceof Integer) {\n    int i=((Integer)objValue).intValue();\n    value=Double.valueOf((double)i);\n  }\n else   if (objValue instanceof Double) {\n    value=(Double)objValue;\n  }\n else   if (objValue instanceof String) {\n    value=Double.valueOf((String)objValue);\n  }\n  populateField(value);\n}\n", "nl": "Populate expression."}
{"code": "private String statusAndPermissions(DataApprovalWorkflow workflow,Period period,OrganisationUnit organisationUnit,DataElementCategoryOptionCombo attributeOptionCombo){\n  DataApprovalStatus status=dataApprovalService.getDataApprovalStatusAndPermissions(workflow,period,organisationUnit,attributeOptionCombo);\n  DataApprovalPermissions permissions=status.getPermissions();\n  return status.getState().toString() + \" level=\" + (status.getApprovedLevel() == null ? \"null\" : status.getApprovedLevel().getName())+ \" approve=\"+ (permissions.isMayApprove() ? \"T\" : \"F\")+ \" unapprove=\"+ (permissions.isMayUnapprove() ? \"T\" : \"F\")+ \" accept=\"+ (permissions.isMayAccept() ? \"T\" : \"F\")+ \" unaccept=\"+ (permissions.isMayUnaccept() ? \"T\" : \"F\")+ \" read=\"+ (permissions.isMayReadData() ? \"T\" : \"F\");\n}\n", "nl": "Returns approval status and permissions information as a string. This allows a test to compare the result against a string and test several things at once. More importantly, it shows in the log all of the ways in which the test status and permissions differs from expected, instead of showing only one different value. This can save time in understanding the difference between the expected value and the test result."}
{"code": "public short[] unCompress(byte[] compInput){\n  try {\n    return Snappy.uncompressShortArray(compInput);\n  }\n catch (  IOException e) {\n    LOGGER.error(e,e.getMessage());\n  }\n  return null;\n}\n", "nl": "wrapper method for uncompressShortArray."}
{"code": "private Collection<AssociationsInfo> analyzeAssociations(DataSupport baseObj){\n  try {\n    Collection<AssociationsInfo> associationInfos=getAssociationInfo(baseObj.getClassName());\n    analyzeAssociatedModels(baseObj,associationInfos);\n    return associationInfos;\n  }\n catch (  Exception e) {\n    throw new DataSupportException(e.getMessage());\n  }\n}\n", "nl": "Analyze the associations of baseObj and store the result in it. The associations will be used when deleting referenced data of baseObj."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200869,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] received %num0 damage as it used [%SkillName]."}
{"code": "private void drawDownError(Canvas canvas){\n  if (mIfShowMarkRun) {\n    final float progress=mProgress;\n    drawText(canvas,progress);\n  }\n  publicPaint.setColor(Color.WHITE);\n  final Path dst=mDst;\n  dst.reset();\n  dst.lineTo(0,0);\n  pathMeasure1.getSegment(0.2f * mErrorPathLengthLeft,mErrorRightDegree * mErrorPathLengthLeft,dst,true);\n  canvas.drawPath(dst,publicPaint);\n  dst.reset();\n  dst.lineTo(0,0);\n  pathMeasure2.getSegment(0.2f * mErrorPathLengthRight,mErrorLeftDegree * mErrorPathLengthRight,dst,true);\n  canvas.drawPath(dst,publicPaint);\n}\n", "nl": "Draw error"}
{"code": "protected void reset(VisualItem item){\n  item.setVisible(false);\n  item.setEndVisible(false);\n  item.setStartStrokeColor(item.getStrokeColor());\n  item.revertToDefault(VisualItem.STROKECOLOR);\n  item.revertToDefault(VisualItem.ENDSTROKECOLOR);\n  item.setStartTextColor(item.getTextColor());\n  item.revertToDefault(VisualItem.TEXTCOLOR);\n  item.revertToDefault(VisualItem.ENDTEXTCOLOR);\n  item.setStartFillColor(item.getFillColor());\n  item.revertToDefault(VisualItem.FILLCOLOR);\n  item.revertToDefault(VisualItem.ENDFILLCOLOR);\n}\n", "nl": "Reset an axis label VisualItem"}
{"code": "public static void releasePbsStream(IThreadLocalResource pbsStream){\n  pbsStream.release();\n}\n", "nl": "Release the used output stream"}
{"code": "public void addField(FieldState symbolType){\n  if (symbolType != null) {\n    FieldConfigBase fieldConfig=symbolType.getConfigField();\n    Class<?> panelId=symbolType.getClass();\n    VendorOptionVersion vendorOption=symbolType.getVendorOption();\n    if (fieldConfig == null) {\n      ConsoleManager.getInstance().error(this,\"FieldConfigSymbolType.addPanel passed a field config as null\");\n    }\n else {\n      containingPanel.add(fieldConfig.getPanel(),panelId.getName());\n      fieldConfigMap.put(panelId,fieldConfig);\n      vendorOptionMap.put(panelId,vendorOption);\n      fieldConfig.setExpressionUpdateListener(this);\n      fieldConfig.setParent(this);\n    }\n  }\n}\n", "nl": "Adds the field to the symbol type field."}
{"code": "private void initWidget(){\n  SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_login_swipeBackLayout);\n  swipeBackLayout.setOnSwipeListener(this);\n  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_login_statusBar);\n  if (DisplayUtils.isNeedSetStatusBarMask()) {\n    statusBar.setBackgroundResource(R.color.colorPrimary_light);\n    statusBar.setMask(true);\n  }\n  this.container=(CoordinatorLayout)findViewById(R.id.activity_login_container);\n  ImageButton closeBtn=(ImageButton)findViewById(R.id.activity_login_closeBtn);\n  closeBtn.setOnClickListener(this);\n  if (Mysplash.getInstance().isLightTheme()) {\n    closeBtn.setImageResource(R.drawable.ic_close_light);\n  }\n else {\n    closeBtn.setImageResource(R.drawable.ic_close_dark);\n  }\n  ImageView icon=(ImageView)findViewById(R.id.activity_login_icon);\n  Glide.with(this).load(R.drawable.ic_launcher).diskCacheStrategy(DiskCacheStrategy.NONE).into(icon);\n  DisplayUtils.setTypeface(this,((TextView)findViewById(R.id.activity_login_content)));\n  Button loginBtn=(Button)findViewById(R.id.activity_login_loginBtn);\n  loginBtn.setOnClickListener(this);\n  Button joinBtn=(Button)findViewById(R.id.activity_login_joinBtn);\n  joinBtn.setOnClickListener(this);\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n    if (Mysplash.getInstance().isLightTheme()) {\n      loginBtn.setBackgroundResource(R.color.colorTextTitle_light);\n      joinBtn.setBackgroundResource(R.color.colorPrimaryDark_light);\n    }\n else {\n      loginBtn.setBackgroundResource(R.color.colorTextTitle_dark);\n      joinBtn.setBackgroundResource(R.color.colorPrimaryDark_dark);\n    }\n  }\n else {\n    loginBtn.setBackgroundResource(R.drawable.button_login);\n    joinBtn.setBackgroundResource(R.drawable.button_join);\n  }\n  this.buttonContainer=(LinearLayout)findViewById(R.id.activity_login_buttonContainer);\n  this.progressContainer=(RelativeLayout)findViewById(R.id.activity_login_progressContainer);\n  progressContainer.setVisibility(View.GONE);\n}\n", "nl": "<br> UI."}
{"code": "public String toString(){\n  return val ? \"Integrity.YES\" : \"Integrity.NO\";\n}\n", "nl": "Returns a string representation of this object."}
{"code": "@Override public void bindViewHolder(@NonNull ViewHolder viewHolder,@NonNull String item,int position){\n  Glide.with(viewHolder.itemView.getContext()).load(item).diskCacheStrategy(DiskCacheStrategy.NONE).into(viewHolder.photo);\n  viewHolder.itemView.setOnClickListener(null);\n}\n", "nl": "Binding your model against your ViewHolder."}
{"code": "private void init(String[] catalogs,boolean preferPublic){\n  fCatalogsList=(catalogs != null) ? catalogs.clone() : null;\n  fPreferPublic=preferPublic;\n  fResolverCatalogManager=new CatalogManager();\n  fResolverCatalogManager.setAllowOasisXMLCatalogPI(false);\n  fResolverCatalogManager.setCatalogClassName(\"org.apache.xml.resolver.Catalog\");\n  fResolverCatalogManager.setCatalogFiles(\"\");\n  fResolverCatalogManager.setIgnoreMissingProperties(true);\n  fResolverCatalogManager.setPreferPublic(fPreferPublic);\n  fResolverCatalogManager.setRelativeCatalogs(false);\n  fResolverCatalogManager.setUseStaticCatalog(false);\n  fResolverCatalogManager.setVerbosity(0);\n}\n", "nl": "Initialization. Create a CatalogManager and set all the properties upfront. This prevents JVM wide system properties or a property file somewhere in the environment from affecting the behaviour of this catalog resolver."}
{"code": "static void validateRefSpec(Location location,Map<String,String> env,Path cwd,String refspec) throws EvalException {\n  try {\n    executeGit(cwd,ImmutableList.of(\"check-ref-format\",\"--allow-onelevel\",\"--refspec-pattern\",refspec),env,false);\n  }\n catch (  BadExitStatusWithOutputException e) {\n    throw new EvalException(location,\"Invalid refspec: \" + refspec);\n  }\ncatch (  CommandException e) {\n    throw new RuntimeException(\"Error validating refspec\",e);\n  }\n}\n", "nl": "Validate that a refspec is valid."}
{"code": "public ChangeReport(final Change change){\n  this(change.getChangeId());\n}\n", "nl": "Creates a new ChangeReport matching the provided change."}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "void reset(){\n  if (sUidToThrottler != null)   sUidToThrottler.remove(mUid);\n  mSharedPreferences.edit().remove(SCORE + mUid).remove(LAST_REQUEST + mUid).remove(BANNED_UNTIL + mUid).apply();\n}\n", "nl": "Resets the banning state."}
{"code": "public void insertedNodeFromDOM(Node node){\n  if (node == null)   return;\n  if (fInsertNode == node)   return;\n  if (fInsertedFromRange)   return;\n  Node parent=node.getParentNode();\n  if (parent == fStartContainer) {\n    int index=indexOf(node,fStartContainer);\n    if (index < fStartOffset) {\n      fStartOffset++;\n    }\n  }\n  if (parent == fEndContainer) {\n    int index=indexOf(node,fEndContainer);\n    if (index < fEndOffset) {\n      fEndOffset++;\n    }\n  }\n}\n", "nl": "This function is called from the DOM. This node has already been inserted into the DOM. Fix-up any offsets."}
{"code": "@NonNull static String createUniqueFilename(String prefix){\n  String randomId=Long.toString(System.currentTimeMillis());\n  return String.format(Locale.US,FILE_NAME_TEMPLATE,prefix,randomId);\n}\n", "nl": "Create a unique file name starting with the prefix."}
{"code": "public GetTypeDescriptorActionInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public boolean isButtonEnabled(SiteAdminButtons button){\n  return !getButton(button).findElement(By.xpath(BUTTON_TABLE_PARENT_XPATH)).getAttribute(HtmlTags.Attributes.CLASS).contains(DISABLED_BUTTON_CLASS);\n}\n", "nl": "Verify of button on Siteadmin action bar is enabled"}
{"code": "public StatelessChunkListDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){\n  super(entityName,sessionFactory,fetchSize,performOrderById,chunkSize);\n}\n", "nl": "Constructs a list iterator over the given entity name."}
{"code": "public SVNCompareRevisionsInput(IFile resource,ILogEntry[] logEntries){\n  super(new CompareConfiguration());\n  this.resource=resource;\n  this.logEntries=logEntries;\n  updateCurrentEdition();\n  initializeActions();\n}\n", "nl": "creates a SVNCompareRevisionsInput "}
{"code": "public boolean isSelectionFindable(){\n  return false;\n}\n", "nl": "is a selection find possible"}
{"code": "private void populateAttributeComboBox(){\n  if (attributeComboBox != null) {\n    setPopulatingComboBox(true);\n    Object selectedItem=model.getSelectedItem();\n    model.removeAllElements();\n    model.addElement(\"\");\n    if (attributeNameList != null) {\n      for (      String attribute : attributeNameList) {\n        model.addElement(attribute);\n      }\n    }\n    attributeComboBox.setModel(model);\n    model.setSelectedItem(selectedItem);\n    setPopulatingComboBox(false);\n  }\n}\n", "nl": "Populate attribute combo box."}
{"code": "private char readEscapeCharacter() throws JSONException {\n  char escaped=in.charAt(pos++);\nswitch (escaped) {\ncase 'u':\n    if (pos + 4 > in.length()) {\n      throw syntaxError(\"Unterminated escape sequence\");\n    }\n  String hex=in.substring(pos,pos + 4);\npos+=4;\ntry {\nreturn (char)Integer.parseInt(hex,16);\n}\n catch (NumberFormatException nfe) {\nthrow syntaxError(\"Invalid escape sequence: \" + hex);\n}\ncase 't':\nreturn '\\t';\ncase 'b':\nreturn '\\b';\ncase 'n':\nreturn '\\n';\ncase 'r':\nreturn '\\r';\ncase 'f':\nreturn '\\f';\ncase '\\'':\ncase '\"':\ncase '\\\\':\ndefault :\nreturn escaped;\n}\n}\n", "nl": "Unescapes the character identified by the character or characters that immediately follow a backslash. The backslash '\\' should have already been read. This supports both unicode escapes \"u000A\" and two-character escapes \"\\n\"."}
{"code": "static CachedModel create(Class<Model> model,Map<Integer,Map<String,PathMapping>> pathmapping,Module module){\n  CachedModel m=new CachedModel();\n  m.model=model;\n  m.pathmapping=pathmapping;\n  m.module=module;\n  return m;\n}\n", "nl": "Creates the."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200504,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] received the Delayed Blast effect as you used [%SkillName]."}
{"code": "public static void show(Activity activity,int resId){\n  show(activity,resId,LENGTH_SHORT);\n}\n", "nl": "Show activity level toast."}
{"code": "public static String lowerFirst(String s){\n  if (s.isEmpty()) {\n    return s;\n  }\n  char c=s.charAt(0);\n  if (Character.isLowerCase(c)) {\n    return s;\n  }\n  c=Character.toLowerCase(c);\n  return c + s.substring(1);\n}\n", "nl": "Returns a string with the first char lowered if it is in upper case, other return the original one."}
{"code": "public void actionPerformed(ActionEvent ev){\n  String radius=\"\" + getViewer().getNodeRadius();\n  radius=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter node radius (0-100)\",radius);\n  if (radius != null && Basic.isInteger(radius) && Integer.parseInt(radius) >= 0)   execute(\"set nodeRadius=\" + radius + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public int readBytes(byte[] value,int length) throws JMSException {\n  initializeReading();\n  if (value == null) {\n    throw new NullPointerException(\"Byte buffer is null\");\n  }\n  if (length < 0 || length > value.length) {\n    throw new IndexOutOfBoundsException(\"Illegal byte buffer size. Must be between 0 and value.length.\");\n  }\n  this.dataIn.mark(Integer.MAX_VALUE);\n  try {\n    int n=0;\n    while (n < length) {\n      int count=this.dataIn.read(value,n,length - n);\n      if (count < 0) {\n        break;\n      }\n      n+=count;\n    }\n    if (n == 0 && length > 0) {\n      n=-1;\n    }\n    return n;\n  }\n catch (  EOFException eof) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException e) {\n      JMSException jmsEx=new JMSException(e.toString());\n      jmsEx.setLinkedException(e);\n      throw jmsEx;\n    }\n    JMSException jmsEx=new MessageEOFException(eof.toString());\n    jmsEx.setLinkedException(eof);\n    throw jmsEx;\n  }\ncatch (  IOException ioe) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException e) {\n      JMSException jmsEx=new JMSException(e.toString());\n      jmsEx.setLinkedException(e);\n      throw jmsEx;\n    }\n    JMSException jmsEx=new MessageFormatException(\"Format error occurred\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Reads a portion of the bytes message stream. <P> If the length of array <code>value</code> is less than the number of bytes remaining to be read from the stream, the array should be filled. A subsequent call reads the next increment, and so on. <P> If the number of bytes remaining in the stream is less than the length of array <code>value</code>, the bytes should be read into the array. The return value of the total number of bytes read will be less than the length of the array, indicating that there are no more bytes left to be read from the stream. The next read of the stream returns -1. <p/> If <code>length</code> is negative, or <code>length</code> is greater than the length of the array <code>value</code>, then an <code>IndexOutOfBoundsException</code> is thrown. No bytes will be read from the stream for this exception case."}
{"code": "public ConstraintTrustVerifier(){\n}\n", "nl": "Creates an instance."}
{"code": "private final boolean isPostBreak(Item syllable){\n  return ((syllable.getPrevious() == null) || \"pau\".equals(postBreakPath.findFeature(syllable)));\n}\n", "nl": "Determines if this syllable is following a break."}
{"code": "private void invalidateLayouts(){\n  itemsLayout=null;\n  valueLayout=null;\n  scrollingOffset=0;\n}\n", "nl": "Invalidates layouts"}
{"code": "public AdsGetCategoriesQuery lang(String value){\n  return unsafeParam(\"lang\",value);\n}\n", "nl": "Language. The full list of supported languages is here."}
{"code": "public int nextInt(){\n  if (m_modCount != m_table.getModificationCount())   throw new ConcurrentModificationException();\n  m_cur=m_rows.nextInt();\n  return m_cur;\n}\n", "nl": "Returns the next table row."}
{"code": "public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){\n  int result=-1;\n  if (commands == null || commands.length == 0) {\n    return new CommandResult(result,null,null);\n  }\n  Process process=null;\n  BufferedReader successResult=null;\n  BufferedReader errorResult=null;\n  StringBuilder successMsg=null;\n  StringBuilder errorMsg=null;\n  DataOutputStream os=null;\n  try {\n    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);\n    os=new DataOutputStream(process.getOutputStream());\n    for (    String command : commands) {\n      if (command == null) {\n        continue;\n      }\n      os.write(command.getBytes());\n      os.writeBytes(COMMAND_LINE_END);\n      os.flush();\n    }\n    os.writeBytes(COMMAND_EXIT);\n    os.flush();\n    result=process.waitFor();\n    if (isNeedResultMsg) {\n      successMsg=new StringBuilder();\n      errorMsg=new StringBuilder();\n      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));\n      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));\n      String s;\n      while ((s=successResult.readLine()) != null) {\n        successMsg.append(s);\n      }\n      while ((s=errorResult.readLine()) != null) {\n        errorMsg.append(s);\n      }\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    try {\n      if (os != null) {\n        os.close();\n      }\n      if (successResult != null) {\n        successResult.close();\n      }\n      if (errorResult != null) {\n        errorResult.close();\n      }\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    if (process != null) {\n      process.destroy();\n    }\n  }\n  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());\n}\n", "nl": "execute shell commands"}
{"code": "private void updateButtonState(boolean enabled){\n  btnConnect.setEnabled(enabled);\n  connectionComboBox.setEnabled(enabled);\n  btnEditConnection.setEnabled(enabled);\n}\n", "nl": "Update button state."}
{"code": "private List<EmailData> createEmailDataList(List<Message> messageList){\n  List<EmailData> emailDataList=new ArrayList<>();\n  for (  Message message : messageList) {\n    EmailData emailData=emailDataFactory.create(message);\n    emailDataList.add(emailData);\n  }\n  return emailDataList;\n}\n", "nl": "This method converts list of Message objects to list of EmailData."}
{"code": "public boolean write(byte[] bytes,int offset,int size){\n  if (line == null) {\n    return false;\n  }\n  int bytesRemaining=size;\n  int curIndex=offset;\n  if (firstSample) {\n    firstSample=false;\n    timer.stop(\"firstAudio\");\n    if (audioMetrics) {\n      timer.getTimer(\"firstAudio\").showTimesShortTitle(\"\");\n      timer.getTimer(\"firstAudio\").showTimesShort(0);\n    }\n  }\n  debugPrint(\" au write \" + bytesRemaining + \" pos \"+ line.getMicrosecondPosition()+ \" avail \"+ line.available()+ \" bsz \"+ line.getBufferSize());\n  while (bytesRemaining > 0 && !isCancelled()) {\n    if (!waitResume()) {\n      return false;\n    }\n    debugPrint(\"   queueing cur \" + curIndex + \" br \"+ bytesRemaining);\n    int bytesWritten;\nsynchronized (lineLock) {\n      bytesWritten=line.write(bytes,curIndex,Math.min(BYTES_PER_WRITE,bytesRemaining));\n      if (bytesWritten != bytesWritten) {\n        debugPrint(\"RETRY! bw\" + bytesWritten + \" br \"+ bytesRemaining);\n      }\n      curIndex+=bytesWritten;\n      bytesRemaining-=bytesWritten;\n    }\n    debugPrint(\"   wrote \" + \" cur \" + curIndex + \" br \"+ bytesRemaining+ \" bw \"+ bytesWritten);\n  }\n  return !isCancelled() && !isDone();\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public Builder fadeAnimation(Boolean fadeAnimation){\n  this.fadeAnimation=fadeAnimation;\n  return this;\n}\n", "nl": "Whether the tile fade animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android. default true"}
{"code": "public FileFooter readFooter() throws IOException {\n  ThriftReader thriftReader=openThriftReader(filePath);\n  thriftReader.open();\n  thriftReader.setReadOffset(offset);\n  FileFooter footer=(FileFooter)thriftReader.read();\n  thriftReader.close();\n  return footer;\n}\n", "nl": "It reads the metadata in FileFooter thrift object format."}
{"code": "public static Configuration createSubEquipment(){\n  Configuration configuration=new Configuration();\n  SubEquipment subEquipment=SubEquipment.create(\"SE_INI_TEST\").id(25L).statusTag(StatusTag.create(\"SE:STATUS\").id(300L).build()).commFaultTag(CommFaultTag.create(\"SE:Comm\").id(301L).build()).aliveTag(AliveTag.create(\"SE:Alive\").id(302L).address(new DataTagAddress()).build(),60000).build();\n  subEquipment.setEquipmentId(15L);\n  configuration.addEntity(subEquipment);\n  return configuration;\n}\n", "nl": "SubEquipment id: 26 statusTagId: 300 commFaultTagId: 301 aliveTagId: 302"}
{"code": "private void compareSurrogateKeyData(List<String> data,Dictionary forwardDictionary){\n  int surrogateKey=0;\n  for (int i=0; i < data.size(); i++) {\n    surrogateKey++;\n    String dictionaryValue=forwardDictionary.getDictionaryValueForKey(surrogateKey);\n    assertTrue(data.get(i).equals(dictionaryValue));\n  }\n}\n", "nl": "This method will compare the actual data with expected data"}
{"code": "private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){\n  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();\n  if (mode == BYTE_COMPACTION_MODE_LATCH) {\n    int count=0;\n    long value=0;\n    int[] byteCompactedCodewords=new int[6];\n    boolean end=false;\n    int nextCode=codewords[codeIndex++];\n    while ((codeIndex < codewords[0]) && !end) {\n      byteCompactedCodewords[count++]=nextCode;\n      value=900 * value + nextCode;\n      nextCode=codewords[codeIndex++];\n      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {\n        codeIndex--;\n        end=true;\n      }\n else {\n        if ((count % 5 == 0) && (count > 0)) {\n          for (int j=0; j < 6; ++j) {\n            decodedBytes.write((byte)(value >> (8 * (5 - j))));\n          }\n          value=0;\n          count=0;\n        }\n      }\n    }\n    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {\n      byteCompactedCodewords[count++]=nextCode;\n    }\n    for (int i=0; i < count; i++) {\n      decodedBytes.write((byte)byteCompactedCodewords[i]);\n    }\n  }\n else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {\n    int count=0;\n    long value=0;\n    boolean end=false;\n    while (codeIndex < codewords[0] && !end) {\n      int code=codewords[codeIndex++];\n      if (code < TEXT_COMPACTION_MODE_LATCH) {\n        count++;\n        value=900 * value + code;\n      }\n else {\n        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {\n          codeIndex--;\n          end=true;\n        }\n      }\n      if ((count % 5 == 0) && (count > 0)) {\n        for (int j=0; j < 6; ++j) {\n          decodedBytes.write((byte)(value >> (8 * (5 - j))));\n        }\n        value=0;\n        count=0;\n      }\n    }\n  }\n  result.append(new String(decodedBytes.toByteArray(),encoding));\n  return codeIndex;\n}\n", "nl": "Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded. This includes all ASCII characters value 0 to 127 inclusive and provides for international character set support."}
{"code": "@Override public IBinder onBind(Intent intent){\n  return null;\n}\n", "nl": "PrecacheService does not support binding."}
{"code": "private void decode(byte[] data,int width,int height){\n  Size size=activity.getCameraManager().getPreviewSize();\n  byte[] rotatedData=new byte[data.length];\n  for (int y=0; y < size.height; y++) {\n    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];\n  }\n  int tmp=size.width;\n  size.width=size.height;\n  size.height=tmp;\n  Result rawResult=null;\n  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);\n  if (source != null) {\n    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));\n    try {\n      rawResult=multiFormatReader.decodeWithState(bitmap);\n    }\n catch (    ReaderException re) {\n    }\n finally {\n      multiFormatReader.reset();\n    }\n  }\n  Handler handler=activity.getHandler();\n  if (rawResult != null) {\n    if (handler != null) {\n      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);\n      Bundle bundle=new Bundle();\n      bundleThumbnail(source,bundle);\n      message.setData(bundle);\n      message.sendToTarget();\n    }\n  }\n else {\n    if (handler != null) {\n      Message message=Message.obtain(handler,R.id.decode_failed);\n      message.sendToTarget();\n    }\n  }\n}\n", "nl": "Decode the data within the viewfinder rectangle, and time how long it took. For efficiency, reuse the same reader objects from one decode to the next."}
{"code": "public Number sum(SelectColumn funcColumn,IQueryResultSet<IEntryPacket> entries) throws SQLException {\n  if (entries.isEmpty())   return null;\n  Iterator<IEntryPacket> iter=entries.iterator();\n  IEntryPacket entry=iter.next();\n  Number sum=getNumber(entry,funcColumn,entries);\n  while (iter.hasNext()) {\n    entry=iter.next();\n    sum=NumberUtil.add(sum,getNumber(entry,funcColumn,entries),sum.getClass().getName());\n  }\n  return sum;\n}\n", "nl": "Calculate the sum value of the given column for all entries"}
{"code": "@Override public void addEntry(CatalogEntry entry){\n  int type=entry.getEntryType();\n  if (type == URISUFFIX) {\n    String suffix=normalizeURI(entry.getEntryArg(0));\n    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));\n    entry.setEntryArg(1,fsi);\n    catalogManager.debug.message(4,\"URISUFFIX\",suffix,fsi);\n  }\n else   if (type == SYSTEMSUFFIX) {\n    String suffix=normalizeURI(entry.getEntryArg(0));\n    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));\n    entry.setEntryArg(1,fsi);\n    catalogManager.debug.message(4,\"SYSTEMSUFFIX\",suffix,fsi);\n  }\n  super.addEntry(entry);\n}\n", "nl": "Cleanup and process a Catalog entry. <p/> <p>This method processes each Catalog entry, changing mapped relative system identifiers into absolute ones (based on the current base URI), and maintaining other information about the current catalog.</p>"}
{"code": "public static int gcd(final int p,final int q){\n  int u=p;\n  int v=q;\n  if ((u == 0) || (v == 0)) {\n    if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n      throw MathRuntimeException.createArithmeticException(\"overflow: gcd({0}, {1}) is 2^31\",p,q);\n    }\n    return Math.abs(u) + Math.abs(v);\n  }\n  if (u > 0) {\n    u=-u;\n  }\n  if (v > 0) {\n    v=-v;\n  }\n  int k=0;\n  while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n    u/=2;\n    v/=2;\n    k++;\n  }\n  if (k == 31) {\n    throw MathRuntimeException.createArithmeticException(\"overflow: gcd({0}, {1}) is 2^31\",p,q);\n  }\n  int t=((u & 1) == 1) ? v : -(u / 2);\n  do {\n    while ((t & 1) == 0) {\n      t/=2;\n    }\n    if (t > 0) {\n      u=-t;\n    }\n else {\n      v=t;\n    }\n    t=(v - u) / 2;\n  }\n while (t != 0);\n  return -u * (1 << k);\n}\n", "nl": "<p> Gets the greatest common divisor of the absolute value of two numbers, using the \"binary gcd\" method which avoids division and modulo operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef Stein (1961). </p> Special cases: <ul> <li>The invocations <code>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)</code>, <code>gcd(Integer.MIN_VALUE, 0)</code> and <code>gcd(0, Integer.MIN_VALUE)</code> throw an <code>ArithmeticException</code>, because the result would be 2^31, which is too large for an int value.</li> <li>The result of <code>gcd(x, x)</code>, <code>gcd(0, x)</code> and <code>gcd(x, 0)</code> is the absolute value of <code>x</code>, except for the special cases above. <li>The invocation <code>gcd(0, 0)</code> is the only one which returns <code>0</code>.</li> </ul>"}
{"code": "private Collection<? extends ClientRequestResult> handleClientRequest(@Valid final ClientRequest clientRequest,final Session session,final Destination replyDestination){\nswitch (clientRequest.getRequestType()) {\ncase TAG_CONFIGURATION_REQUEST:\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(\"handleClientRequest() - Received a TAG_CONFIGURATION_REQUEST for %d tags (with configuration details).\",clientRequest.getIds().size()));\n    }\n  return tagrequestHelper.handleTagConfigurationRequest(clientRequest);\ncase APPLY_CONFIGURATION_REQUEST:\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"handleClientRequest() - Received an APPLY_CONFIGURATION_REQUEST with \" + clientRequest.getIds().size() + \" configurations.\");\n}\nreturn clientConfigurationRequestHandler.handleApplyConfigurationRequest(clientRequest,session,replyDestination);\ncase RETRIEVE_CONFIGURATION_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a RETRIEVE_CONFIGURATION_REQUEST.\");\n}\nreturn clientConfigurationRequestHandler.handleRetrieveConfigurationsRequest(clientRequest,session,replyDestination);\ncase TAG_REQUEST:\nif (LOG.isDebugEnabled()) {\nif (clientRequest.getIds().isEmpty()) {\nLOG.debug(String.format(\"handleClientRequest() - Received a TAG_REQUEST with %d wildcard(s) for tag name search: %s\",clientRequest.getRegexList().size(),clientRequest.getRegexList()));\n}\n else {\nLOG.debug(\"handleClientRequest() - Received a TAG_REQUEST for \" + clientRequest.getIds().size() + \" tags.\");\n}\n}\nreturn tagrequestHelper.handleTagRequest(clientRequest);\ncase ALARM_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received an ALARM_REQUEST for \" + clientRequest.getIds().size() + \" alarms.\");\n}\nreturn clientAlarmRequestHandler.handleAlarmRequest(clientRequest);\ncase ACTIVE_ALARMS_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received an ACTIVE_ALARMS_REQUEST.\");\n}\nreturn clientAlarmRequestHandler.handleActiveAlarmRequest(clientRequest);\ncase SUPERVISION_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a SUPERVISION_REQUEST.\");\n}\nreturn supervisionFacade.getAllSupervisionStates();\ncase COMMAND_HANDLE_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a COMMAND_HANDLE_REQUEST for \" + clientRequest.getIds().size() + \" commands.\");\n}\nreturn clientCommandRequestHandler.handleCommandHandleRequest(clientRequest);\ncase EXECUTE_COMMAND_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received an EXECUTE_COMMAND_REQUEST.\");\n}\nreturn clientCommandRequestHandler.handleExecuteCommandRequest(clientRequest);\ncase DAQ_XML_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a DAQ_XML_REQUEST\");\n}\nreturn clientProcessRequestHandler.handleDaqXmlRequest(clientRequest);\ncase PROCESS_NAMES_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a PROCESS_NAMES_REQUEST\");\n}\nreturn clientProcessRequestHandler.handleProcessNamesRequest(clientRequest);\ncase DEVICE_CLASS_NAMES_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a DEVICE_CLASS_NAMES_REQUEST\");\n}\nreturn clientDeviceRequestHelper.handleDeviceClassNamesRequest(clientRequest);\ncase DEVICE_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a DEVICE_REQUEST\");\n}\nreturn clientDeviceRequestHelper.handleDeviceRequest(clientRequest);\ncase TAG_STATISTICS_REQUEST:\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleClientRequest() - Received a TAG_STATISTICS_REQUEST\");\n}\nreturn tagrequestHelper.handleTagStatisticsRequest(clientRequest);\ndefault :\nLOG.error(\"handleClientRequest() - Client request not supported: \" + clientRequest.getRequestType());\nreturn Collections.emptyList();\n}\n}\n", "nl": "Inner method for handling requests. Therefore it has to get for all tag ids mentioned in that request the tag and alarm referenses."}
{"code": "private void updateGraph(){\n  graph.clear();\n  Map<String,Node> className2Node=new HashMap<>();\n  for (  String className1 : getChartData().getClassNames()) {\n    int prevalenceOfClass1=0;\n    for (    String series : getChartData().getSeriesNames()) {\n      double percentage=100.0 * getChartData().getValue(series,className1).doubleValue() / getChartData().getTotalForSeries(series);\n      if (percentage >= getMinThreshold())       prevalenceOfClass1++;\n    }\n    double prevalencePercentage=100.0 * prevalenceOfClass1 / (double)getChartData().getNumberOfSeries();\n    if (prevalencePercentage >= getMinPrevalence() && prevalencePercentage <= getMaxPrevalence()) {\n      Node v=graph.newNode();\n      NodeData nodeData=new NodeData();\n      nodeData.setLabel(className1);\n      v.setData(nodeData);\n      className2Node.put(className1,v);\n      nodeData.setPrevalence(prevalenceOfClass1);\n    }\n  }\n  for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {\n    String className1=((NodeData)v.getData()).getLabel();\n    for (Node w=v.getNext(); w != null; w=w.getNext()) {\n      String className2=((NodeData)w.getData()).getLabel();\n      Set<String> intersection=new HashSet<>();\n      Set<String> union=new HashSet<>();\n      for (      String series : getChartData().getSeriesNames()) {\n        double total=getChartData().getTotalForSeries(series);\n        double percentage1=100.0 * getChartData().getValue(series,className1).doubleValue() / total;\n        double percentage2=100.0 * getChartData().getValue(series,className2).doubleValue() / total;\n        if (percentage1 >= getMinThreshold() || percentage2 >= getMinThreshold()) {\n          union.add(series);\n        }\n        if (percentage1 > getMinThreshold() && percentage2 >= getMinThreshold()) {\n          intersection.add(series);\n        }\n      }\n      if (union.size() > 0) {\n        double probabilityPercent=(100.0 * (double)intersection.size() / (double)union.size());\n        if (probabilityPercent >= getMinProbability()) {\n          Edge e=graph.newEdge(className2Node.get(className1),className2Node.get(className2));\n          graph.setInfo(e,(double)intersection.size() / (double)union.size());\n        }\n      }\n    }\n  }\n}\n", "nl": "computes the co-occurrences graph"}
{"code": "private boolean matchValue(Collection<?> collection,int tokenIndex){\n  if (tokenIndex == _tokens.length)   return match(collection,getExpectedValue());\n  return matchCollectionItemNestedProperty(collection,tokenIndex);\n}\n", "nl": "Perform matching on the provided collection or collection items nested properties."}
{"code": "public String toString(){\n  return \"null\";\n}\n", "nl": "Get the \"null\" string value."}
{"code": "public void populateContextForRequest(HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\n  populateContextForRequest(context,this,request,response,servletContext);\n}\n", "nl": "This method populates the context for this ScreenRenderer based on the HTTP Request and Response objects and the ServletContext. It leverages various conventions used in other places, namely the ControlServlet and so on, of OFBiz to get the different resources needed."}
{"code": "public void clear(){\n  fromDir=null;\n  fromExt=null;\n  bList.removeAllElements();\n  hasChanged=true;\n}\n", "nl": "Clear the list."}
{"code": "public void timeoutOccured(Collection<WatchedObject> bucket) throws Exception {\n  SocketAddress serverAddress=null;\n  SocketChannel socketChannel=null;\n  long startInvocationVersion=-1;\n  try {\n    socketChannel=SocketChannel.open();\n    LRMIUtilities.initNewSocketProperties(socketChannel);\n    Socket newSock=socketChannel.socket();\n    WatchedObject watched=bucket.iterator().next();\n    startInvocationVersion=watched.getVersion();\n    serverAddress=watched.getSocket().socket().getRemoteSocketAddress();\n    if (serverAddress == null)     throw new IOException(\"Watched socket was already closed: \" + watched.getSocket().socket());\n    final int localPort=watched.getSocket().socket().getLocalPort();\n    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,\"Attempting to create a new socket to the ServerEndPoint [\" + serverAddress + \"], local port[\"+ localPort+ \"]\");\n    socketChannel.configureBlocking(true);\n    long absoluteTimeout=SystemTime.timeMillis() + _inspectResponseTimeout;\n    newSock.connect(serverAddress,_INSPECT_TIMEOUT);\n    handleOpenSocket(socketChannel,localPort,absoluteTimeout,watched.getClient());\n    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,getValidConnectionMessage(serverAddress));\n    watched.startWatch();\n  }\n catch (  IOException e) {\n    close(bucket,serverAddress,e,startInvocationVersion);\n  }\n finally {\n    if (socketChannel != null)     socketChannel.close();\n  }\n}\n", "nl": "bucket can never be empty"}
{"code": "public boolean postScale(float sx,float sy){\n  Matrix matrix=new Matrix();\n  matrix.setValues(new float[]{sx,0,0,0,sy,0,0,0,1});\n  Matrix current=new Matrix();\n  current.setValues(MATRIX);\n  matrix.preConcat(current);\n  set(matrix);\n  return true;\n}\n", "nl": "Postconcats the matrix with the specified scale. M' = S(sx, sy) * M"}
{"code": "public static void playWavFile(String filename,int loop,boolean waitUntilCompleted){\n  AudioInputStream audioInputStream=null;\n  File clipFile=new File(filename);\n  try {\n    audioInputStream=AudioSystem.getAudioInputStream(clipFile);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  if (audioInputStream != null) {\n    AudioFormat format=audioInputStream.getFormat();\n    DataLine.Info info=new DataLine.Info(Clip.class,format);\n    try {\n      m_clip=(Clip)AudioSystem.getLine(info);\n      m_clip.open(audioInputStream);\n    }\n catch (    LineUnavailableException e) {\n      e.printStackTrace();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n    }\n    m_clip.loop(loop);\n    if (waitUntilCompleted)     m_clip.drain();\n  }\n else {\n    System.out.println(\"playWavFile<init>(): can't get data from file \" + clipFile.getName());\n  }\n}\n", "nl": "Play back a file loop times (0 = only once). Play in the background, non-blocking."}
{"code": "public static IBaseResourceStorageFactory current(){\n  return currentFactory;\n}\n", "nl": "Returns the current factory."}
{"code": "@Override protected void synchronizeData(){\n  needsSyncData(false);\n  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();\n  name=ownerDocument.getNodeName(fNodeIndex);\n  ownerDocument.getNodeType(fNodeIndex);\n  publicId=ownerDocument.getNodeValue(fNodeIndex);\n  systemId=ownerDocument.getNodeURI(fNodeIndex);\n  int extraDataIndex=ownerDocument.getNodeExtra(fNodeIndex);\n  ownerDocument.getNodeType(extraDataIndex);\n  baseURI=ownerDocument.getNodeName(extraDataIndex);\n}\n", "nl": "Synchronizes the data. This is special because of the way that the \"fast\" notation stores its information internally."}
{"code": "public void addException(Access node){\n  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Exception list."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_LOOTING_CHANGED_RULE(String value0,String value1,String value2){\n  return new SM_SYSTEM_MESSAGE(1390250,value0,value1,value2);\n}\n", "nl": "Group loot policy is now %0. %1 items will be distributed by %2."}
{"code": "public UsersGetQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static Diphone loadBinary(ByteBuffer bb) throws IOException {\n  StringBuffer sb=new StringBuffer();\n  int midPoint;\n  int numSamples;\n  Sample[] samples;\n  if (bb.getInt() != MAGIC) {\n    throw new Error(\"Bad magic number in diphone\");\n  }\n  for (int i=0; i < NAME_LENGTH; i++) {\n    char c=bb.getChar();\n    if (!Character.isWhitespace(c)) {\n      sb.append(c);\n    }\n  }\n  midPoint=bb.getInt();\n  numSamples=bb.getInt();\n  samples=new Sample[numSamples];\n  for (int i=0; i < numSamples; i++) {\n    samples[i]=Sample.loadBinary(bb);\n  }\n  return new Diphone(sb.toString().trim(),samples,midPoint);\n}\n", "nl": "Loads a new diphone from  the given buffer."}
{"code": "public static int diff(FeatureVector v1,FeatureVector v2){\n  int ret=0;\n  if (v1.byteValuedDiscreteFeatures.length < v2.byteValuedDiscreteFeatures.length) {\n    throw new RuntimeException(\"v1 and v2 don't have the same number of byte-valued features: [\" + v1.byteValuedDiscreteFeatures.length + \"] versus [\"+ v2.byteValuedDiscreteFeatures.length+ \"].\");\n  }\n  for (int i=0; i < v1.byteValuedDiscreteFeatures.length; i++) {\n    if (v1.byteValuedDiscreteFeatures[i] == v2.byteValuedDiscreteFeatures[i])     ret++;\n  }\n  if (v1.shortValuedDiscreteFeatures.length < v2.shortValuedDiscreteFeatures.length) {\n    throw new RuntimeException(\"v1 and v2 don't have the same number of short-valued features: [\" + v1.shortValuedDiscreteFeatures.length + \"] versus [\"+ v2.shortValuedDiscreteFeatures.length+ \"].\");\n  }\n  for (int i=0; i < v1.shortValuedDiscreteFeatures.length; i++) {\n    if (v1.shortValuedDiscreteFeatures[i] == v2.shortValuedDiscreteFeatures[i])     ret++;\n  }\n  return (ret);\n}\n", "nl": "Compares two feature vectors in terms of how many discrete features they have in common. WARNING: this assumes that the feature vectors are issued from the same FeatureDefinition; only the number of features is checked for compatibility."}
{"code": "public boolean isNonEscapingElement(String tagName){\n  int i;\n  if (_nonEscapingElements == null) {\n    return false;\n  }\n  for (i=0; i < _nonEscapingElements.length; ++i)   if (_nonEscapingElements[i].equals(tagName))   return true;\n  return false;\n}\n", "nl": "Returns true if the text node children of the given elements should be output unescaped."}
{"code": "private static void createNodeVsBlockMapping(List<NodeBlockRelation> flattenedList,Map<String,List<Distributable>> nodeAndBlockMapping){\n  for (  NodeBlockRelation nbr : flattenedList) {\n    String node=nbr.getNode();\n    List<Distributable> list;\n    if (null == nodeAndBlockMapping.get(node)) {\n      list=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n      list.add(nbr.getBlock());\n      Collections.sort(list);\n      nodeAndBlockMapping.put(node,list);\n    }\n else {\n      list=nodeAndBlockMapping.get(node);\n      list.add(nbr.getBlock());\n      Collections.sort(list);\n    }\n  }\n}\n", "nl": "Create the Node and its related blocks Mapping and put in a Map"}
{"code": "private boolean isCharType(Field field){\n  String type=field.getType().getName();\n  return type.equals(\"char\") || type.endsWith(\"Character\");\n}\n", "nl": "Judge if the field is char or Character type."}
{"code": "public boolean hasField(String fldName){\n  return fields().contains(fldName);\n}\n", "nl": "Returns true if the specified field is in this schema."}
{"code": "private int[] pickLocalAddress() throws IOException {\n  int[] ret=pickForcedLocalAddress();\n  if (ret == null) {\n    ret=pickAutoDetectedLocalAddress();\n  }\n  return ret;\n}\n", "nl": "Picks the local address for an active data transfer operation."}
{"code": "public String sprintf(){\n  Enumeration e=vFmt.elements();\n  ConversionSpecification cs=null;\n  char c=0;\n  StringBuilder sb=new StringBuilder();\n  while (e.hasMoreElements()) {\n    cs=(ConversionSpecification)e.nextElement();\n    c=cs.getConversionCharacter();\n    if (c == '\\0')     sb.append(cs.getLiteral());\n else     if (c == '%')     sb.append(\"%\");\n  }\n  return sb.toString();\n}\n", "nl": "Format nothing.  Just use the control string."}
{"code": "@Override public void reset(){\n  super.reset();\n  fNamespaceDeclarations=fConfiguration.getFeature(Constants.DOM_NAMESPACE_DECLARATIONS);\n  if (fNullFilterInUse) {\n    fDOMFilter=null;\n    fNullFilterInUse=false;\n  }\n  if (fSkippedElemStack != null) {\n    fSkippedElemStack.removeAllElements();\n  }\n  fRejectedElementDepth=0;\n  fFilterReject=false;\n  fSchemaType=null;\n}\n", "nl": "Resets the parser state."}
{"code": "@Nullable(\"if there is no configuration that matches the constraints\") public static <T>FolderConfiguration restrict(@NotNull ConfiguredElement<T> compatible,Collection<ConfiguredElement<T>> allItems){\n  ArrayList<FolderConfiguration> incompatibleConfigurations=Lists.newArrayListWithCapacity(allItems.size());\n  boolean found=false;\n  for (  ConfiguredElement configuredItem : allItems) {\n    FolderConfiguration configuration=configuredItem.getConfiguration();\n    if (configuredItem.equals(compatible)) {\n      found=true;\n      continue;\n    }\n    incompatibleConfigurations.add(configuration);\n  }\n  assert found;\n  RestrictedConfiguration restricted=restrict(compatible.getConfiguration(),incompatibleConfigurations);\n  return (restricted != null) ? restricted.getAny() : null;\n}\n", "nl": "Returns a restricted version of the passed configuration. The value returned will be incompatible with any other configuration in the item. This configuration can be used when we want to make sure that the configuration selected will be displayed. Note: allItems should contain compatible"}
{"code": "public GeoServerStyleTree(SelectedStyleInterface parent){\n  parentObj=parent;\n  createUI();\n  Dimension preferredSize=new Dimension(250,300);\n  setPreferredSize(preferredSize);\n}\n", "nl": "Instantiates a new geo server style tree."}
{"code": "public synchronized void onDestroy(){\n  cleanupService();\n  mHandler.getLooper().quit();\n}\n", "nl": "Inform the library that the context is about to be destroyed, so that any open connections can be cleaned up. <p> Failure to call this method can result in a crash under certain circumstances, such as during screen rotation if an Activity requests the license check or when the user exits the application."}
{"code": "public void seek(long pos){\n}\n", "nl": "seek, not supported"}
{"code": "public void updateCommandTag(final CommandTagUpdate commandTagUpdate,final SourceCommandTag commandTag) throws IllegalAccessException, NoSuchFieldException {\n  fillNonNullFields(commandTagUpdate,commandTag,CHANGE_ID_FIELD,COMMAND_TAG_ID_FIELD,EQUIPMENT_ID_FIELD);\n  removeListOfFields(commandTagUpdate.getFieldsToRemove(),commandTag);\n  if (commandTagUpdate.getHardwareAddressUpdate() != null) {\n    updateHardwareAddress(commandTagUpdate.getHardwareAddressUpdate(),commandTag.getHardwareAddress());\n  }\n}\n", "nl": "Updates a command tag object with the values of a command tag update object."}
{"code": "private int[] extractRow(int[][] twoDimArray,int r) throws CanceledException {\n  assert ((r >= 0) && (r < twoDimArray[0].length));\n  int[] row=new int[twoDimArray.length];\n  progressListener.setMaximum(row.length);\n  for (int i=0; i < row.length; i++) {\n    row[i]=twoDimArray[i][r];\n    progressListener.setProgress(i);\n  }\n  return row;\n}\n", "nl": "extract a row from a two dimensional matrix"}
{"code": "@Override public Filter createLogicFilter(List<Filter> filterList){\n  AndImpl filter=null;\n  if ((filterList == null) || (filterList.size() != 2)) {\n    filter=new AndExtended();\n  }\n else {\n    filter=new AndExtended(filterList);\n  }\n  return filter;\n}\n", "nl": "Creates the logic filter."}
{"code": "@Override public boolean accept(File file){\n  String name=file.getName();\n  for (  String prefix : this.prefixes) {\n    if (caseSensitivity.checkStartsWith(name,prefix)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename starts with the prefix."}
{"code": "private double[] generateSample(){\n  final RealDistribution uniformDist=new UniformRealDistribution(-100,100);\n  final RandomDataGenerator randomDataGenerator=new RandomDataGenerator(100);\n  final int sampleSize=randomDataGenerator.nextInt(10,100);\n  final double[] out=randomDataGenerator.nextDeviates(uniformDist,sampleSize);\n  return out;\n}\n", "nl": "Generates a random sample of double values. Sample size is random, between 10 and 100 and values are uniformly distributed over [-100, 100]."}
{"code": "public String process(Item item) throws ProcessException {\n  int count=-1;\n  for (Item p=item.getItemAs(Relation.SYLLABLE_STRUCTURE); p != null; p=p.getPrevious()) {\n    count++;\n  }\n  return Integer.toString(rail(count));\n}\n", "nl": "Performs some processing on the given item."}
{"code": "public VideoSearchQueryWithExtended filters(VideoSearchFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Set filters"}
{"code": "public String toString(){\n  return name;\n}\n", "nl": "Knotentext vom JTree."}
{"code": "public void handleStep(final ODEStateInterpolator interpolator,final boolean isLast){\n}\n", "nl": "Handle the last accepted step. This method does nothing in this class."}
{"code": "public static long toLong(Object v,long defaultValue){\n  if (v != null) {\n    if (v instanceof Long) {\n      return (Long)v;\n    }\n    if (v instanceof Integer) {\n      return (Integer)v;\n    }\n    if (v instanceof Float) {\n      return (long)((Float)v).floatValue();\n    }\n    if (v instanceof Double) {\n      return (long)((Double)v).doubleValue();\n    }\n    StringBuilder sb=new StringBuilder();\n    String s=v.toString();\n    for (int i=0; i < s.length(); i++) {\n      char c=s.charAt(i);\n      c=X.getNumber(c);\n      if (c >= '0' && c <= '9') {\n        sb.append(c);\n      }\n else       if (c == '-' && sb.length() == 0) {\n        sb.append(c);\n      }\n else       if (sb.length() > 0) {\n        break;\n      }\n    }\n    s=sb.toString();\n    if (s.length() > 0) {\n      try {\n        return Long.parseLong(s);\n      }\n catch (      Exception e) {\n        log.error(e);\n      }\n    }\n  }\n  return defaultValue;\n}\n", "nl": "convert the v to long, if failed using defaultValue."}
{"code": "public DocsAddQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Access key. This parameter is required if \"access_key\" was returned with the document's data."}
{"code": "@SuppressWarnings(\"rawtypes\") static boolean isTrue(Object v1){\n  if (v1 instanceof Number) {\n    return !Array.get(Array.newInstance(Primitives.unwrap(v1.getClass()),1),0).equals(v1);\n  }\n  if (v1 instanceof Boolean) {\n    return (Boolean)v1;\n  }\n  if (v1 instanceof Doc) {\n    return !((Doc)v1).isWhitespace();\n  }\n  if (v1 instanceof String) {\n    return !Strings.isNullOrEmpty((String)v1);\n  }\n  if (v1 instanceof Iterable) {\n    return ((Iterable)v1).iterator().hasNext();\n  }\n  return false;\n}\n", "nl": "Determines whether a value is 'true', where true is interpreted depending on the values type."}
{"code": "private void handlePuncture(Peer peer,Puncture message) throws IOException {\n}\n", "nl": "Handle a puncture. Does nothing because the only purpose of a puncture is to punch a hole in the NAT."}
{"code": "public Builder clockTicker(Ticker ticker){\n  this._ticker=ticker;\n  return this;\n}\n", "nl": "Ticker for timing."}
{"code": "private Reader createUTF16Reader(InputStream stream,boolean isBigEndian){\n  return new UTF16Reader(stream,(fTempString.ch.length << 1),isBigEndian,fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN),fErrorReporter.getLocale());\n}\n", "nl": "Create a new UTF-16 reader from the InputStream."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_ENCHANT_SUCCESS(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1402930,descriptionId);\n}\n", "nl": "You have successfully enchanted %0 and the Stigma's enchantment level has increased by 1 level"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(getClass().getSimpleName());\n  sb.append(\" [\");\n  sb.append(\"Hash = \").append(hashCode());\n  sb.append(\", catalogId=\").append(catalogId);\n  sb.append(\", key=\").append(key);\n  sb.append(\", name=\").append(name);\n  sb.append(\"]\");\n  return sb.toString();\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table sys_dic_index"}
{"code": "public void configureDetailsView(DetailsViewConfiguration detailsViewConfiguration){\n  double topHorizontalDividerResizeWeight=detailsViewConfiguration.getTopHorizontalDividerResizeWeight();\n  if (topHorizontalDividerResizeWeight != -1)   detailsTopHorizontalSplitter.setResizeWeight(topHorizontalDividerResizeWeight);\n  double topHorizontalDividerLocation=detailsViewConfiguration.getTopHorizontalDividerLocation();\n  if (topHorizontalDividerLocation != -1)   detailsTopHorizontalSplitter.setDividerLocation(topHorizontalDividerLocation);\n  double bottomHorizontalDividerResizeWeight=detailsViewConfiguration.getBottomHorizontalDividerResizeWeight();\n  if (bottomHorizontalDividerResizeWeight != -1)   detailsBottomHorizontalSplitter.setResizeWeight(bottomHorizontalDividerResizeWeight);\n  double bottomHorizontalDividerLocation=detailsViewConfiguration.getBottomHorizontalDividerLocation();\n  if (bottomHorizontalDividerLocation != -1)   detailsBottomHorizontalSplitter.setDividerLocation(bottomHorizontalDividerLocation);\n  double verticalDividerResizeWeight=detailsViewConfiguration.getVerticalDividerResizeWeight();\n  if (verticalDividerResizeWeight != -1)   detailsVerticalSplitter.setResizeWeight(verticalDividerResizeWeight);\n  double verticalDividerLocation=detailsViewConfiguration.getVerticalDividerLocation();\n  if (verticalDividerLocation != -1)   detailsVerticalSplitter.setDividerLocation(verticalDividerLocation);\n}\n", "nl": "Configures properties of the details view."}
{"code": "public static boolean isContent(int c){\n  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);\n}\n", "nl": "Returns true if the specified character can be considered content."}
{"code": "public static String wrapQuotesIfWindowsOS(String context){\n  return ExecutorUtils.isUnixOS() ? context : (\"\\\"\" + context + \"\\\"\");\n}\n", "nl": "wrap the supplied context with quotes only if Windows OS"}
{"code": "public Experiment(String label,Application application,String startTime,String endTime,double samplingPercent,String description,String rule,Boolean isPersonalizationEnabled,String modelName,String modelVersion,Boolean isRapidExperiment,Integer userCap,String creatorID){\n  this.setLabel(label).setApplication(application).setStartTime(startTime).setEndTime(endTime).setSamplingPercent(samplingPercent).setDescription(description).setRule(rule).setModelName(modelName).setModelVersion(modelVersion).setIsPersonalizationEnabled(isPersonalizationEnabled).setIsRapidExperiment(isRapidExperiment).setUserCap(userCap).setCreatorID(creatorID);\n}\n", "nl": "Creates an experiment."}
{"code": "public NumberPicker(Activity activity){\n  super(activity,new String[]{});\n}\n", "nl": "Instantiates a new Number picker."}
{"code": "@Override public void onReceivedTitle(WebView view,String title){\n  i(null,\"--> onReceivedTitle() title = \" + title);\n  super.onReceivedTitle(view,title);\n  configReceivedTitle(view,title);\n}\n", "nl": "Notify the host application of a change in the document title."}
{"code": "private static String dayToString(int day,int dayOfWeekLength){\n  return DateUtils.getDayOfWeekString(dayToUtilDay(day),dayOfWeekLength);\n}\n", "nl": "Converts day of week to a String."}
{"code": "private void timeout(){\n  if (this.status == AccelListener.STARTING) {\n    this.timestamp=System.currentTimeMillis();\n    this.win();\n  }\n}\n", "nl": "Returns latest cached position if the sensor hasn't returned newer value. Called two seconds after starting the listener."}
{"code": "public Builder withRange(ByteString endKey){\n  this.endKey=Optional.fromNullable(endKey);\n  return this;\n}\n", "nl": "Set the end key of the delete request. If it is set, the delete request will delete the keys from <i>key</i> to <i>endKey</i> (exclusive). <p>If end key is '\\0', the range is all keys >= key. <p>If the end key is one bit larger than the given key, then it deletes all keys with the prefix (the given key). <p>If both key and end key are '\\0', it deletes all keys."}
{"code": "public static void show(@Nullable Activity activity,int resId,int duration,int gravity){\n  show(activity,resId == 0 ? null : getString(activity,resId),duration,gravity);\n}\n", "nl": "Show activity level toast."}
{"code": "Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){\n  this.node=node;\n  this.down=down;\n  this.right=right;\n}\n", "nl": "Creates index node with given values."}
{"code": "public boolean contains(int index){\n  return index >= getFirst() && index <= getLast();\n}\n", "nl": "Tests whether item is contained by range"}
{"code": "public void put(String name,Object value){\n  name2data.get(name)[2]=value;\n}\n", "nl": "set the value for a name. Does not check that value is of correct type!"}
{"code": "public GroupsGetInvitesQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of invitations to return."}
{"code": "@Override public final void writeBytes(String s) throws IOException {\n  dis.writeBytes(s);\n}\n", "nl": "Write a string."}
{"code": "@PluginFactory public static PigeonRolloverStrategy createStrategy(@PluginAttribute(\"max\") final String max,@PluginAttribute(\"min\") final String min,@PluginAttribute(\"fileIndex\") final String fileIndex,@PluginAttribute(\"compressionLevel\") final String compressionLevelStr,@PluginConfiguration final Configuration config){\n  final boolean useMax=fileIndex == null ? true : fileIndex.equalsIgnoreCase(\"max\");\n  int minIndex=MIN_WINDOW_SIZE;\n  if (min != null) {\n    minIndex=Integer.parseInt(min);\n    if (minIndex < 1) {\n      LOGGER.error(\"Minimum window size too small. Limited to \" + MIN_WINDOW_SIZE);\n      minIndex=MIN_WINDOW_SIZE;\n    }\n  }\n  int maxIndex=DEFAULT_WINDOW_SIZE;\n  if (max != null) {\n    maxIndex=Integer.parseInt(max);\n    if (maxIndex < minIndex) {\n      maxIndex=minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;\n      LOGGER.error(\"Maximum window size must be greater than the minimum windows size. Set to \" + maxIndex);\n    }\n  }\n  final int compressionLevel=Integers.parseInt(compressionLevelStr,Deflater.DEFAULT_COMPRESSION);\n  return new PigeonRolloverStrategy(minIndex,maxIndex,useMax,compressionLevel,config.getStrSubstitutor());\n}\n", "nl": "Create the DefaultRolloverStrategy."}
{"code": "private void migrate(){\n  if (!migrated) {\n    BlazeUserSettings userSettings=BlazeUserSettings.getInstance();\n    this.attachSourcesByDefault=userSettings.getAttachSourcesByDefault();\n    this.attachSourcesOnDemand=userSettings.getAttachSourcesOnDemand();\n    this.migrated=true;\n  }\n}\n", "nl": "Added in 1.8, can be removed ~2.2. When this is removed, java settings can no longer be migrated. (This is non-catastrophic though -- the settings will just reset)"}
{"code": "public static void clearReferences(ClassLoader classLoader){\n  ClassLoaderCache.getCache().removeClassLoader(classLoader);\n  if (NonActivatableServiceDescriptor.getGlobalPolicy() != null) {\n    NonActivatableServiceDescriptor.getGlobalPolicy().setPolicy(classLoader,null);\n  }\n  clearReferencesJdbc(classLoader);\n  clearReferencesThreads(classLoader);\n  clearReferencesThreadLocals(classLoader);\n  clearReferencesRmiTargets(classLoader);\n  clearRmiLoaderHandler(classLoader);\n  try {\n    Class clazz=classLoader.loadClass(\"org.apache.commons.logging.LogFactory\");\n    clazz.getMethod(\"release\",ClassLoader.class).invoke(null,classLoader);\n  }\n catch (  Throwable t) {\n  }\n  try {\n    Class clazz=classLoader.loadClass(\"org.apache.juli.logging.LogFactory\");\n    clazz.getMethod(\"release\",ClassLoader.class).invoke(null,classLoader);\n  }\n catch (  Throwable t) {\n  }\n  clearReferencesResourceBundles(classLoader);\n  java.beans.Introspector.flushCaches();\n}\n", "nl": "Clear references."}
{"code": "public void subtractSupplements(int count,int supplementId){\n  subtractedSupplementsCount=count;\n  subtractedSupplementId=supplementId;\n}\n", "nl": "Put up supplements to subtraction queue, so that when moving they would not decrease, need update as confirmation To update use updateSupplements()"}
{"code": "private void adjustTop(RectF rect,float top,RectF bounds,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){\n  float newTop=top;\n  if (newTop < 0) {\n    newTop/=1.05f;\n    mTouchOffset.y-=newTop / 1.1f;\n  }\n  if (newTop < bounds.top) {\n    mTouchOffset.y-=(newTop - bounds.top) / 2f;\n  }\n  if (newTop - bounds.top < snapMargin) {\n    newTop=bounds.top;\n  }\n  if (rect.bottom - newTop < mMinCropHeight) {\n    newTop=rect.bottom - mMinCropHeight;\n  }\n  if (rect.bottom - newTop > mMaxCropHeight) {\n    newTop=rect.bottom - mMaxCropHeight;\n  }\n  if (newTop - bounds.top < snapMargin) {\n    newTop=bounds.top;\n  }\n  if (aspectRatio > 0) {\n    float newWidth=(rect.bottom - newTop) * aspectRatio;\n    if (newWidth < mMinCropWidth) {\n      newTop=Math.max(bounds.top,rect.bottom - (mMinCropWidth / aspectRatio));\n      newWidth=(rect.bottom - newTop) * aspectRatio;\n    }\n    if (newWidth > mMaxCropWidth) {\n      newTop=Math.max(bounds.top,rect.bottom - (mMaxCropWidth / aspectRatio));\n      newWidth=(rect.bottom - newTop) * aspectRatio;\n    }\n    if (leftMoves && rightMoves) {\n      newTop=Math.max(newTop,Math.max(bounds.top,rect.bottom - bounds.width() / aspectRatio));\n    }\n else {\n      if (leftMoves && rect.right - newWidth < bounds.left) {\n        newTop=Math.max(bounds.top,rect.bottom - (rect.right - bounds.left) / aspectRatio);\n        newWidth=(rect.bottom - newTop) * aspectRatio;\n      }\n      if (rightMoves && rect.left + newWidth > bounds.right) {\n        newTop=Math.max(newTop,Math.max(bounds.top,rect.bottom - (bounds.right - rect.left) / aspectRatio));\n      }\n    }\n  }\n  rect.top=newTop;\n}\n", "nl": "Get the resulting y-position of the top edge of the crop window given the handle's position and the image's bounding box and snap radius."}
{"code": "public ImmutableList<String> lines(){\n  return lines;\n}\n", "nl": "Returns raw lines, including any indentation and surrounding whitespace"}
{"code": "@RequestMapping(method=RequestMethod.POST) public void handleFileUpload(HttpServletRequest request,HttpServletResponse httpResponse,@RequestParam(\"file\") MultipartFile file){\n  if (!file.isEmpty()) {\n    try {\n      ServerConfig serverConfig=retrieveServerConfig();\n      String fileName=file.getOriginalFilename();\n      if (fileName != null && fileName.endsWith(\".zip\")) {\n        clientService.uploadAppDefinition(httpResponse,serverConfig,fileName,file.getInputStream());\n      }\n else {\n        throw new BadRequestException(\"Invalid file name\");\n      }\n    }\n catch (    IOException e) {\n      throw new InternalServerErrorException(\"Could not deploy file: \" + e.getMessage());\n    }\n  }\n else {\n    throw new BadRequestException(\"No file found in POST body\");\n  }\n}\n", "nl": "POST /rest/activiti/apps: upload a app"}
{"code": "public NumberIsTooLargeException(Localizable specific,Number wrong,Number max,boolean boundIsAllowed){\n  super(specific,wrong,max);\n  this.max=max;\n  this.boundIsAllowed=boundIsAllowed;\n}\n", "nl": "Construct the exception with a specific context."}
{"code": "@SubscribeEvent public void swimmingPenalty(LivingUpdateEvent event){\n  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;\n  EntityPlayer player=(EntityPlayer)event.getEntityLiving();\n  if (!EntityPlayerExt.isSurvival(player))   return;\n  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;\n  if (player.isInWater() && !EntityPlayerExt.canSwim(player) && !EntityPlayerExt.isNearBottom(player)) {\n    player.motionY-=0.02;\n  }\n}\n", "nl": "Disable swimming if needed. TODO FIXME Not able to jump at the bottom. New hook may be required. (Probable workaround implemented)"}
{"code": "private SandboxBody create(int index){\n  SandboxBody body=new SandboxBody();\n  if (index == 0) {\n    body.addFixture(new Circle(0.5));\n    body.translate(3.5,0.0);\n  }\n else   if (index == 1) {\n    body.addFixture(Geometry.createUnitCirclePolygon(5,1.0));\n    body.translate(0.0,2.5);\n  }\n else   if (index == 2) {\n    body.addFixture(new Rectangle(0.5,0.5));\n    body.translate(-4.0,-0.5);\n  }\n else   if (index == 3) {\n    body.addFixture(new Triangle(new Vector2(0.45,-0.12),new Vector2(-0.45,0.38),new Vector2(-0.15,-0.22)));\n    body.translate(0.5,0.5);\n  }\n else {\n    body.addFixture(new Segment(new Vector2(-0.3,0.2),new Vector2(0.0,-0.1)));\n    body.translate(-1.0,-1.5);\n  }\n  body.setMass(MassType.INFINITE);\n  body.setUserData(\"Body\" + (index + 1));\n  return body;\n}\n", "nl": "Helper method to create the various bodies for the collision test."}
{"code": "private void rotateLeft(Node<K,V> root){\n  Node<K,V> left=root.left;\n  Node<K,V> pivot=root.right;\n  Node<K,V> pivotLeft=pivot.left;\n  Node<K,V> pivotRight=pivot.right;\n  root.right=pivotLeft;\n  if (pivotLeft != null) {\n    pivotLeft.parent=root;\n  }\n  replaceInParent(root,pivot);\n  pivot.left=root;\n  root.parent=pivot;\n  root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1;\n  pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1;\n}\n", "nl": "Rotates the subtree so that its root's right child is the new root."}
{"code": "private void hidePublicShare(){\n  getShareViaLinkSwitch().setVisibility(View.GONE);\n  getExpirationDateSection().setVisibility(View.GONE);\n  getPasswordSection().setVisibility(View.GONE);\n  getEditPermissionSection().setVisibility(View.GONE);\n  getGetLinkButton().setVisibility(View.GONE);\n  getHideFileListingPermissionSection().setVisibility(View.GONE);\n}\n", "nl": "Hides all the UI elements related to public share"}
{"code": "public void removeTransactionAfterEnd(XtnEntry xtnEntry){\n  try {\n    xtnEntry.lock();\n    ((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry);\n    m_TimedXtns.remove(xtnEntry.m_Transaction);\n  }\n  finally {\n    xtnEntry.unlock();\n  }\n}\n", "nl": "Remove given transaction from handled transactions"}
{"code": "public TestInfo(){\n  this.testName=\"Default test name\";\n  this.logEntries=new TreeSet<>(new LogEntryComparator());\n  this.testResult=new Success();\n  this.start=new Date();\n  this.last=false;\n  this.subreports=new LinkedList<>();\n}\n", "nl": "Constructs TestInfo. Initializes its fields to default values. Don't call it manually, use Guice instead. Test is successful by default."}
{"code": "private DataType thriftDataTyopeToWrapperDataType(org.apache.carbondata.format.DataType dataTypeThrift){\nswitch (dataTypeThrift) {\ncase STRING:\n    return DataType.STRING;\ncase SHORT:\n  return DataType.SHORT;\ncase INT:\nreturn DataType.INT;\ncase LONG:\nreturn DataType.LONG;\ncase DOUBLE:\nreturn DataType.DOUBLE;\ncase DECIMAL:\nreturn DataType.DECIMAL;\ncase TIMESTAMP:\nreturn DataType.TIMESTAMP;\ncase ARRAY:\nreturn DataType.ARRAY;\ncase STRUCT:\nreturn DataType.STRUCT;\ndefault :\nreturn DataType.STRING;\n}\n}\n", "nl": "Below method will be used to convert the thrift data type to wrapper data type"}
{"code": "public void yypushback(int number){\n  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);\n  zzMarkedPos-=number;\n}\n", "nl": "Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method"}
{"code": "@Override public String toString(){\n  return this.descriptions.toString();\n}\n", "nl": "Returns a string representation of this map. The string representation consists of a list of key-value mappings, enclosed in braces."}
{"code": "public void parseShapeMapFromLine(String shapeMapAsLine){\n  NexusStreamParser np=new NexusStreamParser(new StringReader(shapeMapAsLine));\n  try {\n    while (!np.peekMatchIgnoreCase(\";\")) {\n      String sample=np.getWordRespectCase();\n      np.matchIgnoreCase(\":\");\n      int shape=np.getInt();\n      sample2shape.put(sample,(byte)shape);\n    }\n  }\n catch (  IOException e) {\n  }\n}\n", "nl": "parse label map from line"}
{"code": "public void log(String question,String intent,String confidence,String entity,String convoOutput,String convoId,String retrieveAndRankOutput) throws Exception {\n  logger.info(Messages.getString(\"Logging.ENTRY_INTO_DB\"));\n  Database db=client.database(\"conversation_enhanced_db\",true);\n  db.save(new Document(question,intent,confidence,entity,convoOutput,convoId,retrieveAndRankOutput));\n}\n", "nl": "This methods connects to the database and saves the given document to the Cloudant DB"}
{"code": "@Override public long addRoleModule(RoleModule roleModule){\n  return sessionTemplate.insert(NAMESPACE + \".addRoleModule\",roleModule);\n}\n", "nl": "Add new role module mapping"}
{"code": "public void callEvent(final Event event) throws EventException {\n  if (event instanceof Cancellable) {\n    if (((Cancellable)event).isCancelled() && isIgnoringCancelled()) {\n      return;\n    }\n  }\n  executor.execute(listener,event);\n}\n", "nl": "Calls the event executor"}
{"code": "@Override public String scanName() throws IOException {\n  if (fCurrentEntity.position == fCurrentEntity.count) {\n    load(0,true);\n  }\n  int offset=fCurrentEntity.position;\n  char ch=fCurrentEntity.ch[offset];\n  if (XML11Char.isXML11NameStart(ch)) {\n    if (++fCurrentEntity.position == fCurrentEntity.count) {\n      fCurrentEntity.ch[0]=ch;\n      offset=0;\n      if (load(1,false)) {\n        fCurrentEntity.columnNumber++;\n        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);\n        return symbol;\n      }\n    }\n  }\n else   if (XML11Char.isXML11NameHighSurrogate(ch)) {\n    if (++fCurrentEntity.position == fCurrentEntity.count) {\n      fCurrentEntity.ch[0]=ch;\n      offset=0;\n      if (load(1,false)) {\n        --fCurrentEntity.position;\n        --fCurrentEntity.startPosition;\n        return null;\n      }\n    }\n    char ch2=fCurrentEntity.ch[fCurrentEntity.position];\n    if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11NameStart(XMLChar.supplemental(ch,ch2))) {\n      --fCurrentEntity.position;\n      return null;\n    }\n    if (++fCurrentEntity.position == fCurrentEntity.count) {\n      fCurrentEntity.ch[0]=ch;\n      fCurrentEntity.ch[1]=ch2;\n      offset=0;\n      if (load(2,false)) {\n        fCurrentEntity.columnNumber+=2;\n        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,2);\n        return symbol;\n      }\n    }\n  }\n else {\n    return null;\n  }\n  do {\n    ch=fCurrentEntity.ch[fCurrentEntity.position];\n    if (XML11Char.isXML11Name(ch)) {\n      if (++fCurrentEntity.position == fCurrentEntity.count) {\n        int length=fCurrentEntity.position - offset;\n        if (length == fCurrentEntity.ch.length) {\n          char[] tmp=new char[fCurrentEntity.ch.length << 1];\n          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);\n          fCurrentEntity.ch=tmp;\n        }\n else {\n          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);\n        }\n        offset=0;\n        if (load(length,false)) {\n          break;\n        }\n      }\n    }\n else     if (XML11Char.isXML11NameHighSurrogate(ch)) {\n      if (++fCurrentEntity.position == fCurrentEntity.count) {\n        int length=fCurrentEntity.position - offset;\n        if (length == fCurrentEntity.ch.length) {\n          char[] tmp=new char[fCurrentEntity.ch.length << 1];\n          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);\n          fCurrentEntity.ch=tmp;\n        }\n else {\n          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);\n        }\n        offset=0;\n        if (load(length,false)) {\n          --fCurrentEntity.position;\n          --fCurrentEntity.startPosition;\n          break;\n        }\n      }\n      char ch2=fCurrentEntity.ch[fCurrentEntity.position];\n      if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11Name(XMLChar.supplemental(ch,ch2))) {\n        --fCurrentEntity.position;\n        break;\n      }\n      if (++fCurrentEntity.position == fCurrentEntity.count) {\n        int length=fCurrentEntity.position - offset;\n        if (length == fCurrentEntity.ch.length) {\n          char[] tmp=new char[fCurrentEntity.ch.length << 1];\n          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);\n          fCurrentEntity.ch=tmp;\n        }\n else {\n          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);\n        }\n        offset=0;\n        if (load(length,false)) {\n          break;\n        }\n      }\n    }\n else {\n      break;\n    }\n  }\n while (true);\n  int length=fCurrentEntity.position - offset;\n  fCurrentEntity.columnNumber+=length;\n  String symbol=null;\n  if (length > 0) {\n    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);\n  }\n  return symbol;\n}\n", "nl": "Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present. <p/> <strong>Note:</strong> The Name characters are consumed. <p/> <strong>Note:</strong> The string returned must be a symbol. The SymbolTable can be used for this purpose."}
{"code": "public OrPredicate(Predicate p1){\n  add(p1);\n}\n", "nl": "Create a new OrPredicate."}
{"code": "public int dnsDomainLevels(String host){\n  int count=0;\n  int startPos=0;\n  while ((startPos=host.indexOf(\".\",startPos + 1)) > -1) {\n    count++;\n  }\n  return count;\n}\n", "nl": "Returns the number of DNS domain levels (number of dots) in the host name."}
{"code": "@Deployment public void testDecisionFunctionality(){\n  Map<String,Object> variables=new HashMap<String,Object>();\n  variables.put(\"input\",1);\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);\n  List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();\n  assertEquals(3,tasks.size());\n  Map<String,String> expectedMessages=new HashMap<String,String>();\n  expectedMessages.put(TASK1_NAME,TASK1_NAME);\n  expectedMessages.put(TASK2_NAME,TASK2_NAME);\n  expectedMessages.put(TASK3_NAME,TASK3_NAME);\n  for (  Task task : tasks) {\n    expectedMessages.remove(task.getName());\n  }\n  assertEquals(0,expectedMessages.size());\n  variables.put(\"input\",2);\n  pi=runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();\n  assertEquals(2,tasks.size());\n  expectedMessages=new HashMap<String,String>();\n  expectedMessages.put(TASK2_NAME,TASK2_NAME);\n  expectedMessages.put(TASK3_NAME,TASK3_NAME);\n  for (  Task task : tasks) {\n    expectedMessages.remove(task.getName());\n  }\n  assertEquals(0,expectedMessages.size());\n  variables.put(\"input\",3);\n  pi=runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();\n  assertEquals(1,tasks.size());\n  expectedMessages=new HashMap<String,String>();\n  expectedMessages.put(TASK3_NAME,TASK3_NAME);\n  for (  Task task : tasks) {\n    expectedMessages.remove(task.getName());\n  }\n  assertEquals(0,expectedMessages.size());\n  variables.put(\"input\",4);\n  try {\n    runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);\n    fail();\n  }\n catch (  ActivitiException e) {\n  }\n}\n", "nl": "The test process has an OR gateway where, the 'input' variable is used to select the expected outgoing sequence flow."}
{"code": "public void verifyIsHidden(){\n  conditions.verifyPostAjax(null);\n}\n", "nl": "Method makes ajax post call to ensure if component is hidden."}
{"code": "public void addActionButton(ActionButton actionButton){\n  buttonBar.addView(actionButton);\n}\n", "nl": "Adds an ActionButton to the button bar."}
{"code": "public static void addSetting(String id,Object o){\n  settings.put(id,o);\n}\n", "nl": "Adds a setting."}
{"code": "public NumericHaving withType(HavingType type){\n  return new NumericHaving(type,getAggregation(),getValue());\n}\n", "nl": "Get a new instance of this having with the given type."}
{"code": "public void addAlias(String entityAlias,String name,String field,String colAlias,Boolean primKey,Boolean groupBy,String function){\n  addAlias(entityAlias,name,field,colAlias,primKey,groupBy,function,null,null);\n}\n", "nl": "Add an alias, full detail. All parameters can be null except entityAlias and name."}
{"code": "public FreedomTouchView(Context context){\n  super(context);\n  this.initialize();\n}\n", "nl": "<br> life cycle."}
{"code": "public static String serverURIsToString(final List<String> serverURIs){\n  StringBuffer serverURIsAsString=new StringBuffer();\n  boolean first=true;\n  for (  final String serverURI : serverURIs) {\n    if (first) {\n      serverURIsAsString.append(serverURI);\n    }\n else {\n      serverURIsAsString.append(ConnectionUtils.SERVER_DELIMITER + \" \" + serverURI);\n    }\n    first=false;\n  }\n  return serverURIsAsString.toString();\n}\n", "nl": "Turns the given list of server URIs into a single string."}
{"code": "public boolean contains(String uid){\n  cleanIfNeeded();\n  return _idSet0.contains(uid) || _idSet1.contains(uid);\n}\n", "nl": "] Checks if the set contains this uid."}
{"code": "protected UsersGetFollowersQueryWithFields fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return."}
{"code": "public String optString(String key,String defaultValue){\n  LazyNode token=getOptionalFieldToken(key);\n  if (token == null)   return defaultValue;\n  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;\n  return token.getStringValue(cbuf);\n}\n", "nl": "Returns the string value stored in this object for the given key. Returns the default value if there is no such key."}
{"code": "public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,File out) throws IOException {\n  List providers=getAudioFileWriters();\n  int bytesWritten=0;\n  boolean flag=false;\n  for (int i=0; i < providers.size(); i++) {\n    AudioFileWriter writer=(AudioFileWriter)providers.get(i);\n    try {\n      bytesWritten=writer.write(stream,fileType,out);\n      flag=true;\n      break;\n    }\n catch (    IllegalArgumentException e) {\n      continue;\n    }\n  }\n  if (!flag) {\n    throw new IllegalArgumentException(\"could not write audio file: file type not supported: \" + fileType);\n  }\n else {\n    return bytesWritten;\n  }\n}\n", "nl": "Writes a stream of bytes representing an audio file of the specified file type to the external file provided."}
{"code": "public void toggle(){\n  toggle(false,null,null);\n}\n", "nl": "Toggle the badge visibility in the UI."}
{"code": "public static int readInt(DataInputStream dis,boolean isBigEndian) throws IOException {\n  if (!isBigEndian) {\n    return readLittleEndianInt(dis);\n  }\n else {\n    return dis.readInt();\n  }\n}\n", "nl": "Read an integer from the input stream, byte-swapping as necessary"}
{"code": "public AsyncServerRequest(RequestType type,GeneratedMessage req,boolean requireCommonRequest){\n  Request.Builder reqBuilder=Request.newBuilder();\n  reqBuilder.setRequestMessage(req.toByteString());\n  reqBuilder.setRequestType(type);\n  this.type=type;\n  this.request=reqBuilder.build();\n  this.requireCommonRequest=requireCommonRequest;\n}\n", "nl": "Instantiates a new Server request."}
{"code": "public ShapelessMaterialRecipe(Item output,Object... input){\n  this(new ItemStack(output),input);\n}\n", "nl": "Creates a new shapeless material recipe"}
{"code": "public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){\n  inactivityTimer.onActivity();\n  lastResult=rawResult;\n  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);\n  boolean fromLiveScan=barcode != null;\n  if (fromLiveScan) {\n    historyManager.addHistoryItem(rawResult,resultHandler);\n    beepManager.playBeepSoundAndVibrate();\n    drawResultPoints(barcode,scaleFactor,rawResult);\n  }\nswitch (source) {\ncase NATIVE_APP_INTENT:\ncase PRODUCT_SEARCH_LINK:\n    handleDecodeExternally(rawResult,resultHandler,barcode);\n  break;\ncase ZXING_LINK:\nif (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {\n  handleDecodeInternally(rawResult,resultHandler,barcode);\n}\n else {\n  handleDecodeExternally(rawResult,resultHandler,barcode);\n}\nbreak;\ncase NONE:\nSharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);\nif (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {\nToast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + \" (\" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show();\nrestartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);\n}\n else {\nhandleDecodeInternally(rawResult,resultHandler,barcode);\n}\nbreak;\n}\n}\n", "nl": "A valid barcode has been found, so give an indication of success and show the results."}
{"code": "public void union(double x,double y,double w,double h){\n  if (status == INVALID)   return;\n  if (status == EMPTY) {\n    setClip(x,y,w,h);\n    status=INUSE;\n    return;\n  }\n  clip[0]=Math.min(clip[0],x);\n  clip[1]=Math.min(clip[1],y);\n  clip[6]=Math.max(clip[6],x + w);\n  clip[7]=Math.max(clip[7],y + h);\n}\n", "nl": "Union this clip with another region. As a result, this clip will become a bounding box around the two original regions."}
{"code": "public static int findGlobalValleyLocation(float[] data){\n  float min=Float.NaN;\n  int imin=-1;\n  for (int i=0; i < data.length; i++) {\n    if (Float.isNaN(data[i]))     continue;\n    if (Float.isNaN(min) || data[i] < min) {\n      min=data[i];\n      imin=i;\n    }\n  }\n  return imin;\n}\n", "nl": "Find the minimum of all elements in the array, ignoring elements that are NaN."}
{"code": "@RequestMapping(value=\"/\",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<ProjectDTO> update(@RequestBody ProjectDTO projectDTO) throws URISyntaxException {\n  log.debug(\"Update ProjectDTO : {}\",projectDTO);\n  if (!projectDTO.isIdSet()) {\n    return create(projectDTO);\n  }\n  ProjectDTO result=projectDTOService.save(projectDTO);\n  return ResponseEntity.ok().body(result);\n}\n", "nl": "Update Project."}
{"code": "private CertificateAndKey generateRootCertificate(){\n  long generationStart=System.currentTimeMillis();\n  KeyPair caKeyPair=keyGenerator.generate();\n  CertificateAndKey certificateAndKey=securityProviderTool.createCARootCertificate(rootCertificateInfo,caKeyPair,messageDigest);\n  long generationFinished=System.currentTimeMillis();\n  log.info(\"Generated CA root certificate and private key in {}ms. Key generator: {}. Signature algorithm: {}.\",generationFinished - generationStart,keyGenerator,messageDigest);\n  return certificateAndKey;\n}\n", "nl": "Generates a new CA root certificate and private key."}
{"code": "private void renderEditingBody(GL2 gl,SandboxBody body){\n  Dimension size=this.canvasSize;\n  gl.glColor4f(0.0f,0.0f,0.0f,0.5f);\n  gl.glPushMatrix();\n  gl.glLoadIdentity();\n  RenderUtilities.fillRectangleFromTopLeft(gl,-size.width * 0.5,size.height * 0.5,size.width,size.height);\n  gl.glPopMatrix();\n  if (Preferences.isBodyAABBEnabled()) {\n    this.renderAABB(gl,body);\n  }\n  RenderUtilities.pushTransform(gl);\n  RenderUtilities.applyTransform(gl,body.getTransform());\n  body.render(gl);\n  if (this.selectFixtureAction.isActive()) {\n    BodyFixture bf=this.selectFixtureAction.getObject();\n    Convex convex=bf.getShape();\n    RenderUtilities.outlineShape(gl,convex,4,Preferences.getSelectedColor());\n    gl.glColor4fv(body.getFillColor(),0);\n    RenderUtilities.fillShape(gl,convex);\n    gl.glColor4fv(body.getOutlineColor(),0);\n    RenderUtilities.drawShape(gl,convex,false);\n  }\n  if (Preferences.isBodyNormalEnabled()) {\n    body.renderNormals(gl);\n  }\n  if (Preferences.isBodyRotationDiscEnabled()) {\n    body.renderRotationDisc(gl);\n  }\n  if (Preferences.isBodyCenterEnabled()) {\n    body.renderCenter(gl);\n  }\n  RenderUtilities.popTransform(gl);\n  if (Preferences.isBodyVelocityEnabled()) {\n    body.renderVelocity(gl);\n  }\n}\n", "nl": "Renders an editing body and related state."}
{"code": "void insertData(CharacterData node,int index,String insert){\n  fInsertNode=node;\n  node.insertData(index,insert);\n  fInsertNode=null;\n}\n", "nl": "This function inserts text into a Node and invokes a method to fix-up all other Ranges."}
{"code": "public static String[] extractNoDictionaryDimsArr(String noDictionaryDim){\n  if (null == noDictionaryDim || noDictionaryDim.isEmpty()) {\n    return new String[0];\n  }\n  String[] NoDictionary=noDictionaryDim.split(CarbonCommonConstants.COMA_SPC_CHARACTER);\n  List<String> list1=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);\n  for (int i=0; i < NoDictionary.length; i++) {\n    String[] dim=NoDictionary[i].split(CarbonCommonConstants.COLON_SPC_CHARACTER);\n    list1.add(dim[0]);\n  }\n  return list1.toArray(new String[list1.size()]);\n}\n", "nl": "This will extract the high cardinality count from the string."}
{"code": "public Matrix solve(Matrix B){\n  if (B.getRowDimension() != m) {\n    throw new IllegalArgumentException(\"Matrix row dimensions must agree.\");\n  }\n  if (!this.isFullRank()) {\n    throw new RuntimeException(\"Matrix is rank deficient.\");\n  }\n  int nx=B.getColumnDimension();\n  double[][] X=B.getArrayCopy();\n  for (int k=0; k < n; k++) {\n    for (int j=0; j < nx; j++) {\n      double s=0.0;\n      for (int i=k; i < m; i++) {\n        s+=QR[i][k] * X[i][j];\n      }\n      s=-s / QR[k][k];\n      for (int i=k; i < m; i++) {\n        X[i][j]+=s * QR[i][k];\n      }\n    }\n  }\n  for (int k=n - 1; k >= 0; k--) {\n    for (int j=0; j < nx; j++) {\n      X[k][j]/=Rdiag[k];\n    }\n    for (int i=0; i < k; i++) {\n      for (int j=0; j < nx; j++) {\n        X[i][j]-=X[k][j] * QR[i][k];\n      }\n    }\n  }\n  return (new Matrix(X,n,nx).getMatrix(0,n - 1,0,nx - 1));\n}\n", "nl": "Least squares solution of A*X = B"}
{"code": "private MotionEvent swapXY(MotionEvent ev){\n  float width=getWidth();\n  float height=getHeight();\n  float newX=(ev.getY() / height) * width;\n  float newY=(ev.getX() / width) * height;\n  ev.setLocation(newX,newY);\n  return ev;\n}\n", "nl": "Swaps the X and Y coordinates of your touch event."}
{"code": "public static void main(String[] arguments){\n  final Knock025A ab=new Knock025B();\n  System.out.println(ab.getValue());\n}\n", "nl": "main method."}
{"code": "public boolean drawShadows(){\n  return drawShadows;\n}\n", "nl": "Determine whether shadows are drawn"}
{"code": "public StatusFrame(){\n  super();\n  initComponents();\n}\n", "nl": "Creates new form StatusFrame"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0.0,0.001,0.010,0.025,0.050,0.100,0.999,0.990,0.975,0.950,0.900,1.0};\n}\n", "nl": "Creates the default inverse cumulative probability test input values"}
{"code": "public void userKey(String command){\n  if (command.equals(ACTION_GOTO_END)) {\n    getGridScroll().setValue(getGridScroll().getMaximum());\n  }\n else   if (command.equals(ACTION_GOTO_HOME)) {\n    getGridScroll().setValue(getGridScroll().getMinimum());\n  }\n else   if (command.equals(ACTION_LINE_DOWN)) {\n    getGridScroll().setValue(getGridScroll().getValue() + 1);\n  }\n else   if (command.equals(ACTION_LINE_UP)) {\n    getGridScroll().setValue(getGridScroll().getValue() - 1);\n  }\n else   if (command.equals(ACTION_PAGE_DOWN)) {\n    getGridScroll().setValue(getGridScroll().getValue() + getGridScroll().getBlockIncrement());\n  }\n else   if (command.equals(ACTION_PAGE_UP)) {\n    getGridScroll().setValue(getGridScroll().getValue() - getGridScroll().getBlockIncrement());\n  }\n else {\n    System.err.println(\"Error in userKey(): unknown command: \" + command);\n  }\n}\n", "nl": "User key. The caller gives us a command string for a keyboard action.  The only actions currently defined are to mimic the scroll bar or menu items."}
{"code": "void cancelLocalXtn(TransactionManager mgr,ServerTransaction st) throws UnknownLeaseException {\n  if (!(mgr instanceof LocalTransactionManagerImpl))   throw new RuntimeException(\"cancel local xtn lease: invalid transaction manager\");\n  LocalTransactionManagerImpl ltx=(LocalTransactionManagerImpl)mgr;\n  try {\n    abortSA(mgr,st,true,false,false,null);\n  }\n catch (  UnknownTransactionException ex) {\n    throw new UnknownLeaseException(\"cancel:unknown transaction at space-server transaction-id= \" + st + \" manager=\"+ ltx.getManagerID());\n  }\n}\n", "nl": "cancel local xtn lease."}
{"code": "public void saveAuxiliaryData() throws IOException {\n  if (getMeganFile().hasDataConnector() && !getMeganFile().isReadOnly()) {\n    if (dir != null) {\n      final MainViewer mainViewer=dir.getMainViewer();\n      if (mainViewer != null)       SyncDataTableAndTaxonomy.syncFormattingFromViewer2Summary(mainViewer,getDataTable());\n      for (      String cName : ClassificationManager.getAllSupportedClassifications()) {\n        if (dir.getViewerByClassName(ClassificationViewer.getClassName(cName)) != null && dir.getViewerByClassName(ClassificationViewer.getClassName(cName)) instanceof ClassificationViewer) {\n          ClassificationViewer classificationViewer=(ClassificationViewer)dir.getViewerByClassName(ClassificationViewer.getClassName(cName));\n          SyncDataTableAndClassificationViewer.syncFormattingFromViewer2Summary(classificationViewer,getDataTable());\n        }\n      }\n    }\n    getDataTable().setColorTable(getChartColorManager().getColorTableName(),getChartColorManager().isColorByPosition(),getChartColorManager().getHeatMapTable().getName());\n    getDataTable().setColorEdits(getChartColorManager().getColorEdits());\n    byte[] userState=getDataTable().getUserStateAsBytes();\n    byte[] sampleAttributes=getSampleAttributeTable().getBytes();\n    Map<String,byte[]> label2data=new HashMap<>();\n    label2data.put(SampleAttributeTable.USER_STATE,userState);\n    label2data.put(SampleAttributeTable.SAMPLE_ATTRIBUTES,sampleAttributes);\n    getMeganFile().getDataConnector().putAuxiliaryData(label2data);\n  }\n}\n", "nl": "writes auxiliary data to archive"}
{"code": "@Override public void encodeXML(Document doc,Element root,String elementName){\n  if ((doc == null) || (root == null) || (elementName == null)) {\n    return;\n  }\n  Element dataSourceElement=doc.createElement(elementName);\n  for (  String key : propertyMap.keySet()) {\n    Element element=doc.createElement(key);\n    element.appendChild(doc.createTextNode(propertyMap.get(key)));\n    dataSourceElement.appendChild(element);\n  }\n  root.appendChild(dataSourceElement);\n}\n", "nl": "Encode the data source properties to XML."}
{"code": "public T onCreateLvl1SectionViewHolder(ViewGroup parent){\n  return null;\n}\n", "nl": "onCreate Methods overwrite the methods to create each viewholder"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_STOP_EATING(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400617,value1,value0);\n}\n", "nl": "Stop feeding %1 to %0."}
{"code": "void innerDelete(){\n  deleteNode();\n}\n", "nl": "Helper method to call the appropriate deletion based on the type of the concept."}
{"code": "public static SM_SYSTEM_MESSAGE STR_EVENT_WIN_ARTIFACT(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390203,value0,value1);\n}\n", "nl": "%0 captured the %1 Artifact."}
{"code": "public static boolean isRTL(CharSequence s,int start,int end){\n  if (s == null || s.length() == 0) {\n    return isRTL(Locale.getDefault());\n  }\n  if (start == end) {\n    start=Math.max(0,--start);\n    if (start == end) {\n      end=Math.min(s.length(),++end);\n    }\n  }\n  try {\n    Bidi bidi=new Bidi(s.subSequence(start,end).toString(),Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);\n    return !bidi.baseIsLeftToRight();\n  }\n catch (  IndexOutOfBoundsException e) {\n    return false;\n  }\n}\n", "nl": "This method determines if the direction of a substring is right-to-left. If the string is empty that determination is based on the default system language Locale.getDefault(). The method can handle invalid substring definitions (start > end etc.), in which case the method returns False."}
{"code": "public static void isNotNull(Object object){\n  isNotNull(object,\"\");\n}\n", "nl": "Asserts that the given object is not <code>null</code>. If this is not the case, some kind of unchecked exception is thrown."}
{"code": "public String toString(){\n  return \"TokenToWords\";\n}\n", "nl": "Converts this object to its String representation"}
{"code": "public static int readSingleByte(InputStream in) throws IOException {\n  byte[] buffer=new byte[1];\n  int result=in.read(buffer,0,1);\n  return (result != -1) ? buffer[0] & 0xff : -1;\n}\n", "nl": "Implements InputStream.read(int) in terms of InputStream.read(byte[], int, int). InputStream assumes that you implement InputStream.read(int) and provides default implementations of the others, but often the opposite is more efficient."}
{"code": "private Map<String,List<Element>> parseDocument(Document doc) throws SynthesisException {\n  Map<String,List<Element>> elementLists=new HashMap<String,List<Element>>();\n  List<Element> segments=new ArrayList<Element>();\n  List<Element> boundaries=new ArrayList<Element>();\n  List<Element> firstVoicedSegments=new ArrayList<Element>();\n  List<Element> firstVowels=new ArrayList<Element>();\n  List<Element> lastVoicedSegments=new ArrayList<Element>();\n  List<Element> voicedSegments=new ArrayList<Element>();\n  TreeWalker treeWalker=null;\n  try {\n    treeWalker=DomUtils.createTreeWalker(doc,MaryXML.SYLLABLE,MaryXML.BOUNDARY);\n  }\n catch (  DOMException e) {\n    throw new SynthesisException(\"Could not parse XML Document\",e);\n  }\n  Node node;\n  while ((node=treeWalker.nextNode()) != null) {\n    assert node != null;\n    Element element=(Element)node;\n    if (node.getNodeName().equals(MaryXML.BOUNDARY)) {\n      boundaries.add(element);\n      continue;\n    }\n    assert node.getNodeName().equals(MaryXML.SYLLABLE);\n    AllophoneSet allophoneSet=null;\n    try {\n      allophoneSet=MaryRuntimeUtils.determineAllophoneSet(element);\n    }\n catch (    MaryConfigurationException e) {\n      throw new SynthesisException(\"Could not determine AllophoneSet\",e);\n    }\n    assert allophoneSet != null;\n    Element segment;\n    Element firstVoicedSegment=null;\n    Element firstVowel=null;\n    Element lastVoicedSegment=null;\n    for (segment=DomUtils.getFirstElementByTagName(node,MaryXML.PHONE); segment != null; segment=DomUtils.getNextOfItsKindIn(segment,element)) {\n      assert segment != null;\n      segments.add(segment);\n      String phone=UnitSelector.getPhoneSymbol(segment);\n      if (phone.length() == 0) {\n        throw new SynthesisException(\"No phone found for segment \" + segment);\n      }\n      Allophone allophone=allophoneSet.getAllophone(phone);\n      if (allophone == null) {\n        throw new SynthesisException(\"No Allophone found for phone '\" + phone + \"'\");\n      }\n      if (allophone.isVoiced()) {\n        voicedSegments.add(segment);\n        if (firstVoicedSegment == null) {\n          firstVoicedSegment=segment;\n        }\n        if (firstVowel == null && allophone.isVowel()) {\n          firstVowel=segment;\n        }\n        lastVoicedSegment=segment;\n      }\n    }\n    if (firstVoicedSegment == null || firstVowel == null || lastVoicedSegment == null) {\n      Log.d(Mary.LOG,\"WARNING: could not identify F0 anchors in malformed syllable: '\" + element.getAttribute(\"ph\") + \"'\");\n    }\n else {\n      firstVoicedSegments.add(firstVoicedSegment);\n      firstVowels.add(firstVowel);\n      lastVoicedSegments.add(lastVoicedSegment);\n    }\n  }\n  elementLists.put(\"segments\",segments);\n  elementLists.put(\"voicedSegments\",voicedSegments);\n  elementLists.put(\"firstVoicedSegments\",firstVoicedSegments);\n  elementLists.put(\"firstVowels\",firstVowels);\n  elementLists.put(\"lastVoicedSegments\",lastVoicedSegments);\n  elementLists.put(\"boundaries\",boundaries);\n  return elementLists;\n}\n", "nl": "Parse the Document to populate the Lists of Elements"}
{"code": "private void generateWrapperComponents(Set<TypeElement> components){\n  Map<TypeElement,ComponentInfo> componentToCoreInjectorMap=calculateAllMappingFromComponentsToCoreInjectors(components);\n  for (  TypeElement component : components) {\n    ComponentInfo coreInjector=componentToCoreInjectorMap.get(component);\n    ClassName coreInjectorClassName=getCoreInejectorClassName(coreInjectorPackage,coreInjector);\n    String packageString=Utils.getPackageString(component);\n    String generatedComponentSimpleName=getComponentImplementationSimpleNameFromInterface(component);\n    TypeSpec.Builder componentBuilder=TypeSpec.classBuilder(generatedComponentSimpleName).addModifiers(Modifier.PUBLIC).addSuperinterface(TypeName.get(component.asType())).superclass(coreInjectorClassName);\n    MethodSpec.Builder ctorBuilder=MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE);\n    List<TypeElement> sortedComponentDependencies=Utils.sortByFullName(getComponentDependencies(component));\n    TypeElement dependencyComponent=null;\n    if (!sortedComponentDependencies.isEmpty()) {\n      dependencyComponent=Iterables.getOnlyElement(sortedComponentDependencies);\n      ctorBuilder.addParameter(TypeName.get(dependencyComponent.asType()),Utils.getSourceCodeName(dependencyComponent));\n    }\n    Set<TypeElement> allComponentModules=getAllModulesOfComponentRecursively(component);\n    List<TypeElement> sortedComponentPassedModules=Utils.sortByFullName(Utils.getNonNullaryCtorOnes(allComponentModules));\n    for (    TypeElement typeElement : sortedComponentPassedModules) {\n      ctorBuilder.addParameter(TypeName.get(typeElement.asType()),Utils.getSourceCodeName(typeElement));\n    }\n    Set<TypeElement> coreInjectorPassedModules=new HashSet<>();\n    coreInjectorPassedModules.addAll(scopedPassedModules.get(coreInjector));\n    coreInjectorPassedModules.addAll(unscopedPassedModules);\n    List<TypeElement> sortedCoreInjectorPassedModules=Utils.sortByFullName(coreInjectorPassedModules);\n    StringBuilder stringBuilder=new StringBuilder(\"super(\");\n    if (dependencyComponent != null) {\n      String generatedDependencyComponentSimpleName=getComponentImplementationSimpleNameFromInterface(dependencyComponent);\n      stringBuilder.append(\"($T) \").append(Utils.getSourceCodeName(dependencyComponent));\n      if (!sortedCoreInjectorPassedModules.isEmpty()) {\n        stringBuilder.append(\", \");\n      }\n    }\n    if (!sortedCoreInjectorPassedModules.isEmpty()) {\n      for (      TypeElement typeElement : sortedCoreInjectorPassedModules) {\n        if (sortedComponentPassedModules.contains(typeElement)) {\n          stringBuilder.append(Utils.getSourceCodeName(typeElement));\n        }\n else {\n          stringBuilder.append(\"null\");\n        }\n        stringBuilder.append(\", \");\n      }\n      stringBuilder.delete(stringBuilder.length() - 2,stringBuilder.length());\n    }\n    stringBuilder.append(\");\");\n    if (dependencyComponent != null) {\n      ctorBuilder.addCode(stringBuilder.toString(),ClassName.get(packageString,getComponentImplementationSimpleNameFromInterface(dependencyComponent)));\n    }\n else {\n      ctorBuilder.addCode(stringBuilder.toString());\n    }\n    componentBuilder.addMethod(ctorBuilder.build());\n    ClassName generatedComponentClassName=ClassName.get(packageString,generatedComponentSimpleName);\n    generateComponentBuilder(generatedComponentClassName,dependencyComponent,sortedComponentPassedModules,componentBuilder,coreInjector);\n    ClassName builderClassName=ClassName.get(packageString,generatedComponentSimpleName,\"Builder\");\n    componentBuilder.addMethod(MethodSpec.methodBuilder(\"builder\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).returns(builderClassName).addCode(\"return new $T();\",builderClassName).build());\n    JavaFile javaFile=JavaFile.builder(packageString,componentBuilder.build()).build();\n    try {\n      messager.printMessage(Kind.NOTE,String.format(\"%s: writing java file: %s\",TAG,javaFile.toJavaFileObject().getName()));\n      javaFile.writeTo(processingEnv.getFiler());\n    }\n catch (    IOException e) {\n      Throwables.propagate(e);\n    }\n  }\n}\n", "nl": "Generates Dagger component implementations that wrap around the core injectors."}
{"code": "public Shape diamond(float x,float y,float height){\n  m_path.reset();\n  m_path.moveTo(x,(y + 0.5f * height));\n  m_path.lineTo((x + 0.5f * height),y);\n  m_path.lineTo((x + height),(y + 0.5f * height));\n  m_path.lineTo((x + 0.5f * height),(y + height));\n  m_path.closePath();\n  return m_path;\n}\n", "nl": "Returns a diamond shape of the given dimenisions."}
{"code": "private void activate(boolean force,Object proxy,Method method) throws Exception {\n  assert Thread.holdsLock(this);\n  try {\n    activate0(force,proxy);\n  }\n catch (  Exception e) {\n    if (logger.isLoggable(Levels.FAILED)) {\n      logThrow(Levels.FAILED,\"activating object for call\",\"activate\",method,e);\n    }\n    throw e;\n  }\n}\n", "nl": "Activate the object (see activate0)."}
{"code": "private Vector2 screenToWorld(Point p,Dimension size,Vector2 offset,double scale){\n  Vector2 v=new Vector2();\n  double x=p.x;\n  double y=p.y;\n  double w=size.getWidth();\n  double h=size.getHeight();\n  double ox=offset.x;\n  double oy=offset.y;\n  v.x=(x - w * 0.5) / scale - ox;\n  v.y=-((y - h * 0.5) / scale + oy);\n  return v;\n}\n", "nl": "Converts from screen coordinates to world coordinates."}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){\n  LinkedList<Diff> diffs=new LinkedList<Diff>();\n  if (text1.length() == 0) {\n    diffs.add(new Diff(Operation.INSERT,text2));\n    return diffs;\n  }\n  if (text2.length() == 0) {\n    diffs.add(new Diff(Operation.DELETE,text1));\n    return diffs;\n  }\n  String longtext=text1.length() > text2.length() ? text1 : text2;\n  String shorttext=text1.length() > text2.length() ? text2 : text1;\n  int i=longtext.indexOf(shorttext);\n  if (i != -1) {\n    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;\n    diffs.add(new Diff(op,longtext.substring(0,i)));\n    diffs.add(new Diff(Operation.EQUAL,shorttext));\n    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));\n    return diffs;\n  }\n  if (shorttext.length() == 1) {\n    diffs.add(new Diff(Operation.DELETE,text1));\n    diffs.add(new Diff(Operation.INSERT,text2));\n    return diffs;\n  }\n  String[] hm=diff_halfMatch(text1,text2);\n  if (hm != null) {\n    String text1_a=hm[0];\n    String text1_b=hm[1];\n    String text2_a=hm[2];\n    String text2_b=hm[3];\n    String mid_common=hm[4];\n    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);\n    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);\n    diffs=diffs_a;\n    diffs.add(new Diff(Operation.EQUAL,mid_common));\n    diffs.addAll(diffs_b);\n    return diffs;\n  }\n  if (checklines && text1.length() > 100 && text2.length() > 100) {\n    return diff_lineMode(text1,text2,deadline);\n  }\n  return diff_bisect(text1,text2,deadline);\n}\n", "nl": "Find the differences between two texts.  Assumes that the texts do not have any common prefix or suffix."}
{"code": "public static StatelessLongHash sipHash24(long seedLow,long seedHigh){\n  return Hashes.getStatelessLong(new SipHash24Parameters(seedLow,seedHigh));\n}\n", "nl": "Returns a hash function implementing the SipHash-2-4 algorithm (64 bits) with the given seed value."}
{"code": "@deprecated public char previous(){\n  if (this.pos > this.begin) {\n    this.pos-=1;\n    return this.text.charAt(this.pos);\n  }\n  return 65535;\n}\n", "nl": "/*    "}
{"code": "public void startRecording(String file){\nswitch (this.mode) {\ncase PLAY:\n    Log.d(LOG_TAG,\"AudioPlayer Error: Can't record in play mode.\");\n  sendErrorStatus(MEDIA_ERR_ABORTED);\nbreak;\ncase NONE:\nthis.audioFile=file;\nthis.recorder.setAudioSource(MediaRecorder.AudioSource.MIC);\nthis.recorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);\nthis.recorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);\nthis.recorder.setOutputFile(this.tempFile);\ntry {\nthis.recorder.prepare();\nthis.recorder.start();\nthis.setState(STATE.MEDIA_RUNNING);\nreturn;\n}\n catch (IllegalStateException e) {\ne.printStackTrace();\n}\ncatch (IOException e) {\ne.printStackTrace();\n}\nsendErrorStatus(MEDIA_ERR_ABORTED);\nbreak;\ncase RECORD:\nLog.d(LOG_TAG,\"AudioPlayer Error: Already recording.\");\nsendErrorStatus(MEDIA_ERR_ABORTED);\n}\n}\n", "nl": "Start recording the specified file."}
{"code": "private ColorMapEntry createColourMapEntry(ColourMapData data){\n  ColorMapEntry entry=new ColorMapEntryImpl();\n  entry.setColor(data.getColourExpression());\n  entry.setOpacity(data.getOpacity());\n  entry.setQuantity(data.getQuantity());\n  entry.setLabel(data.getLabel());\n  return entry;\n}\n", "nl": "Creates the colour map entry."}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public static Map<String,Object> returnError(String errorMessage){\n  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,null,null,null);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code"}
{"code": "public boolean isDrawRoundedSlicesEnabled(){\n  return mDrawRoundedSlices;\n}\n", "nl": "Returns true if the chart is set to draw each end of a pie-slice \"rounded\"."}
{"code": "public void visitPhpMethod(Method method){\n  this.inspectCallable(method);\n}\n", "nl": "re-dispatch to inspector"}
{"code": "private void mutateResourceOntology(String resourceTypeId,ResourceType.DataType resourceDataType){\n  MindmapsGraph graph=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraph();\n  ResourceType resource=graph.putResourceType(resourceTypeId,resourceDataType);\n  RoleType degreeOwner=graph.putRoleType(GraqlType.HAS_RESOURCE_OWNER.getId(resourceTypeId));\n  RoleType degreeValue=graph.putRoleType(GraqlType.HAS_RESOURCE_VALUE.getId(resourceTypeId));\n  graph.putRelationType(GraqlType.HAS_RESOURCE.getId(resourceTypeId)).hasRole(degreeOwner).hasRole(degreeValue);\n  for (  String type : subtypes) {\n    graph.getType(type).playsRole(degreeOwner);\n  }\n  resource.playsRole(degreeValue);\n  try {\n    graph.commit();\n  }\n catch (  MindmapsValidationException e) {\n    throw new RuntimeException(ErrorMessage.ONTOLOGY_MUTATION.getMessage(e.getMessage()),e);\n  }\n}\n", "nl": "Add the analytics elements to the ontology of the graph specified in <code>keySpace</code>. The ontology elements are related to the resource type <code>resourceTypeId</code> used to persist data computed by analytics."}
{"code": "public boolean isActive(){\n  Date now=new Date();\n  return startsAt != null && endsAt != null && now.after(startsAt) && now.before(endsAt);\n}\n", "nl": "Determines whether the AirMapFlight is a currently active flight"}
{"code": "public void acceptVisit(ExpressionVisitor visitor){\n  visitor.enter(this);\n}\n", "nl": "Accept a visit from a tree visitor."}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"zoom axis=\");\n  String axis=np.getWordMatchesIgnoringCase(\"horizontal vertical both\");\n  np.matchIgnoreCase(\"what=\");\n  String what;\n  if (np.peekMatchAnyTokenIgnoreCase(\"in out reset selection fit\"))   what=np.getWordMatchesIgnoringCase(\"in out reset selection fit\");\n else   what=\"\" + (float)np.getDouble();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().zoom(axis,what,null);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean hasFeatureValue(int featureIndex,String featureValue){\n  if (featureIndex < 0) {\n    return false;\n  }\n  if (featureIndex < numByteFeatures) {\n    return byteFeatureValues[featureIndex].contains(featureValue);\n  }\n  if (featureIndex < numByteFeatures + numShortFeatures) {\n    return shortFeatureValues[featureIndex - numByteFeatures].contains(featureValue);\n  }\n  return false;\n}\n", "nl": "Query a feature as identified by the given featureIndex as to whether the given featureValue is a known value of that feature. In other words, this will return true exactly if the given feature is a byte feature and getFeatureValueAsByte(featureIndex, featureValue) will not throw an exception or if the given feature is a short feature and getFeatureValueAsShort(featureIndex, featureValue) will not throw an exception."}
{"code": "public static RecvPackageInfo recvPackage(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {\n  RecvHeaderInfo header=recvHeader(in,expect_cmd,expect_body_len);\n  if (header.errno != 0) {\n    return new RecvPackageInfo(header.errno,null);\n  }\n  byte[] body=new byte[(int)header.body_len];\n  int totalBytes=0;\n  int remainBytes=(int)header.body_len;\n  int bytes;\n  while (totalBytes < header.body_len) {\n    if ((bytes=in.read(body,totalBytes,remainBytes)) < 0) {\n      break;\n    }\n    totalBytes+=bytes;\n    remainBytes-=bytes;\n  }\n  if (totalBytes != header.body_len) {\n    throw new IOException(\"recv package size \" + totalBytes + \" != \"+ header.body_len);\n  }\n  return new RecvPackageInfo((byte)0,body);\n}\n", "nl": "receive whole pack"}
{"code": "Node<K,V> find(K key,boolean create){\n  Comparator<? super K> comparator=this.comparator;\n  Node<K,V> nearest=root;\n  int comparison=0;\n  if (nearest != null) {\n    @SuppressWarnings(\"unchecked\") Comparable<Object> comparableKey=(comparator == NATURAL_ORDER) ? (Comparable<Object>)key : null;\n    while (true) {\n      comparison=(comparableKey != null) ? comparableKey.compareTo(nearest.key) : comparator.compare(key,nearest.key);\n      if (comparison == 0) {\n        return nearest;\n      }\n      Node<K,V> child=(comparison < 0) ? nearest.left : nearest.right;\n      if (child == null) {\n        break;\n      }\n      nearest=child;\n    }\n  }\n  if (!create) {\n    return null;\n  }\n  Node<K,V> header=this.header;\n  Node<K,V> created;\n  if (nearest == null) {\n    if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {\n      throw new ClassCastException(key.getClass().getName() + \" is not Comparable\");\n    }\n    created=new Node<K,V>(nearest,key,header,header.prev);\n    root=created;\n  }\n else {\n    created=new Node<K,V>(nearest,key,header,header.prev);\n    if (comparison < 0) {\n      nearest.left=created;\n    }\n else {\n      nearest.right=created;\n    }\n    rebalance(nearest,true);\n  }\n  size++;\n  modCount++;\n  return created;\n}\n", "nl": "Returns the node at or adjacent to the given key, creating it if requested."}
{"code": "public static NumericEntityEscaper below(final int codepoint){\n  return outsideOf(codepoint,Integer.MAX_VALUE);\n}\n", "nl": "<p>Constructs a <code>NumericEntityEscaper</code> below the specified value (exclusive). </p>"}
{"code": "protected boolean isValidDomain(String domain){\n  Matcher ipDomainMatcher=IP_DOMAIN_PATTERN.matcher(domain);\n  if (ipDomainMatcher.matches()) {\n    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n    return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n  }\n  DomainValidator domainValidator=DomainValidator.getInstance(allowLocal);\n  return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);\n}\n", "nl": "Returns true if the domain component of an email address is valid."}
{"code": "public static double[] readDoubles(){\n  return readAllDoubles();\n}\n", "nl": "Reads all remaining tokens, parses them as doubles, and returns them as an array of doubles."}
{"code": "LoadInfo(ProjectSetSerializationContext context,StringTokenizer tokenizer) throws SVNException {\n  repo=tokenizer.nextToken();\n  String projectName=tokenizer.nextToken();\n  project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n  if (repo.indexOf(\"://\") != -1) {\n    repositoryLocation=SVNRepositoryLocation.fromString(repo,false,true);\n    fromFileSystem=false;\n    directory=null;\n  }\n else {\n    repositoryLocation=null;\n    fromFileSystem=true;\n    if (!new Path(repo).isAbsolute()) {\n      String baseDir;\n      if (context.getFilename() != null) {\n        baseDir=new File(context.getFilename()).getParent();\n      }\n else {\n        baseDir=project.getWorkspace().getRoot().getLocation().toOSString();\n      }\n      try {\n        directory=new File(baseDir + File.separatorChar + repo).getCanonicalPath();\n      }\n catch (      IOException ioe) {\n        throw new SVNException(\"Path expansion/canonicalization failed\",ioe);\n      }\n    }\n else {\n      directory=repo;\n    }\n  }\n}\n", "nl": "Construct a new instance wrappering the specified project reference"}
{"code": "public static int rgbFromCmyk(float[] cmyk){\n  float cyan=cmyk[0];\n  float magenta=cmyk[1];\n  float yellow=cmyk[2];\n  float black=cmyk[3];\n  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);\n  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);\n  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);\n  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);\n}\n", "nl": "Convert CYMK color to RGB color. This method doesn't check f cmyk is not null or have 4 elements in array."}
{"code": "@Nullable public static XmlTag findValueResourceTagInContext(@NotNull Editor editor,@NotNull PsiFile file,boolean rename){\n  if (!(file instanceof XmlFile)) {\n    return null;\n  }\n  final AndroidFacet facet=AndroidFacet.getInstance(file);\n  if (facet == null) {\n    return null;\n  }\n  if (!AndroidResourceUtil.isInResourceSubdirectory(file,ResourceFolderType.VALUES.getName())) {\n    return null;\n  }\n  final PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());\n  if (!rename && element instanceof XmlToken && XmlTokenType.XML_DATA_CHARACTERS.equals(((XmlToken)element).getTokenType())) {\n    return null;\n  }\n  final XmlTag tag=PsiTreeUtil.getParentOfType(element,XmlTag.class);\n  if (element instanceof XmlToken && XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN.equals(((XmlToken)element).getTokenType()) && tag != null) {\n    XmlAttribute parentAttribute=tag.getAttribute(\"parent\");\n    final String parentValue=parentAttribute != null ? parentAttribute.getValue() : null;\n    if (parentValue != null && parentValue.equals(element.getText())) {\n      return null;\n    }\n  }\n  final XmlTag rootTag=((XmlFile)file).getRootTag();\n  if (rootTag == null || !TAG_RESOURCES.equals(rootTag.getName())) {\n    return null;\n  }\n  return tag;\n}\n", "nl": "The rename parameter should be set to true when the method is called from a rename handler. <ul> <li>Check if file is XML resource file in values/ resource folder, returns null if false</li> <li>Check whether root tag is &lt;resources&gt;, returns null if false</li> <li>Check whether element at caret is an XMLToken with type XML_DATA_CHARACTERS, returns null if true</li> <li>Check whether token at caret is a reference to the parent of the current element, returns null if true</li> <li>Return XmlTag parent for element at the cursor if exists</li> </ul>"}
{"code": "public int compare(File file1,File file2){\n  long size1=0;\n  if (file1.isDirectory()) {\n    size1=sumDirectoryContents && file1.exists() ? FileUtils.sizeOfDirectory(file1) : 0;\n  }\n else {\n    size1=file1.length();\n  }\n  long size2=0;\n  if (file2.isDirectory()) {\n    size2=sumDirectoryContents && file2.exists() ? FileUtils.sizeOfDirectory(file2) : 0;\n  }\n else {\n    size2=file2.length();\n  }\n  long result=size1 - size2;\n  if (result < 0) {\n    return -1;\n  }\n else   if (result > 0) {\n    return 1;\n  }\n else {\n    return 0;\n  }\n}\n", "nl": "Compare the length of two files."}
{"code": "private static IConfigElement categoryElement(String category,String name,String tooltip_key){\n  return new DummyConfigElement.DummyCategoryElement(name,tooltip_key,new ConfigElement(ConfigManager.config.getCategory(category)).getChildElements());\n}\n", "nl": "Creates a button linking to another screen where all options of the category are available"}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    return new FileInputStream(entry.getCleanFile(index));\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed."}
{"code": "public boolean lockXtnOnXtnEnd(XtnEntry xtnEntry){\n  xtnEntry.lock();\n  boolean lockedXtnTable=xtnEntry.anyFifoEntriesUnderXtn();\n  if (lockedXtnTable)   getTxWriteLock().lock();\n  return lockedXtnTable;\n}\n", "nl": "xtn is ending (rollbak/commit) - lock + fifo lock if fifo entries in xtn"}
{"code": "private boolean supportsGooglePlayServices(){\n  return GooglePlayServicesUtil.isGooglePlayServicesAvailable(this) == ConnectionResult.SUCCESS;\n}\n", "nl": "Check if the device supports Google Play Services.  It's best practice to check first rather than handling this as an error case."}
{"code": "private void updateDataTable(){\n  getListPages().clear();\n  for (int i=1; i <= getNumPages(); i++) {\n    getListPages().addItem(String.valueOf(i));\n  }\n  getActionLabel().setText(getFirstRow() + \"-\" + getLastRow()+ \" of \"+ getTotalRows());\n  table.setVisibleRange(getFirstRow(),getRowCount());\n  if (getFirstRow() + getRowCount() > getTotalRows()) {\n    if (getRowCount() > getTotalRows()) {\n      getDataSource().load(table,getFirstRow(),getTotalRows());\n    }\n else {\n      getDataSource().load(table,getFirstRow(),getTotalRows() - (getFirstRow() - 1));\n    }\n  }\n else {\n    getDataSource().load(table,getFirstRow(),getRowCount());\n  }\n}\n", "nl": "Refresh and redraw the table and set the visible range with the given params."}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"'NEWS_CHANNEL_TABLE'\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table."}
{"code": "public DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){\n  super(symbolTable,parentSettings);\n  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD};\n  addRecognizedFeatures(recognizedFeatures);\n  setFeature(CONTINUE_AFTER_FATAL_ERROR,false);\n  setFeature(LOAD_EXTERNAL_DTD,true);\n  final String[] recognizedProperties={ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,NAMESPACE_BINDER,XMLGRAMMAR_POOL,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,LOCALE};\n  addRecognizedProperties(recognizedProperties);\n  fGrammarPool=grammarPool;\n  if (fGrammarPool != null) {\n    setProperty(XMLGRAMMAR_POOL,fGrammarPool);\n  }\n  fEntityManager=createEntityManager();\n  setProperty(ENTITY_MANAGER,fEntityManager);\n  addComponent(fEntityManager);\n  fErrorReporter=createErrorReporter();\n  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());\n  setProperty(ERROR_REPORTER,fErrorReporter);\n  addComponent(fErrorReporter);\n  fScanner=createDocumentScanner();\n  setProperty(DOCUMENT_SCANNER,fScanner);\n  if (fScanner instanceof XMLComponent) {\n    addComponent((XMLComponent)fScanner);\n  }\n  fDTDScanner=createDTDScanner();\n  if (fDTDScanner != null) {\n    setProperty(DTD_SCANNER,fDTDScanner);\n    if (fDTDScanner instanceof XMLComponent) {\n      addComponent((XMLComponent)fDTDScanner);\n    }\n  }\n  fDTDProcessor=createDTDProcessor();\n  if (fDTDProcessor != null) {\n    setProperty(DTD_PROCESSOR,fDTDProcessor);\n    addComponent(fDTDProcessor);\n  }\n  fDTDValidator=createDTDValidator();\n  if (fDTDValidator != null) {\n    setProperty(DTD_VALIDATOR,fDTDValidator);\n    addComponent(fDTDValidator);\n  }\n  fNamespaceBinder=createNamespaceBinder();\n  if (fNamespaceBinder != null) {\n    setProperty(NAMESPACE_BINDER,fNamespaceBinder);\n    addComponent(fNamespaceBinder);\n  }\n  fDatatypeValidatorFactory=createDatatypeValidatorFactory();\n  if (fDatatypeValidatorFactory != null) {\n    setProperty(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);\n  }\n  fValidationManager=createValidationManager();\n  if (fValidationManager != null) {\n    setProperty(VALIDATION_MANAGER,fValidationManager);\n  }\n  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {\n    XMLMessageFormatter xmft=new XMLMessageFormatter();\n    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);\n    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);\n  }\n  try {\n    setLocale(Locale.getDefault());\n  }\n catch (  XNIException e) {\n  }\n}\n", "nl": "Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p/> <strong>REVISIT:</strong> Grammar pool will be updated when the new validation engine is implemented."}
{"code": "public CodeAttribute(String name,List<Unit> units,List<Tag> tags){\n  this.name=name;\n  this.mUnits=units;\n  this.mTags=tags;\n}\n", "nl": "Create an attribute object with the name and lists of unit-tag pairs."}
{"code": "static Object readRequestStack(String name,HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {\n  return ContextFtlUtil.readRequestStack(name,false,request,context,env);\n}\n", "nl": "Method providing support for a stack structure having request scope, with fallback to globals. <p> <strong>Do not access underlying structure directly.</strong> <p> Return value may or may not be a <code>TemplateModel</code>; caller must wrap or unwrap as needed."}
{"code": "public int bdd_nodes(){\n  return soot.PhaseOptions.getInt(options,\"bdd-nodes\");\n}\n", "nl": "BDD Nodes -- Number of BDD nodes to allocate (0=unlimited). This option specifies the number of BDD nodes to be used by the  BDD backend. A value of 0 causes the backend to start with one  million nodes, and allocate more as required. A value other than  zero causes the backend to start with the specified size, and  prevents it from ever allocating any more nodes."}
{"code": "public boolean isAppliable(){\n  return getBlastFileName().trim().length() > 0 && (new File(Basic.getFirstLine(getBlastFileName()).trim())).exists();\n}\n", "nl": "is meganization applicable?"}
{"code": "public GroupsGetCatalogQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.getCatalog\",GetCatalogResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String render(String resourceName,String screenName,boolean asString) throws GeneralException, IOException, SAXException, ParserConfigurationException {\n  ModelScreen modelScreen=ScreenFactory.getScreenFromLocation(resourceName,screenName);\n  if (modelScreen.getUseCache()) {\n    WidgetContextCacheKey wcck=new WidgetContextCacheKey(context);\n    String screenCombinedName=resourceName + \":\" + screenName;\n    ScreenCache screenCache=new ScreenCache();\n    GenericWidgetOutput gwo=screenCache.get(screenCombinedName,wcck);\n    if (gwo == null) {\n      Writer sw=new StringWriter();\n      modelScreen.renderScreenString(sw,context,screenStringRenderer);\n      gwo=new GenericWidgetOutput(sw.toString());\n      screenCache.put(screenCombinedName,wcck,gwo);\n      if (asString) {\n        return gwo.toString();\n      }\n else {\n        writer.append(gwo.toString());\n      }\n    }\n else {\n      if (asString) {\n        return gwo.toString();\n      }\n else {\n        writer.append(gwo.toString());\n      }\n    }\n  }\n else {\n    context.put(\"renderFormSeqNumber\",String.valueOf(renderFormSeqNumber));\n    if (asString) {\n      Writer sw=new StringWriter();\n      modelScreen.renderScreenString(sw,context,screenStringRenderer);\n      return sw.toString();\n    }\n else {\n      modelScreen.renderScreenString(writer,context,screenStringRenderer);\n    }\n  }\n  return \"\";\n}\n", "nl": "Renders the named screen using the render environment configured when this ScreenRenderer was created. <p> SCIPIO: modified for asString boolean which returns as string instead of going straight to writer."}
{"code": "protected boolean isEnabledForInaccessibleResources(){\n  return false;\n}\n", "nl": "Normally, actions are not availables for inaccessible resources  (files or folder which do not exist ...)"}
{"code": "@Override public void stop(Runnable arg0){\n  stop();\n  arg0.run();\n}\n", "nl": "Smart lifecycle stop implementation. Closes the DB connection pool."}
{"code": "public static String streamToString(InputStream inputStream) throws IOException {\n  if (inputStream == null) {\n    return \"\";\n  }\n  StringBuilder sBuilder=new StringBuilder();\n  String line;\n  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));\n  while ((line=bufferedReader.readLine()) != null) {\n    sBuilder.append(line).append(\"\\n\");\n  }\n  return sBuilder.toString();\n}\n", "nl": "stream to string"}
{"code": "public static CalendarFragment newInstance(CustomCalendar calendar){\n  CalendarFragment fragment=new CalendarFragment();\n  fragment.setCalendar(calendar);\n  return fragment;\n}\n", "nl": "create CalendarFragment object and call setCalendar()."}
{"code": "public FilterOperationDelegateInvoker(int operationCode,Method processMethod){\n  this.operationCode=operationCode;\n  this.processMethod=ReflectionUtil.createMethod(processMethod);\n  this.parameterTypes=processMethod.getParameterTypes();\n}\n", "nl": "Constructs a new delegate for the given operation code and a method to invoke."}
{"code": "public static Class<?> loadClass(String className,boolean fastPath) throws ClassNotFoundException {\n  if (_classProvider == null) {\nsynchronized (AdditionalClassProviderFactory.class) {\n      if (_classProvider == null)       throw new ClassNotFoundException(\"no class provider present\");\n    }\n  }\n  return _classProvider.loadClass(className,fastPath);\n}\n", "nl": "loads a class"}
{"code": "public TimbreDistribution(GaussianMixture gmm){\n  super();\n  this.gmm=gmm;\n}\n", "nl": "Constructs a <code>TimbreDistribution</code> feature."}
{"code": "public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,Value... args){\n  return newSpecialInvokeExpr(base,method,Arrays.asList(args));\n}\n", "nl": "Constructs a NewSpecialInvokeExpr(Local base, SootMethodRef method, List of Immediate) grammar chunk."}
{"code": "private HermesEventBus(){\n  mEventBus=EventBus.getDefault();\n  mRemoteApis=new ObjectCanary2<IMainService>();\n}\n", "nl": "1. Consider more about the interleaving, especially when the service is being connected or disconnected. 2. Pay attention to the following cases: (1) Write-after-write hazard Before the connection succeeds, e1, e2 and e3 are put into the queue. Then when the connection succeeds, they are posted one by one. However, after e1 is posted, we post another event e4. I should guarantee that e4 is posted after e3. (2) Read-after-write hazard Before the connection succeeds, some sticky events (e1, e2 and e3) are put into the queue. Then when the connection succeeds, they are posted one by one. However, after e1 is posted, we get a sticky event. I should guarantee that we get e3 rather than e1."}
{"code": "public void paintFrame(@NotNull Graphics g,@NotNull Device device,@NotNull ScreenOrientation orientation,boolean showEffects,int x1,int y1,int height){\n  DeviceData data=getDeviceData(device);\n  if (data == null || height == 0) {\n    return;\n  }\n  FrameData frame=data.getFrameData(orientation,Integer.MAX_VALUE);\n  BufferedImage image=frame.getImage(showEffects);\n  if (image != null) {\n    double scale=height / (double)frame.getScreenHeight();\n    int dx1=(int)(x1 - scale * frame.getScreenX());\n    int dy1=(int)(y1 - scale * frame.getScreenY());\n    int dx2=dx1 + (int)(scale * image.getWidth());\n    int dy2=dy1 + (int)(scale * image.getHeight());\n    g.drawImage(image,dx1,dy1,dx2,dy2,0,0,image.getWidth(),image.getHeight(),null);\n  }\n}\n", "nl": "Paint the device frame for the given device around the screenshot coordinates (x1,y1) to (x2,y2), optionally with glare and shadow effects"}
{"code": "@Override public void renderLimitLines(Canvas c){\n  List<LimitLine> limitLines=mYAxis.getLimitLines();\n  if (limitLines == null || limitLines.size() <= 0)   return;\n  float[] pts=new float[2];\n  Path limitLinePath=new Path();\n  for (int i=0; i < limitLines.size(); i++) {\n    LimitLine l=limitLines.get(i);\n    if (!l.isEnabled())     continue;\n    mLimitLinePaint.setStyle(Paint.Style.STROKE);\n    mLimitLinePaint.setColor(l.getLineColor());\n    mLimitLinePaint.setStrokeWidth(l.getLineWidth());\n    mLimitLinePaint.setPathEffect(l.getDashPathEffect());\n    pts[1]=l.getLimit();\n    mTrans.pointValuesToPixel(pts);\n    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);\n    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);\n    c.drawPath(limitLinePath,mLimitLinePaint);\n    limitLinePath.reset();\n    String label=l.getLabel();\n    if (label != null && !\"\".equals(label)) {\n      mLimitLinePaint.setStyle(l.getTextStyle());\n      mLimitLinePaint.setPathEffect(null);\n      mLimitLinePaint.setColor(l.getTextColor());\n      mLimitLinePaint.setTypeface(l.getTypeface());\n      mLimitLinePaint.setStrokeWidth(0.5f);\n      mLimitLinePaint.setTextSize(l.getTextSize());\n      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);\n      float xOffset=Utils.convertDpToPixel(4f) + l.getXOffset();\n      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();\n      final LimitLine.LimitLabelPosition position=l.getLabelPosition();\n      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {\n        mLimitLinePaint.setTextAlign(Align.RIGHT);\n        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);\n      }\n else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {\n        mLimitLinePaint.setTextAlign(Align.RIGHT);\n        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);\n      }\n else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {\n        mLimitLinePaint.setTextAlign(Align.LEFT);\n        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);\n      }\n else {\n        mLimitLinePaint.setTextAlign(Align.LEFT);\n        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);\n      }\n    }\n  }\n}\n", "nl": "Draws the LimitLines associated with this axis to the screen."}
{"code": "public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){\n  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));\n  if (headers != null)   httpDelete.setHeaders(headers);\n  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);\n}\n", "nl": "Perform a HTTP DELETE request."}
{"code": "@deprecated protected int writeDeltaTo(int jumpTarget){\n  int i=this.bytesLength - jumpTarget;\n  assert (i >= 0);\n  if (i <= 191)   return write(i);\n  int length;\n  int length;\n  if (i <= 12287) {\n    this.intBytes[0]=((byte)(192 + (i >> 8)));\n    length=1;\n  }\n else {\n    int length;\n    if (i <= 917503) {\n      this.intBytes[0]=((byte)(240 + (i >> 16)));\n      length=2;\n    }\n else {\n      int length;\n      if (i <= 16777215) {\n        this.intBytes[0]=-2;\n        length=3;\n      }\n else {\n        this.intBytes[0]=-1;\n        this.intBytes[1]=((byte)(i >> 24));\n        length=4;\n      }\n      this.intBytes[1]=((byte)(i >> 16));\n    }\n    this.intBytes[1]=((byte)(i >> 8));\n  }\n  this.intBytes[(length++)]=((byte)i);\n  return write(this.intBytes,length);\n}\n", "nl": "/*    "}
{"code": "@Deprecated public JavaPluginLoader(Server instance){\n  Validate.notNull(instance,\"Server cannot be null\");\n  server=instance;\n}\n", "nl": "This class was not meant to be constructed explicitly"}
{"code": "public boolean vta(){\n  return soot.PhaseOptions.getBoolean(options,\"vta\");\n}\n", "nl": "VTA -- Emulate Variable Type Analysis. Setting VTA to true has the effect of setting field-based,  types-for-sites, and simplify-sccs to true, and on-fly-cg to  false, to simulate Variable Type Analysis, described in our  OOPSLA 2000 paper. Note that the algorithm differs from the  original VTA in that it handles array elements more precisely."}
{"code": "public static boolean isExtension(String filename,Collection<String> extensions){\n  if (filename == null) {\n    return false;\n  }\n  if (extensions == null || extensions.isEmpty()) {\n    return indexOfExtension(filename) == -1;\n  }\n  String fileExt=getExtension(filename);\n  for (  String extension : extensions) {\n    if (fileExt.equals(extension)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether the extension of the filename is one of those specified. <p> This method obtains the extension as the textual part of the filename after the last dot. There must be no directory separator after the dot. The extension check is case-sensitive on all platforms."}
{"code": "public static void f(String tag,String msg){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public boolean force_gc(){\n  return soot.PhaseOptions.getBoolean(options,\"force-gc\");\n}\n", "nl": "Force Garbage Collections -- Force garbage collection for measuring memory usage. When this option is set to true, calls to System.gc() will be  made at various points to allow memory usage to be measured."}
{"code": "public Builder zoomAnimationThreshold(Number zoomAnimationThreshold){\n  this.zoomAnimationThreshold=zoomAnimationThreshold;\n  return this;\n}\n", "nl": "Won't animate zoom if the zoom difference exceeds this value. default 4"}
{"code": "public PhotosEditQuery edit(UserActor actor,int photoId){\n  return new PhotosEditQuery(getClient(),actor,photoId);\n}\n", "nl": "Edits the caption of a photo."}
{"code": "@RequestMapping(method=RequestMethod.GET,produces=\"application/json\") public JsonNode listModels(HttpServletRequest request){\n  ServerConfig serverConfig=retrieveServerConfig();\n  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);\n  try {\n    return clientService.listModels(serverConfig,parameterMap);\n  }\n catch (  ActivitiServiceException e) {\n    throw new BadRequestException(e.getMessage());\n  }\n}\n", "nl": "GET  /rest/activiti/models -> get a list of apps."}
{"code": "@SubscribeEvent public void onFood(LivingEntityUseItemEvent.Start event){\n  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;\n  if (!(event.getItem().getItem() instanceof ItemFood))   return;\n  EntityPlayer player=(EntityPlayer)event.getEntityLiving();\n  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;\n  if (player.isPotionActive(MobEffects.HUNGER)) {\n    event.setCanceled(true);\n  }\n}\n", "nl": "Eating is not allowed when food poisoned."}
{"code": "public void addMatcher(XPathMatcher matcher){\n  ensureMatcherCapacity();\n  fMatchers[fMatchersCount++]=matcher;\n}\n", "nl": "Adds a matcher."}
{"code": "public static <T extends BaseFragment>T newInstance(Class<T> fragmentClazz,Bundle args){\n  T fragment=null;\n  try {\n    fragment=fragmentClazz.newInstance();\n    fragment.setArguments(args);\n  }\n catch (  java.lang.InstantiationException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalAccessException e) {\n    e.printStackTrace();\n  }\n  return fragment;\n}\n", "nl": "create fragment instance"}
{"code": "public DocumentNGramGraph[] intersectAndDeltaGraph(DocumentNGramGraph dgOtherGraph){\n  DocumentNGramGraph dgUnion=null;\n  if (dgOtherGraph.length() > length()) {\n    dgUnion=(DocumentNGramGraph)dgOtherGraph.clone();\n    dgUnion.merge(this,0);\n  }\n else {\n    dgUnion=(DocumentNGramGraph)clone();\n    dgUnion.merge(dgOtherGraph,0);\n  }\n  DocumentNGramGraph[] res=new DocumentNGramGraph[2];\n  DocumentNGramGraph dgIntersection=intersectGraph(dgOtherGraph);\n  res[0]=dgIntersection;\n  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {\n    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);\n    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);\n    EdgeCachedLocator eclLocator=new EdgeCachedLocator(100);\n    if (gIntersection == null)     continue;\n    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();\n    while (iIter.hasNext()) {\n      WeightedEdge weCurItem=(WeightedEdge)iIter.next();\n      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());\n      if (eEdge != null)       try {\n        gUnion.removeEdge(eEdge);\n      }\n catch (      Exception ex) {\n        ex.printStackTrace();\n      }\n    }\n  }\n  res[1]=dgUnion;\n  return res;\n}\n", "nl": "Returns both the intersection and the difference (inverse of the intersection) graph between the current graph and a given graph."}
{"code": "public ZeroException(){\n  this(LocalizedFormats.ZERO_NOT_ALLOWED);\n}\n", "nl": "Construct the exception."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HostileUp_ME_TO_SELF(String value0d,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200376,value0d,skillname);\n}\n", "nl": "You %0d your enmity by using [%SkillName]."}
{"code": "public void java_io_ObjectInputStream_allocateNewObject(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  throw new NativeMethodNotSupportedException(method);\n}\n", "nl": "Serialization has to be avoided by static analyses, since each object comes out of the same place. private static native java.lang.Object allocateNewObject(java.lang.Class, java.lang.Class) throws java.lang.InstantiationException,  java.lang.IllegalAccessException;"}
{"code": "public long distanceSquare(Coord coord){\n  long dx=coord.x - x;\n  long dy=coord.y - y;\n  return dx * dx + dy * dy;\n}\n", "nl": "return the euclidian distance square between two coords Hint : prefer this square distance if you want to compare distances rather than the exact distance that cost more"}
{"code": "public static boolean areEqual(ItemStack stack1,ItemStack stack2){\n  if (stack1 == null || stack2 == null) {\n    return false;\n  }\n else {\n    return stack1.isItemEqual(stack2);\n  }\n}\n", "nl": "Compares two ItemStack instances, trying to match the referenced item."}
{"code": "public NoSuchComponentException(Exception cause){\n  super(cause);\n}\n", "nl": "Constructs NoSuchComponentException."}
{"code": "protected void startRecoarding(){\n  coordinates.clear();\n  enabled=true;\n}\n", "nl": "Start recording the gesture"}
{"code": "@Override protected final boolean writeData(ByteBuffer data){\nsynchronized (guard) {\n    final long begin=System.nanoTime();\n    if (sendMsgQueue.isEmpty()) {\n      return false;\n    }\n    AionServerPacket packet=sendMsgQueue.removeFirst();\n    PacketLoggerService.getInstance().logPacketSM(packet.getPacketName());\n    try {\n      packet.write(this,data);\n      return true;\n    }\n  finally {\n      RunnableStatsManager.handleStats(packet.getClass(),\"runImpl()\",System.nanoTime() - begin);\n    }\n  }\n}\n", "nl": "This method will be called by Dispatcher, and will be repeated till return false."}
{"code": "private void assertResult(String expected,String result){\n  if (diagCollector.getErrorCount() > 0) {\n    Truth.assertWithMessage(\"Errors detected while filtering comment\").fail(NEWLINE_JOINER.join(diagCollector.getErrors()));\n  }\n else {\n    Truth.assertThat(result).isEqualTo(expected);\n  }\n}\n", "nl": "Asserts if filtered result equals expected string. Asserts failure if there are errors detected during the filtering."}
{"code": "public void confirmExitWithMessage(String message,long doublePressInterval){\n  if (doublePressInterval == -1) {\n    doublePressInterval=DOUBLE_PRESS_INTERVAL;\n  }\n  Toast.makeText(mContextReference.getContext(),message,Toast.LENGTH_SHORT).show();\n  long pressTime=System.currentTimeMillis();\n  if ((pressTime - lastPressTime) <= doublePressInterval) {\n    lastPressTime=0;\n    ((Activity)mContextReference.getContext()).finish();\n    Log.e(TAG,\"nullify mContextReference\");\n    mContextReference=null;\n  }\n  lastPressTime=pressTime;\n}\n", "nl": "Generate Toast for confirm user exit"}
{"code": "private void loadText(InputStream is){\n  BufferedReader reader;\n  String line;\n  unitList=new ArrayList();\n  unitTypesList=new ArrayList();\n  if (is == null) {\n    throw new Error(\"Can't load cluster db file.\");\n  }\n  reader=new BufferedReader(new InputStreamReader(is));\n  try {\n    line=reader.readLine();\n    lineCount++;\n    while (line != null) {\n      if (!line.startsWith(\"***\")) {\n        parseAndAdd(line,reader);\n      }\n      line=reader.readLine();\n    }\n    reader.close();\n    units=new DatabaseClusterUnit[unitList.size()];\n    units=(DatabaseClusterUnit[])unitList.toArray(units);\n    unitList=null;\n    unitTypes=new UnitType[unitTypesList.size()];\n    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);\n    unitTypesList=null;\n  }\n catch (  IOException e) {\n    throw new Error(e.getMessage() + \" at line \" + lineCount);\n  }\n finally {\n  }\n}\n", "nl": "Loads the database from the given input stream."}
{"code": "public static int copy(InputStream input,OutputStream output) throws IOException {\n  long count=copyLarge(input,output);\n  if (count > Integer.MAX_VALUE) {\n    return -1;\n  }\n  return (int)count;\n}\n", "nl": "Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. <p/> Large streams (over 2GB) will return a bytes copied value of <code>-1</code> after the copy has completed since the correct number of bytes cannot be returned as an int. For large streams use the <code>copyLarge(InputStream, OutputStream)</code> method."}
{"code": "public static double radian2Angle(double radian){\n  return radian / Math.PI * 180;\n}\n", "nl": "radian to angle"}
{"code": "public ViewsFinder excludingChildsFromFilteredGroupViews(){\n  this.addChildsFromFilteredGroupViews=false;\n  return this;\n}\n", "nl": "Specifies to exclude childs from filtered group views."}
{"code": "public BracketingNthOrderBrentSolver(){\n  this(DEFAULT_ABSOLUTE_ACCURACY,DEFAULT_MAXIMAL_ORDER);\n}\n", "nl": "Construct a solver with default accuracy and maximal order (1e-6 and 5 respectively)"}
{"code": "public void clear(){\n  super.clear();\n  short[] keys=_set;\n  Object[] vals=_values;\n  byte[] states=_states;\n  Arrays.fill(_set,0,_set.length,(short)0);\n  Arrays.fill(_values,0,_values.length,null);\n  Arrays.fill(_states,0,_states.length,FREE);\n}\n", "nl": "Empties the map."}
{"code": "private float[] fetchSpectrum(float[] amplitudes,int groupsNumber){\n  int approximateGroupLength=amplitudes.length / groupsNumber;\n  float[] result=new float[groupsNumber];\n  double tmpSum;\n  double wholeSum=0;\n  for (int i=0; i < groupsNumber; i++) {\n    tmpSum=0;\n    for (int j=i * approximateGroupLength; j < (i + 1) * approximateGroupLength; j++) {\n      tmpSum+=amplitudes[j];\n    }\n    result[i]=(float)(tmpSum / approximateGroupLength);\n    wholeSum+=result[i];\n  }\n  for (int i=0; i < groupsNumber; i++) {\n    result[i]/=wholeSum;\n  }\n  return result;\n}\n", "nl": "Calculates how strong are frequencies of each group represented in the provided spectrum"}
{"code": "private boolean matches(Composite column,ColumnGroup group,int index){\n  return column.size() == 2 && column.get(0,AsciiSerializer.get()).equals(group.name()) && column.get(1,IntegerSerializer.get()).equals(index);\n}\n", "nl": "The Astyanax Composite behavior is broken in that a deserialized Composite is not .equal() to a normally created Composite because the serializers aren't used correctly.  This function works around the problem."}
{"code": "public GoogleUserCredentialProvider(OkHttpClient client,String refreshToken,Time time) throws LoginFailedException, RemoteServerException {\n  this.time=time;\n  this.client=client;\n  this.refreshToken=refreshToken;\n  refreshToken(refreshToken);\n  authbuilder=AuthInfo.newBuilder();\n}\n", "nl": "Used for logging in when one has a persisted refreshToken."}
{"code": "public static void growPolygon(float pts[],int len,float amt){\n  float[] c=centroid(pts,len);\n  for (int i=0; i < len; i+=2) {\n    float vx=pts[i] - c[0];\n    float vy=pts[i + 1] - c[1];\n    float norm=(float)Math.sqrt(vx * vx + vy * vy);\n    pts[i]+=amt * vx / norm;\n    pts[i + 1]+=amt * vy / norm;\n  }\n}\n", "nl": "Expand a polygon by adding the given distance along the line from the centroid of the polyong."}
{"code": "public static byte[] toByteArray(URLConnection urlConn) throws IOException {\n  InputStream inputStream=urlConn.getInputStream();\n  try {\n    return IOUtils.toByteArray(inputStream);\n  }\n  finally {\n    inputStream.close();\n  }\n}\n", "nl": "Get the contents of a <code>URLConnection</code> as a <code>byte[]</code>."}
{"code": "public FrameProvider(DoubleDataSource signal,InlineDataProcessor processor,int frameLength,int frameShift,int samplingRate,boolean stopWhenTouchingEnd){\n  this.signal=signal;\n  this.processor=processor;\n  this.frameShift=frameShift;\n  this.frameLength=frameLength;\n  this.samplingRate=samplingRate;\n  this.frame=new double[frameLength];\n  this.frameStart=-1;\n  this.nextFrameStart=0;\n  validSamplesInFrame=0;\n  this.memory=new double[frameLength];\n  posInMemory=memory.length;\n  memoryFilled=false;\n  this.stopWhenTouchingEnd=stopWhenTouchingEnd;\n}\n", "nl": "Initialise a FrameProvider."}
{"code": "public TIntArrayList(){\n  this(DEFAULT_CAPACITY);\n}\n", "nl": "Creates a new <code>TIntArrayList</code> instance with the default capacity."}
{"code": "public SimplexSolver(final double epsilon){\n  this(epsilon,DEFAULT_ULPS,DEFAULT_CUT_OFF);\n}\n", "nl": "Builds a simplex solver with a specified accepted amount of error."}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());\n  result=prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n  result=prime * result + ((getProvider() == null) ? 0 : getProvider().hashCode());\n  result=prime * result + ((getOpenId() == null) ? 0 : getOpenId().hashCode());\n  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());\n  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());\n  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());\n  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());\n  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());\n  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());\n  return result;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table sys_user_thirdparty"}
{"code": "public void validate() throws ValidationException {\n  String mbrolaBase=Utilities.getProperty(\"mbrola.base\",null);\n  File mbrolaBinary=new File(mbrolaVoice.getMbrolaBinary());\n  File mbrolaVoiceDB=new File(mbrolaVoice.getDatabase());\n  if (mbrolaBase == null || mbrolaBase.length() == 0) {\n    throw new ValidationException(\"System property \\\"mbrola.base\\\" is undefined. \" + \"You might need to set the MBROLA_DIR environment variable.\");\n  }\n  if (!mbrolaBinary.exists()) {\n    throw new ValidationException(\"No MBROLA binary at: \" + mbrolaVoice.getMbrolaBinary());\n  }\n  if (!mbrolaVoiceDB.exists()) {\n    throw new ValidationException(\"No voice database for \" + mbrolaVoice.getName() + \" at: \"+ mbrolaVoice.getDatabase());\n  }\n}\n", "nl": "Validates this MbrolaVoice."}
{"code": "public boolean forEachKey(TObjectProcedure<K> procedure){\n  return forEach(procedure);\n}\n", "nl": "Executes <tt>procedure</tt> for each key in the map."}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> propertyOr(String propertyName,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){\n  return property(propertyName,or(leftPredicate,rightPredicate));\n}\n", "nl": "Shortcut for property(propertyName, or(leftPredicate, rightPredicate))."}
{"code": "public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){\n  return execCommand(new String[]{command},isRoot,isNeedResultMsg);\n}\n", "nl": "execute shell command"}
{"code": "private static void print(String s){\n  System.out.print(s);\n}\n", "nl": "Shorten spelling of print."}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  String result=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter name\",\"Select Node\",JOptionPane.QUESTION_MESSAGE);\n  if (result != null)   execute(\"select name=\" + result + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public FTPReply sendSiteCommand(String command) throws IllegalStateException, IOException, FTPIllegalReplyException {\nsynchronized (lock) {\n    if (!connected) {\n      throw new IllegalStateException(\"Client not connected\");\n    }\n    communication.sendFTPCommand(\"SITE \" + command);\n    touchAutoNoopTimer();\n    return communication.readFTPReply();\n  }\n}\n", "nl": "This method sends a SITE specific command to the server."}
{"code": "public PolyhedronsSet(final double tolerance){\n  super(tolerance);\n}\n", "nl": "Build a polyhedrons set representing the whole real line."}
{"code": "public Roles(List<Long> roles){\n  if (access == null && roles != null && roles.size() > 0) {\n    access=new HashSet<String>();\n    list=Role.loadAll(roles);\n    for (    Role r : list) {\n      List<String> names=r.getAccesses();\n      if (names != null && names.size() > 0) {\n        access.addAll(names);\n      }\n    }\n  }\n}\n", "nl": "Instantiates a new roles."}
{"code": "public String provideNetworkType(){\n  return \"unknown\";\n}\n", "nl": "Network type"}
{"code": "Request toRequest(Object... args) throws IOException {\n  RequestBuilder requestBuilder=new RequestBuilder(httpMethod,baseUrl,relativeUrl,headers,contentType,hasBody,isFormEncoded,isMultipart);\n  @SuppressWarnings(\"unchecked\") ParameterHandler<Object>[] handlers=(ParameterHandler<Object>[])parameterHandlers;\n  int argumentCount=args != null ? args.length : 0;\n  if (argumentCount != handlers.length) {\n    throw new IllegalArgumentException(\"Argument count (\" + argumentCount + \") doesn't match expected count (\"+ handlers.length+ \")\");\n  }\n  for (int p=0; p < argumentCount; p++) {\n    handlers[p].apply(requestBuilder,args[p]);\n  }\n  return requestBuilder.build();\n}\n", "nl": "Builds an HTTP request from method arguments."}
{"code": "public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {\n  ByteArrayOutputStream blockDataArray=null;\n  DataOutputStream dataOutputStream=null;\n  int totalSize=0;\n  int recordSize=0;\n  try {\n    recordSize=(measureCount * CarbonCommonConstants.DOUBLE_SIZE_IN_BYTE) + (dimensionCount * CarbonCommonConstants.INT_SIZE_IN_BYTE);\n    totalSize=records.length * recordSize;\n    blockDataArray=new ByteArrayOutputStream(totalSize);\n    dataOutputStream=new DataOutputStream(blockDataArray);\n    writeDataOutputStream(records,dataOutputStream,measureCount,dimensionCount,noDictionaryCount,complexDimensionCount);\n    stream.writeInt(records.length);\n    byte[] byteArray=blockDataArray.toByteArray();\n    stream.writeInt(byteArray.length);\n    stream.write(byteArray);\n  }\n catch (  IOException e) {\n    throw new CarbonSortKeyAndGroupByException(e);\n  }\n finally {\n    CarbonUtil.closeStreams(blockDataArray);\n    CarbonUtil.closeStreams(dataOutputStream);\n  }\n}\n", "nl": "Below method will be used to write the sort temp file"}
{"code": "public static String guessBlastType(String blastText){\n  if (blastText == null || !blastText.contains(\"Query\"))   return UNKNOWN;\n  if (blastText.contains(\"Frame=\") || (blastText.contains(\"Frame =\")))   return BLASTX;\n  if (blastText.contains(\"Strand=\") || blastText.contains(\"Strand =\"))   return BLASTN;\n  return BLASTP;\n}\n", "nl": "guesses the blast type"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200512,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] is in the DP recovery state because you used [%SkillName]."}
{"code": "public MD5InputStream(InputStream in){\n  super(in);\n  md5=new MD5();\n}\n", "nl": "Creates a MD5InputStream"}
{"code": "@Override public int executeUpdate(String cmd) throws RemoteException {\n  try {\n    Transaction tx=rconn.getTransaction();\n    if (tx.isReadOnly())     throw new UnsupportedOperationException();\n    int result=VanillaDb.newPlanner().executeUpdate(cmd,tx);\n    if (rconn.getAutoCommit())     rconn.commit();\n else     rconn.endStatement();\n    return result;\n  }\n catch (  RuntimeException e) {\n    rconn.rollback();\n    throw e;\n  }\n}\n", "nl": "Executes the specified SQL update command. The method sends the command to the update planner, which executes it."}
{"code": "@SuppressWarnings(\"unchecked\") private void initGaugeWhitelist(){\n  Set<String> set=new HashSet<String>();\n  set.add(\"server_connections\");\n  set.add(\"client_connections\");\n  set.add(\"dnode_client_connections\");\n  set.add(\"peer_connections\");\n  String s=GaugeWhitelist.get();\n  if (!s.isEmpty()) {\n    String[] parts=s.split(\",\");\n    if (parts != null && parts.length > 0) {\n      set.addAll(Arrays.asList(parts));\n    }\n  }\n  gaugeFilter.set(set);\n}\n", "nl": "Helper that tracks the gauge whitelist using defaults and what is set in the fast property"}
{"code": "public boolean isInNet(String host,String pattern,String mask){\n  host=dnsResolve(host);\n  if (host == null || host.length() == 0) {\n    return false;\n  }\n  long lhost=parseIpAddressToLong(host);\n  long lpattern=parseIpAddressToLong(pattern);\n  long lmask=parseIpAddressToLong(mask);\n  return (lhost & lmask) == lpattern;\n}\n", "nl": "Returns true if the IP address of the host matches the specified IP address pattern. Pattern and mask specification is done the same way as for SOCKS configuration. Example: isInNet(host, \"198.95.0.0\", \"255.255.0.0\") is true if the IP address of the host matches 198.95.*.*."}
{"code": "public RequestParams(Map<String,String> source){\n  init();\n  if (source != null) {\n    for (    Map.Entry<String,String> entry : source.entrySet()) {\n      put(entry.getKey(),entry.getValue());\n    }\n  }\n}\n", "nl": "Constructs a new RequestParams instance containing the key/value string params from the specified map."}
{"code": "@Override public void addASModel(ASModel abstractSchema){\n  fASModels.addElement(abstractSchema);\n}\n", "nl": "This method will allow the nesting or \"importation\" of ASModels."}
{"code": "public static boolean isChinese(int codePoint){\n  return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END;\n}\n", "nl": "Use code point of a character to decide if it is a Chinese character"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_FRIEND(String value0){\n  return new SM_SYSTEM_MESSAGE(1390119,value0);\n}\n", "nl": "%0 is not currently accepting friend requests."}
{"code": "public boolean hasFollowUp(){\n  return followUp != null;\n}\n", "nl": "Indicates whether this parameters specifies follow up for the given program. Follow up can be specified as true or false."}
{"code": "public final String loadDocumentElement(String sDocID,String sElement){\n  Node nDoc=XMLDoc.getElementById(sDocID);\n  if (nDoc == null)   return null;\n  Element eDoc=(Element)nDoc;\n  NodeList nDocElements=nDoc.getChildNodes();\n  Node n=null;\n  for (int iCnt=0; iCnt < nDocElements.getLength(); iCnt++) {\n    if (nDocElements.item(iCnt).getNodeName().equalsIgnoreCase(sElement)) {\n      n=nDocElements.item(iCnt);\n      break;\n    }\n  }\n  String sRes;\n  if (n != null)   sRes=n.getTextContent();\n else   sRes=\"\";\n  return sRes;\n}\n", "nl": "Returns a given element of a given document as a String, if the element exists."}
{"code": "public void openDriver(SurfaceHolder holder) throws IOException {\n  if (camera == null) {\n    camera=Camera.open();\n    if (camera == null) {\n      throw new IOException();\n    }\n    camera.setPreviewDisplay(holder);\n    if (!initialized) {\n      initialized=true;\n      configManager.initFromCameraParameters(camera);\n    }\n    configManager.setDesiredCameraParameters(camera);\n    FlashlightManager.enableFlashlight();\n  }\n}\n", "nl": "Opens the camera driver and initializes the hardware parameters."}
{"code": "static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {\n  try {\n    Class providerClass=getProviderClass(className,cl,doFallback);\n    Object instance=providerClass.newInstance();\n    if (debug) {\n      dPrint(\"created new instance of \" + providerClass + \" using ClassLoader: \"+ cl);\n    }\n    return instance;\n  }\n catch (  ClassNotFoundException x) {\n    throw new ConfigurationError(\"Provider \" + className + \" not found\",x);\n  }\ncatch (  Exception x) {\n    throw new ConfigurationError(\"Provider \" + className + \" could not be instantiated: \"+ x,x);\n  }\n}\n", "nl": "Create an instance of a class. Delegates to method <code>getProviderClass()</code> in order to load the class."}
{"code": "public static <K,V>Map<K,V> newMap(Map<? extends K,? extends V> map){\n  return new HashMap<K,V>(map);\n}\n", "nl": "SCIPIO: Creates a new map initialized from the given map. <p> This is useful for Freemarker workarounds and to guarantee a map is of the same type as the other toMap calls in this class."}
{"code": "public void removeLookupGroups(String[] groups){\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(JoinStateManager.class.getName(),\"removeLookupGroups\");\n  }\n  ((DiscoveryGroupManagement)dm).removeGroups(groups);\n  update();\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.exiting(JoinStateManager.class.getName(),\"removeLookupGroups\");\n  }\n}\n", "nl": "Remove groups from the set to join.  Leases are cancelled at lookup services that are not members of any of the remaining groups."}
{"code": "public boolean rollback(){\n  myLock.writeLock().lock();\n  try {\n    return finishTransaction();\n  }\n  finally {\n    myLock.writeLock().unlock();\n  }\n}\n", "nl": "Rolls-back the pending changes. After this method has been called, no more writes or reads can be made from this transaction."}
{"code": "public boolean canContain(ElementType other){\n  return (theModel & other.theMemberOf) != 0;\n}\n", "nl": "Returns true if this element type can contain another element type. That is, if any of the models in this element's model vector match any of the models in the other element type's member-of vector."}
{"code": "@Override public void write(byte[] value) throws IOException {\n  if (isFirstTime) {\n    init();\n    isFirstTime=false;\n  }\n  checkAndWriteDictionaryChunkToFile();\n  oneDictionaryChunkList.add(ByteBuffer.wrap(value));\n  totalRecordCount++;\n}\n", "nl": "This method will write the data in thrift format to disk. This method will be guided by parameter dictionary_one_chunk_size and data will be divided into chunks based on this parameter"}
{"code": "public static _Fields findByName(String name){\n  return byName.get(name);\n}\n", "nl": "Find the _Fields constant that matches name, or null if its not found."}
{"code": "@Override protected boolean isSideChannelActive(){\n  return sideChannelActive;\n}\n", "nl": "Avoid checking actual env."}
{"code": "public void saveToFileSystem(final String appName,final File propertyFileLocation) throws IOException {\n  final OutputStream outputStream=new FileOutputStream(propertyFileLocation);\n  properties.store(outputStream,\"=== \" + appName + \" properties ===\");\n}\n", "nl": "Saves the properties to the given file."}
{"code": "public OpenMapRealVector(Double[] values,double epsilon){\n  virtualSize=values.length;\n  entries=new OpenIntToDoubleHashMap(0.0);\n  this.epsilon=epsilon;\n  for (int key=0; key < values.length; key++) {\n    double value=values[key].doubleValue();\n    if (!isDefaultValue(value)) {\n      entries.put(key,value);\n    }\n  }\n}\n", "nl": "Create from an array. Only non-zero entries will be stored."}
{"code": "public boolean only_array_ref(){\n  return soot.PhaseOptions.getBoolean(options,\"only-array-ref\");\n}\n", "nl": "Only Array Ref -- Annotate only array references. Annotate only array-referencing instructions, instead of all  instructions that need null pointer checks."}
{"code": "public void showContentView(){\n  if (null != mBaseLayout) {\n    mBaseLayout.showContentView();\n  }\n}\n", "nl": "Show content view of current page."}
{"code": "private void registerError(SAXParseException exception){\n  StringBuilder errorMessage=new StringBuilder();\n  errorMessage.append(xml).append(\": \");\n  errorMessage.append(\"Line \").append(exception.getLineNumber()).append(\", \");\n  errorMessage.append(\"column \").append(exception.getColumnNumber());\n  if (qname != null) {\n    errorMessage.append(\", \").append(\"node <\").append(qname).append(\">\");\n  }\n  errorMessage.append(\". \").append(exception.getLocalizedMessage());\n  errorMessages.add(errorMessage.toString());\n}\n", "nl": "Registers error."}
{"code": "public void endOperation(boolean refresh,Set<IResource> refreshResourceList,boolean refreshLocal) throws SVNException {\n  try {\n    if (lock.getNestingCount() == 1) {\n      svnClient.removeNotifyListener(this);\n      if (operationNotifyListener != null) {\n        operationNotifyListener.clear();\n        svnClient.setProgressListener(null);\n      }\n      if (refreshResourceList != null) {\n        FilteringContainerList folderList=new FilteringContainerList(refreshResourceList);\n        for (        IContainer resource : folderList) {\n          if (resource.getProject().isOpen()) {\n            try {\n              SVNProviderPlugin.getPlugin().getStatusCacheManager().refreshStatus((IContainer)resource,true);\n            }\n catch (            Exception e) {\n              SVNProviderPlugin.log(IStatus.ERROR,e.getMessage(),e);\n            }\n          }\n        }\n        IResource[] resources=new IResource[refreshResourceList.size()];\n        refreshResourceList.toArray(resources);\n        SVNProviderPlugin.broadcastModificationStateChanges(resources);\n      }\n      if (refreshLocal) {\n        FilteringContainerList foldersToRefresh=new FilteringContainerList(localRefreshList);\n        for (        IContainer folder : foldersToRefresh) {\n          try {\n            folder.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());\n          }\n catch (          CoreException e) {\n          }\n        }\n      }\n    }\n  }\n  finally {\n    lock.release();\n    operationNotifyListener=null;\n    localRefreshList=new LinkedHashSet<IResource>();\n  }\n}\n", "nl": "Ends a batch of operations. Pending changes are committed only when the number of calls to endOperation() balances those to beginOperation()."}
{"code": "public Boolean isDirectDictionary(){\n  return isDirectDictionary;\n}\n", "nl": "returns boolean value to identify direct dictionary"}
{"code": "public QueryAnswers materialise(Set<Substitution> subs){\n  QueryAnswers insertAnswers=new QueryAnswers();\n  subs.forEach(null);\n  Atomic atom=getAtom();\n  if (atom.isRelation() && (atom.getRoleVarTypeMap().isEmpty() || !((Relation)atom).hasExplicitRoleTypes())) {\n    String relTypeId=atom.getTypeId();\n    RelationType relType=(RelationType)atom.getType();\n    Set<String> vars=atom.getVarNames();\n    Set<RoleType> roles=Sets.newHashSet(relType.hasRoles());\n    Set<Map<String,String>> roleMaps=new HashSet<>();\n    computeRoleCombinations(vars,roles,new HashMap<>(),roleMaps);\n    removeAtom(atom);\n    roleMaps.forEach(null);\n    addAtom(atom);\n  }\n else   insertAnswers.addAll(materialiseComplete());\n  subs.forEach(null);\n  return insertAnswers;\n}\n", "nl": "Add explicit substitutions and materialise"}
{"code": "public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){\n  if (options.mCancel) {\n    return null;\n  }\n  Thread thread=Thread.currentThread();\n  if (!canThreadDecoding(thread)) {\n    return null;\n  }\n  setDecodingOptions(thread,options);\n  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);\n  removeDecodingOptions(thread);\n  return b;\n}\n", "nl": "The real place to delegate bitmap decoding to BitmapFactory."}
{"code": "public DestroyedFailedException(){\n  super();\n}\n", "nl": "Constructs a <code>DestroyedFailedException</code> with <code>null</code> as its error detail message."}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work)."}
{"code": "@Deprecated public void onSuccess(int statusCode,String content){\n  onSuccess(content);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "public GroupsSetCallbackSettingsQuery wallReplyNew(Boolean value){\n  return unsafeParam(\"wall_reply_new\",value);\n}\n", "nl": "New wall replies notifications."}
{"code": "public static Class forName(String name,ClassLoader classLoader) throws ClassNotFoundException {\n  Class clazz=resolvePrimitiveClassName(name);\n  if (clazz != null) {\n    return clazz;\n  }\n  if (name.endsWith(ARRAY_SUFFIX)) {\n    String elementClassName=name.substring(0,name.length() - ARRAY_SUFFIX.length());\n    Class elementClass=ClassUtils.forName(elementClassName,classLoader);\n    return Array.newInstance(elementClass,0).getClass();\n  }\n  return Class.forName(name,true,classLoader);\n}\n", "nl": "Replacement for <code>Class.forName()</code> that also returns Class instances for primitives (like \"int\") and array class names (like \"String[]\")."}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_DOOR_REPAIR_NOT_ENOUGH_FEE(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300728,value0,value1);\n}\n", "nl": "You do not have enough items needed for repair. The fee is %0 (per %1)."}
{"code": "public static java.util.Date nowDate(){\n  return new java.util.Date();\n}\n", "nl": "Return a Date for right now"}
{"code": "private void createStep(){\n  this.token=Translations.create(getString(R.string.light_and_dark_gate_open));\n  insertNewIn(token.current);\n  loop(token);\n  this.translateMode=true;\n}\n", "nl": "Create Translation token and loop it to onStart, then wait for user send the content to start."}
{"code": "public void removeItemRange(@IntRange(from=0) int start,@IntRange(from=0) int end){\n  if (start < items.size() && end < items.size()) {\n    for (int i=start; i < end; i++) {\n      items.remove(i);\n    }\n    notifyDataSetChanged();\n  }\n}\n", "nl": "remove items"}
{"code": "public static IVScanResult createIVScanResult(Pokemon pokemon,double estimatedPokemonLevel,int pokemonCP,boolean b){\n  IVScanResult res=new IVScanResult(pokemon,estimatedPokemonLevel,pokemonCP,b);\n  scanContainer.addNewScan(res);\n  return res;\n}\n", "nl": "Create a new IVScanResult and updates the scanContainer singleton."}
{"code": "private static boolean _cover3(String dest,int w,int h,List<String> sources) throws Exception {\n  int len=sources.size();\n  if (len == 4) {\n    BufferedImage src[]=new BufferedImage[len];\n    for (int i=0; i < len; i++) {\n      String s=sources.get(i);\n      if (!EMPTY.equals(s)) {\n        src[i]=ImageIO.read(new File(sources.get(i)));\n      }\n    }\n    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);\n    Graphics2D g=(Graphics2D)out.getGraphics();\n    g.setColor(Color.WHITE);\n    g.fillRect(0,0,w,h);\n    int space=4;\n    int w1=(w - 1);\n    int h1=(h - 1) * 2 / 3;\n    float fd=((float)w1) / h1;\n    int x=0;\n    int y=0;\n    BufferedImage img=src[0];\n    if (img != null) {\n      int w2=img.getWidth();\n      int h2=img.getHeight();\n      float fs=((float)w2) / h2;\n      if (fs > fd) {\n        w2=w1;\n        h2=(int)(w2 / fs);\n      }\n else       if (fs < fd) {\n        h2=h1;\n        w2=(int)(h2 * fs);\n      }\n else {\n        w2=w1;\n        h2=h1;\n      }\n      Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);\n      g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);\n    }\n    drawRect(g,x,y,w1,h1);\n    int size=3;\n    w1=(w - 1) / size;\n    h1=(h - 1) / size;\n    fd=((float)w1) / h1;\n    for (int i=1; i < len; i++) {\n      x=(i - 1) * w1;\n      y=h1 * 2;\n      img=src[i];\n      if (img != null) {\n        int w2=img.getWidth();\n        int h2=img.getHeight();\n        float fs=((float)w2) / h2;\n        if (fs > fd) {\n          w2=w1;\n          h2=(int)(w2 / fs);\n        }\n else         if (fs < fd) {\n          h2=h1;\n          w2=(int)(h2 * fs);\n        }\n else {\n          w2=w1;\n          h2=h1;\n        }\n        Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);\n        g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);\n      }\n      drawRect(g,x,y,w1,h1);\n    }\n    ImageIO.write(out,\"jpg\",new File(dest));\n    g.dispose();\n    return true;\n  }\n else {\n    throw new Exception(\"sources MUST is 4 picutures!\" + len);\n  }\n}\n", "nl": "+-----+ <br> | 1 | <br> +-+-+-+ <br> |2|3|4| <br> +-+-+-+ <br> ."}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- ."}
{"code": "public void resetShipAfterDateIfBefore(Timestamp newShipAfterDate){\n  if (newShipAfterDate != null) {\n    if ((this.shipAfterDate == null) || (!this.shipAfterDate.after(newShipAfterDate))) {\n      this.shipAfterDate=newShipAfterDate;\n    }\n  }\n}\n", "nl": "Reset the ship group's shipAfterDate if it is before the parameter"}
{"code": "public ReceiveResultBehaviour(ResultsAgent a,long lInterval){\n  super(a,lInterval);\n  myAgent=a;\n  Interval=lInterval;\n  if (myAgent.OutFile.length() != 0) {\n    try {\n      pOut=new PrintStream(myAgent.OutFile);\n    }\n catch (    FileNotFoundException fnfe) {\n      System.err.println(\"Cannot output to selected file:\\n\" + fnfe.getMessage());\n      System.exit(1);\n    }\n  }\n  if (pOut == null)   pOut=System.err;\n}\n", "nl": "Initializes the receiving behaviour, with a given interval. Uses the output stream of the linked agent as output stream."}
{"code": "public static Object invokeStaticMethod(Class<?> clazz,String name,Class<?>[] parameterTypes,Object[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n  return invokeMethod(clazz,clazz,name,parameterTypes,args);\n}\n", "nl": "invoke static method with arguments"}
{"code": "public void removePoint(int rowIndex){\n  if ((rowIndex < 0) || (rowIndex >= pointList.size())) {\n    return;\n  }\n  pointList.remove(rowIndex);\n  this.fireTableDataChanged();\n}\n", "nl": "Removes the point."}
{"code": "@Override public int hashCode(){\n  int result=31 + MathUtils.hash(getMax());\n  result=result * 31 + MathUtils.hash(getMean());\n  result=result * 31 + MathUtils.hash(getMin());\n  result=result * 31 + MathUtils.hash(getN());\n  result=result * 31 + MathUtils.hash(getSum());\n  result=result * 31 + MathUtils.hash(getVariance());\n  return result;\n}\n", "nl": "Returns hash code based on values of statistics"}
{"code": "public byte[] reSample(byte[] sourceData,int bitsPerSample,int sourceRate,int targetRate){\n  int bytePerSample=bitsPerSample / 8;\n  int numSamples=sourceData.length / bytePerSample;\n  short[] amplitudes=new short[numSamples];\n  int pointer=0;\n  for (int i=0; i < numSamples; i++) {\n    short amplitude=0;\n    for (int byteNumber=0; byteNumber < bytePerSample; byteNumber++) {\n      amplitude|=(short)((sourceData[pointer++] & 0xFF) << (byteNumber * 8));\n    }\n    amplitudes[i]=amplitude;\n  }\n  LinearInterpolation reSample=new LinearInterpolation();\n  short[] targetSample=reSample.interpolate(sourceRate,targetRate,amplitudes);\n  int targetLength=targetSample.length;\n  byte[] bytes;\n  if (bytePerSample == 1) {\n    bytes=new byte[targetLength];\n    for (int i=0; i < targetLength; i++) {\n      bytes[i]=(byte)targetSample[i];\n    }\n  }\n else {\n    bytes=new byte[targetLength * 2];\n    for (int i=0; i < targetSample.length; i++) {\n      bytes[i * 2]=(byte)(targetSample[i] & 0xff);\n      bytes[i * 2 + 1]=(byte)((targetSample[i] >> 8) & 0xff);\n    }\n  }\n  return bytes;\n}\n", "nl": "Do resampling. Currently the amplitude is stored by short such that maximum bitsPerSample is 16 (bytePerSample is 2)"}
{"code": "@Override public int read() throws java.io.IOException {\n  if (position < 0) {\n    if (encode) {\n      byte[] b3=new byte[3];\n      int numBinaryBytes=0;\n      for (int i=0; i < 3; i++) {\n        int b=in.read();\n        if (b >= 0) {\n          b3[i]=(byte)b;\n          numBinaryBytes++;\n        }\n else {\n          break;\n        }\n      }\n      if (numBinaryBytes > 0) {\n        encode3to4(b3,0,numBinaryBytes,buffer,0,options);\n        position=0;\n        numSigBytes=4;\n      }\n else {\n        return -1;\n      }\n    }\n else {\n      byte[] b4=new byte[4];\n      int i=0;\n      for (i=0; i < 4; i++) {\n        int b=0;\n        do {\n          b=in.read();\n        }\n while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);\n        if (b < 0) {\n          break;\n        }\n        b4[i]=(byte)b;\n      }\n      if (i == 4) {\n        numSigBytes=decode4to3(b4,0,buffer,0,options);\n        position=0;\n      }\n else       if (i == 0) {\n        return -1;\n      }\n else {\n        throw new java.io.IOException(\"Improperly padded Base64 input.\");\n      }\n    }\n  }\n  if (position >= 0) {\n    if (position >= numSigBytes) {\n      return -1;\n    }\n    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {\n      lineLength=0;\n      return '\\n';\n    }\n else {\n      lineLength++;\n      int b=buffer[position++];\n      if (position >= bufferLength) {\n        position=-1;\n      }\n      return b & 0xFF;\n    }\n  }\n else {\n    throw new java.io.IOException(\"Error in Base64 code reading stream.\");\n  }\n}\n", "nl": "Reads enough of the input stream to convert to/from Base64 and returns the next byte."}
{"code": "public static void close(@Nullable Closeable closeable){\n  if (null == closeable) {\n    return;\n  }\n  try {\n    Closeables.close(closeable,true);\n  }\n catch (  IOException e) {\n  }\n}\n", "nl": "Close a closeable."}
{"code": "@Override public void showPopup(Context c,View anchor,String value,int position){\n  PhotoMenuPopupWindow window=new PhotoMenuPopupWindow(c,anchor);\n  window.setOnSelectItemListener(this);\n}\n", "nl": "<br> presenter."}
{"code": "public JsonRequestParams(Object params){\n  if (params == null)   return;\n  if (params instanceof Map<?,?>) {\n    urlParamsWithObjects.putAll((Map<String,Object>)params);\n  }\n else {\n    this.mCriteria=params;\n  }\n}\n", "nl": "Constructs a new JsonRequestParams instance from a object"}
{"code": "public static JsonNode replaceChild(JsonNode parent,String replacingKey,JsonNode replacingChild){\n  Map<String,JsonNode> childMap=new HashMap<>();\n  childMap.put(replacingKey,replacingChild);\n  return replaceChildren(parent,childMap);\n}\n", "nl": "Same as replace children but apply for only one child"}
{"code": "public P selectFarthest(final Iterable<P> points,final EnclosingBall<S,P> ball){\n  final P center=ball.getCenter();\n  P farthest=null;\n  double dMax=-1.0;\n  for (  final P point : points) {\n    final double d=point.distance(center);\n    if (d > dMax) {\n      farthest=point;\n      dMax=d;\n    }\n  }\n  return farthest;\n}\n", "nl": "Select the point farthest to the current ball."}
{"code": "public WallForce(float x1,float y1,float x2,float y2){\n  this(DEFAULT_GRAV_CONSTANT,x1,y1,x2,y2);\n}\n", "nl": "Create a new WallForce with default gravitational constant."}
{"code": "public static final double max(double[] a){\n  double max=Double.NEGATIVE_INFINITY;\n  for (int i=0; i < a.length; ++i) {\n    if (a[i] > max)     max=a[i];\n  }\n  return max;\n}\n", "nl": "Find the maximum value in an array."}
{"code": "public String printableRefSeq(boolean noFormat) throws IOException {\n  byte[] refSeq=this.getRefSeq();\n  if (refSeq == null) {\n    return \"\";\n  }\n else   if (noFormat) {\n    return new String(refSeq) + \"\\n\";\n  }\n else {\n    String faSeqStr=\"\";\n    for (    byte c : refSeq) {\n      char base=(char)c;\n      if (base == 'A' || base == 'a') {\n        faSeqStr+=\"\\033[107;34m\" + base + \"\\033[0m\";\n      }\n else       if (base == 'C' || base == 'c') {\n        faSeqStr+=\"\\033[107;31m\" + base + \"\\033[0m\";\n      }\n else       if (base == 'G' || base == 'g') {\n        faSeqStr+=\"\\033[107;32m\" + base + \"\\033[0m\";\n      }\n else       if (base == 'T' || base == 't') {\n        faSeqStr+=\"\\033[107;33m\" + base + \"\\033[0m\";\n      }\n else {\n        faSeqStr+=base;\n      }\n    }\n    return faSeqStr + \"\\n\";\n  }\n}\n", "nl": "Ref sequence usable for print on screen."}
{"code": "public Graph(boolean directed){\n  this(new Table(),directed);\n}\n", "nl": "Creates a new, empty Graph."}
{"code": "public void tabShown(Tab tab){\n  for (int i=0; i < mRecentTabs.size(); i++) {\n    Tab t=mRecentTabs.get(i).get();\n    if (t == tab) {\n      mRecentTabs.remove(i);\n    }\n  }\n}\n", "nl": "Call this whenever a tab is shown."}
{"code": "public RoleNotFoundException(){\n  super();\n}\n", "nl": "Constructs a <code>RoleNotFoundException</code> with no detail message."}
{"code": "public static long capacityRemainingBackward(GenericValue techDataCalendar,Timestamp dateFrom){\n  GenericValue techDataCalendarWeek=null;\n  try {\n    techDataCalendarWeek=techDataCalendar.getRelatedOne(\"TechDataCalendarWeek\",true);\n  }\n catch (  GenericEntityException e) {\n    Debug.logError(\"Pb reading Calendar Week associated with calendar\" + e.getMessage(),module);\n    return 0;\n  }\n  Calendar cDateTrav=Calendar.getInstance();\n  cDateTrav.setTime(dateFrom);\n  Map<String,Object> position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));\n  int moveDay=((Integer)position.get(\"moveDay\")).intValue();\n  if (moveDay != 0)   return 0;\n  Time startTime=(Time)position.get(\"startTime\");\n  Double capacity=(Double)position.get(\"capacity\");\n  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateFrom).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));\n  if (dateFrom.before(startAvailablePeriod))   return 0;\n  Timestamp endAvailablePeriod=new Timestamp(startAvailablePeriod.getTime() + capacity.longValue());\n  if (dateFrom.after(endAvailablePeriod))   return 0;\n  return dateFrom.getTime() - startAvailablePeriod.getTime();\n}\n", "nl": "Used to request the remaining capacity available for dateFrom in a TechDataCalenda, If the dateFrom (param in) is not  in an available TechDataCalendar period, the return value is zero."}
{"code": "public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  copy(input,output,encoding);\n  return output.toByteArray();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the specified character encoding. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>."}
{"code": "@Override protected Expression generateExpression(){\n  if (wktPanel != null) {\n    return wktPanel.getExpression();\n  }\n  return null;\n}\n", "nl": "Generate expression."}
{"code": "void addDep(soot.Type s){\n  deps.add(s);\n}\n", "nl": "Adds a dependency of the target class."}
{"code": "public static void writeSwappedDouble(byte[] data,int offset,double value){\n  writeSwappedLong(data,offset,Double.doubleToLongBits(value));\n}\n", "nl": "Writes a \"double\" value to a byte array at a given offset. The value is converted to the opposed endian system while writing."}
{"code": "private boolean parseNumericInputs(){\n  try {\n    pokemonHP=Optional.of(Integer.parseInt(pokemonHPEdit.getText().toString()));\n    pokemonCP=Optional.of(Integer.parseInt(pokemonCPEdit.getText().toString()));\n  }\n catch (  NumberFormatException e) {\n    return false;\n  }\n  try {\n    pokemonCandy=Optional.of(Integer.parseInt(pokemonCandyEdit.getText().toString()));\n  }\n catch (  NumberFormatException e) {\n    pokemonCandy=Optional.absent();\n  }\n  return true;\n}\n", "nl": "Parse numeric inputs."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200332,skillname);\n}\n", "nl": "You changed your casting speed by using [%SkillName]."}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {\n  if (lines == null) {\n    return;\n  }\n  if (lineEnding == null) {\n    lineEnding=LINE_SEPARATOR;\n  }\n  Charset cs=Charsets.toCharset(encoding);\n  for (  Object line : lines) {\n    if (line != null) {\n      output.write(line.toString().getBytes(cs));\n    }\n    output.write(lineEnding.getBytes(cs));\n  }\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the specified character encoding and the specified line ending."}
{"code": "public Token yylex() throws java.io.IOException {\n  int zzInput;\n  int zzAction;\n  int zzCurrentPosL;\n  int zzMarkedPosL;\n  int zzEndReadL=zzEndRead;\n  char[] zzBufferL=zzBuffer;\n  char[] zzCMapL=ZZ_CMAP;\n  int[] zzTransL=ZZ_TRANS;\n  int[] zzRowMapL=ZZ_ROWMAP;\n  int[] zzAttrL=ZZ_ATTRIBUTE;\n  while (true) {\n    zzMarkedPosL=zzMarkedPos;\n    yychar+=zzMarkedPosL - zzStartRead;\n    boolean zzR=false;\n    int zzCh;\n    int zzCharCount;\n    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL+=zzCharCount) {\n      zzCh=Character.codePointAt(zzBufferL,zzCurrentPosL,zzMarkedPosL);\n      zzCharCount=Character.charCount(zzCh);\nswitch (zzCh) {\ncase '\\u000B':\ncase '\\u000C':\ncase '\\u0085':\ncase '\\u2028':\ncase '\\u2029':\n        yyline++;\n      yycolumn=0;\n    zzR=false;\n  break;\ncase '\\r':\nyyline++;\nyycolumn=0;\nzzR=true;\nbreak;\ncase '\\n':\nif (zzR) zzR=false;\n else {\nyyline++;\nyycolumn=0;\n}\nbreak;\ndefault :\nzzR=false;\nyycolumn+=zzCharCount;\n}\n}\nif (zzR) {\nboolean zzPeek;\nif (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\\n';\n else if (zzAtEOF) zzPeek=false;\n else {\nboolean eof=zzRefill();\nzzEndReadL=zzEndRead;\nzzMarkedPosL=zzMarkedPos;\nzzBufferL=zzBuffer;\nif (eof) zzPeek=false;\n else zzPeek=zzBufferL[zzMarkedPosL] == '\\n';\n}\nif (zzPeek) yyline--;\n}\nzzAction=-1;\nzzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;\nzzState=ZZ_LEXSTATE[zzLexicalState];\nint zzAttributes=zzAttrL[zzState];\nif ((zzAttributes & 1) == 1) {\nzzAction=zzState;\n}\nzzForAction: {\nwhile (true) {\nif (zzCurrentPosL < zzEndReadL) {\nzzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);\nzzCurrentPosL+=Character.charCount(zzInput);\n}\n else if (zzAtEOF) {\nzzInput=YYEOF;\nbreak zzForAction;\n}\n else {\nzzCurrentPos=zzCurrentPosL;\nzzMarkedPos=zzMarkedPosL;\nboolean eof=zzRefill();\nzzCurrentPosL=zzCurrentPos;\nzzMarkedPosL=zzMarkedPos;\nzzBufferL=zzBuffer;\nzzEndReadL=zzEndRead;\nif (eof) {\nzzInput=YYEOF;\nbreak zzForAction;\n}\n else {\nzzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);\nzzCurrentPosL+=Character.charCount(zzInput);\n}\n}\nint zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];\nif (zzNext == -1) break zzForAction;\nzzState=zzNext;\nzzAttributes=zzAttrL[zzState];\nif ((zzAttributes & 1) == 1) {\nzzAction=zzState;\nzzMarkedPosL=zzCurrentPosL;\nif ((zzAttributes & 8) == 8) break zzForAction;\n}\n}\n}\nzzMarkedPos=zzMarkedPosL;\nif (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\nzzAtEOF=true;\nswitch (zzLexicalState) {\ncase YYINITIAL:\n{\nreturn newToken(EOF);\n}\ncase 1238:\nbreak;\ncase PARAM_LIST_OR_ID:\n{\nyybegin(YYINITIAL);\nreturn newToken(PARAM_LIST_OR_ID_END);\n}\ncase 1239:\nbreak;\ncase PARAM_LIST:\n{\nyybegin(YYINITIAL);\nreturn newToken(PARAM_LIST_END);\n}\ncase 1240:\nbreak;\ncase STRING:\n{\nreturn invalidStringOrChar(\"Unterminated string literal\");\n}\ncase 1241:\nbreak;\ncase CHAR:\n{\nreturn invalidStringOrChar(\"Unterminated character literal\");\n}\ncase 1242:\nbreak;\ndefault :\nreturn null;\n}\n}\n else {\nswitch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\ncase 1:\n{\nreturn invalidToken(\"Invalid text\");\n}\ncase 140:\nbreak;\ncase 2:\n{\nreturn newToken(POSITIVE_INTEGER_LITERAL);\n}\ncase 141:\nbreak;\ncase 3:\n{\nreturn newToken(SIMPLE_NAME);\n}\ncase 142:\nbreak;\ncase 4:\n{\nreturn invalidToken(\"Invalid directive\");\n}\ncase 143:\nbreak;\ncase 5:\n{\nreturn newToken(PRIMITIVE_TYPE);\n}\ncase 144:\nbreak;\ncase 6:\n{\nreturn newToken(WHITE_SPACE,true);\n}\ncase 145:\nbreak;\ncase 7:\n{\nbeginStringOrChar(STRING);\nsb.append('\"');\n}\ncase 146:\nbreak;\ncase 8:\n{\nbeginStringOrChar(CHAR);\nsb.append('\\'');\n}\ncase 147:\nbreak;\ncase 9:\n{\nreturn newToken(LINE_COMMENT,true);\n}\ncase 148:\nbreak;\ncase 10:\n{\nreturn newToken(VOID_TYPE);\n}\ncase 149:\nbreak;\ncase 11:\n{\nreturn newToken(EQUAL);\n}\ncase 150:\nbreak;\ncase 12:\n{\nreturn newToken(COLON);\n}\ncase 151:\nbreak;\ncase 13:\n{\nreturn newToken(COMMA);\n}\ncase 152:\nbreak;\ncase 14:\n{\nreturn newToken(OPEN_BRACE);\n}\ncase 153:\nbreak;\ncase 15:\n{\nreturn newToken(CLOSE_BRACE);\n}\ncase 154:\nbreak;\ncase 16:\n{\nreturn newToken(OPEN_PAREN);\n}\ncase 155:\nbreak;\ncase 17:\n{\nreturn newToken(CLOSE_PAREN);\n}\ncase 156:\nbreak;\ncase 18:\n{\nyypushback(1);\nyybegin(YYINITIAL);\nreturn newToken(PARAM_LIST_OR_ID_END);\n}\ncase 157:\nbreak;\ncase 19:\n{\nyypushback(1);\nyybegin(YYINITIAL);\nreturn newToken(PARAM_LIST_END);\n}\ncase 158:\nbreak;\ncase 20:\n{\nsb.append(yytext());\n}\ncase 159:\nbreak;\ncase 21:\n{\nsb.append('\"');\nreturn endStringOrChar(STRING_LITERAL);\n}\ncase 160:\nbreak;\ncase 22:\n{\nreturn invalidStringOrChar(\"Unterminated string literal\");\n}\ncase 161:\nbreak;\ncase 23:\n{\nsb.append('\\'');\nif (sb.length() == 2) {\nreturn invalidStringOrChar(\"Empty character literal\");\n}\n else if (sb.length() > 3) {\nreturn invalidStringOrChar(\"Character literal with multiple chars\");\n}\nreturn endStringOrChar(CHAR_LITERAL);\n}\ncase 162:\nbreak;\ncase 24:\n{\nreturn invalidStringOrChar(\"Unterminated character literal\");\n}\ncase 163:\nbreak;\ncase 25:\n{\nreturn newToken(FLOAT_LITERAL_OR_ID);\n}\ncase 164:\nbreak;\ncase 26:\n{\nreturn newToken(BYTE_LITERAL);\n}\ncase 165:\nbreak;\ncase 27:\n{\nreturn newToken(DOUBLE_LITERAL);\n}\ncase 166:\nbreak;\ncase 28:\n{\nreturn newToken(LONG_LITERAL);\n}\ncase 167:\nbreak;\ncase 29:\n{\nreturn newToken(SHORT_LITERAL);\n}\ncase 168:\nbreak;\ncase 30:\n{\nreturn newToken(DOUBLE_LITERAL_OR_ID);\n}\ncase 169:\nbreak;\ncase 31:\n{\nreturn newToken(NEGATIVE_INTEGER_LITERAL);\n}\ncase 170:\nbreak;\ncase 32:\n{\nreturn newToken(ARROW);\n}\ncase 171:\nbreak;\ncase 33:\n{\nreturn newToken(DOTDOT);\n}\ncase 172:\nbreak;\ncase 34:\n{\nyypushback(yylength());\nyybegin(PARAM_LIST_OR_ID);\nreturn newToken(PARAM_LIST_OR_ID_START);\n}\ncase 173:\nbreak;\ncase 35:\n{\nreturn newToken(ARRAY_DESCRIPTOR);\n}\ncase 174:\nbreak;\ncase 36:\n{\nreturn newToken(REGISTER);\n}\ncase 175:\nbreak;\ncase 37:\n{\nsb.append(yytext());\nsetStringOrCharError(\"Invalid escape sequence \" + yytext());\n}\ncase 176:\nbreak;\ncase 38:\n{\nsb.append('\\b');\n}\ncase 177:\nbreak;\ncase 39:\n{\nsb.append('\\f');\n}\ncase 178:\nbreak;\ncase 40:\n{\nsb.append(yytext());\nsetStringOrCharError(\"Invalid \\\\u sequence. \\\\u must be followed by 4 hex digits\");\n}\ncase 179:\nbreak;\ncase 41:\n{\nsb.append('\\r');\n}\ncase 180:\nbreak;\ncase 42:\n{\nsb.append('\\n');\n}\ncase 181:\nbreak;\ncase 43:\n{\nsb.append('\\t');\n}\ncase 182:\nbreak;\ncase 44:\n{\nsb.append('\"');\n}\ncase 183:\nbreak;\ncase 45:\n{\nsb.append('\\'');\n}\ncase 184:\nbreak;\ncase 46:\n{\nsb.append('\\\\');\n}\ncase 185:\nbreak;\ncase 47:\n{\nsb.append(yytext());\nsetStringOrCharError(\"Invalid \\\\u sequence. \\\\u must be followed by exactly 4 hex digits\");\n}\ncase 186:\nbreak;\ncase 48:\n{\nreturn newToken(FLOAT_LITERAL);\n}\ncase 187:\nbreak;\ncase 49:\n{\nyypushback(yylength());\nyybegin(PARAM_LIST);\nreturn newToken(PARAM_LIST_START);\n}\ncase 188:\nbreak;\ncase 50:\n{\nreturn newToken(CLASS_DESCRIPTOR);\n}\ncase 189:\nbreak;\ncase 51:\n{\nreturn newToken(INSTRUCTION_FORMAT10x);\n}\ncase 190:\nbreak;\ncase 52:\n{\nreturn newToken(MEMBER_NAME);\n}\ncase 191:\nbreak;\ncase 53:\n{\nreturn newToken(INSTRUCTION_FORMAT22c_FIELD);\n}\ncase 192:\nbreak;\ncase 54:\n{\nreturn newToken(INSTRUCTION_FORMAT23x);\n}\ncase 193:\nbreak;\ncase 55:\n{\nreturn newToken(INSTRUCTION_FORMAT21c_FIELD);\n}\ncase 194:\nbreak;\ncase 56:\n{\nreturn newToken(ACCESS_SPEC);\n}\ncase 195:\nbreak;\ncase 57:\n{\nreturn newToken(INSTRUCTION_FORMAT12x_OR_ID);\n}\ncase 196:\nbreak;\ncase 58:\n{\nreturn newToken(NULL_LITERAL);\n}\ncase 197:\nbreak;\ncase 59:\n{\nreturn newToken(BOOL_LITERAL);\n}\ncase 198:\nbreak;\ncase 60:\n{\nreturn newToken(INSTRUCTION_FORMAT10t);\n}\ncase 199:\nbreak;\ncase 61:\n{\nreturn newToken(ANNOTATION_VISIBILITY);\n}\ncase 200:\nbreak;\ncase 62:\n{\nreturn newToken(INSTRUCTION_FORMAT22t);\n}\ncase 201:\nbreak;\ncase 63:\n{\nreturn newToken(LINE_DIRECTIVE);\n}\ncase 202:\nbreak;\ncase 64:\n{\nreturn newToken(ENUM_DIRECTIVE);\n}\ncase 203:\nbreak;\ncase 65:\n{\nreturn newToken(INSTRUCTION_FORMAT31i_OR_ID);\n}\ncase 204:\nbreak;\ncase 66:\n{\nreturn newToken(INSTRUCTION_FORMAT11x);\n}\ncase 205:\nbreak;\ncase 67:\n{\nreturn newToken(INSTRUCTION_FORMAT21t);\n}\ncase 206:\nbreak;\ncase 68:\n{\nreturn newToken(FIELD_DIRECTIVE);\n}\ncase 207:\nbreak;\ncase 69:\n{\nreturn newToken(CLASS_DIRECTIVE);\n}\ncase 208:\nbreak;\ncase 70:\n{\nreturn newToken(CATCH_DIRECTIVE);\n}\ncase 209:\nbreak;\ncase 71:\n{\nreturn newToken(LOCAL_DIRECTIVE);\n}\ncase 210:\nbreak;\ncase 72:\n{\nreturn newToken(SUPER_DIRECTIVE);\n}\ncase 211:\nbreak;\ncase 73:\n{\nreturn newToken(PARAMETER_DIRECTIVE);\n}\ncase 212:\nbreak;\ncase 74:\n{\nsb.append((char)Integer.parseInt(yytext().substring(2,6),16));\n}\ncase 213:\nbreak;\ncase 75:\n{\nreturn newToken(LOCALS_DIRECTIVE);\n}\ncase 214:\nbreak;\ncase 76:\n{\nreturn newToken(SOURCE_DIRECTIVE);\n}\ncase 215:\nbreak;\ncase 77:\n{\nreturn newToken(METHOD_DIRECTIVE);\n}\ncase 216:\nbreak;\ncase 78:\n{\nreturn newToken(INSTRUCTION_FORMAT11n);\n}\ncase 217:\nbreak;\ncase 79:\n{\nreturn newToken(INSTRUCTION_FORMAT32x);\n}\ncase 218:\nbreak;\ncase 80:\n{\nreturn newToken(INSTRUCTION_FORMAT20t);\n}\ncase 219:\nbreak;\ncase 81:\n{\nreturn newToken(INSTRUCTION_FORMAT30t);\n}\ncase 220:\nbreak;\ncase 82:\n{\nreturn newToken(INSTRUCTION_FORMAT21s);\n}\ncase 221:\nbreak;\ncase 83:\n{\nreturn newToken(INSTRUCTION_FORMAT22s_OR_ID);\n}\ncase 222:\nbreak;\ncase 84:\n{\nreturn newToken(VERIFICATION_ERROR_TYPE);\n}\ncase 223:\nbreak;\ncase 85:\n{\nreturn newToken(FIELD_OFFSET);\n}\ncase 224:\nbreak;\ncase 86:\n{\nreturn newToken(CATCHALL_DIRECTIVE);\n}\ncase 225:\nbreak;\ncase 87:\n{\nreturn newToken(PROLOGUE_DIRECTIVE);\n}\ncase 226:\nbreak;\ncase 88:\n{\nreturn newToken(EPILOGUE_DIRECTIVE);\n}\ncase 227:\nbreak;\ncase 89:\n{\nreturn newToken(INSTRUCTION_FORMAT22c_TYPE);\n}\ncase 228:\nbreak;\ncase 90:\n{\nreturn newToken(INSTRUCTION_FORMAT22x);\n}\ncase 229:\nbreak;\ncase 91:\n{\nreturn newToken(INSTRUCTION_FORMAT22cs_FIELD);\n}\ncase 230:\nbreak;\ncase 92:\n{\nreturn newToken(INLINE_INDEX);\n}\ncase 231:\nbreak;\ncase 93:\n{\nreturn newToken(END_FIELD_DIRECTIVE);\n}\ncase 232:\nbreak;\ncase 94:\n{\nreturn newToken(END_LOCAL_DIRECTIVE);\n}\ncase 233:\nbreak;\ncase 95:\n{\nreturn newToken(END_PARAMETER_DIRECTIVE);\n}\ncase 234:\nbreak;\ncase 96:\n{\nreturn newToken(REGISTERS_DIRECTIVE);\n}\ncase 235:\nbreak;\ncase 97:\n{\nreturn newToken(INSTRUCTION_FORMAT51l);\n}\ncase 236:\nbreak;\ncase 98:\n{\nreturn newToken(INSTRUCTION_FORMAT21c_TYPE);\n}\ncase 237:\nbreak;\ncase 99:\n{\nreturn newToken(VTABLE_INDEX);\n}\ncase 238:\nbreak;\ncase 100:\n{\nreturn newToken(IMPLEMENTS_DIRECTIVE);\n}\ncase 239:\nbreak;\ncase 101:\n{\nreturn newToken(ARRAY_DATA_DIRECTIVE);\n}\ncase 240:\nbreak;\ncase 102:\n{\nreturn newToken(ANNOTATION_DIRECTIVE);\n}\ncase 241:\nbreak;\ncase 103:\n{\nreturn newToken(END_METHOD_DIRECTIVE);\n}\ncase 242:\nbreak;\ncase 104:\n{\nreturn newToken(INSTRUCTION_FORMAT22b);\n}\ncase 243:\nbreak;\ncase 105:\n{\nreturn newToken(INSTRUCTION_FORMAT35c_METHOD);\n}\ncase 244:\nbreak;\ncase 106:\n{\nreturn newToken(INSTRUCTION_FORMAT21c_STRING);\n}\ncase 245:\nbreak;\ncase 107:\n{\nreturn newToken(INSTRUCTION_FORMAT21ih);\n}\ncase 246:\nbreak;\ncase 108:\n{\nreturn newToken(INSTRUCTION_FORMAT22s);\n}\ncase 247:\nbreak;\ncase 109:\n{\nreturn newToken(INSTRUCTION_FORMAT12x);\n}\ncase 248:\nbreak;\ncase 110:\n{\nreturn newToken(INSTRUCTION_FORMAT22c_FIELD_ODEX);\n}\ncase 249:\nbreak;\ncase 111:\n{\nreturn newToken(INSTRUCTION_FORMAT25x);\n}\ncase 250:\nbreak;\ncase 112:\n{\nreturn newToken(INSTRUCTION_FORMAT21c_METHOD);\n}\ncase 251:\nbreak;\ncase 113:\n{\nreturn newToken(INSTRUCTION_FORMAT31i);\n}\ncase 252:\nbreak;\ncase 114:\n{\nreturn newToken(INSTRUCTION_FORMAT31t);\n}\ncase 253:\nbreak;\ncase 115:\n{\nreturn newToken(INSTRUCTION_FORMAT21c_FIELD_ODEX);\n}\ncase 254:\nbreak;\ncase 116:\n{\nreturn newToken(SUBANNOTATION_DIRECTIVE);\n}\ncase 255:\nbreak;\ncase 117:\n{\nreturn newToken(SPARSE_SWITCH_DIRECTIVE);\n}\ncase 256:\nbreak;\ncase 118:\n{\nreturn newToken(PACKED_SWITCH_DIRECTIVE);\n}\ncase 257:\nbreak;\ncase 119:\n{\nreturn newToken(RESTART_LOCAL_DIRECTIVE);\n}\ncase 258:\nbreak;\ncase 120:\n{\nreturn newToken(INSTRUCTION_FORMAT35mi_METHOD);\n}\ncase 259:\nbreak;\ncase 121:\n{\nreturn newToken(END_ARRAY_DATA_DIRECTIVE);\n}\ncase 260:\nbreak;\ncase 122:\n{\nreturn newToken(END_ANNOTATION_DIRECTIVE);\n}\ncase 261:\nbreak;\ncase 123:\n{\nreturn newToken(INSTRUCTION_FORMAT35c_TYPE);\n}\ncase 262:\nbreak;\ncase 124:\n{\nreturn newToken(INSTRUCTION_FORMAT21c_LAMBDA);\n}\ncase 263:\nbreak;\ncase 125:\n{\nreturn newToken(INSTRUCTION_FORMAT21lh);\n}\ncase 264:\nbreak;\ncase 126:\n{\nreturn newToken(INSTRUCTION_FORMAT22c_STRING);\n}\ncase 265:\nbreak;\ncase 127:\n{\nreturn newToken(INSTRUCTION_FORMAT35ms_METHOD);\n}\ncase 266:\nbreak;\ncase 128:\n{\nreturn newToken(INSTRUCTION_FORMAT3rc_METHOD);\n}\ncase 267:\nbreak;\ncase 129:\n{\nreturn newToken(END_SUBANNOTATION_DIRECTIVE);\n}\ncase 268:\nbreak;\ncase 130:\n{\nreturn newToken(END_SPARSE_SWITCH_DIRECTIVE);\n}\ncase 269:\nbreak;\ncase 131:\n{\nreturn newToken(END_PACKED_SWITCH_DIRECTIVE);\n}\ncase 270:\nbreak;\ncase 132:\n{\nreturn newToken(INSTRUCTION_FORMAT31c);\n}\ncase 271:\nbreak;\ncase 133:\n{\nreturn newToken(INSTRUCTION_FORMAT35c_METHOD_ODEX);\n}\ncase 272:\nbreak;\ncase 134:\n{\nreturn newToken(INSTRUCTION_FORMAT10x_ODEX);\n}\ncase 273:\nbreak;\ncase 135:\n{\nreturn newToken(INSTRUCTION_FORMAT3rmi_METHOD);\n}\ncase 274:\nbreak;\ncase 136:\n{\nreturn newToken(INSTRUCTION_FORMAT3rc_TYPE);\n}\ncase 275:\nbreak;\ncase 137:\n{\nreturn newToken(INSTRUCTION_FORMAT3rms_METHOD);\n}\ncase 276:\nbreak;\ncase 138:\n{\nreturn newToken(INSTRUCTION_FORMAT3rc_METHOD_ODEX);\n}\ncase 277:\nbreak;\ncase 139:\n{\nreturn newToken(INSTRUCTION_FORMAT20bc);\n}\ncase 278:\nbreak;\ndefault :\nzzScanError(ZZ_NO_MATCH);\n}\n}\n}\n}\n", "nl": "Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs."}
{"code": "private <N>void formatNodeText(Body body,DotGraph canvas,DotNamer<N> namer){\n  LabeledUnitPrinter printer=null;\n  if (body != null) {\n    printer=new BriefUnitPrinter(body);\n    printer.noIndent();\n  }\n  for (Iterator<N> nodesIt=namer.keySet().iterator(); nodesIt.hasNext(); ) {\n    N node=nodesIt.next();\n    DotGraphNode dotnode=canvas.getNode(namer.getName(node));\n    String nodeLabel=null;\n    if (node instanceof DominatorNode) {\n      node=((DominatorNode<N>)node).getGode();\n    }\n    if (printer == null) {\n      nodeLabel=node.toString();\n    }\n else {\n      if (node instanceof Unit) {\n        ((Unit)node).toString(printer);\n        String targetLabel=printer.labels().get(node);\n        if (targetLabel == null) {\n          nodeLabel=printer.toString();\n        }\n else {\n          nodeLabel=targetLabel + \": \" + printer.toString();\n        }\n      }\n else       if (node instanceof Block) {\n        Iterator<Unit> units=((Block)node).iterator();\n        StringBuffer buffer=new StringBuffer();\n        while (units.hasNext()) {\n          Unit unit=units.next();\n          String targetLabel=(String)printer.labels().get(unit);\n          if (targetLabel != null) {\n            buffer.append(targetLabel).append(\":\\\\n\");\n          }\n          unit.toString(printer);\n          buffer.append(printer.toString()).append(\"\\\\l\");\n        }\n        nodeLabel=buffer.toString();\n      }\n else {\n        nodeLabel=node.toString();\n      }\n    }\n    dotnode.setLabel(nodeLabel);\n  }\n}\n", "nl": "A utility method which formats the text for each node in  a <code>DotGraph</code> representing a CFG."}
{"code": "public String toString(int indentFactor) throws JSONException {\n  StringWriter w=new StringWriter();\nsynchronized (w.getBuffer()) {\n    return this.write(w,indentFactor,0).toString();\n  }\n}\n", "nl": "Make a prettyprinted JSON text of this JSONObject. <p> Warning: This method assumes that the data structure is acyclical."}
{"code": "public synchronized void unpause(){\n  _paused=false;\n  while (!_writeQueue.isEmpty()) {\n    _writeQueue.remove().run();\n  }\n}\n", "nl": "Executes queued writes and unpauses future writes such that they execute without delay."}
{"code": "public void testCycleDateStartTimerEvent() throws Exception {\n  Clock previousClock=processEngineConfiguration.getClock();\n  Clock testClock=new DefaultClockImpl();\n  processEngineConfiguration.setClock(testClock);\n  Calendar calendar=Calendar.getInstance();\n  calendar.set(2025,Calendar.DECEMBER,10,0,0,0);\n  testClock.setCurrentTime(calendar.getTime());\n  repositoryService.createDeployment().addClasspathResource(\"org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndExpressionTest.testCycleDateStartTimerEvent.bpmn20.xml\").deploy();\n  assertEquals(1,repositoryService.createProcessDefinitionQuery().count());\n  List<Job> jobs=managementService.createTimerJobQuery().list();\n  assertEquals(1,jobs.size());\n  Calendar dueDateCalendar=Calendar.getInstance();\n  dueDateCalendar.set(2025,Calendar.DECEMBER,11,0,0,0);\n  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);\n  List<ProcessInstance> processInstances=runtimeService.createProcessInstanceQuery().list();\n  assertEquals(0,processInstances.size());\n  List<Task> tasks=taskService.createTaskQuery().list();\n  assertEquals(0,tasks.size());\n  moveByMinutes(60 * 24);\n  waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(2000L,200);\n  assertEquals(1,managementService.createTimerJobQuery().count());\n  processInstances=runtimeService.createProcessInstanceQuery().list();\n  assertEquals(1,processInstances.size());\n  tasks=taskService.createTaskQuery().list();\n  assertEquals(1,tasks.size());\n  jobs=managementService.createTimerJobQuery().list();\n  assertEquals(1,jobs.size());\n  dueDateCalendar=Calendar.getInstance();\n  dueDateCalendar.set(2025,Calendar.DECEMBER,12,0,0,0);\n  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);\n  moveByMinutes(60 * 24);\n  waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(2000,200);\n  processInstances=runtimeService.createProcessInstanceQuery().list();\n  assertEquals(2,processInstances.size());\n  jobs=managementService.createTimerJobQuery().list();\n  assertEquals(0,jobs.size());\n  jobs=managementService.createJobQuery().list();\n  assertEquals(0,jobs.size());\n  tasks=taskService.createTaskQuery().list();\n  assertEquals(2,tasks.size());\n  int timerFiredCount=0;\n  List<ActivitiEvent> eventsReceived=listener.getEventsReceived();\n  for (  ActivitiEvent eventReceived : eventsReceived) {\n    if (ActivitiEventType.TIMER_FIRED.equals(eventReceived.getType())) {\n      timerFiredCount++;\n    }\n  }\n  int eventCreatedCount=0;\n  for (  ActivitiEvent eventReceived : eventsReceived) {\n    if (ActivitiEventType.ENTITY_CREATED.equals(eventReceived.getType())) {\n      eventCreatedCount++;\n    }\n  }\n  int eventDeletedCount=0;\n  for (  ActivitiEvent eventReceived : eventsReceived) {\n    if (ActivitiEventType.ENTITY_DELETED.equals(eventReceived.getType())) {\n      eventDeletedCount++;\n    }\n  }\n  assertEquals(2,timerFiredCount);\n  assertEquals(4,eventCreatedCount);\n  assertEquals(4,eventDeletedCount);\n  for (  ProcessInstance processInstance : processInstances) {\n    tasks=taskService.createTaskQuery().processInstanceId(processInstance.getProcessInstanceId()).list();\n    Task task=tasks.get(0);\n    assertEquals(\"Task A\",task.getName());\n    assertEquals(1,tasks.size());\n    taskService.complete(task.getId());\n  }\n  processInstances=runtimeService.createProcessInstanceQuery().list();\n  assertEquals(0,processInstances.size());\n  jobs=managementService.createTimerJobQuery().list();\n  assertEquals(0,jobs.size());\n  jobs=managementService.createJobQuery().list();\n  assertEquals(0,jobs.size());\n  tasks=taskService.createTaskQuery().list();\n  assertEquals(0,tasks.size());\n  listener.clearEventsReceived();\n  processEngineConfiguration.setClock(previousClock);\n  repositoryService.deleteDeployment(repositoryService.createDeploymentQuery().singleResult().getId(),true);\n}\n", "nl": "Timer repetition"}
{"code": "public UsersSearchQuery birthDay(Integer value){\n  return unsafeParam(\"birth_day\",value);\n}\n", "nl": "Day of birth."}
{"code": "private void resize(int newCapacity){\n  Entry[] oldTable=getTable();\n  int oldCapacity=oldTable.length;\n  if (oldCapacity == MAXIMUM_CAPACITY) {\n    threshold=Integer.MAX_VALUE;\n    return;\n  }\n  Entry[] newTable=new Entry[newCapacity];\n  transfer(oldTable,newTable);\n  table=newTable;\n  if (size >= threshold / 2) {\n    threshold=(int)(newCapacity * loadFactor);\n  }\n else {\n    expungeStaleEntries();\n    transfer(newTable,oldTable);\n    table=oldTable;\n  }\n}\n", "nl": "Rehashes the contents of this map into a new array with a larger capacity.  This method is called automatically when the number of keys in this map reaches its threshold. <p/> If current capacity is MAXIMUM_CAPACITY, this method does not resize the map, but but sets threshold to Integer.MAX_VALUE. This has the effect of preventing future calls."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public CompilationUnit compilationUnit(){\n  ASTNode$State state=state();\n  CompilationUnit compilationUnit_value=getParent().Define_CompilationUnit_compilationUnit(this,null);\n  return compilationUnit_value;\n}\n", "nl": "Fetches the immediately enclosing compilation unit."}
{"code": "@Override protected void onReset(){\n  super.onReset();\n  onStopLoading();\n  if (mData != null) {\n    onReleaseResources(mData);\n    mData=null;\n  }\n}\n", "nl": "Handles a request to completely reset the Loader."}
{"code": "public static FieldSelector of(Field field){\n  return new FieldSelector(ImmutableList.of(field));\n}\n", "nl": "Construct a field selector for the given field."}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "public String[] upload_file(String group_name,String master_filename,String prefix_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);\n}\n", "nl": "upload file to storage server (by callback, slave file mode)"}
{"code": "public final ProgressEvent updateProgress(double dNewProgress){\n  Progress=dNewProgress;\n  return this;\n}\n", "nl": "Updates the progress of the object."}
{"code": "public MonsterWeaknessCursor queryWeaknessFromMonster(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_WEAKNESS;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_WEAKNESS_MONSTER_ID + \" = \" + id;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new MonsterWeaknessCursor(wrapHelper(qh));\n}\n", "nl": "MONSTER WEAKNESS QUERIES"}
{"code": "public static void rgb565ToColor(Color color,int value){\n  color.r=((value & 0x0000F800) >>> 11) / 31f;\n  color.g=((value & 0x000007E0) >>> 5) / 63f;\n  color.b=((value & 0x0000001F) >>> 0) / 31f;\n}\n", "nl": "Sets the Color components using the specified integer value in the format RGB565. This is inverse to the rgb565(r, g, b) method."}
{"code": "@Override public Throwable fillInStackTrace(){\n  return this;\n}\n", "nl": "Overridden so the stack trace is not filled in for this exception for performance reasons."}
{"code": "public FontAnimator(String group){\n  super(group);\n}\n", "nl": "Create a new FontAnimator that processes the specified group."}
{"code": "@Override public List<CentroidCluster<T>> cluster(final Collection<T> dataPoints) throws MathIllegalArgumentException {\n  MathUtils.checkNotNull(dataPoints);\n  final int size=dataPoints.size();\n  if (size < k) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,size,k);\n  }\n  points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n  clusters=new ArrayList<CentroidCluster<T>>();\n  membershipMatrix=new double[size][k];\n  final double[][] oldMatrix=new double[size][k];\n  if (size == 0) {\n    return clusters;\n  }\n  initializeMembershipMatrix();\n  final int pointDimension=points.get(0).getPoint().length;\n  for (int i=0; i < k; i++) {\n    clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n  }\n  int iteration=0;\n  final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n  double difference=0.0;\n  do {\n    saveMembershipMatrix(oldMatrix);\n    updateClusterCenters();\n    updateMembershipMatrix();\n    difference=calculateMaxMembershipChange(oldMatrix);\n  }\n while (difference > epsilon && ++iteration < max);\n  return clusters;\n}\n", "nl": "Performs Fuzzy K-Means cluster analysis."}
{"code": "@Override public boolean isSet(DatatypeConstants.Field field){\n  if (field == null) {\n    String methodName=\"mf.javax.xml.datatype.Duration\" + \"#isSet(DatatypeConstants.Field field)\";\n    throw new NullPointerException(DatatypeMessageFormatter.formatMessage(null,\"FieldCannotBeNull\",new Object[]{methodName}));\n  }\n  if (field == DatatypeConstants.YEARS) {\n    return years != null;\n  }\n  if (field == DatatypeConstants.MONTHS) {\n    return months != null;\n  }\n  if (field == DatatypeConstants.DAYS) {\n    return days != null;\n  }\n  if (field == DatatypeConstants.HOURS) {\n    return hours != null;\n  }\n  if (field == DatatypeConstants.MINUTES) {\n    return minutes != null;\n  }\n  if (field == DatatypeConstants.SECONDS) {\n    return seconds != null;\n  }\n  String methodName=\"mf.javax.xml.datatype.Duration\" + \"#isSet(DatatypeConstants.Field field)\";\n  throw new IllegalArgumentException(DatatypeMessageFormatter.formatMessage(null,\"UnknownField\",new Object[]{methodName,field.toString()}));\n}\n", "nl": "Checks if a field is set. <p/> A field of a duration object may or may not be present. This method can be used to test if a field is present."}
{"code": "public SimplifiedIntervalList(Collection<Interval> intervals){\n  super(simplifyIntervals(intervals));\n}\n", "nl": "Simplify then build a list."}
{"code": "public LongAdder(){\n}\n", "nl": "Creates a new adder with initial sum of zero."}
{"code": "public GigaSpaceConfigurer(SpaceConfigurer configurer){\n  gigaSpaceFactoryBean=new GigaSpaceFactoryBean();\n  gigaSpaceFactoryBean.setSpace(configurer.space());\n}\n", "nl": "Constructs a new configurer based on the Space."}
{"code": "public double remove(final int key){\n  final int hash=hashOf(key);\n  int index=hash & mask;\n  if (containsKey(key,index)) {\n    return doRemove(index);\n  }\n  if (states[index] == FREE) {\n    return missingEntries;\n  }\n  int j=index;\n  for (int perturb=perturb(hash); states[index] != FREE; perturb>>=PERTURB_SHIFT) {\n    j=probe(perturb,j);\n    index=j & mask;\n    if (containsKey(key,index)) {\n      return doRemove(index);\n    }\n  }\n  return missingEntries;\n}\n", "nl": "Remove the value associated with a key."}
{"code": "private boolean canStopTrackingJob(JobStatus job){\n  return (!job.hasTimingDelayConstraint() || job.timeDelayConstraintSatisfied.get()) && (!job.hasDeadlineConstraint() || job.deadlineConstraintSatisfied.get());\n}\n", "nl": "Determines whether this controller can stop tracking the given job. The controller is no longer interested in a job once its time constraint is satisfied, and the job's deadline is fulfilled - unlike other controllers a time constraint can't toggle back and forth."}
{"code": "private static void debugPrintln(String msg){\n  if (DEBUG) {\n    System.err.println(\"XERCES: \" + msg);\n  }\n}\n", "nl": "Prints a message to standard error if debugging is enabled."}
{"code": "public String provideNetworkType(){\n  return \"unknown\";\n}\n", "nl": "RetrofitHelper type"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200748,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer blind."}
{"code": "@Override public boolean isEnabled(){\n  if ((attributeSelectionPanel != null) && !isValueOnly()) {\n    return attributeSelectionPanel.isEnabled();\n  }\n else {\n    if (slider != null) {\n      return slider.isEnabled();\n    }\n  }\n  return false;\n}\n", "nl": "Checks if is enabled."}
{"code": "public static String formatCreateTime(Date createAt){\n  String strTime=\"\";\n  long beginOfToday=(new Date(Calendar.getInstance().get(Calendar.YEAR) - 1900,Calendar.getInstance().get(Calendar.MONTH),Calendar.getInstance().get(Calendar.DAY_OF_MONTH),0,0,0)).getTime();\n  long beginOfThisYear=(new Date(Calendar.getInstance().get(Calendar.YEAR) - 1900,0,0,0,0,0)).getTime();\n  if (createAt != null) {\n    long interval=System.currentTimeMillis() - createAt.getTime();\n    if (interval <= MIN) {\n      strTime=MainApp.CONTEXT.getString(R.string.just_now);\n    }\n else     if (createAt.getTime() >= beginOfToday) {\n      strTime=DateUtil.formatDate(createAt,MainApp.CONTEXT.getString(R.string.date_format));\n    }\n else     if (createAt.getTime() < beginOfToday && createAt.getTime() >= beginOfThisYear) {\n      strTime=DateUtil.formatDate(createAt,MainApp.CONTEXT.getString(R.string.date_format_with_date));\n    }\n else {\n      strTime=DateUtil.formatDate(createAt,MainApp.CONTEXT.getString(R.string.date_format_with_year));\n    }\n  }\n  return strTime;\n}\n", "nl": "calculate the offset from now to created time"}
{"code": "public OutOfRangeException(Number wrong,Number lo,Number hi){\n  this(LocalizedFormats.OUT_OF_RANGE_SIMPLE,wrong,lo,hi);\n}\n", "nl": "Construct an exception from the mismatched dimensions."}
{"code": "public FriendsGetRequestsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of friend requests."}
{"code": "@Nullable private static PsiFile findFileToOpen(@NotNull List<PsiFile> files){\n  PsiFile bestFile=null;\n  FolderConfiguration bestConfig=null;\n  for (  PsiFile file : files) {\n    PsiDirectory qualifiedDirectory=file.getParent();\n    assert qualifiedDirectory != null : \"Resource file's parent directory cannot be null\";\n    FolderConfiguration config=FolderConfiguration.getConfigForFolder(qualifiedDirectory.getName());\n    if (bestConfig == null || config == null || config.compareTo(bestConfig) < 0) {\n      bestConfig=config;\n      bestFile=file;\n    }\n  }\n  return bestFile;\n}\n", "nl": "Returns the best configuration of a particular resource given a set of multiple configurations of the same resource."}
{"code": "@SuppressLint(\"SetTextI18n\") @Override public void drawUserInfo(User u){\n  if (!TextUtils.isEmpty(u.location)) {\n    locationTxt.setText(u.location);\n  }\n else {\n    locationTxt.setText(\"Unknown\");\n  }\n  if (!TextUtils.isEmpty(u.bio)) {\n    bioTxt.setText(u.bio);\n  }\n else {\n    bioTxt.setVisibility(GONE);\n  }\n  List<String> titleList=new ArrayList<>();\n  titleList.add(u.total_photos + \" \" + getResources().getStringArray(R.array.user_tabs)[0]);\n  titleList.add(u.total_collections + \" \" + getResources().getStringArray(R.array.user_tabs)[1]);\n  titleList.add(u.total_likes + \" \" + getResources().getStringArray(R.array.user_tabs)[2]);\n  adapter.titleList=titleList;\n  adapter.notifyDataSetChanged();\n}\n", "nl": "<br> interface."}
{"code": "private void updateLocationPreferenceForXGeo(Preference preference){\n  ListPreference listPreference=(ListPreference)preference;\n  Resources res=getResources();\n  listPreference.setEntries(new String[]{res.getString(R.string.website_settings_permissions_allow_dse),res.getString(ContentSettingsResources.getSiteSummary(ContentSetting.BLOCK))});\n  listPreference.setEntryValues(new String[]{ContentSetting.DEFAULT.toString(),ContentSetting.BLOCK.toString()});\n  listPreference.setValueIndex(0);\n}\n", "nl": "Updates the location preference to indicate that the site has access to location (via X-Geo) for searches that happen from the omnibox."}
{"code": "static void verify(Class c){\n  if (c == null) {\n    throw new NullPointerException(\"elements cannot be null\");\n  }\n  if (c.isArray() || c.isPrimitive() || (Modifier.isFinal(c.getModifiers()) && !Principal.class.isAssignableFrom(c))) {\n    throw new IllegalArgumentException(\"invalid class\");\n  }\n}\n", "nl": "Verifies that the class is not a primitive or array class, and either isn't final or is assignable to Principal."}
{"code": "public static void writeVLong(DataOutput stream,long i) throws IOException {\n  if (i >= -112 && i <= 127) {\n    stream.writeByte((byte)i);\n    return;\n  }\n  int len=-112;\n  if (i < 0) {\n    i^=-1L;\n    len=-120;\n  }\n  long tmp=i;\n  while (tmp != 0) {\n    tmp=tmp >> 8;\n    len--;\n  }\n  stream.writeByte((byte)len);\n  len=(len < -120) ? -(len + 120) : -(len + 112);\n  for (int idx=len; idx != 0; idx--) {\n    int shiftbits=(idx - 1) * 8;\n    long mask=0xFFL << shiftbits;\n    stream.writeByte((byte)((i & mask) >> shiftbits));\n  }\n}\n", "nl": "Serializes a long to a binary stream with zero-compressed encoding. For -112 <= i <= 127, only one byte is used with the actual value. For other values of i, the first byte value indicates whether the long is positive or negative, and the number of bytes that follow. If the first byte value v is between -113 and -120, the following long is positive, with number of bytes that follow are -(v+112). If the first byte value v is between -121 and -128, the following long is negative, with number of bytes that follow are -(v+120). Bytes are stored in the high-non-zero-byte-first order."}
{"code": "public void clear(){\n  setAccessToken(null);\n}\n", "nl": "clears session. (Kills it)"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public PrimitiveCompilationUnit fullCopy(){\n  PrimitiveCompilationUnit tree=(PrimitiveCompilationUnit)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public void freeSLHolder(IStoredListIterator<T> slh){\n  if (slh != null) {\n    SegmentedListIterator<T> si=(SegmentedListIterator<T>)slh;\n    slh.release();\n  }\n}\n", "nl": "this method is called  by outside scan that want to quit the scan and return the slholder to the factory"}
{"code": "public boolean isMp4(){\n  return isOptionEnabled(UrlFilterRuleOption.MP4);\n}\n", "nl": "If mp4 is true than Adguard will return mp4 video stub"}
{"code": "protected void showIndeterminate(@StringRes final int resId){\n  dismissProgress();\n  progress=new MaterialDialog.Builder(context).content(resId).progress(true,0).build();\n  progress.show();\n}\n", "nl": "Show indeterminate progress dialog with given message"}
{"code": "public V putIfAbsent(long key,V value){\n  int index=insertionIndex(key);\n  if (index < 0)   return _values[-index - 1];\n  return doPut(key,value,index);\n}\n", "nl": "Inserts a key/value pair into the map if the specified key is not already associated with a value."}
{"code": "public boolean isCaseSensitive(){\n  return sensitive;\n}\n", "nl": "Does the object represent case sensitive comparison."}
{"code": "public void addCommonJARs(URL[] jars){\n  if (jars == null)   return;\n  for (int i=0; i < jars.length; i++) {\n    if (!hasURL(jars[i]))     addURL(jars[i]);\n  }\n}\n", "nl": "Add common JARs"}
{"code": "public Viterbi(List<Target> targets,UnitDatabase database,float wTargetCosts,float wSCosts,int beamSize){\n  this.database=database;\n  this.targetCostFunction=database.getTargetCostFunction();\n  this.joinCostFunction=database.getJoinCostFunction();\n  this.sCostFunction=database.getSCostFunction();\n  this.wTargetCosts=wTargetCosts;\n  this.wSCosts=wSCosts;\n  wJoinCosts=1 - (wTargetCosts + wSCosts);\n  this.beamSize=beamSize;\n  this.cumulJoinCosts=0;\n  this.nJoinCosts=0;\n  this.cumulTargetCosts=0;\n  this.nTargetCosts=0;\n  ViterbiPoint last=null;\n  for (  Target target : targets) {\n    ViterbiPoint nextPoint=new ViterbiPoint(target);\n    if (last != null) {\n      last.setNext(nextPoint);\n    }\n else {\n      firstPoint=nextPoint;\n      firstPoint.getPaths().add(new ViterbiPath(null,null,0));\n    }\n    last=nextPoint;\n  }\n  lastPoint=new ViterbiPoint(null);\n  last.setNext(lastPoint);\n  if (beamSize == 0) {\n    throw new IllegalStateException(\"General beam search not implemented\");\n  }\n}\n", "nl": "Creates a Viterbi class to process the given utterance. A queue of ViterbiPoints corresponding to the Items in the Relation segs is built up."}
{"code": "public static boolean isError(Map<String,? extends Object> results){\n  if (results == null || results.get(ModelService.RESPONSE_MESSAGE) == null) {\n    return false;\n  }\n  return ModelService.RESPOND_ERROR.equals(results.get(ModelService.RESPONSE_MESSAGE));\n}\n", "nl": "A little short-cut method to check to see if a service returned an error"}
{"code": "public VisiblePredicate(){\n  super(VisualItem.VISIBLE);\n}\n", "nl": "Create a new VisiblePredicate."}
{"code": "public Shape star(float x,float y,float height){\n  float s=(float)(height / (2 * Math.sin(Math.toRadians(54))));\n  float shortSide=(float)(height / (2 * Math.tan(Math.toRadians(54))));\n  float mediumSide=(float)(s * Math.sin(Math.toRadians(18)));\n  float longSide=(float)(s * Math.cos(Math.toRadians(18)));\n  float innerLongSide=(float)(s / (2 * Math.cos(Math.toRadians(36))));\n  float innerShortSide=innerLongSide * (float)Math.sin(Math.toRadians(36));\n  float innerMediumSide=innerLongSide * (float)Math.cos(Math.toRadians(36));\n  m_path.reset();\n  m_path.moveTo(x,y + shortSide);\n  m_path.lineTo((x + innerLongSide),(y + shortSide));\n  m_path.lineTo((x + height / 2),y);\n  m_path.lineTo((x + height - innerLongSide),(y + shortSide));\n  m_path.lineTo((x + height),(y + shortSide));\n  m_path.lineTo((x + height - innerMediumSide),(y + shortSide + innerShortSide));\n  m_path.lineTo((x + height - mediumSide),(y + height));\n  m_path.lineTo((x + height / 2),(y + shortSide + longSide - innerShortSide));\n  m_path.lineTo((x + mediumSide),(y + height));\n  m_path.lineTo((x + innerMediumSide),(y + shortSide + innerShortSide));\n  m_path.closePath();\n  return m_path;\n}\n", "nl": "Returns a star shape of the given dimenisions."}
{"code": "public static void f(String tag,String msg){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public ChangeReport onSubEquipmentUnitAdd(final SubEquipmentUnitAdd subEquipmentUnitAdd){\n  log.debug(\"onSubEquipmentUnitAdd - entering onSubEquipmentUnitAdd()..\");\n  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();\n  ChangeReport changeReport=new ChangeReport(subEquipmentUnitAdd);\n  changeReport.setState(CHANGE_STATE.SUCCESS);\n  EquipmentConfiguration parentEquipmentConfiguration=configuration.getEquipmentConfiguration(subEquipmentUnitAdd.getParentEquipmentId());\n  if (parentEquipmentConfiguration == null) {\n    changeReport.appendError(\"Parent Equipment unit id: \" + subEquipmentUnitAdd.getParentEquipmentId() + \" for SubEquipment unit \"+ subEquipmentUnitAdd.getSubEquipmentId()+ \" is unknown\");\n    changeReport.setState(CHANGE_STATE.FAIL);\n    return changeReport;\n  }\n  if (parentEquipmentConfiguration.getSubEquipmentConfiguration(subEquipmentUnitAdd.getSubEquipmentId()) != null) {\n    changeReport.appendError(\"onSubEquipmentUnitAdd - SubEquipment unit id: \" + subEquipmentUnitAdd.getSubEquipmentId() + \" is already registered\");\n    changeReport.setState(CHANGE_STATE.FAIL);\n    return changeReport;\n  }\n  SubEquipmentConfiguration subEquipmentConfiguration=null;\n  EquipmentConfigurationFactory equipmentConfigurationFactory=EquipmentConfigurationFactory.getInstance();\n  try {\n    subEquipmentConfiguration=equipmentConfigurationFactory.createSubEquipmentConfiguration(subEquipmentUnitAdd.getSubEquipmentUnitXml());\n  }\n catch (  Exception e) {\n    changeReport.setState(CHANGE_STATE.FAIL);\n    changeReport.appendError(StackTraceHelper.getStackTrace(e));\n    return changeReport;\n  }\n  parentEquipmentConfiguration.addSubEquipmentConfiguration(subEquipmentConfiguration);\n  return changeReport;\n}\n", "nl": "Updates the DAQ by injecting a new SubEquipment Unit."}
{"code": "public static boolean isLegacyIdeaAndroidModule(@NotNull Module module){\n  AndroidFacet facet=AndroidFacet.getInstance(module);\n  if (facet != null && !facet.requiresAndroidModel()) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Indicates whether the given module is a legacy IDEA Android module (which is deprecated in Android Studio.)"}
{"code": "public CollectionsImplementor(CollectionsModel model,CollectionsView view){\n  this.model=model;\n  this.view=view;\n}\n", "nl": "<br> life cycle."}
{"code": "public LocationCursor queryLocations(){\n  return mHelper.queryLocations();\n}\n", "nl": "LOCATION QUERIES"}
{"code": "public static void removeCallbacks(Runnable r){\n  sMainHandler.removeCallbacks(r);\n}\n", "nl": "<p>Removes the specified Runnable from the <b>MAIN</b> message queue.</p>"}
{"code": "public Set<String> toFilenameSet(int iSubset){\n  HashSet s=new HashSet();\n  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {\n    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;\n    s.add(cfeCur.getFileName());\n  }\n  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {\n    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;\n    s.add(cfeCur.getFileName());\n  }\n  return s;\n}\n", "nl": "Get a string list of all file names in the set or its training / test  subsets."}
{"code": "public static String toString(JSONObject jo) throws JSONException {\n  boolean b=false;\n  Iterator<String> keys=jo.keys();\n  String string;\n  StringBuilder sb=new StringBuilder();\n  while (keys.hasNext()) {\n    string=keys.next();\n    if (!jo.isNull(string)) {\n      if (b) {\n        sb.append(';');\n      }\n      sb.append(Cookie.escape(string));\n      sb.append(\"=\");\n      sb.append(Cookie.escape(jo.getString(string)));\n      b=true;\n    }\n  }\n  return sb.toString();\n}\n", "nl": "Convert a JSONObject into a cookie list. A cookie list is a sequence of name/value pairs. The names are separated from the values by '='. The pairs are separated by ';'. The characters '%', '+', '=', and ';' in the names and values are replaced by \"%hh\"."}
{"code": "public GenericValue queryFirst() throws GenericEntityException {\n  EntityFindOptions efo=makeEntityFindOptions();\n  if (!this.useCache && !this.filterByDate) {\n    efo.setMaxRows(1);\n  }\n  GenericValue result=EntityUtil.getFirst(query(efo));\n  return result;\n}\n", "nl": "Executes the EntityQuery and returns the first result"}
{"code": "public NewsfeedDeleteBanQuery deleteBan(UserActor actor){\n  return new NewsfeedDeleteBanQuery(getClient(),actor);\n}\n", "nl": "Allows news from previously banned users and communities to be shown in the current user's newsfeed."}
{"code": "public int size(){\n  return summonTemplates.size();\n}\n", "nl": "Size of summon templates"}
{"code": "public void onDestroy(){\n}\n", "nl": "The final call you receive before your activity is destroyed."}
{"code": "private boolean isPermissionRequested(String permission){\n  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);\n  return preferences.getBoolean(permission,false);\n}\n", "nl": "Check if a permission is requestted or not (false by default)"}
{"code": "@Override public String toString(){\n  return \"Cluster []\";\n}\n", "nl": "Method toString."}
{"code": "public Suggester(double dLookupThreshold){\n  vPreviousDecisions=new Vector();\n  LookupThreshold=dLookupThreshold;\n}\n", "nl": "Creates a new instance of Suggester, given a threshold."}
{"code": "@Override public void retry(VolleyError error) throws VolleyError {\n  mCurrentRetryCount++;\n  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);\n  if (!hasAttemptRemaining()) {\n    throw error;\n  }\n}\n", "nl": "Prepares for the next retry by applying a backoff to the timeout."}
{"code": "public void cleanResult(){\n  consG.clear();\n  pointers.clear();\n  allocations.clear();\n  constraints.clear();\n  func2int.clear();\n  int2func.clear();\n  edgeMapping.clear();\n  hasTransformed=false;\n  hasExecuted=false;\n  System.gc();\n  System.gc();\n  System.gc();\n  System.gc();\n}\n", "nl": "We thoroughly delete the geometric points-to result for space saving. Some applications such as those needing the call graph only may want to clean the points-to result."}
{"code": "public void sortbyselection(List<String> sortFlds,List<Integer> sortDirs){\n  moveToId(-1);\n  int i=0;\n  while (super.next()) {\n    int minId=findSmallestFrom(i,sortFlds,sortDirs);\n    if (minId != i) {\n      swapRecords(i,minId);\n    }\n    moveToId(i);\n    i++;\n  }\n}\n", "nl": "Selection sort"}
{"code": "public final void write(OutputStream out) throws IOException {\n  writeLong(bits0,out);\n  writeLong(bits1,out);\n}\n", "nl": "Marshals a binary representation of this <code>Uuid</code> to an <code>OutputStream</code>. <p>Specifically, this method writes the 128-bit value to the stream as 16 bytes in network (big-endian) byte order."}
{"code": "final long fn(long v,long x){\n  return v + x;\n}\n", "nl": "Version of plus for use in retryUpdate"}
{"code": "public static SM_SYSTEM_MESSAGE STR_COMBINE_FAIL(String value0){\n  return new SM_SYSTEM_MESSAGE(1330050,value0);\n}\n", "nl": "You have failed to craft %0."}
{"code": "public NGramGaussNormSymWinDocument(){\n  Graph=new DocumentNGramSymWinGraph();\n  Histogram=new DocumentNGramHistogram();\n}\n", "nl": "Creates a new instance of NGramGaussNormSymWinDocument."}
{"code": "public IntervalsSet(final double lower,final double upper,final double tolerance){\n  super(buildTree(lower,upper,tolerance),tolerance);\n}\n", "nl": "Build an intervals set corresponding to a single interval."}
{"code": "public static synchronized void removeInstance(String storeName){\n  MAP_STORES.remove(storeName);\n}\n", "nl": "Delete the named singleton instance."}
{"code": "private PrivateKey(byte[] priv,Cryptography crypto){\n  this.priv=priv;\n  this.crypto=crypto;\n}\n", "nl": "Create from uncompressed binary representation"}
{"code": "public DocumentNGramHistogram(int iMinSize,int iMaxSize){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  DataString=\"\";\n  NGramHistogram=new HashMap();\n}\n", "nl": "Creates a new instance of INSECTDocumentNGrams"}
{"code": "public void onSuccess(int statusCode,JSONObject response){\n  onSuccess(response);\n}\n", "nl": "Fired when a request returns successfully and contains a json object at the base of the response string. Override to handle in your own code."}
{"code": "public ReplicationFilterException(String message,Throwable cause,String filterClassName,String sourceMemberName,String targetMemberName,int filterDirection){\n  super(message,cause);\n  _filterClassName=filterClassName;\n  _sourceMemberName=sourceMemberName;\n  _targetMemberName=targetMemberName;\n  _filterDirection=filterDirection;\n}\n", "nl": "Constructs an ReplicationFilterException with the specified detail message, source and target member."}
{"code": "@Override public void flush() throws IOException {\n  writer.write(buffer,0,fill);\n  fill=0;\n}\n", "nl": "Flushes the internal buffer but does not flush the wrapped writer."}
{"code": "static void commitElement(ConstraintModel model,@NotNull ConstraintWidget widget){\n  AttributesTransaction transaction=updateElement(model,widget);\n  if (transaction != null) {\n    transaction.commit();\n  }\n}\n", "nl": "Utility function to commit to the NlModel the current state of the given widget"}
{"code": "@Override public void redoAction(UndoInterface undoRedoObject){\n  if (textField != null) {\n    if (undoRedoObject != null) {\n      String newValue=(String)undoRedoObject.getNewValue();\n      textField.setText(newValue);\n    }\n  }\n}\n", "nl": "Redo action."}
{"code": "public static String jsonToString(JsonRootNode node){\n  JsonFormatter JSON_FORMATTER=new PrettyJsonFormatter();\n  return JSON_FORMATTER.format(node);\n}\n", "nl": "Convert JsonRootnode to string representation"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LEAVE_INSTANCE_PARTY(String value0){\n  return new SM_SYSTEM_MESSAGE(1400045,value0);\n}\n", "nl": "You have exited the Instanced Zone. This zone will be reset in %0 minutes."}
{"code": "boolean isBaseHeader(){\n  return value == BASE_HEADER;\n}\n", "nl": "Returns true if this node is the header of base-level list."}
{"code": "public void add(Predicate p,Font font){\n  super.add(p,font);\n}\n", "nl": "Add a font mapping rule to this FontAction. VisualItems that match the provided predicate will be assigned the given font value (assuming they do not match an earlier rule)."}
{"code": "private soot.Value createLiteral(polyglot.ast.Lit lit){\n  if (lit instanceof polyglot.ast.IntLit) {\n    polyglot.ast.IntLit intLit=(polyglot.ast.IntLit)lit;\n    long litValue=intLit.value();\n    if (intLit.kind() == polyglot.ast.IntLit.INT) {\n      return soot.jimple.IntConstant.v((int)litValue);\n    }\n else {\n      return soot.jimple.LongConstant.v(litValue);\n    }\n  }\n else   if (lit instanceof polyglot.ast.StringLit) {\n    String litValue=((polyglot.ast.StringLit)lit).value();\n    return soot.jimple.StringConstant.v(litValue);\n  }\n else   if (lit instanceof polyglot.ast.NullLit) {\n    return soot.jimple.NullConstant.v();\n  }\n else   if (lit instanceof polyglot.ast.FloatLit) {\n    polyglot.ast.FloatLit floatLit=(polyglot.ast.FloatLit)lit;\n    double litValue=floatLit.value();\n    if (floatLit.kind() == polyglot.ast.FloatLit.DOUBLE) {\n      return soot.jimple.DoubleConstant.v(floatLit.value());\n    }\n else {\n      return soot.jimple.FloatConstant.v((float)(floatLit.value()));\n    }\n  }\n else   if (lit instanceof polyglot.ast.CharLit) {\n    char litValue=((polyglot.ast.CharLit)lit).value();\n    return soot.jimple.IntConstant.v(litValue);\n  }\n else   if (lit instanceof polyglot.ast.BooleanLit) {\n    boolean litValue=((polyglot.ast.BooleanLit)lit).value();\n    if (litValue)     return soot.jimple.IntConstant.v(1);\n else     return soot.jimple.IntConstant.v(0);\n  }\n else   if (lit instanceof polyglot.ast.ClassLit) {\n    return getSpecialClassLitLocal((polyglot.ast.ClassLit)lit);\n  }\n else {\n    throw new RuntimeException(\"Unknown Literal - Unhandled: \" + lit.getClass());\n  }\n}\n", "nl": "Literal Creation"}
{"code": "private InfoflowResults analyzeAPKFile(boolean enableImplicitFlows) throws IOException, XmlPullParserException {\n  String androidJars=System.getenv(\"ANDROID_JARS\");\n  if (androidJars == null)   androidJars=System.getProperty(\"ANDROID_JARS\");\n  if (androidJars == null)   throw new RuntimeException(\"Android JAR dir not set\");\n  System.out.println(\"Loading Android.jar files from \" + androidJars);\n  SetupApplication setupApplication=new SetupApplication(androidJars,\"insecureBank\" + File.separator + \"InsecureBank.apk\");\n  setupApplication.setTaintWrapper(new EasyTaintWrapper(\"EasyTaintWrapperSource.txt\"));\n  setupApplication.setEnableImplicitFlows(enableImplicitFlows);\n  setupApplication.setLayoutMatchingMode(LayoutMatchingMode.MatchAll);\n  setupApplication.calculateSourcesSinksEntrypoints(\"SourcesAndSinks.txt\");\n  return setupApplication.runInfoflow();\n}\n", "nl": "Analyzes the given APK file for data flows"}
{"code": "public GroupsSetCallbackServerSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.setCallbackServerSettings\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private DataQueryParams retainDataDimensionReportingRates(ReportingRateMetric metric){\n  DimensionalObject dimension=getDimensionOrFilter(DATA_X_DIM_ID);\n  List<ReportingRate> items=DimensionalObjectUtils.asTypedList(AnalyticsUtils.getByDataDimensionItemType(DataDimensionItemType.REPORTING_RATE,dimension.getItems()));\n  items=items.stream().filter(null).collect(Collectors.toList());\n  dimension.getItems().clear();\n  dimension.getItems().addAll(items);\n  return this;\n}\n", "nl": "Retains only dimensions of type reporting rates and the given reporting rate metric."}
{"code": "public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){\n  MediaFormat format=new MediaFormat();\n  format.setString(KEY_MIME,mime);\n  format.setInteger(KEY_SAMPLE_RATE,sampleRate);\n  format.setInteger(KEY_CHANNEL_COUNT,channelCount);\n  return format;\n}\n", "nl": "Creates a minimal audio format."}
{"code": "public boolean isManufactured(){\n  return isManufactured(false);\n}\n", "nl": "By default, a part is manufactured if it has child nodes and it has NO SupplierProducts defined"}
{"code": "public static String factoryLinkByType(String type){\n  if (null == type) {\n    return null;\n  }\n  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());\n  if (list.isEmpty()) {\n    return null;\n  }\n  return list.get(0).descriptionFactoryLink;\n}\n", "nl": "Retrieve factory link for a Component by component's description link."}
{"code": "public static <T>IStoredList<T> createConcurrentList(boolean segmented){\n  return createConcurrentList(segmented,false);\n}\n", "nl": "Creates a segmented stored list - used for highly concurrent lists."}
{"code": "private ValueEncoderMeta deserializeEncoderMeta(byte[] encoderMeta){\n  ByteArrayInputStream aos=null;\n  ObjectInputStream objStream=null;\n  ValueEncoderMeta meta=null;\n  try {\n    aos=new ByteArrayInputStream(encoderMeta);\n    objStream=new ObjectInputStream(aos);\n    meta=(ValueEncoderMeta)objStream.readObject();\n  }\n catch (  ClassNotFoundException e) {\n    LOGGER.error(e);\n  }\ncatch (  IOException e) {\n    CarbonUtil.closeStreams(objStream);\n  }\n  return meta;\n}\n", "nl": "Below method will be used to convert the encode metadata to ValueEncoderMeta object"}
{"code": "public LogSeqNum logLogicalAbort(long txNum,LogSeqNum undoNextLSN){\n  if (enableLogging) {\n    return new LogicalAbortRecord(txNum,undoNextLSN).writeToLog();\n  }\n else   return null;\n}\n", "nl": "Writes a logical abort record into the log."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_A_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200972,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] boosted [%SkillTarget]'s mantra range by using [%SkillName]."}
{"code": "public Map<String,Object> createRenderContext(Appendable writer,Map<String,Object> currentContext,Map<String,Object> extraValues) throws IOException {\n  Map<String,Object> renderContext;\n  if (currentContext != null) {\n    throw new UnsupportedOperationException(\"Not expecting to receive current context in current implementation\");\n  }\n else   if (screenRenderer != null) {\n    MapStack<String> initContext=screenRenderer.initialContext;\n    if (initContext != null) {\n      renderContext=createRenderContextFromInitial(initContext,extraValues);\n    }\n else {\n      Debug.logError(\"macro \" + rendererLabel + \" renderer template environment initial context absent\",MacroScreenRenderer.module);\n      renderContext=new HashMap<String,Object>(extraValues);\n    }\n  }\n else {\n    Debug.logError(\"macro \" + rendererLabel + \" renderer template environment initial context populate \"+ \"could not retrieve macro screen renderer instance\",MacroScreenRenderer.module);\n    renderContext=new HashMap<String,Object>(extraValues);\n  }\n  lastRenderContext=renderContext;\n  return renderContext;\n}\n", "nl": "Creates a new context as source for data model for a new Environment, populated with given initial values, in addition to anything we deem needed. <p> FIXME?: This does not handle the real, \"current\" context. To minimize intrusive changes we currently (still) try to emulate as best as possible using an initial context. otherwise have to rewrite nearly all renderer methods (may have to...)."}
{"code": "private void drawYAxis(Graphics2D gc){\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  gc.setColor(Color.BLACK);\n  gc.drawLine(x0,y0,x0,y1 - 10);\n  drawArrowHead(gc,new Point(x0,y0),new Point(x0,y1 - 10));\n  drawYAxisTicks(gc);\n  if (getChartData().getCountsLabel() != null) {\n    String label=getChartData().getCountsLabel();\n    if (scalingType == ChartViewer.ScalingType.PERCENT)     label+=\" (%)\";\n    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();\n    int x=15;\n    int y=(y0 + y1) / 2 - labelSize.width / 2;\n    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));\n    gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));\n    drawString(gc,label,x,y,Math.PI / 2);\n  }\n}\n", "nl": "draw the y-axis"}
{"code": "public static String toString(Reader input) throws IOException {\n  StringBuilderWriter sw=new StringBuilderWriter();\n  copy(input,sw);\n  return sw.toString();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a String. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>."}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    try {\n      return new FileInputStream(entry.getCleanFile(index));\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed."}
{"code": "public Builder conditionalCopyValueTransform(String columnToReplace,String sourceColumn,Condition condition){\n  return transform(new ConditionalCopyValueTransform(columnToReplace,sourceColumn,condition));\n}\n", "nl": "Replace the value in a specified column with a new value taken from another column, if a condition is satisfied/true.<br> Note that the condition can be any generic condition, including on other column(s), different to the column that will be modified if the condition is satisfied/true.<br>"}
{"code": "public Builder lineCap(String lineCap){\n  this.lineCap=lineCap;\n  return this;\n}\n", "nl": "A string that defines <a href= \"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\"> shape </a> to be used at the end of the stroke. </br> default null"}
{"code": "public static IOFileFilter sizeRangeFileFilter(long minSizeInclusive,long maxSizeInclusive){\n  IOFileFilter minimumFilter=new SizeFileFilter(minSizeInclusive,true);\n  IOFileFilter maximumFilter=new SizeFileFilter(maxSizeInclusive + 1L,false);\n  return new AndFileFilter(minimumFilter,maximumFilter);\n}\n", "nl": "Returns a filter that accepts files whose size is &gt;= minimum size and &lt;= maximum size."}
{"code": "@Override public void notationDecl(String name,String publicId,String systemId) throws SAXException {\n  allowXMLCatalogPI=false;\n  if (dtdHandler != null) {\n    dtdHandler.notationDecl(name,publicId,systemId);\n  }\n}\n", "nl": "SAX DTDHandler API."}
{"code": "public boolean isExpanded(){\n  return expanded;\n}\n", "nl": "Gets the expanded flag."}
{"code": "public void halt(){\n  for (  WorkProcessor<?> processor : workProcessors) {\n    processor.halt();\n  }\n  started.set(false);\n}\n", "nl": "Halt all workers immediately at the end of their current cycle."}
{"code": "public Matrix inverse(){\n  return solve(identity(m,m));\n}\n", "nl": "Matrix inverse or pseudoinverse"}
{"code": "public int indexOf(int offset,short value){\n  for (int i=offset; i < _pos; i++) {\n    if (_data[i] == value) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "nl": "Searches the list front to back for the index of <tt>value</tt>, starting at <tt>offset</tt>."}
{"code": "static String encode(List<String> eventIds){\n  checkArgument(!eventIds.isEmpty(),\"Empty event ID list.\");\n  if (eventIds.size() == 1) {\n    return checkValid(eventIds.get(0));\n  }\n  StringBuilder buf=new StringBuilder();\n  String prevId=null;\n  for (  String eventId : eventIds) {\n    checkValid(eventId);\n    int commonPrefixLength;\n    if (prevId == null) {\n      buf.append(eventId);\n    }\n else     if (prevId.length() == eventId.length() && (commonPrefixLength=getCommonPrefixLength(prevId,eventId)) > 0) {\n      buf.append(DELIM_SHARED_PREFIX).append(eventId.substring(commonPrefixLength));\n    }\n else {\n      buf.append(DELIM_REGULAR).append(eventId);\n    }\n    prevId=eventId;\n  }\n  return buf.toString();\n}\n", "nl": "Combine multiple EventStore event IDs into a single Databus event key.  To get the most compact encoded string, sort the event ID list before encoding it."}
{"code": "@Override public boolean checkCanSwipeBack(int dir){\n  return view.checkCanSwipeBack(dir);\n}\n", "nl": "<br> presenter."}
{"code": "@Theory public void logEntriesHaveSameOrderAsIndexes(Object[] dataPoint){\n  int index1=(int)dataPoint[0];\n  int index2=(int)dataPoint[1];\n  LogEntry first=logEntries[index1];\n  LogEntry second=logEntries[index2];\n  LOG.debug(\"testing comparator for log entries: {} and {}\",index1,index2);\n  int result=tested.compare(first,second);\n  int expected=Integer.compare(index1,index2);\n  assertThatHaveSameSignum(expected,result);\n}\n", "nl": "The assumption here is that log entries in array were created in ascending order."}
{"code": "public Builder cloneFrom(DisplayImageOptions options){\n  imageResOnLoading=options.imageResOnLoading;\n  imageResForEmptyUri=options.imageResForEmptyUri;\n  imageResOnFail=options.imageResOnFail;\n  imageOnLoading=options.imageOnLoading;\n  imageForEmptyUri=options.imageForEmptyUri;\n  imageOnFail=options.imageOnFail;\n  resetViewBeforeLoading=options.resetViewBeforeLoading;\n  cacheInMemory=options.cacheInMemory;\n  cacheOnDisk=options.cacheOnDisk;\n  imageScaleType=options.imageScaleType;\n  decodingOptions=options.decodingOptions;\n  delayBeforeLoading=options.delayBeforeLoading;\n  considerExifParams=options.considerExifParams;\n  extraForDownloader=options.extraForDownloader;\n  preProcessor=options.preProcessor;\n  postProcessor=options.postProcessor;\n  displayer=options.displayer;\n  handler=options.handler;\n  isSyncLoading=options.isSyncLoading;\n  return this;\n}\n", "nl": "Sets all options equal to incoming options"}
{"code": "public UseItemReviveResponse.Result revive() throws LoginFailedException, RemoteServerException {\n  if (!isFainted())   return UseItemReviveResponse.Result.ERROR_CANNOT_USE;\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_REVIVE).getCount() > 0)   return useRevive(ItemId.ITEM_REVIVE);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_MAX_REVIVE).getCount() > 0)   return useRevive(ItemId.ITEM_MAX_REVIVE);\n  return UseItemReviveResponse.Result.ERROR_CANNOT_USE;\n}\n", "nl": "Revive a pokemon, using various fallbacks for revive items"}
{"code": "public HttpResponseWrapper(JsonObject json){\n  this.statusCode=HttpResponseStatus.valueOf(json.getInteger(\"statusCode\"));\n  if (json.containsKey(\"body\")) {\n    this.body=Buffer.buffer(json.getString(\"body\"));\n  }\n  if (json.containsKey(\"headers\")) {\n    this.headers=MultiMap.caseInsensitiveMultiMap();\n    json.getJsonArray(\"headers\").stream().map(null).flatMap(null).forEach(null);\n  }\n}\n", "nl": "Initialise the fields of this instance from the specified JSON"}
{"code": "public void dispose(){\n  if (metadata != null)   metadata.dispose();\n  if (index != null)   index.dispose();\n}\n", "nl": "Dispose of this column entry, disposing of any allocated metadata or index instances."}
{"code": "@Nonnull public DataBuilder appendDevicePattern(@Nonnull final DevicePattern pattern){\n  Check.notNull(pattern,\"pattern\");\n  if (!devicePatterns.containsKey(pattern.getId())) {\n    devicePatterns.put(pattern.getId(),new TreeSet<DevicePattern>(DEVICE_PATTERN_COMPARATOR));\n  }\n  devicePatterns.get(pattern.getId()).add(pattern);\n  return this;\n}\n", "nl": "Appends a device pattern to the map of pattern sorted by ID."}
{"code": "public static _Fields findByName(String name){\n  return byName.get(name);\n}\n", "nl": "Find the _Fields constant that matches name, or null if its not found."}
{"code": "@Nullable @Override @CallSuper public List<String> validate(JobTrigger trigger){\n  if (trigger == Trigger.NOW) {\n    return null;\n  }\n  if (!(trigger instanceof JobTrigger.ExecutionWindowTrigger)) {\n    return getMutableSingletonList(\"Unknown trigger provided\");\n  }\n  return null;\n}\n", "nl": "Attempts to validate the provided Trigger. If valid, null is returned. Otherwise a list of errors will be returned. <p/> Note that a Trigger that passes validation here is not necessarily valid in all permutations of a JobParameters. For example, an Immediate is never valid for a recurring job."}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set flipH=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void stop(){\n  if (!status.compareAndSet(STATUS_RUNNING,STATUS_STOPPING)) {\n    if (status.get() == STATUS_STOPPING) {\n      LOGGER.warn(\"processor is already stopping, now\");\n    }\n else {\n      LOGGER.error(\"status should be RUNNING. status=\" + status.get());\n    }\n    return;\n  }\n  try {\n    binlogReceiver.stop(config.binlogReceiverStopTimeout,TimeUnit.MILLISECONDS);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Failed to stop binlogReceiver.\",e);\n  }\n  LOGGER.info(\"try to shutdown threadPool\");\n  threadPool.shutdownNow();\n  try {\n    threadPool.awaitTermination(config.threadPoolTerminationTimeout,TimeUnit.MILLISECONDS);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Failed to await thread pool termination.\",e);\n  }\n  status.set(STATUS_STOPPED);\n  logRemainedBinlogFileStatCounter();\n  getHandler().afterStop();\n  waitStopLatch.countDown();\n}\n", "nl": "this method doesn't guarantee graceful stop"}
{"code": "@Override protected final boolean writeData(ByteBuffer data){\nsynchronized (guard) {\n    GsServerPacket packet=sendMsgQueue.pollFirst();\n    if (packet == null) {\n      return false;\n    }\n    packet.write(this,data);\n    return true;\n  }\n}\n", "nl": "This method will be called by Dispatcher, and will be repeated till return false."}
{"code": "public ParserException(String message){\n  this(message,null);\n  return;\n}\n", "nl": "Creates a ParserException with the specified detail message."}
{"code": "public EntityQuery from(String entityName){\n  this.entityName=entityName;\n  this.dynamicViewEntity=null;\n  return this;\n}\n", "nl": "Set the entity to query against"}
{"code": "private final SortedMap identifyCandidateDelimiters(String sStr,int iNGramSize){\n  String sSubStr=null;\n  Integer[] iRes=null;\n  ArrayList alRes=new ArrayList();\n  TreeMap tmRes=new TreeMap();\n  for (int iCnt=0; iCnt <= sStr.length() - iNGramSize; iCnt++) {\n    if (iCnt + iNGramSize > sStr.length())     continue;\n    sSubStr=sStr.substring(iCnt,iCnt + iNGramSize);\n    if (tmRes.containsValue(sSubStr))     continue;\n    Vertex vStrNode=clLocator.locateVertexInGraph(sgOverallGraph,new VertexImpl(sSubStr));\n    if (vStrNode == null)     continue;\n    double dEntropy=getEntropyOfNextChar(sSubStr,false);\n    tmRes.put(dEntropy,sSubStr);\n  }\n  return tmRes;\n}\n", "nl": "Returns a sorted map of candidate delimiters for a given string and a given n-gram size."}
{"code": "private List<String> prepareYColumn(Double yValue,int yMaxLines,int y0){\n  Double yPosDotU=Math.abs(yValue / this.scorePerDot);\n  if ((int)Math.rint(yPosDotU) == 0) {\n    ArrayList<String> strDepth=new ArrayList<String>();\n    for (int j=0; j < yMaxLines; j++) {\n      strDepth.add(strForFill);\n    }\n    if (yValue.isNaN()) {\n      strDepth.set(y0,this.strForNaN);\n    }\n else     if (y0 < yMaxLines - 1 || yMaxLines == 1) {\n      strDepth.set(y0,this.strForZero);\n    }\n else {\n      strDepth.set(y0,this.strForZeroTop);\n    }\n    return strDepth;\n  }\n else   if (yValue < 0) {\n    return pileForNegative(yValue,yMaxLines,y0);\n  }\n else   if (yValue > 0) {\n    return pileForPositive(yValue,yMaxLines,y0);\n  }\n else {\n    throw new RuntimeException(\"Unexpected exception\");\n  }\n}\n", "nl": "Prepare a list of strings representing vertical bar. Bar height is yValue, rescaled to fit a y span of  yMaxLines of text."}
{"code": "@Override public void run(){\n  while (!keyList.isEmpty()) {\n    Object key=keyList.pollFirst();\n    cache.putQuiet(new Element(key,preloadBuffer.get(key)));\n    cache.putQuiet(new Element(key,preloadBuffer.get(key)));\n  }\n}\n", "nl": "Loads the list of objects into the cache (single threaded here). Uses <code>getWithLoader()</code> Ehcache method rather than <code>load()</code> method since the latter starts a new thread."}
{"code": "public void draw(GL10 gl){\n  GLES10.glClear(GLES10.GL_COLOR_BUFFER_BIT | GLES10.GL_DEPTH_BUFFER_BIT);\n}\n", "nl": "Should be overridden in subclasses and used to perform rendering."}
{"code": "public void testFloatField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n", "nl": "float field should always assigned 1.0"}
{"code": "public CMMModel train(List<String> taggedSentences,String modelFileName,CMMParams params){\n  DataFrame dataset=createDataFrame(taggedSentences);\n  return train(dataset,modelFileName,params);\n}\n", "nl": "Trains a tagger. Training data are tagged sequences stored in an input file of a simple format, each sequence in a line. After training, the tagger is saved to a file. The parameters used in training is given in  an argument."}
{"code": "@RequestMapping(value=\"/{id}\",method=GET,produces=APPLICATION_JSON_VALUE) public ResponseEntity<AuthorDTO> findById(@PathVariable Integer id) throws URISyntaxException {\n  log.debug(\"Find by id Author : {}\",id);\n  return Optional.ofNullable(authorDTOService.findOne(id)).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));\n}\n", "nl": "Find by id Author."}
{"code": "public static boolean updateGradleDistributionUrl(@NotNull Project project,@NotNull File propertiesFile,@NotNull String gradleVersion){\n  try {\n    boolean updated=updateGradleDistributionUrl(gradleVersion,propertiesFile);\n    if (updated) {\n      VirtualFile virtualFile=findFileByIoFile(propertiesFile,true);\n      if (virtualFile != null) {\n        virtualFile.refresh(false,false);\n      }\n      return true;\n    }\n  }\n catch (  IOException e) {\n    String msg=String.format(\"Unable to update Gradle wrapper to use Gradle %1$s\\n\",gradleVersion);\n    msg+=e.getMessage();\n    Messages.showErrorDialog(project,msg,\"Unexpected Error\");\n  }\n  return false;\n}\n", "nl": "Updates the 'distributionUrl' in the given Gradle wrapper properties file. An unexpected errors that occur while updating the file will be displayed in an error dialog."}
{"code": "public static void checkState(boolean expression){\n  if (!expression) {\n    throw new IllegalStateException();\n  }\n}\n", "nl": "Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method."}
{"code": "public boolean isLoaded(){\n  return loaded;\n}\n", "nl": "Determines if this lexicon is loaded."}
{"code": "public GeoServerLayerNode(FileSystemInterface handler,GeoServerLayer layer){\n  super(layer.getLayerName());\n  this.layer=layer;\n  this.handler=handler;\n}\n", "nl": "Instantiates a new geo server layer node."}
{"code": "public SyntaxView(Element element,Configuration config,String prefix){\n  super(element);\n  singleColorSelect=config.getPrefixBoolean(prefix,PROPERTY_SINGLE_COLOR_SELECT,false);\n  rightMarginColor=new Color(config.getPrefixInteger(prefix,PROPERTY_RIGHT_MARGIN_COLOR,0xFF7777));\n  rightMarginColumn=config.getPrefixInteger(prefix,PROPERTY_RIGHT_MARGIN_COLUMN,0);\n  String textaa=config.getPrefixProperty(prefix,PROPERTY_TEXTAA,\"DEFAULT\");\n  textAAHint=TEXT_AA_HINT_NAMES.get(textaa);\n}\n", "nl": "Construct a new view using the given configuration and prefix given"}
{"code": "protected void validateNamespaceOwnership(String property,String cluster,String namespace,boolean authoritative,boolean readOnly){\n  NamespaceName fqnn=new NamespaceName(property,cluster,namespace);\n  try {\n    validateFullNamespaceOwnership(fqnn,authoritative,readOnly);\n  }\n catch (  WebApplicationException wae) {\n    throw wae;\n  }\ncatch (  Exception e) {\n    throw new WebApplicationException(e);\n  }\n}\n", "nl": "Checks whether the broker is the owner of the namespace. Otherwise, if authoritative is false it will throw an exception to redirect to assigned owner or leader; if authoritative is true then it will try to acquire the namespace"}
{"code": "public void asinh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){\n  double[] function=new double[1 + order];\n  final double x=operand[operandOffset];\n  function[0]=FastMath.asinh(x);\n  if (order > 0) {\n    final double[] p=new double[order];\n    p[0]=1;\n    final double x2=x * x;\n    final double f=1.0 / (1 + x2);\n    double coeff=FastMath.sqrt(f);\n    function[1]=coeff * p[0];\n    for (int n=2; n <= order; ++n) {\n      double v=0;\n      p[n - 1]=(1 - n) * p[n - 2];\n      for (int k=n - 1; k >= 0; k-=2) {\n        v=v * x2 + p[k];\n        if (k > 2) {\n          p[k - 2]=(k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];\n        }\n else         if (k == 2) {\n          p[0]=p[1];\n        }\n      }\n      if ((n & 0x1) == 0) {\n        v*=x;\n      }\n      coeff*=f;\n      function[n]=coeff * v;\n    }\n  }\n  compose(operand,operandOffset,function,result,resultOffset);\n}\n", "nl": "Compute inverse hyperbolic sine of a derivative structure."}
{"code": "public static void resetPlugins(){\n  getInstance().reset();\n}\n", "nl": "This method is used to forward the call to the protected reset() method We create this class in the same package rx.plugins so we can access the protected method"}
{"code": "public Response(boolean requiredencode){\n  this();\n  requiredEncode=requiredencode;\n}\n", "nl": "Instantiates a new response."}
{"code": "public void checkSymbolIsValid(){\n  boolean valid=false;\n  Expression expression=getExpression();\n  if (expression != null) {\n    valid=!expression.toString().isEmpty();\n  }\n  SelectedSymbol.getInstance().setValidSymbol(VALIDITY_KEY,valid);\n}\n", "nl": "Check symbol is valid."}
{"code": "public void monitorsUpdated(VmEvent event){\n  assert event.getMonitoredVm().equals(monitoredVm);\n  try {\n    if (monitoredHost.activeVms().contains(pid)) {\n      List<JvmstatListener> listenersCopy;\nsynchronized (listeners) {\n        listenersCopy=new ArrayList(listeners);\n      }\n      for (      JvmstatListener listener : listenersCopy) {\n        listener.dataChanged(this);\n      }\n    }\n else {\n      disableListeners();\n      monitoredVm.detach();\n    }\n  }\n catch (  MonitorException ex) {\n    ErrorManager.getDefault().notify(ErrorManager.WARNING,ex);\n    disableListeners();\n    monitoredVm.detach();\n  }\n}\n", "nl": "Invoked when instrumentation objects are updated. This event is generated at a fixed interval as determined by the polling rate of the MonitoredVm that the VmListener is registered with."}
{"code": "public ExpressionPanelv2(List<VersionData> vendorOptionList){\n  super(Controller.getInstance().getFrame(),\"\",true);\n  this.setResizable(false);\n  this.vendorOptionList=vendorOptionList;\n  setPreferredSize(new Dimension(800,450));\n  createUI();\n  DataSourceInterface dataSource=DataSourceFactory.getDataSource();\n  if (dataSource != null) {\n    dataSource.addListener(this);\n  }\n  this.pack();\n  Controller.getInstance().centreDialog(this);\n}\n", "nl": "Instantiates a new expression panel."}
{"code": "private static boolean hasNonEmptyGrid(List<Grid> grids){\n  if (grids != null && grids.size() > 0) {\n    for (    Grid grid : grids) {\n      if (isNonEmptyGrid(grid)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether the given list of grids have at least one grid which is not null and has more than zero visible columns."}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public Zmat qb(Zmat B) throws JampackException {\n  if (B.ncol != ncol) {\n    throw new JampackException(\"Inconsistent dimensions.\");\n  }\n  Zmat C=new Zmat(B);\n  for (int k=ntran - 1; k >= 0; k--) {\n    House.ua(U[k],C,C.bx + k,C.rx,C.bx,C.cx);\n  }\n  return C;\n}\n", "nl": "Computes the product QB.  Throws JampackException for inconsistent dimenstions."}
{"code": "public int geom_encoding(){\n  String s=soot.PhaseOptions.getString(options,\"geom-encoding\");\n  if (s.equalsIgnoreCase(\"Geom\"))   return geom_encoding_Geom;\n  if (s.equalsIgnoreCase(\"HeapIns\"))   return geom_encoding_HeapIns;\n  if (s.equalsIgnoreCase(\"PtIns\"))   return geom_encoding_PtIns;\n  throw new RuntimeException(\"Invalid value \" + s + \" of phase option geom-encoding\");\n}\n", "nl": "Encoding methodology used -- Encoding methodology. This switch specifies the encoding methodology used  in the analysis. \t\t\t\t\t\t All possible options are: Geom,  HeapIns, PtIns. The efficiency order \t\t\t\t\t\t is (from slow to  fast) Geom - HeapIns - PtIns, but the precision order is \t\t\t\t\t\t  the reverse. \t\t\t\t\t\t"}
{"code": "public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){\n  if (reference == null) {\n    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null."}
{"code": "public VideoGetAlbumsQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of video albums to return."}
{"code": "public GeoServerReadProgress(FileSystemInterface handler,GeoServerParseCompleteInterface parseComplete){\n  this.handler=handler;\n  this.parseComplete=parseComplete;\n}\n", "nl": "Instantiates a new geo server read progress."}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "@Override public void destroy() throws Exception {\n  if (this.cacheManager != null) {\n    this.cacheManager.stop();\n  }\n}\n", "nl": "Shuts down the <code>SpringEmbeddedCacheManager</code> instance created by this <code>FactoryBean</code>."}
{"code": "public void testDeployZipFile(){\n  InputStream inputStream=this.getClass().getClassLoader().getResourceAsStream(\"org/activiti/engine/test/api/repository/test-processes.zip\");\n  assertNotNull(inputStream);\n  ZipInputStream zipInputStream=new ZipInputStream(inputStream);\n  assertNotNull(zipInputStream);\n  repositoryService.createDeployment().addZipInputStream(zipInputStream).deploy();\n  assertEquals(6,repositoryService.createProcessDefinitionQuery().count());\n  for (  org.activiti.engine.repository.Deployment deployment : repositoryService.createDeploymentQuery().list()) {\n    repositoryService.deleteDeployment(deployment.getId(),true);\n  }\n}\n", "nl": "This test was added due to issues with unzip of JDK 7, where the default is changed to UTF8 instead of the platform encoding (which is, in fact, good). However, some platforms do not create UTF8-compatible ZIP files. The tested zip file is created on OS X (non-UTF-8). See https://blogs.oracle.com/xuemingshen/entry/non_utf_8_encoding_in"}
{"code": "public float readFloat() throws JMSException {\n  initializeReading();\n  try {\n    if (this.dataIn.available() == 0) {\n      throw new MessageEOFException(\"reached end of data\");\n    }\n    this.dataIn.mark(33);\n    int type=this.dataIn.read();\n    if (type == _FLOAT) {\n      return this.dataIn.readFloat();\n    }\n    if (type == _STRING) {\n      return Float.valueOf(this.dataIn.readUTF()).floatValue();\n    }\n    if (type == _NULL) {\n      this.dataIn.reset();\n      throw new NullPointerException(\"Cannot convert _NULL value to float.\");\n    }\n else {\n      this.dataIn.reset();\n      throw new MessageFormatException(\" not a float type\");\n    }\n  }\n catch (  NumberFormatException mfe) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException ioe) {\n      JMSException jmsEx=new JMSException(\"reset failed\");\n      jmsEx.setLinkedException(ioe);\n    }\n    throw mfe;\n  }\ncatch (  EOFException e) {\n    JMSException jmsEx=new MessageEOFException(e.toString());\n    jmsEx.setLinkedException(e);\n    throw jmsEx;\n  }\ncatch (  IOException e) {\n    JMSException jmsEx=new MessageFormatException(e.toString());\n    jmsEx.setLinkedException(e);\n    throw jmsEx;\n  }\n}\n", "nl": "Reads a <code>float</code> from the stream message."}
{"code": "private String doPrefix(String uri,String qName,boolean isElement){\n  String defaultNS=nsSupport.getURI(\"\");\n  if (\"\".equals(uri)) {\n    if (isElement && defaultNS != null)     nsSupport.declarePrefix(\"\",\"\");\n    return null;\n  }\n  String prefix;\n  if (isElement && defaultNS != null && uri.equals(defaultNS)) {\n    prefix=\"\";\n  }\n else {\n    prefix=nsSupport.getPrefix(uri);\n  }\n  if (prefix != null) {\n    return prefix;\n  }\n  prefix=(String)doneDeclTable.get(uri);\n  if (prefix != null && ((!isElement || defaultNS != null) && \"\".equals(prefix) || nsSupport.getURI(prefix) != null)) {\n    prefix=null;\n  }\n  if (prefix == null) {\n    prefix=(String)prefixTable.get(uri);\n    if (prefix != null && ((!isElement || defaultNS != null) && \"\".equals(prefix) || nsSupport.getURI(prefix) != null)) {\n      prefix=null;\n    }\n  }\n  if (prefix == null && qName != null && !\"\".equals(qName)) {\n    int i=qName.indexOf(':');\n    if (i == -1) {\n      if (isElement && defaultNS == null) {\n        prefix=\"\";\n      }\n    }\n else {\n      prefix=qName.substring(0,i);\n    }\n  }\n  for (; prefix == null || nsSupport.getURI(prefix) != null; prefix=\"__NS\" + ++prefixCounter)   ;\n  nsSupport.declarePrefix(prefix,uri);\n  doneDeclTable.put(uri,prefix);\n  return prefix;\n}\n", "nl": "Determine the prefix for an element or attribute name. <p>"}
{"code": "@Override public boolean isAcceptable(JsonPath jsonPath,String requestType){\n  return jsonPath.isCollection() && jsonPath instanceof ResourcePath && HttpMethod.GET.name().equals(requestType);\n}\n", "nl": "Check if it is a GET request for a collection of resources."}
{"code": "private String pickCharset(){\n  if (charset != null) {\n    return charset;\n  }\n else   if (utf8Supported) {\n    return \"UTF-8\";\n  }\n else {\n    return System.getProperty(\"file.encoding\");\n  }\n}\n", "nl": "Returns the name of the charset that should be used in textual transmissions."}
{"code": "public static DataTagCacheObject createTestDataTag3(){\n  DataTagCacheObject cacheObject=new DataTagCacheObject();\n  cacheObject.setId(new Long(100003));\n  cacheObject.setName(\"Junit_test_datatag3\");\n  cacheObject.setDescription(\"test description\");\n  cacheObject.setMode(DataTagConstants.MODE_TEST);\n  cacheObject.setDataType(\"String\");\n  cacheObject.setLogged(false);\n  cacheObject.setUnit(\"test unit\");\n  cacheObject.setDipAddress(\"testDIPaddress\");\n  cacheObject.setJapcAddress(\"testJAPCaddress\");\n  cacheObject.setValue(\"DOWN\");\n  cacheObject.setValueDescription(\"test value description\");\n  cacheObject.setSimulated(false);\n  cacheObject.setEquipmentId(new Long(100));\n  cacheObject.setMinValue(new Float(23.3));\n  cacheObject.setMaxValue(new Float(12.2));\n  cacheObject.setValueDictionary(new DataTagValueDictionary());\n  cacheObject.setAddress(new DataTagAddress());\n  cacheObject.setDataTagQuality(createValidQuality());\n  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));\n  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));\n  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));\n  cacheObject.getAlarmIds().add(1L);\n  cacheObject.getAlarmIds().add(3L);\n  return cacheObject;\n}\n", "nl": "Need to first insert test equipment using EquipmentMapper"}
{"code": "private void init(){\n  parseActions();\n  parseName(new StringTokenizer(getName(),\" \",true),false);\n}\n", "nl": "Parses the target name and actions, and initializes the transient fields."}
{"code": "private static int endOfTagMatch(String string,String tag){\n  return endOfTagMatch(string,0,tag);\n}\n", "nl": "matches tag to string (allowing spaces inside tag to be missing in string)"}
{"code": "public void addProperty(String property,Number value){\n  add(property,createJsonElement(value));\n}\n", "nl": "Convenience method to add a primitive member. The specified value is converted to a JsonPrimitive of Number."}
{"code": "public boolean accept(String inputString){\n  int symbol;\n  int state=transition(0,'#');\n  int leftEnd=inputString.length() - 1;\n  int start=(scanFromFront) ? 0 : leftEnd;\n  for (int i=start; 0 <= i && i <= leftEnd; ) {\n    char c=inputString.charAt(i);\n    if (c == 'n' || c == 'm') {\n      symbol='N';\n    }\n else     if (\"aeiouy\".indexOf(c) != -1) {\n      symbol='V';\n    }\n else {\n      symbol=c;\n    }\n    state=transition(state,symbol);\n    if (state == -1) {\n      return false;\n    }\n else     if (symbol == 'V') {\n      return true;\n    }\n    if (scanFromFront) {\n      i++;\n    }\n else {\n      i--;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if this finite state machine accepts the given input string."}
{"code": "private String toHexString(long value,int digits){\n  long cutoff=1L << (digits * 4);\n  return Long.toHexString(cutoff | (value & (cutoff - 1))).substring(1);\n}\n", "nl": "Returns the specified number of the least significant digits of the hexadecimal representation of the given value, discarding more significant digits or padding with zeros as necessary. Only lowercase letters are used in the returned hexadecimal representation."}
{"code": "public static void addRequest(AbstractAI ai2,Player player,int requestId,int senderId,final AI2Request request,Object... requestParams){\n  addRequest(ai2,player,requestId,senderId,0,request,requestParams);\n}\n", "nl": "Add RequestResponseHandler to player"}
{"code": "public <T>void addEntry(Class<T> resource,RegistryEntry<? extends T> registryEntry){\n  resources.put(resource,registryEntry);\n  registryEntry.initialize(this);\n  logger.debug(\"Added resource {} to ResourceRegistry\",resource.getName());\n}\n", "nl": "Adds a new resource definition to a registry."}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static String removeLineEnds(String text){\n  return text.replaceAll(\"[\\r\\n]+\",\" \").trim();\n}\n", "nl": "Remove all line-ends like '\\r\\n' or '\\n', make sure the returned text contains only one line."}
{"code": "public SpringForce(float springCoeff,float defaultLength){\n  params=new float[]{springCoeff,defaultLength};\n  minValues=new float[]{DEFAULT_MIN_SPRING_COEFF,DEFAULT_MIN_SPRING_LENGTH};\n  maxValues=new float[]{DEFAULT_MAX_SPRING_COEFF,DEFAULT_MAX_SPRING_LENGTH};\n}\n", "nl": "Create a new SpringForce."}
{"code": "public FriendsGetRequestsQuery out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n", "nl": "true - to return outgoing requests false - to return incoming requests (default)"}
{"code": "public DistributedLogClientBuilder requestTimeoutMs(int timeoutMs){\n  DistributedLogClientBuilder newBuilder=newBuilder(this);\n  newBuilder._clientConfig.setRequestTimeoutMs(timeoutMs);\n  return newBuilder;\n}\n", "nl": "Timeout per request in millis."}
{"code": "public static String specificationVersion(){\n  return specificationVersion;\n}\n", "nl": "Specification version"}
{"code": "public void writeBoolean(boolean value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.write(_BOOLEAN);\n    this.dataOut.writeBoolean(value);\n  }\n catch (  IOException ioe) {\n    raise(ioe);\n  }\n}\n", "nl": "Writes a <code>boolean</code> to the stream message. The value <code>true</code> is written as the value <code>(byte)1</code>; the value <code>false</code> is written as the value <code>(byte)0</code>."}
{"code": "public boolean fileExists(){\n  return mId != -1;\n}\n", "nl": "Can be used to check, whether or not this file exists in the database already"}
{"code": "public void requestPreviewFrame(Handler handler,int message){\n  if (camera != null && previewing) {\n    previewCallback.setHandler(handler,message);\n    if (useOneShotPreviewCallback) {\n      camera.setOneShotPreviewCallback(previewCallback);\n    }\n else {\n      camera.setPreviewCallback(previewCallback);\n    }\n  }\n}\n", "nl": "A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively."}
{"code": "public TopicSubscriber createDurableSubscriber(Topic topic,String name) throws JMSException {\n  ensureOpen();\n  throw new JMSException(\"This version of JMS does not support durable subscribers.\");\n}\n", "nl": "Currently not supported."}
{"code": "public FriendsGetQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname."}
{"code": "public void toggleSelection(final int location){\n  this.selectItem(location,!this.selectedItems.get(location));\n}\n", "nl": "Toggle selection of item."}
{"code": "public HttpClient(URL url){\n  this.url=url.toExternalForm();\n}\n", "nl": "Creates a new HttpClient object."}
{"code": "public static void textRight(double x,double y,String text){\n  if (text == null)   throw new NullPointerException();\n  offscreen.setFont(font);\n  FontMetrics metrics=offscreen.getFontMetrics();\n  double xs=scaleX(x);\n  double ys=scaleY(y);\n  int ws=metrics.stringWidth(text);\n  int hs=metrics.getDescent();\n  offscreen.drawString(text,(float)(xs - ws),(float)(ys + hs));\n  draw();\n}\n", "nl": "Write the given text string in the current font, right-aligned at (<em>x</em>, <em>y</em>)."}
{"code": "static public Properties findCustomPropertiesObj(String schemaPropertiesFileName) throws IOException, ConfigurationException {\n  InputStream schemaInputStream=null;\n  String schemaPropertiesPath=null;\n  boolean downloadingPropsFromHTTP=schemaPropertiesFileName.startsWith(\"http:\");\n  if (downloadingPropsFromHTTP) {\n    try {\n      URL theUrl=new URL(schemaPropertiesFileName);\n      URLConnection con=theUrl.openConnection();\n      schemaInputStream=con.getInputStream();\n      schemaPropertiesPath=schemaPropertiesFileName;\n    }\n catch (    Exception e) {\n      throw new ConfigurationException(\"Failed to download properties file from '\" + schemaPropertiesFileName + \"' cause: \"+ e.getClass().getName()+ \" message: \"+ e.getMessage(),e);\n    }\n  }\n else {\n    schemaPropertiesPath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + schemaPropertiesFileName+ \".properties\";\n    schemaInputStream=getResourceStream(schemaPropertiesPath);\n  }\n  Properties schemaProperties=null;\n  if (schemaInputStream != null) {\n    if (_logger.isLoggable(Level.INFO)) {\n      _logger.info(\"Loading properties file from: \" + (downloadingPropsFromHTTP ? schemaPropertiesFileName : getResourceURL(schemaPropertiesPath).toString()));\n    }\n    schemaProperties=new Properties();\n    schemaProperties.load(schemaInputStream);\n    schemaInputStream.close();\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"custom properties file values: \");\n      schemaProperties.list(System.out);\n    }\n  }\n else {\n    throw new ConfigurationException(\"Failed to load properties file: \" + schemaPropertiesPath);\n  }\n  return schemaProperties;\n}\n", "nl": "Used to load xxx.properties file, parse it and create a Properties object out of it. The system looks for the file using the Resource Bundle in the /config directory."}
{"code": "public Optional<Number> min(){\n  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);\n  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();\n  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());\n  allSubtypes.addAll(subtypes);\n  allSubtypes.addAll(statisticsResourceTypes);\n  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();\n  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new MinMapReduce(statisticsResourceTypes,dataType));\n  Map<String,Number> min=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);\n  return Optional.of(min.get(MinMapReduce.MEMORY_KEY));\n}\n", "nl": "Minimum value of the selected resource-type."}
{"code": "private boolean checkBlockDrifting(int x,int y,int z){\n  for (int height=y - 1; height <= y + 1; height++) {\n    IBlockState blockState=worldObj.getBlockState(new BlockPos(x,height,z));\n    if (blockState.getBlock() == Blocks.FLOWING_WATER || blockState.getBlock() == Blocks.WATER) {\n      int meta=blockState.getBlock().getMetaFromState(blockState);\n      if (meta >= 8)       return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check the non visible current between two water blocks."}
{"code": "public static double random(){\n  return uniform();\n}\n", "nl": "Returns a random real number uniformly in [0, 1)."}
{"code": "@SuppressWarnings(\"unchecked\") public Configuration(Configuration other){\n  this.resources=(ArrayList)other.resources.clone();\nsynchronized (other) {\n    if (other.properties != null) {\n      this.properties=(Properties)other.properties.clone();\n    }\n    if (other.overlay != null) {\n      this.overlay=(Properties)other.overlay.clone();\n    }\n  }\n  this.finalParameters=new HashSet<>(other.finalParameters);\nsynchronized (Configuration.class) {\n    REGISTRY.put(this,null);\n  }\n}\n", "nl": "A new configuration with the same settings cloned from another."}
{"code": "public boolean isUnloadDisabledInLoadShedding(){\n  if (!pulsar.getConfiguration().isLoadBalancerEnabled()) {\n    return true;\n  }\n  boolean unloadDisabledInLoadShedding=false;\n  try {\n    unloadDisabledInLoadShedding=pulsar.getGlobalZkCache().exists(AdminResource.LOAD_SHEDDING_UNLOAD_DISABLED_FLAG_PATH);\n  }\n catch (  Exception e) {\n    log.warn(\"Unable to fetch contents of [{}] from global zookeeper\",AdminResource.LOAD_SHEDDING_UNLOAD_DISABLED_FLAG_PATH,e);\n  }\n  return unloadDisabledInLoadShedding;\n}\n", "nl": "If load balancing is enabled, load shedding is enabled by default unless forced off by setting a flag in global zk /admin/flags/load-shedding-unload-disabled"}
{"code": "private static int hash(Object[] elements){\n  int h=0;\n  for (int i=elements.length; --i >= 0; ) {\n    h+=elements[i].hashCode();\n  }\n  return h;\n}\n", "nl": "Returns the sum of the hash codes of all elements of the given array."}
{"code": "public SimpleTextHistoDocument(){\n  Graph=new DocumentWordGraph();\n  Histogram=new DocumentWordHistogram();\n}\n", "nl": "Creates a new instance of SimpleTextHistoDocument"}
{"code": "public final TestSubscriber<T> configureValuesStorage(boolean enabled){\n  this.valuesStorage=enabled;\n  return this;\n}\n", "nl": "Enable or disabled the values storage. It is enabled by default, and can be disable in order to be able to perform performance benchmarks or tests with a huge amount values."}
{"code": "public int propagator(){\n  String s=soot.PhaseOptions.getString(options,\"propagator\");\n  if (s.equalsIgnoreCase(\"auto\"))   return propagator_auto;\n  if (s.equalsIgnoreCase(\"iter\"))   return propagator_iter;\n  if (s.equalsIgnoreCase(\"worklist\"))   return propagator_worklist;\n  if (s.equalsIgnoreCase(\"alias\"))   return propagator_alias;\n  if (s.equalsIgnoreCase(\"bdd\"))   return propagator_bdd;\n  if (s.equalsIgnoreCase(\"incbdd\"))   return propagator_incbdd;\n  throw new RuntimeException(\"Invalid value \" + s + \" of phase option propagator\");\n}\n", "nl": "Propagator -- Select propagation algorithm. This option tells Paddle which propagation algorithm to use."}
{"code": "public void linearCombination(final double a1,final double[] c1,final int offset1,final double a2,final double[] c2,final int offset2,final double[] result,final int resultOffset){\n  for (int i=0; i < getSize(); ++i) {\n    result[resultOffset + i]=MathArrays.linearCombination(a1,c1[offset1 + i],a2,c2[offset2 + i]);\n  }\n}\n", "nl": "Compute linear combination. The derivative structure built will be a1 * ds1 + a2 * ds2"}
{"code": "private void applySpeechRateSpecifications(NodeList nl,Element prosodyElement){\n  String rateAttribute=null;\n  if (!prosodyElement.hasAttribute(\"rate\")) {\n    return;\n  }\n  rateAttribute=prosodyElement.getAttribute(\"rate\");\n  Pattern p=Pattern.compile(\"[+|-]\\\\d+%\");\n  Matcher m=p.matcher(rateAttribute);\n  if (m.find()) {\n    double percentage=new Integer(rateAttribute.substring(1,rateAttribute.length() - 1)).doubleValue();\n    if (rateAttribute.startsWith(\"+\")) {\n      setSpeechRateSpecifications(nl,percentage,-1.0);\n    }\n else {\n      setSpeechRateSpecifications(nl,percentage,+1.0);\n    }\n  }\n}\n", "nl": "Apply 'rate' requirements to ACOUSTPARAMS"}
{"code": "public static int needInteger(String property) throws NoSuchPropertyException {\n  String value=getProperty(property);\n  if (value == null) {\n    throw new NoSuchPropertyException(\"Missing property `\" + property + \"' in configuration files\");\n  }\n  try {\n    return Integer.decode(value).intValue();\n  }\n catch (  NumberFormatException e) {\n    throw new NoSuchPropertyException(\"Integer property `\" + property + \"' in configuration files has wrong value `\"+ value+ \"'\");\n  }\n}\n", "nl": "Get an integer property from the underlying properties, throwing an exception if it is not defined."}
{"code": "public Response<?> response(){\n  return response;\n}\n", "nl": "The full HTTP response. This may be null if the exception was serialized."}
{"code": "public void updateResize(NlComponent child,Rectangle newBounds,int modifierMask){\n  mySnap=(modifierMask & InputEvent.SHIFT_MASK) == 0;\n  myBounds=newBounds;\n  clearSuggestions();\n  @SuppressWarnings(\"UnnecessaryLocalVariable\") Rectangle b=newBounds;\n  Segment hEdge=null;\n  Segment vEdge=null;\n  String childId=child.getId();\n  if (myHorizontalEdgeType == SegmentType.TOP) {\n    hEdge=new Segment(b.y,b.x,x2(b),child,childId,myHorizontalEdgeType,NO_MARGIN);\n  }\n else   if (myHorizontalEdgeType == SegmentType.BOTTOM) {\n    hEdge=new Segment(y2(b),b.x,x2(b),child,childId,myHorizontalEdgeType,NO_MARGIN);\n  }\n else {\n    assert myHorizontalEdgeType == null;\n  }\n  if (myVerticalEdgeType != null && myTextDirection.isLeftSegment(myVerticalEdgeType)) {\n    vEdge=new Segment(b.x,b.y,y2(b),child,childId,myVerticalEdgeType,NO_MARGIN);\n  }\n else   if (myVerticalEdgeType != null && myTextDirection.isRightSegment(myVerticalEdgeType)) {\n    vEdge=new Segment(x2(b),b.y,y2(b),child,childId,myVerticalEdgeType,NO_MARGIN);\n  }\n else {\n    assert myVerticalEdgeType == null;\n  }\n  myTopMargin=myBottomMargin=myLeftMargin=myRightMargin=0;\n  if (hEdge != null && myHorizontalEdges.size() > 0) {\n    myHorizontalSuggestions=findClosest(hEdge,myHorizontalEdges);\n    Match match=pickBestMatch(myHorizontalSuggestions);\n    if (match != null && (!mySnap || abs(match.delta) < MAX_MATCH_DISTANCE)) {\n      if (myHorizontalDeps.contains(match.edge.component)) {\n        match.cycle=true;\n      }\n      snapHorizontal(hEdge,match.edge.at,newBounds);\n      if (hEdge.edgeType == SegmentType.TOP) {\n        myCurrentTopMatch=match;\n      }\n else       if (hEdge.edgeType == SegmentType.BOTTOM) {\n        myCurrentBottomMatch=match;\n      }\n else {\n        assert hEdge.edgeType == SegmentType.CENTER_HORIZONTAL || hEdge.edgeType == SegmentType.BASELINE : hEdge;\n        myCurrentTopMatch=match;\n      }\n    }\n  }\n  if (vEdge != null && myVerticalEdges.size() > 0) {\n    myVerticalSuggestions=findClosest(vEdge,myVerticalEdges);\n    Match match=pickBestMatch(myVerticalSuggestions);\n    if (match != null && (!mySnap || abs(match.delta) < MAX_MATCH_DISTANCE)) {\n      if (myVerticalDeps.contains(match.edge.component)) {\n        match.cycle=true;\n      }\n      snapVertical(vEdge,match.edge.at,newBounds);\n      if (myTextDirection.isLeftSegment(vEdge.edgeType)) {\n        myCurrentLeftMatch=match;\n      }\n else       if (myTextDirection.isRightSegment(vEdge.edgeType)) {\n        myCurrentRightMatch=match;\n      }\n else {\n        assert vEdge.edgeType == SegmentType.CENTER_VERTICAL;\n        myCurrentLeftMatch=match;\n      }\n    }\n  }\n  checkCycles();\n}\n", "nl": "Updates the handler for the given mouse resize"}
{"code": "public boolean isApplicable(){\n  return getViewer().getSelectedComponent() == getViewer().getPcoaTab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public OpenIntToFieldHashMap(final Field<T> field,final T missingEntries){\n  this(field,DEFAULT_EXPECTED_SIZE,missingEntries);\n}\n", "nl": "Build an empty map with default size"}
{"code": "<T>T onSum(String tableName,String column,String[] conditions,Class<T> type){\n  return mathQuery(tableName,new String[]{\"sum(\" + column + \")\"},conditions,type);\n}\n", "nl": "The open interface for other classes in CRUD package to calculate the sum of values on a given column."}
{"code": "public void deleteItem(String sItem){\n  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {\n    UniqueVertexGraph gCurLevel=getGraphLevelByNGramSize(iNGramSize);\n    Vertex v=utils.locateVertexInGraph(gCurLevel,sItem);\n    if (v == null)     return;\n    try {\n      gCurLevel.remove(v);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Removes an item (node) from all graphs."}
{"code": "public StdoutReporter(){\n  this.stream=System.out;\n}\n", "nl": "Constructs StdoutReporter. Sets the stream to System.out."}
{"code": "public Builder requestTimeoutMs(long requestTimeoutMs){\n  this._requestTimeoutMs=requestTimeoutMs;\n  return this;\n}\n", "nl": "Set request timeout in milliseconds."}
{"code": "public void addComplexTypeDecl(XSComplexTypeDecl decl,SimpleLocator locator){\n  if (fCTCount == fComplexTypeDecls.length) {\n    fComplexTypeDecls=resize(fComplexTypeDecls,fCTCount + INC_SIZE);\n    fCTLocators=resize(fCTLocators,fCTCount + INC_SIZE);\n  }\n  fCTLocators[fCTCount]=locator;\n  fComplexTypeDecls[fCTCount++]=decl;\n}\n", "nl": "add one complex type decl: for later constraint checking"}
{"code": "public static FixedWidthTextTableSchema load(String loc) throws DataIOException {\n  try {\n    InputStream is=IOLib.streamFromString(loc);\n    if (is == null)     return null;\n    FixedWidthTextTableSchema fws=new FixedWidthTextTableSchema();\n    BufferedReader br=new BufferedReader(new InputStreamReader(is));\n    String line;\n    while ((line=br.readLine()) != null) {\n      String[] tok=line.split(\"\\t\");\n      fws.addColumn(tok[0],Integer.parseInt(tok[1]));\n    }\n    return fws;\n  }\n catch (  Exception e) {\n    throw new DataIOException(e);\n  }\n}\n", "nl": "Loads a schema description from the given location."}
{"code": "public static String toPercentString(Number number,int scale,int roundingMode){\n  if (!(number instanceof BigDecimal)) {\n    number=new BigDecimal(number.doubleValue());\n  }\n  BigDecimal bd=(BigDecimal)number;\n  bd=bd.multiply(new BigDecimal(100.0)).setScale(scale,roundingMode);\n  return (bd.toString() + \"%\");\n}\n", "nl": "Method to turn a number such as \"0.9853\" into a nicely formatted percent, \"98.53%\"."}
{"code": "public ScanResult scanPokemon(Bitmap pokemonImage,int trainerLevel){\n  double estimatedPokemonLevel=getPokemonLevelFromImg(pokemonImage,trainerLevel);\n  String pokemonName=getPokemonNameFromImg(pokemonImage);\n  String candyName=getCandyNameFromImg(pokemonImage);\n  Optional<Integer> pokemonHP=getPokemonHPFromImg(pokemonImage);\n  Optional<Integer> pokemonCP=getPokemonCPFromImg(pokemonImage);\n  Optional<Integer> pokemonCandyAmount=getCandyAmountFromImg(pokemonImage);\n  Optional<Integer> pokemonUpgradeCost=getPokemonEvolutionCostFromImg(pokemonImage);\n  return new ScanResult(estimatedPokemonLevel,pokemonName,candyName,pokemonHP,pokemonCP,pokemonCandyAmount,pokemonUpgradeCost);\n}\n", "nl": "scanPokemon Performs OCR on an image of a pokemon and returns the pulled info."}
{"code": "private FileHelper(){\n}\n", "nl": "Prevent initializing this class."}
{"code": "@Override public JsonObject convert(IFeatureRenderer renderer){\n  RepresentationRenderer representationRenderer=(RepresentationRenderer)renderer;\n  logger.info(RepresentationRendererKeys.REPRESENTATION_RENDERER);\n  String value=null;\n  String referenceValue=null;\n  int index=-1;\n  try {\n    JsonObject jsonObject=new JsonObject();\n    JsonObject rendererObject=new JsonObject();\n    JsonArray fieldArray=new JsonArray();\n    IName dataSourceName=representationRenderer.getDataSourceName();\n    if (dataSourceName != null) {\n      rendererObject.addProperty(RepresentationRendererKeys.DATA_SOURCE_NAME,dataSourceName.getNameString());\n    }\n    JsonObject invalidRuleColour=CommonObjects.createColour(representationRenderer.getInvalidRuleColor());\n    if (invalidRuleColour != null) {\n      rendererObject.add(RepresentationRendererKeys.INVALID_RULE_COLOUR,invalidRuleColour);\n    }\n    JsonObject invisibleRuleColour=CommonObjects.createColour(representationRenderer.getInvisibleColor());\n    if (invisibleRuleColour != null) {\n      rendererObject.add(RepresentationRendererKeys.INVISIBLE_RULE_COLOUR,invisibleRuleColour);\n    }\n    rendererObject.addProperty(RepresentationRendererKeys.RELATIVE_BASE,representationRenderer.getRelativeBase());\n    JsonObject representationClassObject=getRepresentationClass(representationRenderer.getRepresentationClass());\n    if (representationClassObject != null) {\n      rendererObject.add(RepresentationRendererKeys.REPRESENTATION_CLASS,representationClassObject);\n    }\n    for (int fieldIndex=0; fieldIndex < representationRenderer.getFieldCount(); fieldIndex++) {\n      JsonObject jsonValueObject=new JsonObject();\n      jsonValueObject.addProperty(RepresentationRendererKeys.FIELD_NAME,representationRenderer.getField(fieldIndex));\n      ITable table=null;\n      jsonValueObject.addProperty(RepresentationRendererKeys.WHERE_CLAUSE,representationRenderer.getWhereClause(fieldIndex,table));\n      fieldArray.add(jsonValueObject);\n    }\n    rendererObject.addProperty(RepresentationRendererKeys.DRAW_INVALID_RULE,representationRenderer.isDrawInvalidRule());\n    rendererObject.addProperty(RepresentationRendererKeys.DRAW_INVISIBLE,representationRenderer.isDrawInvisible());\n    rendererObject.addProperty(CommonRendererKeys.GRADUATED_SYMBOLS,representationRenderer.isSymbolsAreGraduated());\n    rendererObject.add(RepresentationRendererKeys.FIELDS,fieldArray);\n    jsonObject.add(RepresentationRendererKeys.REPRESENTATION_RENDERER,rendererObject);\n    return jsonObject;\n  }\n catch (  AutomationException e) {\n    logger.error(String.format(\"%s %s %d\",value,referenceValue,index));\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    logger.error(e.getMessage());\n  }\n  return null;\n}\n", "nl": "Convert unique value renderer."}
{"code": "public static DoubleStream shiftingWindowAveragingDouble(DoubleStream doubleStream,int rollingFactor){\n  Objects.requireNonNull(doubleStream);\n  RollingOfDoubleSpliterator ofDoubleSpliterator=RollingOfDoubleSpliterator.of(doubleStream.spliterator(),rollingFactor);\n  return StreamSupport.stream(ofDoubleSpliterator,doubleStream.isParallel()).onClose(null).mapToDouble(null);\n}\n", "nl": "<p>Generates a stream that is computed from a provided double stream by first rolling it in the same way as the <code>roll()</code> method does. The average is then computed on each substream, to form the final double stream. No boxing / unboxing is conducted in the process. <p>The resulting stream has the same number of elements as the provided stream, minus the size of the window width, to preserve consistency of each collection. </p> <p>A <code>NullPointerException</code> will be thrown if the provided stream is null.</p>"}
{"code": "public void onFinish(){\n}\n", "nl": "Fired in all cases when the request is finished, after both success and failure, override to handle in your own code"}
{"code": "public float determinant(){\n  float fA0=m00 * m11 - m01 * m10;\n  float fA1=m00 * m12 - m02 * m10;\n  float fA2=m00 * m13 - m03 * m10;\n  float fA3=m01 * m12 - m02 * m11;\n  float fA4=m01 * m13 - m03 * m11;\n  float fA5=m02 * m13 - m03 * m12;\n  float fB0=m20 * m31 - m21 * m30;\n  float fB1=m20 * m32 - m22 * m30;\n  float fB2=m20 * m33 - m23 * m30;\n  float fB3=m21 * m32 - m22 * m31;\n  float fB4=m21 * m33 - m23 * m31;\n  float fB5=m22 * m33 - m23 * m32;\n  float fDet=fA0 * fB5 - fA1 * fB4 + fA2 * fB3 + fA3 * fB2 - fA4 * fB1 + fA5 * fB0;\n  return fDet;\n}\n", "nl": "<code>determinant</code> generates the determinate of this matrix."}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof MainViewer && getDir().getDocument().getNumberOfSamples() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public short remove(int offset){\n  short old=get(offset);\n  remove(offset,1);\n  return old;\n}\n", "nl": "Removes the value at <tt>offset</tt> from the list."}
{"code": "@Override public String toString(){\n  return getClass().getSimpleName() + \" [Normal: \" + normal+ \" - Constant: \"+ constant+ \"]\";\n}\n", "nl": "<code>toString</code> returns a string thta represents the string representation of this plane. It represents the normal as a <code>Vector3f</code> object, so the format is the following: com.jme.math.Plane [Normal: org.jme.math.Vector3f [X=XX.XXXX, Y=YY.YYYY, Z=ZZ.ZZZZ] - Constant: CC.CCCCC]"}
{"code": "@Override public boolean validateLabel(String label){\n  Objects.requireNonNull(label,\"label cannot be null\");\n  return !labels.contains(label);\n}\n", "nl": "Checks the given label can be added/removed to/from a vertex."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200334,skillname);\n}\n", "nl": "You reduced your MP consumption for mantra skills by using [%SkillName]."}
{"code": "public static SM_SYSTEM_MESSAGE STR_BINDSTONE_WARNING_REMAIN_TIME(String durationtime0){\n  return new SM_SYSTEM_MESSAGE(1400169,durationtime0);\n}\n", "nl": "The remaining active time of the registered Kisk is %DURATIONTIME0."}
{"code": "private void updateTexts(DocumentEvent e){\n  Document doc=e.getDocument();\n  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {\n    String projectName=projectNameTextField.getText();\n    String projectFolder=projectLocationTextField.getText();\n    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);\n  }\n  panel.fireChangeEvent();\n}\n", "nl": "Handles changes in the Project name and project directory,"}
{"code": "public TextPartsBuilder addTextPart(@StringRes int textRes){\n  return addTextPart(mContext.getText(textRes));\n}\n", "nl": "Add text part without background from resources."}
{"code": "public short[] toNativeArray(){\n  return toNativeArray(0,_pos);\n}\n", "nl": "Copies the contents of the list into a native array."}
{"code": "private void checkQuartiles(RealDistribution dist,int sampleSize,double tolerance){\n  final long seed=1000;\n  RandomDataGenerator randomDataGenerator=RandomDataGenerator.of(new MersenneTwister(seed));\n  final RandomPercentile randomPercentile=new RandomPercentile(RandomPercentile.DEFAULT_EPSILON,randomDataGenerator,50d);\n  for (int i=0; i < sampleSize; i++) {\n    randomPercentile.increment(randomDataGenerator.nextDeviate(dist));\n  }\n  final double q1=randomPercentile.getResult(25);\n  final double q2=randomPercentile.getResult();\n  final double q3=randomPercentile.getResult(75);\n  randomDataGenerator.setSeed(seed);\n  double v;\n  double ct1=0;\n  double ct2=0;\n  double ct3=0;\n  for (int i=0; i < sampleSize; i++) {\n    v=randomDataGenerator.nextDeviate(dist);\n    if (v < q1) {\n      ct1++;\n      ct2++;\n      ct3++;\n    }\n else     if (v < q2) {\n      ct2++;\n      ct3++;\n    }\n else     if (v < q3) {\n      ct3++;\n    }\n  }\n  assertEquals(0.25,ct1 / sampleSize,tolerance);\n  assertEquals(0.5,ct2 / sampleSize,tolerance);\n  assertEquals(0.75,ct3 / sampleSize,tolerance);\n}\n", "nl": "Verify the quantile-accuracy contract using a large sample from dist."}
{"code": "@AfterClass public static void teardownClass(){\n  System.clearProperty(\"http.proxyHost\");\n  System.clearProperty(\"http.proxyPort\");\n  System.clearProperty(\"http.nonProxyHosts\");\n  System.clearProperty(\"https.proxyHost\");\n  System.clearProperty(\"https.proxyPort\");\n  System.clearProperty(\"ftp.proxyHost\");\n  System.clearProperty(\"ftp.nonProxyHosts\");\n  System.clearProperty(\"ftp.proxyPort\");\n  System.clearProperty(\"socksProxyHost\");\n  System.clearProperty(\"socksProxyPort\");\n}\n", "nl": "Setup before the tests."}
{"code": "public boolean isLongPressDragEnabled(){\n  return mDefaultItemTouchHelperCallback.isLongPressDragEnabled();\n}\n", "nl": "Get can long press drag."}
{"code": "public static Map<String,Object> ccProcessor(DispatchContext dctx,Map<String,? extends Object> context){\n  Delegator delegator=dctx.getDelegator();\n  GenericValue paymentPref=(GenericValue)context.get(\"orderPaymentPreference\");\n  GenericValue authTrans=(GenericValue)context.get(\"authTrans\");\n  String orderId=(String)context.get(\"orderId\");\n  String cvv2=(String)context.get(\"cardSecurityCode\");\n  BigDecimal processAmount=(BigDecimal)context.get(\"processAmount\");\n  GenericValue party=(GenericValue)context.get(\"billToParty\");\n  GenericValue cc=(GenericValue)context.get(\"creditCard\");\n  GenericValue payPalPaymentMethod=(GenericValue)context.get(\"payPalPaymentMethod\");\n  GenericValue ps=(GenericValue)context.get(\"billingAddress\");\n  String paymentGatewayConfigId=(String)context.get(\"paymentGatewayConfigId\");\n  String configString=(String)context.get(\"paymentConfig\");\n  if (configString == null) {\n    configString=\"payment.properties\";\n  }\n  boolean isPayPal=false;\n  if (\"EXT_PAYPAL\".equals(paymentPref.getString(\"paymentMethodTypeId\"))) {\n    isPayPal=true;\n  }\n  Map<String,String> data=FastMap.newInstance();\n  boolean isReAuth=false;\n  if (isPayPal) {\n    data.put(\"TRXTYPE\",\"A\");\n    data.put(\"TENDER\",\"P\");\n    data.put(\"ORIGID\",payPalPaymentMethod.getString(\"transactionId\"));\n  }\n else {\n    if (authTrans == null) {\n      authTrans=PaymentGatewayServices.getAuthTransaction(paymentPref);\n    }\n    data.put(\"COMMENT1\",orderId);\n    data.put(\"PONUM\",orderId);\n    data.put(\"CUSTCODE\",party.getString(\"partyId\"));\n    if (comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"preAuth\",configString,\"payment.verisign.preAuth\",\"Y\")) {\n      data.put(\"TRXTYPE\",\"A\");\n      if (authTrans != null) {\n        String refNum=authTrans.getString(\"referenceNum\");\n        data.put(\"ORIGID\",refNum);\n        isReAuth=true;\n      }\n    }\n else {\n      data.put(\"TRXTYPE\",\"S\");\n    }\n    data.put(\"TENDER\",\"C\");\n    if (UtilValidate.isNotEmpty(cvv2)) {\n      data.put(\"CVV2\",cvv2);\n    }\n    data.put(\"ACCT\",cc.getString(\"cardNumber\"));\n    String name=cc.getString(\"firstNameOnCard\") + \" \" + cc.getString(\"lastNameOnCard\");\n    data.put(\"FIRSTNAME\",cc.getString(\"firstNameOnCard\"));\n    data.put(\"LASTNAME\",cc.getString(\"lastNameOnCard\"));\n    data.put(\"COMMENT2\",name);\n    if (cc.get(\"expireDate\") != null) {\n      String exp=cc.getString(\"expireDate\");\n      String expDate=exp.substring(0,2);\n      expDate=expDate + exp.substring(exp.length() - 2);\n      data.put(\"EXPDATE\",expDate);\n    }\n    if (ps != null) {\n      String street=ps.getString(\"address1\") + ((UtilValidate.isNotEmpty(ps.getString(\"address2\"))) ? \" \" + ps.getString(\"address2\") : \"\");\n      data.put(\"STREET\" + \"[\" + street.length() + \"]\",street);\n      data.put(\"ZIP\",ps.getString(\"postalCode\"));\n    }\n  }\n  data.put(\"AMT\",processAmount.toString());\n  PayflowAPI pfp=init(delegator,paymentGatewayConfigId,configString,context);\n  StringBuilder params=makeBaseParams(delegator,paymentGatewayConfigId,configString);\n  params.append(\"&\").append(parseContext(data));\n  String resp;\n  if (!comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,\"enableTransmit\",configString,\"payment.verisign.enable_transmit\",\"false\")) {\n    resp=pfp.submitTransaction(params.toString(),pfp.generateRequestId());\n  }\n else {\n    resp=\"RESULT=0&AUTHCODE=T&PNREF=\" + (new Date()).getTime() + \"&RESPMSG=Testing\";\n  }\n  if (Debug.verboseOn()) {\n    Debug.logVerbose(\"Response from Verisign: \" + resp,module);\n  }\n  if (isPayPal) {\n    resp+=\"&AVSADDR=\" + payPalPaymentMethod.getString(\"avsAddr\") + \"&AVSZIP=\"+ payPalPaymentMethod.getString(\"avsZip\");\n  }\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  parseAuthResponse(delegator,paymentGatewayConfigId,resp,result,configString,isReAuth,isPayPal);\n  result.put(\"processAmount\",processAmount);\n  return result;\n}\n", "nl": "Authorize credit card payment service. Service wrapper around PayFlow Pro API."}
{"code": "public boolean runAfter(java.util.List tasks,int size){\n  return false;\n}\n", "nl": "Returns true if current instance must be run after task(s) in task manager queue."}
{"code": "@SuppressWarnings(\"rawtypes\") public Expression isInstance(Value obj,Class c){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return whether the first value is an instance of the given class."}
{"code": "public static ViewAction checkDescendantViewAction(Matcher<View> viewMatcher,ViewAssertion viewAssertion){\n  return ViewActions.actionWithAssertions(new CheckDescendantViewAction(viewMatcher,viewAssertion));\n}\n", "nl": "Perform a check against a descendant view where the root only allows actions such a view found by RecyclerView actions"}
{"code": "private Bitmap replaceColors(Bitmap srcBitmap,boolean mutateSrc,int keepCr,int keepCg,int keepCb,int replaceColor,int distance,boolean simpleBG){\n  int[] allpixels=new int[srcBitmap.getHeight() * srcBitmap.getWidth()];\n  srcBitmap.getPixels(allpixels,0,srcBitmap.getWidth(),0,0,srcBitmap.getWidth(),srcBitmap.getHeight());\n  int bgColor=replaceColor;\n  int distanceSq=distance * distance;\n  if (simpleBG) {\n    bgColor=allpixels[0];\n  }\n  for (int i=0; i < allpixels.length; i++) {\n    if (allpixels[i] == bgColor) {\n      allpixels[i]=replaceColor;\n      continue;\n    }\n    int rDiff=keepCr - Color.red(allpixels[i]);\n    int gDiff=keepCg - Color.green(allpixels[i]);\n    int bDiff=keepCb - Color.blue(allpixels[i]);\n    int dSq=rDiff * rDiff + gDiff * gDiff + bDiff * bDiff;\n    if (dSq > distanceSq) {\n      allpixels[i]=replaceColor;\n    }\n  }\n  Bitmap dstBitmap;\n  if (mutateSrc) {\n    dstBitmap=srcBitmap;\n  }\n else {\n    dstBitmap=Bitmap.createBitmap(srcBitmap.getWidth(),srcBitmap.getHeight(),srcBitmap.getConfig());\n  }\n  dstBitmap.setPixels(allpixels,0,srcBitmap.getWidth(),0,0,srcBitmap.getWidth(),srcBitmap.getHeight());\n  return dstBitmap;\n}\n", "nl": "Replaces colors in a bitmap that are not farther away from a specific color than a given threshold."}
{"code": "public boolean intersects(final S1Interval y){\n  if (isEmpty() || y.isEmpty()) {\n    return false;\n  }\n  if (isInverted()) {\n    return y.isInverted() || y.lo() <= hi() || y.hi() >= lo();\n  }\n else {\n    if (y.isInverted()) {\n      return y.lo() <= hi() || y.hi() >= lo();\n    }\n    return y.lo() <= hi() && y.hi() >= lo();\n  }\n}\n", "nl": "Return true if the two intervals contain any points in common. Note that the point +/-Pi has two representations, so the intervals [-Pi,-3] and [2,Pi] intersect, for example."}
{"code": "public MarketReorderAlbumsQuery before(Integer value){\n  return unsafeParam(\"before\",value);\n}\n", "nl": "Id of a collection to place current collection before it"}
{"code": "public void startFragment(String fragmentClass,Bundle args){\n  Intent intent=new Intent(Intent.ACTION_MAIN);\n  intent.setClass(this,getClass());\n  intent.putExtra(EXTRA_SHOW_FRAGMENT,fragmentClass);\n  intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS,args);\n  startActivity(intent);\n}\n", "nl": "Starts a new Preferences activity showing the desired fragment."}
{"code": "public static void o(Z a){\n  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);\n}\n", "nl": "Prints a Z in default e format."}
{"code": "public synchronized SlabRef detach(){\n  if (!isAttached()) {\n    return null;\n  }\n  SlabRef slab=_slab;\n  _slab=null;\n  _slabExpiresAt=0;\n  return slab;\n}\n", "nl": "Detaches a slab from the channel and returns it to the caller to dispose of."}
{"code": "public PolarLocationAnimator(String group){\n  super(group);\n}\n", "nl": "Creates a PolarLocationAnimator that operates on VisualItems within the specified group."}
{"code": "public Counter<E> asCounter(){\n  PriorityQueue<E> pq=clone();\n  Counter<E> counter=new Counter<>();\n  while (pq.hasNext()) {\n    double priority=pq.getPriority();\n    E element=pq.next();\n    counter.incrementCount(element,priority);\n  }\n  return counter;\n}\n", "nl": "Returns a counter whose keys are the elements in this priority queue, and whose counts are the priorities in this queue.  In the event there are multiple instances of the same element in the queue, the counter's count will be the sum of the instances' priorities."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200963,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] received the Delayed Blast effect because [%SkillCaster] used [%SkillName]."}
{"code": "public AwsIotCompletion(String topic,AWSIotQos qos,byte[] payload,long timeout){\n  super(topic,qos,payload);\n  this.timeout=timeout;\n  this.request=null;\n  this.isAsync=false;\n}\n", "nl": "Instantiates a new completion object with a synchronous request."}
{"code": "public void initWithSaveInstanceState(Bundle savedInstanceState){\n  this.savedInstanceState=savedInstanceState;\n}\n", "nl": "Initialization with savedInstanceState to save current selected position and current budges"}
{"code": "public static TestLookupDimensionConfig buildStandardLookupDimensionConfig(TestApiDimensionName dimensionName,List<String> namespaces){\n  return new TestLookupDimensionConfig(buildStandardDimensionConfig(dimensionName),namespaces);\n}\n", "nl": "Builds a lookup dimension config with a namespace."}
{"code": "@deprecated public boolean isFrozen(){\n  return this._frozen;\n}\n", "nl": "/*     "}
{"code": "public void delete() throws IOException {\n  close();\n  Util.deleteContents(directory);\n}\n", "nl": "Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren't created by the cache."}
{"code": "@SubscribeEvent public void onRender(RenderTickEvent event){\n  if (event.phase == Phase.START) {\n    resizeIfNeeded();\n  }\n}\n", "nl": "Called before and after the rendering of the world."}
{"code": "public synchronized boolean holdsLock(String tableName,long transNum,LockType lockType){\n  return this.databaseLocked && this.databaseTransactionOwner == transNum;\n}\n", "nl": "Returns a boolnea indicating whether or not transNum holds a lock of type lt on tableName."}
{"code": "public static String toString(long l){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 11; i++) {\n    int t=(int)(l & 0x3f);\n    l=l >> 6;\n    sb.append(chars[t]);\n  }\n  return sb.reverse().toString();\n}\n", "nl": "To string."}
{"code": "private static IConfigElement categoryElement(String category,String name,String tooltip_key){\n  return new DummyConfigElement.DummyCategoryElement(name,tooltip_key,new ConfigElement(BWConfig.config.getCategory(category)).getChildElements());\n}\n", "nl": "Creates a button linking to another screen where all options of the category are available"}
{"code": "public void reset(){\n  get();\n}\n", "nl": "invoked when reset called."}
{"code": "public static Map<String,Object> entityMaintPermCheck(DispatchContext dctx,Map<String,? extends Object> context){\n  GenericValue userLogin=(GenericValue)context.get(\"userLogin\");\n  Locale locale=(Locale)context.get(\"locale\");\n  Security security=dctx.getSecurity();\n  Map<String,Object> resultMap=null;\n  if (security.hasPermission(\"ENTITY_MAINT\",userLogin)) {\n    resultMap=ServiceUtil.returnSuccess();\n    resultMap.put(\"hasPermission\",true);\n  }\n else {\n    resultMap=ServiceUtil.returnFailure(UtilProperties.getMessage(resource,\"WebtoolsPermissionError\",locale));\n    resultMap.put(\"hasPermission\",false);\n  }\n  return resultMap;\n}\n", "nl": "Performs an entity maintenance security check. Returns hasPermission=true if the user has the ENTITY_MAINT permission."}
{"code": "public static double mean(double[] data,int[] inds){\n  double mean=0;\n  for (int i=0; i < inds.length; i++) {\n    if (Double.isNaN(data[inds[i]]))     throw new IllegalArgumentException(\"NaN not allowed in mean calculation\");\n    mean+=data[inds[i]];\n  }\n  mean/=inds.length;\n  return mean;\n}\n", "nl": "Compute the mean of all elements in the array with given indices. No missing values (NaN) are allowed."}
{"code": "public ServerConfiguration killBookie(int index) throws Exception {\n  if (index >= bs.size()) {\n    throw new IOException(\"Bookie does not exist\");\n  }\n  BookieServer server=bs.get(index);\n  server.shutdown();\n  stopAutoRecoveryService(server);\n  bs.remove(server);\n  return bsConfs.remove(index);\n}\n", "nl": "Kill a bookie by index. Also, stops the respective auto recovery process for this bookie, if isAutoRecoveryEnabled is true."}
{"code": "public boolean isApplicable(){\n  return getViewer() != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void remove(int offset,int length){\n  if (offset < 0 || offset >= _pos) {\n    throw new ArrayIndexOutOfBoundsException(offset);\n  }\n  if (offset == 0) {\n    System.arraycopy(_data,length,_data,0,_pos - length);\n  }\n else   if (_pos - length == offset) {\n  }\n else {\n    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));\n  }\n  _pos-=length;\n}\n", "nl": "Removes <tt>length</tt> values from the list, starting at <tt>offset</tt>"}
{"code": "public static char[] toCharArray(InputStream is,String encoding) throws IOException {\n  return toCharArray(is,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>."}
{"code": "public static JsonValue value(float value){\n  if (Float.isInfinite(value) || Float.isNaN(value)) {\n    throw new IllegalArgumentException(\"Infinite and NaN values not permitted in JSON\");\n  }\n  return new JsonNumber(cutOffPointZero(Float.toString(value)));\n}\n", "nl": "Returns a JsonValue instance that represents the given <code>float</code> value."}
{"code": "@Override public void mouseEntered(MouseEvent e){\n}\n", "nl": "This method cannot be called directly."}
{"code": "private boolean shouldGiveModelIdValue(String idName,Class<?> idType,long id){\n  return idName != null && idType != null && id > 0;\n}\n", "nl": "Judge should assign id value to model's id field. The principle is that if id name is not null, id type is not null and id is greater than 0, then should assign id value to it."}
{"code": "public static LocalDispatcher makeWebappDispatcher(ServletContext servletContext,Delegator delegator){\n  if (delegator == null) {\n    Debug.logError(\"[ContextFilter.init] ERROR: delegator not defined.\",module);\n    return null;\n  }\n  String dispatcherName=servletContext.getInitParameter(\"localDispatcherName\");\n  if (dispatcherName == null) {\n    Debug.logError(\"No localDispatcherName specified in the web.xml file\",module);\n    dispatcherName=delegator.getDelegatorName();\n  }\n  LocalDispatcher dispatcher=ServiceContainer.getLocalDispatcher(dispatcherName,delegator);\n  if (dispatcher == null) {\n    Debug.logError(\"[ContextFilter.init] ERROR: dispatcher could not be initialized.\",module);\n  }\n  return dispatcher;\n}\n", "nl": "This method only sets up a dispatcher for the current webapp and passed in delegator, it does not save it to the ServletContext or anywhere else, just returns it"}
{"code": "public SimpleMetricGroup(GroupName name){\n  name_=name;\n}\n", "nl": "Create a new, empty metric group."}
{"code": "public static Zmat uzmat(int m,int n) throws JampackException {\n  Zmat zm=new Zmat(m,n);\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      zm.re[i][j]=R.nextDouble();\n      zm.im[i][j]=R.nextDouble();\n    }\n  }\n  return zm;\n}\n", "nl": "Generates  a uniform random  Zmat."}
{"code": "public void check(){\n  for (  Object object : pag.allocSources()) {\n    handleAllocNode((AllocNode)object);\n  }\n  for (  Object object : pag.simpleSources()) {\n    handleSimples((VarNode)object);\n  }\n  for (  Object object : pag.loadSources()) {\n    handleLoads((FieldRefNode)object);\n  }\n  for (  Object object : pag.storeSources()) {\n    handleStores((VarNode)object);\n  }\n  for (  Object object : pag.loadSources()) {\n    final FieldRefNode fr=(FieldRefNode)object;\n    fieldToBase.put(fr.getField(),fr.getBase());\n  }\n  for (  Object object : pag.storeInvSources()) {\n    final FieldRefNode fr=(FieldRefNode)object;\n    fieldToBase.put(fr.getField(),fr.getBase());\n  }\n  for (  final VarNode src : pag.getVarNodeNumberer()) {\n    for (    FieldRefNode fr : src.getAllFieldRefs()) {\n      for (      VarNode dst : fieldToBase.get(fr.getField())) {\n        if (!src.getP2Set().hasNonEmptyIntersection(dst.getP2Set()))         continue;\n        FieldRefNode fr2=dst.dot(fr.getField());\n        if (fr2.getReplacement() != fr.getReplacement()) {\n          G.v().out.println(\"Check failure: \" + fr + \" should be merged with \"+ fr2);\n        }\n      }\n    }\n  }\n}\n", "nl": "Actually does the propagation."}
{"code": "public static void loadResizedImage(final Context _context,final ImageView _imageView,final String _imageUrl,final int _placeHolderResource,final int _width,final int _height){\n  getBitmapLoader(_context,_imageUrl,_placeHolderResource).override(_width,_height).into(_imageView);\n}\n", "nl": "Allows to load a RESIZED image with Glide"}
{"code": "public ComponentCursor queryComponentCreated(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_COMPONENTS;\n  qh.Selection=\"c.\" + S.COLUMN_COMPONENTS_CREATED_ITEM_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"c.type\";\n  qh.Limit=null;\n  return new ComponentCursor(wrapJoinHelper(builderComponent(),qh));\n}\n", "nl": "****************************** COMPONENT QUERIES"}
{"code": "public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,int npcTargetId){\n  SpawnSearchResult searchResult=DataManager.SPAWNS_DATA2.getFirstSpawnByNpcId(npc.getWorldId(),npcTargetId);\n  if (searchResult == null) {\n    throw new IllegalArgumentException(\"Supplied npc doesn't exist: \" + npcTargetId);\n  }\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new CoordinateDestinationChecker(npc,searchResult.getSpot().getX(),searchResult.getSpot().getY(),searchResult.getSpot().getZ())),1000,1000);\n}\n", "nl": "Schedule new following checker task"}
{"code": "public IteratorBuilder eventSessionConfig(EventSessionConfig eventSessionConfig){\n  this.iteratorConfig.setEventSessionConfig(eventSessionConfig);\n  return this;\n}\n", "nl": "The event session configuration to be used when subscribing for notifications."}
{"code": "private void createUI(){\n  readConfigFile(null,this,\"geoserver/GeoServerRandomFill.xml\");\n}\n", "nl": "Creates the ui."}
{"code": "public static final SM_SYSTEM_MESSAGE STR_MSG_UNEQUIP_RANKITEM_TIMER_10M(int value0){\n  return new SM_SYSTEM_MESSAGE(1401327,new DescriptionId(value0));\n}\n", "nl": "%0 disappears in 10 minutes because your Abyss Rank changed."}
{"code": "protected void initializePageContainer(){\n  Composite General_OptionsChild=General_OptionsCreate(getPageContainer());\n  Composite Input_OptionsChild=Input_OptionsCreate(getPageContainer());\n  Composite Output_OptionsChild=Output_OptionsCreate(getPageContainer());\n  Composite Processing_OptionsChild=Processing_OptionsCreate(getPageContainer());\n  Composite Application_Mode_OptionsChild=Application_Mode_OptionsCreate(getPageContainer());\n  Composite Input_Attribute_OptionsChild=Input_Attribute_OptionsCreate(getPageContainer());\n  Composite Annotation_OptionsChild=Annotation_OptionsCreate(getPageContainer());\n  Composite Miscellaneous_OptionsChild=Miscellaneous_OptionsCreate(getPageContainer());\n  Composite jbChild=jbCreate(getPageContainer());\n  Composite jjChild=jjCreate(getPageContainer());\n  Composite wjppChild=wjppCreate(getPageContainer());\n  Composite wsppChild=wsppCreate(getPageContainer());\n  Composite cgChild=cgCreate(getPageContainer());\n  Composite wstpChild=wstpCreate(getPageContainer());\n  Composite wsopChild=wsopCreate(getPageContainer());\n  Composite wjtpChild=wjtpCreate(getPageContainer());\n  Composite wjopChild=wjopCreate(getPageContainer());\n  Composite wjapChild=wjapCreate(getPageContainer());\n  Composite shimpleChild=shimpleCreate(getPageContainer());\n  Composite stpChild=stpCreate(getPageContainer());\n  Composite sopChild=sopCreate(getPageContainer());\n  Composite jtpChild=jtpCreate(getPageContainer());\n  Composite jopChild=jopCreate(getPageContainer());\n  Composite japChild=japCreate(getPageContainer());\n  Composite gbChild=gbCreate(getPageContainer());\n  Composite gopChild=gopCreate(getPageContainer());\n  Composite bbChild=bbCreate(getPageContainer());\n  Composite bopChild=bopCreate(getPageContainer());\n  Composite tagChild=tagCreate(getPageContainer());\n  Composite dbChild=dbCreate(getPageContainer());\n  Composite jbjb_lsChild=jbjb_lsCreate(getPageContainer());\n  Composite jbjb_aChild=jbjb_aCreate(getPageContainer());\n  Composite jbjb_uleChild=jbjb_uleCreate(getPageContainer());\n  Composite jbjb_trChild=jbjb_trCreate(getPageContainer());\n  Composite jbjb_ulpChild=jbjb_ulpCreate(getPageContainer());\n  Composite jbjb_lnsChild=jbjb_lnsCreate(getPageContainer());\n  Composite jbjb_cpChild=jbjb_cpCreate(getPageContainer());\n  Composite jbjb_daeChild=jbjb_daeCreate(getPageContainer());\n  Composite jbjb_cp_uleChild=jbjb_cp_uleCreate(getPageContainer());\n  Composite jbjb_lpChild=jbjb_lpCreate(getPageContainer());\n  Composite jbjb_neChild=jbjb_neCreate(getPageContainer());\n  Composite jbjb_uceChild=jbjb_uceCreate(getPageContainer());\n  Composite jbjb_ttChild=jbjb_ttCreate(getPageContainer());\n  Composite jjjj_lsChild=jjjj_lsCreate(getPageContainer());\n  Composite jjjj_aChild=jjjj_aCreate(getPageContainer());\n  Composite jjjj_uleChild=jjjj_uleCreate(getPageContainer());\n  Composite jjjj_trChild=jjjj_trCreate(getPageContainer());\n  Composite jjjj_ulpChild=jjjj_ulpCreate(getPageContainer());\n  Composite jjjj_lnsChild=jjjj_lnsCreate(getPageContainer());\n  Composite jjjj_cpChild=jjjj_cpCreate(getPageContainer());\n  Composite jjjj_daeChild=jjjj_daeCreate(getPageContainer());\n  Composite jjjj_cp_uleChild=jjjj_cp_uleCreate(getPageContainer());\n  Composite jjjj_lpChild=jjjj_lpCreate(getPageContainer());\n  Composite jjjj_neChild=jjjj_neCreate(getPageContainer());\n  Composite jjjj_uceChild=jjjj_uceCreate(getPageContainer());\n  Composite cgcg_chaChild=cgcg_chaCreate(getPageContainer());\n  Composite cgcg_sparkChild=cgcg_sparkCreate(getPageContainer());\n  Composite cgcg_paddleChild=cgcg_paddleCreate(getPageContainer());\n  Composite cgSpark_General_OptionsChild=cgSpark_General_OptionsCreate(getPageContainer());\n  Composite cgSpark_Pointer_Assignment_Graph_Building_OptionsChild=cgSpark_Pointer_Assignment_Graph_Building_OptionsCreate(getPageContainer());\n  Composite cgSpark_Pointer_Assignment_Graph_Simplification_OptionsChild=cgSpark_Pointer_Assignment_Graph_Simplification_OptionsCreate(getPageContainer());\n  Composite cgSpark_Points_To_Set_Flowing_OptionsChild=cgSpark_Points_To_Set_Flowing_OptionsCreate(getPageContainer());\n  Composite cgSpark_Output_OptionsChild=cgSpark_Output_OptionsCreate(getPageContainer());\n  Composite cgContext_sensitive_refinementChild=cgContext_sensitive_refinementCreate(getPageContainer());\n  Composite cgGeometric_context_sensitive_analysis_from_ISSTA_2011Child=cgGeometric_context_sensitive_analysis_from_ISSTA_2011Create(getPageContainer());\n  Composite cgPaddle_General_OptionsChild=cgPaddle_General_OptionsCreate(getPageContainer());\n  Composite cgPaddle_Context_Sensitivity_OptionsChild=cgPaddle_Context_Sensitivity_OptionsCreate(getPageContainer());\n  Composite cgPaddle_Pointer_Assignment_Graph_Building_OptionsChild=cgPaddle_Pointer_Assignment_Graph_Building_OptionsCreate(getPageContainer());\n  Composite cgPaddle_Points_To_Set_Flowing_OptionsChild=cgPaddle_Points_To_Set_Flowing_OptionsCreate(getPageContainer());\n  Composite cgPaddle_Output_OptionsChild=cgPaddle_Output_OptionsCreate(getPageContainer());\n  Composite wjtpwjtp_mhpChild=wjtpwjtp_mhpCreate(getPageContainer());\n  Composite wjtpwjtp_tnChild=wjtpwjtp_tnCreate(getPageContainer());\n  Composite wjtpwjtp_rdcChild=wjtpwjtp_rdcCreate(getPageContainer());\n  Composite wjopwjop_smbChild=wjopwjop_smbCreate(getPageContainer());\n  Composite wjopwjop_siChild=wjopwjop_siCreate(getPageContainer());\n  Composite wjapwjap_raChild=wjapwjap_raCreate(getPageContainer());\n  Composite wjapwjap_umtChild=wjapwjap_umtCreate(getPageContainer());\n  Composite wjapwjap_uftChild=wjapwjap_uftCreate(getPageContainer());\n  Composite wjapwjap_tqtChild=wjapwjap_tqtCreate(getPageContainer());\n  Composite wjapwjap_cggChild=wjapwjap_cggCreate(getPageContainer());\n  Composite wjapwjap_purityChild=wjapwjap_purityCreate(getPageContainer());\n  Composite sopsop_cpfChild=sopsop_cpfCreate(getPageContainer());\n  Composite jopjop_cseChild=jopjop_cseCreate(getPageContainer());\n  Composite jopjop_bcmChild=jopjop_bcmCreate(getPageContainer());\n  Composite jopjop_lcmChild=jopjop_lcmCreate(getPageContainer());\n  Composite jopjop_cpChild=jopjop_cpCreate(getPageContainer());\n  Composite jopjop_cpfChild=jopjop_cpfCreate(getPageContainer());\n  Composite jopjop_cbfChild=jopjop_cbfCreate(getPageContainer());\n  Composite jopjop_daeChild=jopjop_daeCreate(getPageContainer());\n  Composite jopjop_nceChild=jopjop_nceCreate(getPageContainer());\n  Composite jopjop_uce1Child=jopjop_uce1Create(getPageContainer());\n  Composite jopjop_ubf1Child=jopjop_ubf1Create(getPageContainer());\n  Composite jopjop_uce2Child=jopjop_uce2Create(getPageContainer());\n  Composite jopjop_ubf2Child=jopjop_ubf2Create(getPageContainer());\n  Composite jopjop_uleChild=jopjop_uleCreate(getPageContainer());\n  Composite japjap_npcChild=japjap_npcCreate(getPageContainer());\n  Composite japjap_npcolorerChild=japjap_npcolorerCreate(getPageContainer());\n  Composite japjap_abcChild=japjap_abcCreate(getPageContainer());\n  Composite japjap_profilingChild=japjap_profilingCreate(getPageContainer());\n  Composite japjap_seaChild=japjap_seaCreate(getPageContainer());\n  Composite japjap_fieldrwChild=japjap_fieldrwCreate(getPageContainer());\n  Composite japjap_cgtaggerChild=japjap_cgtaggerCreate(getPageContainer());\n  Composite japjap_parityChild=japjap_parityCreate(getPageContainer());\n  Composite japjap_patChild=japjap_patCreate(getPageContainer());\n  Composite japjap_lvtaggerChild=japjap_lvtaggerCreate(getPageContainer());\n  Composite japjap_rdtaggerChild=japjap_rdtaggerCreate(getPageContainer());\n  Composite japjap_cheChild=japjap_cheCreate(getPageContainer());\n  Composite japjap_umtChild=japjap_umtCreate(getPageContainer());\n  Composite japjap_litChild=japjap_litCreate(getPageContainer());\n  Composite japjap_aetChild=japjap_aetCreate(getPageContainer());\n  Composite japjap_dmtChild=japjap_dmtCreate(getPageContainer());\n  Composite gbgb_a1Child=gbgb_a1Create(getPageContainer());\n  Composite gbgb_cfChild=gbgb_cfCreate(getPageContainer());\n  Composite gbgb_a2Child=gbgb_a2Create(getPageContainer());\n  Composite gbgb_uleChild=gbgb_uleCreate(getPageContainer());\n  Composite bbbb_lsoChild=bbbb_lsoCreate(getPageContainer());\n  Composite bbbb_phoChild=bbbb_phoCreate(getPageContainer());\n  Composite bbbb_uleChild=bbbb_uleCreate(getPageContainer());\n  Composite bbbb_lpChild=bbbb_lpCreate(getPageContainer());\n  Composite tagtag_lnChild=tagtag_lnCreate(getPageContainer());\n  Composite tagtag_anChild=tagtag_anCreate(getPageContainer());\n  Composite tagtag_depChild=tagtag_depCreate(getPageContainer());\n  Composite tagtag_fieldrwChild=tagtag_fieldrwCreate(getPageContainer());\n  Composite dbdb_transformationsChild=dbdb_transformationsCreate(getPageContainer());\n  Composite dbdb_renamerChild=dbdb_renamerCreate(getPageContainer());\n  Composite dbdb_deobfuscateChild=dbdb_deobfuscateCreate(getPageContainer());\n  Composite dbdb_force_recompileChild=dbdb_force_recompileCreate(getPageContainer());\n  addOtherPages(getPageContainer());\n  initializeRadioGroups();\n  initializeEnableGroups();\n}\n", "nl": "each section gets initialize as a stack layer in pageContainer the area containing the options"}
{"code": "public IntStringTranslator(String[] strings){\n  list=new ArrayList<String>(Arrays.asList(strings));\n  map=new HashMap<String,Integer>();\n  for (int i=0; i < strings.length; i++) {\n    map.put(strings[i],i);\n  }\n}\n", "nl": "Initialize a int-string two-way translator, setting int values according to the position of strings in the array."}
{"code": "public static <K,R>Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends ObservableSource<? extends R>> mapOfCases,Scheduler scheduler){\n  return switchCase(caseSelector,mapOfCases,Observable.<R>empty().subscribeOn(scheduler));\n}\n", "nl": "Return a particular one of several possible Observables based on a case selector and run it on the designated scheduler. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchCase.s.png\" alt=\"\">"}
{"code": "public Vector multiply(double m){\n  x*=m;\n  y*=m;\n  z*=m;\n  return this;\n}\n", "nl": "Performs scalar multiplication, multiplying all components with a scalar."}
{"code": "public void crawl() throws Exception {\n  Connection conn=null;\n  try {\n    conn=getConnection();\n    final Statement stmt=conn.createStatement();\n    processResult(stmt.executeQuery(firstQuery));\n    stmt.close();\n  }\n catch (  Exception e) {\n    throw e;\n  }\n finally {\n    closeConnection(conn);\n  }\n  completeLatch.await();\n  while (this.threadPool.getTaskCount() != 0 && this.threadPool.getActiveCount() != 0) {\n    Thread.sleep(1);\n  }\n  if (exception != null) {\n    throw exception;\n  }\n}\n", "nl": "NOT RE-USABLE!"}
{"code": "public Object clone(){\n  try {\n    return super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n}\n", "nl": "Returns a shallow copy of this list.  (The elements themselves are not copied.)"}
{"code": "public void write(int b) throws IOException {\n  raf.write(b);\n}\n", "nl": "Writes a byte of data. This method will block until the byte is actually written."}
{"code": "public static SM_SYSTEM_MESSAGE STR_GET_EXP_MAKEUP_BONUS(String value0,long num1,long num2){\n  return new SM_SYSTEM_MESSAGE(1400343,value0,num1,num2);\n}\n", "nl": "You have gained %num1 XP from %0 (Energy of Salvation %num2)."}
{"code": "public void testImportSubprojects() throws IOException, ConfigurationException {\n  String[] paths={module(1),module(2),SAMPLE_PROJECT_PATH};\n  VirtualFile projectRoot=createProjectWithSubprojects(projectsWithDefaultLocations(paths));\n  Map<String,VirtualFile> toImport=moduleListToMap(GradleModuleImporter.getRelatedProjects(projectRoot,getProject()));\n  assertEquals(paths.length,toImport.size());\n  for (  String path : paths) {\n    assertEquals(projectRoot.findFileByRelativePath(path),toImport.get(pathToGradleName(path)));\n  }\n  GradleModuleImporter.importModules(this,toImport,getProject(),null);\n  for (  String path : paths) {\n    VirtualFile moduleRoot=projectRoot.findFileByRelativePath(path);\n    assertNotNull(String.format(\"Module was not imported into %s\\n\",projectRoot.getPath() + \"/\" + path),moduleRoot);\n    assertModuleImported(getProject(),path,moduleRoot);\n  }\n  System.out.println();\n}\n", "nl": "Test importing a root project that has subprojects"}
{"code": "public int log10K(){\n  return exp - 1;\n}\n", "nl": "Get the exponent of the greatest power of 10000 that is less than or equal to the absolute value of this.  I.E.  if this is 10<sup>6</sup> then log10K would return 1."}
{"code": "public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration,double d,double[] init){\n  double[] impact=new double[preparedMatrix.getRowsCount()];\n  for (int i=0; i != init.length; i++)   impact[i]=DEFAULT_I;\n  return pageRank(preparedMatrix,maxIteration,d,init,impact);\n}\n", "nl": "Call prepareMatrix or prepareSparseMatrix first"}
{"code": "public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException {\n  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup,parentProduct);\n  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;\n  unitPrice=unitPrice == null ? BigDecimal.ZERO : unitPrice;\n  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;\n  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;\n  boolean triggerPriceRules=triggerPriceRulesBool == null ? true : triggerPriceRulesBool.booleanValue();\n  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();\n  if (\"Y\".equals(product.getString(\"isVirtual\"))) {\n    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap(\"productName\",product.getString(\"productName\"),\"productId\",product.getString(\"productId\"));\n    String excMsg=UtilProperties.getMessage(resource_error,\"item.cannot_add_product_virtual\",messageMap,cart.getLocale());\n    Debug.logWarning(excMsg,module);\n    throw new CartItemModifyException(excMsg);\n  }\n  java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();\n  if (!skipProductChecks.booleanValue()) {\n    isValidCartProduct(configWrapper,product,nowTimestamp,cart.getLocale());\n  }\n  if (\"ASSET_USAGE\".equals(product.getString(\"productTypeId\")) || \"ASSET_USAGE_OUT_IN\".equals(product.getString(\"productTypeId\"))) {\n    if (reservStart == null) {\n      String excMsg=UtilProperties.getMessage(resource_error,\"item.missing_reservation_starting_date\",cart.getLocale());\n      throw new CartItemModifyException(excMsg);\n    }\n    if (reservStart.before(UtilDateTime.nowTimestamp())) {\n      String excMsg=UtilProperties.getMessage(resource_error,\"item.reservation_from_tomorrow\",cart.getLocale());\n      throw new CartItemModifyException(excMsg);\n    }\n    newItem.setReservStart(reservStart);\n    if (reservLength.compareTo(BigDecimal.ONE) < 0) {\n      String excMsg=UtilProperties.getMessage(resource_error,\"item.number_of_days\",cart.getLocale());\n      throw new CartItemModifyException(excMsg);\n    }\n    newItem.setReservLength(reservLength);\n    if (product.get(\"reservMaxPersons\") != null) {\n      BigDecimal reservMaxPersons=product.getBigDecimal(\"reservMaxPersons\");\n      if (reservMaxPersons.compareTo(reservPersons) < 0) {\n        Map<String,Object> messageMap=UtilMisc.<String,Object>toMap(\"reservMaxPersons\",product.getBigDecimal(\"reservMaxPersons\"),\"reservPersons\",reservPersons);\n        String excMsg=UtilProperties.getMessage(resource_error,\"item.maximum_number_of_person_renting\",messageMap,cart.getLocale());\n        Debug.logInfo(excMsg,module);\n        throw new CartItemModifyException(excMsg);\n      }\n    }\n    newItem.setReservPersons(reservPersons);\n    if (product.get(\"reserv2ndPPPerc\") != null)     newItem.setReserv2ndPPPerc(product.getBigDecimal(\"reserv2ndPPPerc\"));\n    if (product.get(\"reservNthPPPerc\") != null)     newItem.setReservNthPPPerc(product.getBigDecimal(\"reservNthPPPerc\"));\n    if ((accommodationMapId != null) && (accommodationSpotId != null)) {\n      newItem.setAccommodationId(accommodationMapId,accommodationSpotId);\n    }\n    String isAvailable=checkAvailability(product.getString(\"productId\"),quantity,reservStart,reservLength,cart);\n    if (isAvailable.compareTo(\"OK\") != 0) {\n      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap(\"productId\",product.getString(\"productId\"),\"availableMessage\",isAvailable);\n      String excMsg=UtilProperties.getMessage(resource_error,\"item.product_not_available\",messageMap,cart.getLocale());\n      Debug.logInfo(excMsg,module);\n      throw new CartItemModifyException(isAvailable);\n    }\n  }\n  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());\n  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());\n  newItem.setBasePrice(unitPrice);\n  if (cartLocation == null) {\n    cart.addItemToEnd(newItem);\n  }\n else {\n    cart.addItem(cartLocation.intValue(),newItem);\n  }\n  if (selectedAmount.compareTo(BigDecimal.ZERO) > 0) {\n    newItem.setSelectedAmount(selectedAmount);\n  }\n  try {\n    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps,true,triggerPriceRules,skipInventoryChecks.booleanValue());\n  }\n catch (  CartItemModifyException e) {\n    Debug.logWarning(e.getMessage(),module);\n    cart.removeCartItem(cart.getItemIndex(newItem),triggerExternalOps,dispatcher);\n    cart.clearItemShipInfo(newItem);\n    cart.removeEmptyCartItems();\n    throw e;\n  }\n  return newItem;\n}\n", "nl": "Makes a ShoppingCartItem and adds it to the cart."}
{"code": "public boolean containsKey(int key){\n  return contains(key);\n}\n", "nl": "checks for the present of <tt>key</tt> in the keys of the map."}
{"code": "public FriendsGetSuggestionsQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return."}
{"code": "private void preOnCreate(){\n  if (!getClass().getSimpleName().equals(\"RubotoService\")) {\n    System.out.println(\"RubotoService preOnCreate(): \" + getClass().getName());\n    getScriptInfo().setRubyClassName(getClass().getSimpleName());\n    JRubyAdapter.setUpJRuby(this);\n  }\n}\n", "nl": "Called at the start of onCreate() to prepare the Activity."}
{"code": "public void print(){\n  System.out.println(\"mean:\");\n  mean.print(6,3);\n  System.out.println(\"covariance matrix:\");\n  covariances.print(6,3);\n  System.out.println(\"component weight:\");\n  System.out.println(componentWeight);\n  System.out.println(\"---------------------------------------------\");\n}\n", "nl": "Prints some information about this componet. This is for debugging purpose only."}
{"code": "protected OutputStream to(){\n  return to;\n}\n", "nl": "The stream on which data is written to the external process."}
{"code": "public void displayMessage(final SimpleMqttMessage message){\n  if (message == null) {\n    publicationTopicText.setValue(\"\");\n    publicationTopicText.setPromptText(\"(cannot be empty)\");\n    publicationQosChoice.getSelectionModel().select(0);\n    publicationData.clear();\n    retainedBox.setSelected(false);\n  }\n else {\n    publicationTopicText.setValue(message.getTopic());\n    publicationQosChoice.getSelectionModel().select(message.getQos());\n    publicationData.clear();\n    publicationData.appendText(message.getValue());\n    retainedBox.setSelected(message.isRetained());\n  }\n}\n", "nl": "Displays the given message."}
{"code": "public ExtendedIndexIterator<TemplateCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){\n  return establishScan(startPos,relation,endPos,endPosInclusive,false);\n}\n", "nl": "establish a scan according to the relation given and startPos : the start-scan object ,  null means scan all values. The relation is from com.j_spaces.client.TemplateMatchCodes: LT, LE, GT, GE (other codes are not relevant) endPos- key up to (or null if no limit in  index) endPosInclusive : is the endPos up to (or down to) and including ? returns an ExtendedIndexIterator object which enables scanning the ordered index, Null if no relevant elements to scan"}
{"code": "protected void onModelUnbound(EpoxyViewHolder holder,EpoxyModel<?> model){\n}\n", "nl": "Called immediately after a model is unbound from a view holder. Subclasses can override this if they want alerts on when a model is unbound."}
{"code": "public void onLeaveZone(ZoneInstance zoneInstance){\n}\n", "nl": "Will be called by ZoneManager when player leaves specific zone"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CarveSignet_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200797,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] inflicted %num0 damage and the rune carve effect on themselves by using [%SkillName]."}
{"code": "@Override public Long processIdentifier(Object id){\n  Objects.requireNonNull(id,\"Element identifier cannot be null\");\n  if (id instanceof Long)   return (Long)id;\n  if (id instanceof Number)   return ((Number)id).longValue();\n  if (id instanceof String)   return Long.valueOf((String)id);\n  throw new IllegalArgumentException(String.format(\"Expected an id that is convertible to Long but received %s\",id.getClass()));\n}\n", "nl": "Process the given identifier converting it to the correct type if necessary."}
{"code": "private String positiveInteger2RelativeValues(String rateAttribute){\n  double positiveNumber=(new Float(rateAttribute)).doubleValue();\n  double relativePercentage=(positiveNumber * 100.0);\n  if (relativePercentage > 100) {\n    return \"+\" + df.format((relativePercentage - 100)) + \"%\";\n  }\n  return \"-\" + df.format((100 - relativePercentage)) + \"%\";\n}\n", "nl": "mapping a positive 'rate' integer to a relative value"}
{"code": "public static short swapShort(short value){\n  return (short)((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0));\n}\n", "nl": "Converts a \"short\" value between endian systems."}
{"code": "@Override public boolean isDataPresent(){\n  return true;\n}\n", "nl": "Checks if is data present."}
{"code": "public static Date millisecondsToDate(long milliseconds){\n  return new Date(milliseconds);\n}\n", "nl": "Convert milliseconds to date object"}
{"code": "private void writeVersionFile() throws IOException {\n  RandomAccessFile out=new RandomAccessFile(fName(versionFile),\"rw\");\n  try {\n    writeInt(out,version);\n    out.getFD().sync();\n  }\n  finally {\n    out.close();\n  }\n}\n", "nl": "Writes the current version number to the version file."}
{"code": "private boolean hasNext(){\n  return this.fileCounter > 0;\n}\n", "nl": "This method will be used to check whether any more element is present or not"}
{"code": "public JsonObject add(String name,JsonValue value){\n  if (name == null) {\n    throw new NullPointerException(\"name is null\");\n  }\n  if (value == null) {\n    throw new NullPointerException(\"value is null\");\n  }\n  table.add(name,names.size());\n  names.add(name);\n  values.add(value);\n  return this;\n}\n", "nl": "Appends a new member to the end of this object, with the specified name and the specified JSON value. <p> This method <strong>does not prevent duplicate names</strong>. Calling this method with a name that already exists in the object will append another member with the same name. In order to replace existing members, use the method <code>set(name, value)</code> instead. However, <strong> <em>add</em> is much faster than <em>set</em></strong> (because it does not need to search for existing members). Therefore <em>add</em> should be preferred when constructing new objects. </p>"}
{"code": "@Override public boolean equals(Object object){\n  if (this == object) {\n    return true;\n  }\n  if (object == null) {\n    return false;\n  }\n  if (getClass() != object.getClass()) {\n    return false;\n  }\n  final ValidationResult other=(ValidationResult)object;\n  if (period == null) {\n    if (other.period != null) {\n      return false;\n    }\n  }\n else   if (!period.equals(other.period)) {\n    return false;\n  }\n  if (attributeOptionCombo == null) {\n    if (other.attributeOptionCombo != null) {\n      return false;\n    }\n  }\n else   if (attributeOptionCombo.getId() != other.attributeOptionCombo.getId()) {\n    return false;\n  }\n  if (orgUnit == null) {\n    if (other.orgUnit != null) {\n      return false;\n    }\n  }\n else   if (!orgUnit.equals(other.orgUnit)) {\n    return false;\n  }\n  if (validationRule == null) {\n    if (other.validationRule != null) {\n      return false;\n    }\n  }\n else   if (!validationRule.equals(other.validationRule)) {\n    return false;\n  }\n  if (leftsideValue == null) {\n    if (other.leftsideValue != null) {\n      return false;\n    }\n  }\n else   if (other.leftsideValue == null) {\n    return false;\n  }\n else   if (Math.round(100.0 * leftsideValue) != Math.round(100.0 * other.leftsideValue)) {\n    return false;\n  }\n  if (rightsideValue == null) {\n    if (other.rightsideValue != null) {\n      return false;\n    }\n  }\n else   if (other.rightsideValue == null) {\n    return false;\n  }\n else   if (Math.round(100.0 * leftsideValue) != Math.round(100.0 * other.leftsideValue)) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Note: this method is called from threads in which it may not be possible to initialize lazy Hibernate properties. So object properties to compare must be chosen accordingly."}
{"code": "private static boolean eq(Object o1,Object o2){\n  return (o1 == null ? o2 == null : o1.equals(o2));\n}\n", "nl": "Test for equality, coping with nulls."}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list."}
{"code": "public void removeListeners(String tag){\n}\n", "nl": "Cancel all operations that were submitted with the given tag"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public BooleanType fullCopy(){\n  BooleanType tree=(BooleanType)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public void calculateNormal(){\n  if (normal == null) {\n    normal=new Vector3f(pointb);\n  }\n else {\n    normal.set(pointb);\n  }\n  normal.subtractLocal(pointa).crossLocal(pointc.x - pointa.x,pointc.y - pointa.y,pointc.z - pointa.z);\n  normal.normalizeLocal();\n}\n", "nl": "calculateCenter finds the average point of the triangle."}
{"code": "private void loadStats(String resource,Object u) throws Exception {\n  DescriptiveStatistics d=null;\n  StreamingStatistics s=null;\n  if (u instanceof DescriptiveStatistics) {\n    d=(DescriptiveStatistics)u;\n    d.clear();\n  }\n else {\n    s=(StreamingStatistics)u;\n    s.clear();\n  }\n  mean=Double.NaN;\n  std=Double.NaN;\n  InputStream resourceAsStream=CertifiedDataTest.class.getResourceAsStream(resource);\n  Assert.assertNotNull(\"Could not find resource \" + resource,resourceAsStream);\n  BufferedReader in=new BufferedReader(new InputStreamReader(resourceAsStream));\n  String line=null;\n  for (int j=0; j < 60; j++) {\n    line=in.readLine();\n    if (j == 40) {\n      mean=Double.parseDouble(line.substring(line.lastIndexOf(\":\") + 1).trim());\n    }\n    if (j == 41) {\n      std=Double.parseDouble(line.substring(line.lastIndexOf(\":\") + 1).trim());\n    }\n  }\n  line=in.readLine();\n  while (line != null) {\n    if (d != null) {\n      d.addValue(Double.parseDouble(line.trim()));\n    }\n else {\n      s.addValue(Double.parseDouble(line.trim()));\n    }\n    line=in.readLine();\n  }\n  resourceAsStream.close();\n  in.close();\n}\n", "nl": "loads a DescriptiveStatistics off of a test file"}
{"code": "public void updateTree(){\n  final PhyloTree tree=getTree();\n  if (hasSyncedFormatFromSummaryToViewer)   SyncDataTableAndClassificationViewer.syncFormattingFromViewer2Summary(this,doc.getDataTable());\n  classification.getFullTree().extractInducedTree(id2NodeData,getCollapsedIds(),tree,id2Nodes);\n  nodeDrawer.setCounts(determineMaxAssigned());\n  if (tree.getRoot() != null) {\n    embedTree(tree.getRoot());\n  }\n  nodesWithMovedLabels.clear();\n  trans.setCoordinateRect(getBBox());\n  Rectangle rect=new Rectangle();\n  trans.w2d(getBBox(),rect);\n  setPreferredSize(rect.getSize());\n  if (tree.getRoot() != null) {\n    for (Edge e=tree.getRoot().getFirstOutEdge(); e != null; e=tree.getRoot().getNextOutEdge(e)) {\n      Node v=e.getTarget();\n      if ((Integer)v.getInfo() >= -3 && (Integer)v.getInfo() <= -1) {\n        setColor(e,Color.LIGHT_GRAY);\n        setColor(v,Color.LIGHT_GRAY);\n        setLabelColor(v,Color.LIGHT_GRAY);\n      }\n    }\n    setColor(getTree().getRoot(),Color.LIGHT_GRAY);\n    setLabelColor(getTree().getRoot(),Color.LIGHT_GRAY);\n    for (Edge e=tree.getRoot().getFirstOutEdge(); e != null; e=tree.getRoot().getNextOutEdge(e))     setColor(e,Color.LIGHT_GRAY);\n    if (getNumberOfDatasets() > 1 && nodeDrawer.getStyle() == NodeDrawer.Style.Circle) {\n      legendPanel.setStyle(getNodeDrawer().getStyle());\n    }\n    setupNodeLabels(false);\n  }\n  fitGraphToWindow();\n  if (!hasSyncedFormatFromSummaryToViewer) {\n    SyncDataTableAndClassificationViewer.syncFormattingFromSummary2Viewer(doc.getDataTable(),this);\n    hasSyncedFormatFromSummaryToViewer=true;\n  }\n  repaint();\n  updateStatusBar();\n  setPOWEREDBY(getMajorityRankOfLeaves());\n  viewerJTable.update();\n  viewerJTree.update();\n}\n", "nl": "Constructs and updates the tree"}
{"code": "private void checkLiteralValue(String message,Expression expression,double expectedValue){\n  Assert.assertEquals(expression.getClass(),LiteralExpressionImpl.class);\n  LiteralExpressionImpl literalExpression=(LiteralExpressionImpl)expression;\n  Object value=literalExpression.getValue();\n  Assert.assertEquals(message,value.getClass(),Double.class);\n  Double actualValue=(Double)value;\n  String additional=String.format(\" Expected '%f' Actual '%f'\",expectedValue,actualValue);\n  Assert.assertTrue(message + additional,Math.abs(expectedValue - actualValue) < epsilon);\n}\n", "nl": "Check literal value."}
{"code": "public ShardRouterException(Throwable cause){\n  super(cause);\n}\n", "nl": "Constructs a new runtime exception with the specified cause."}
{"code": "private void unpausePathEdgesForSource(LeakKey<N> leakKey){\n  Set<PausedEdge> pausedEdges=pausedPathEdges.get(leakKey);\n  if (pausedEdges != null) {\n    for (    PausedEdge edge : pausedEdges) {\n      if (pausedEdges.remove(edge)) {\n        if (DEBUG)         logger.debug(\"-- UNPAUSE {}: {}\",debugName,edge);\n        super.propagateUnbalancedReturnFlow(edge.retSiteC,edge.targetVal,edge.edgeFunction,edge.relatedCallSite);\n      }\n    }\n  }\n}\n", "nl": "Unpauses all edges associated with the given source statement."}
{"code": "public MersenneTwister(){\n  mt=new int[N];\n  setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n}\n", "nl": "Creates a new random number generator. <p> The instance is initialized using the current time plus the system identity hash code of this instance as the seed."}
{"code": "public static LogicalMetricColumn addNewLogicalMetricColumn(Schema schema,String name,LogicalMetric metric){\n  LogicalMetricColumn col=new LogicalMetricColumn(name,metric);\n  schema.addColumn(col);\n  return col;\n}\n", "nl": "Method to create a LogicalMetricColumn tied to a schema."}
{"code": "private int sampleLine(ResultPoint p1,ResultPoint p2,int size){\n  int result=0;\n  float d=distance(p1,p2);\n  float moduleSize=d / size;\n  float px=p1.getX();\n  float py=p1.getY();\n  float dx=moduleSize * (p2.getX() - p1.getX()) / d;\n  float dy=moduleSize * (p2.getY() - p1.getY()) / d;\n  for (int i=0; i < size; i++) {\n    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {\n      result|=1 << (size - i - 1);\n    }\n  }\n  return result;\n}\n", "nl": "Samples a line."}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && viewer.getPcoaTab().getThirdPC() == 2 && viewer.getPcoaTab().isIs3dMode();\n}\n", "nl": "this is currently selected?"}
{"code": "protected AdsDeleteAdsQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID."}
{"code": "public ThrowableSet mightThrowImplicitly(ThrowInst t){\n  return ThrowableSet.Manager.v().ALL_THROWABLES;\n}\n", "nl": "Returns the set of all <code>Throwable</code>s as the set of types that a <code>throw</code> instruction may throw implicitly,  that is, the possible types of errors which might arise in the course of executing the <code>throw</code> instruction, rather than the type of the <code>throw</code>'s operand."}
{"code": "private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){\n  int center=(minDim + maxDim) / 2;\n  int start=center;\n  while (start >= minDim) {\n    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {\n      start--;\n    }\n else {\n      int whiteRunStart=start;\n      do {\n        start--;\n      }\n while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));\n      int whiteRunSize=whiteRunStart - start;\n      if (start < minDim || whiteRunSize > maxWhiteRun) {\n        start=whiteRunStart;\n        break;\n      }\n    }\n  }\n  start++;\n  int end=center;\n  while (end < maxDim) {\n    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {\n      end++;\n    }\n else {\n      int whiteRunStart=end;\n      do {\n        end++;\n      }\n while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));\n      int whiteRunSize=end - whiteRunStart;\n      if (end >= maxDim || whiteRunSize > maxWhiteRun) {\n        end=whiteRunStart;\n        break;\n      }\n    }\n  }\n  end--;\n  return end > start ? new int[]{start,end} : null;\n}\n", "nl": "Computes the start and end of a region of pixels, either horizontally or vertically, that could be part of a Data Matrix barcode."}
{"code": "private void sendProcessDisconnectionRequest(){\n  EasyMock.expect(this.configurationControllerMock.getProcessConfiguration()).andReturn(this.processConfigurationMock).times(1);\n  EasyMock.expect(this.processConfigurationMock.getProcessID()).andReturn(-1L).times(1,2);\n  EasyMock.expect(this.processConfigurationMock.getProcessName()).andReturn(PROCESS_NAME).times(1,3);\n  EasyMock.expect(this.processConfigurationMock.getprocessPIK()).andReturn(PROCESS_PIK).times(1,2);\n  EasyMock.replay(this.configurationControllerMock,this.processConfigurationMock);\n  this.activeRequestSender.sendProcessDisconnectionRequest(this.configurationControllerMock.getProcessConfiguration(),-1L);\n  EasyMock.verify(this.configurationControllerMock,this.processConfigurationMock);\n}\n", "nl": "This method do all the mocking work before and after calling the sendProcessDisonnectionRequest() function. It is common for all tests cause the differences are in the reply messages"}
{"code": "public static String readStringFromFile(String path,JavaSparkContext sc) throws IOException {\n  return readStringFromFile(path,sc.sc());\n}\n", "nl": "Read a UTF-8 format String from HDFS (or local)"}
{"code": "public boolean hasDiphone(String diphone){\n  return !(missingDiphones != null && missingDiphones.contains(diphone));\n}\n", "nl": "Verify whether a diphone (p1-p2) is in the list of missing diphones."}
{"code": "public static int expForDefence(Creature attacker,Creature defenced){\n  float attackerCost=getTotalCost(attacker);\n  float defencedCost=getTotalCost(defenced);\n  return result(ln(attackerCost / 1.3f - defencedCost * 1.7f));\n}\n", "nl": "defenceLevel >= attackLevel"}
{"code": "@Transactional public UserDTO save(UserDTO dto){\n  if (dto == null) {\n    return null;\n  }\n  User user;\n  if (dto.isIdSet()) {\n    user=userRepository.findOne(dto.id);\n  }\n else {\n    user=new User();\n  }\n  user.setLogin(dto.login);\n  user.setPassword(dto.password);\n  user.setEmail(dto.email);\n  user.setIsEnabled(dto.isEnabled);\n  user.setCivility(dto.civility);\n  user.setFirstName(dto.firstName);\n  user.setLastName(dto.lastName);\n  user.setCreationDate(dto.creationDate);\n  user.setCreationAuthor(dto.creationAuthor);\n  user.setLastModificationDate(dto.lastModificationDate);\n  user.setLastModificationAuthor(dto.lastModificationAuthor);\n  user.setVersion(dto.version);\n  user.getRoles().clear();\n  if (dto.roles != null) {\n    dto.roles.stream().forEach(null);\n  }\n  return toDTO(userRepository.save(user));\n}\n", "nl": "Save the passed dto as a new entity or update the corresponding entity if any."}
{"code": "@RequestProcessing(value=\"/qq\",method=HTTPRequestMethod.POST) public void qq(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {\n  final String key=XiaoVs.getString(\"qq.bot.key\");\n  if (!key.equals(request.getParameter(\"key\"))) {\n    response.sendError(HttpServletResponse.SC_FORBIDDEN);\n    return;\n  }\n  String msg=request.getParameter(\"msg\");\n  if (StringUtils.isBlank(msg)) {\n    LOGGER.warn(\"Empty msg body\");\n    response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n    return;\n  }\n  LOGGER.info(\"Push QQ groups [msg=\" + msg + \"]\");\n  qqService.sendToPushQQGroups(msg);\n  final JSONObject ret=new JSONObject();\n  context.renderJSON(ret);\n  ret.put(Keys.STATUS_CODE,true);\n}\n", "nl": "Handles QQ message."}
{"code": "private void initView(){\n  initBasicPart();\n  initFilterPart();\n  initDownloadPart();\n}\n", "nl": "<br> UI."}
{"code": "public synchronized boolean unexport(boolean force){\n  if (!used) {\n    throw new IllegalStateException(\"an object has not been exported via this exporter\");\n  }\n  return underlyingExporter.unexport(force);\n}\n", "nl": "Unexports the activatable remote object that was previously exported via the <code>export</code> method of the underlying exporter supplied during construction of this exporter.  Returns the result of unexporting the remote object by calling the <code>unexport</code> method on the underlying exporter passing <code>force</code> as the argument."}
{"code": "private Token pollNext(){\n  Token result=currentToken;\n  if (matcher.find()) {\n    if (index < matcher.start()) {\n      currentToken=new Token(TokenKind.TEXT,source.substring(index,matcher.start()),lineNum);\n      index=matcher.start();\n      matcher.region(index,matcher.regionEnd());\n    }\n else {\n      currentToken=createTokenFromMatcher();\n      index=matcher.end();\n    }\n  }\n else {\n    if (index < source.length()) {\n      currentToken=new Token(TokenKind.TEXT,source.substring(index),lineNum);\n      index=source.length();\n    }\n else {\n      currentToken=null;\n    }\n  }\n  return result;\n}\n", "nl": "Returns next token. The matcher will move forward."}
{"code": "@Override public int available(){\n  int available=currentlyInBuffer();\n  if (inputSource != null)   available+=inputSource.available();\n  return available;\n}\n", "nl": "The number of doubles that can currently be read from this double data source without blocking. This number can change over time."}
{"code": "public void print(){\n  if (DEBUG_PRINT_REF_COUNTS) {\n    System.out.print(\"num\\t\");\n    System.out.print(\"type\\t\");\n    System.out.print(\"name\\t\");\n    System.out.print(\"val\\t\");\n    System.out.print(\"par\\t\");\n    System.out.print(\"lch\\t\");\n    System.out.print(\"psib\");\n    System.out.println();\n    for (int i=0; i < fNodeType.length; i++) {\n      if (fNodeType[i] != null) {\n        System.out.print(\"--------\");\n        System.out.print(\"--------\");\n        System.out.print(\"--------\");\n        System.out.print(\"--------\");\n        System.out.print(\"--------\");\n        System.out.print(\"--------\");\n        System.out.print(\"--------\");\n        System.out.println();\n        System.out.print(i);\n        System.out.print('\\t');\nswitch (fNodeType[i][CHUNK_SIZE]) {\ncase NodeImpl.ELEMENT_DEFINITION_NODE:\n{\n            System.out.print(\"EDef\");\n            break;\n          }\ncase Node.DOCUMENT_NODE:\n{\n          System.out.print(\"Doc\");\n          break;\n        }\ncase Node.DOCUMENT_TYPE_NODE:\n{\n        System.out.print(\"DType\");\n        break;\n      }\ncase Node.COMMENT_NODE:\n{\n      System.out.print(\"Com\");\n      break;\n    }\ncase Node.PROCESSING_INSTRUCTION_NODE:\n{\n    System.out.print(\"PI\");\n    break;\n  }\ncase Node.ELEMENT_NODE:\n{\n  System.out.print(\"Elem\");\n  break;\n}\ncase Node.ENTITY_NODE:\n{\nSystem.out.print(\"Ent\");\nbreak;\n}\ncase Node.ENTITY_REFERENCE_NODE:\n{\nSystem.out.print(\"ERef\");\nbreak;\n}\ncase Node.TEXT_NODE:\n{\nSystem.out.print(\"Text\");\nbreak;\n}\ncase Node.ATTRIBUTE_NODE:\n{\nSystem.out.print(\"Attr\");\nbreak;\n}\ncase DeferredNode.TYPE_NODE:\n{\nSystem.out.print(\"TypeInfo\");\nbreak;\n}\ndefault :\n{\nSystem.out.print(\"?\" + fNodeType[i][CHUNK_SIZE]);\n}\n}\nSystem.out.print('\\t');\nSystem.out.print(fNodeName[i][CHUNK_SIZE]);\nSystem.out.print('\\t');\nSystem.out.print(fNodeValue[i][CHUNK_SIZE]);\nSystem.out.print('\\t');\nSystem.out.print(fNodeURI[i][CHUNK_SIZE]);\nSystem.out.print('\\t');\nSystem.out.print(fNodeParent[i][CHUNK_SIZE]);\nSystem.out.print('\\t');\nSystem.out.print(fNodeLastChild[i][CHUNK_SIZE]);\nSystem.out.print('\\t');\nSystem.out.print(fNodePrevSib[i][CHUNK_SIZE]);\nSystem.out.print('\\t');\nSystem.out.print(fNodeExtra[i][CHUNK_SIZE]);\nSystem.out.println();\n}\n}\n}\nif (DEBUG_PRINT_TABLES) {\nSystem.out.println(\"# start table\");\nfor (int i=0; i < fNodeCount; i++) {\nint chunk=i >> CHUNK_SHIFT;\nint index=i & CHUNK_MASK;\nif (i % 10 == 0) {\nSystem.out.print(\"num\\t\");\nSystem.out.print(\"type\\t\");\nSystem.out.print(\"name\\t\");\nSystem.out.print(\"val\\t\");\nSystem.out.print(\"uri\\t\");\nSystem.out.print(\"par\\t\");\nSystem.out.print(\"lch\\t\");\nSystem.out.print(\"psib\\t\");\nSystem.out.print(\"xtra\");\nSystem.out.println();\n}\nSystem.out.print(i);\nSystem.out.print('\\t');\nswitch (getChunkIndex(fNodeType,chunk,index)) {\ncase NodeImpl.ELEMENT_DEFINITION_NODE:\n{\nSystem.out.print(\"EDef\");\nbreak;\n}\ncase Node.DOCUMENT_NODE:\n{\nSystem.out.print(\"Doc\");\nbreak;\n}\ncase Node.DOCUMENT_TYPE_NODE:\n{\nSystem.out.print(\"DType\");\nbreak;\n}\ncase Node.COMMENT_NODE:\n{\nSystem.out.print(\"Com\");\nbreak;\n}\ncase Node.PROCESSING_INSTRUCTION_NODE:\n{\nSystem.out.print(\"PI\");\nbreak;\n}\ncase Node.ELEMENT_NODE:\n{\nSystem.out.print(\"Elem\");\nbreak;\n}\ncase Node.ENTITY_NODE:\n{\nSystem.out.print(\"Ent\");\nbreak;\n}\ncase Node.ENTITY_REFERENCE_NODE:\n{\nSystem.out.print(\"ERef\");\nbreak;\n}\ncase Node.TEXT_NODE:\n{\nSystem.out.print(\"Text\");\nbreak;\n}\ncase Node.ATTRIBUTE_NODE:\n{\nSystem.out.print(\"Attr\");\nbreak;\n}\ncase DeferredNode.TYPE_NODE:\n{\nSystem.out.print(\"TypeInfo\");\nbreak;\n}\ndefault :\n{\nSystem.out.print(\"?\" + getChunkIndex(fNodeType,chunk,index));\n}\n}\nSystem.out.print('\\t');\nSystem.out.print(getChunkValue(fNodeName,chunk,index));\nSystem.out.print('\\t');\nSystem.out.print(getNodeValue(chunk,index));\nSystem.out.print('\\t');\nSystem.out.print(getChunkValue(fNodeURI,chunk,index));\nSystem.out.print('\\t');\nSystem.out.print(getChunkIndex(fNodeParent,chunk,index));\nSystem.out.print('\\t');\nSystem.out.print(getChunkIndex(fNodeLastChild,chunk,index));\nSystem.out.print('\\t');\nSystem.out.print(getChunkIndex(fNodePrevSib,chunk,index));\nSystem.out.print('\\t');\nSystem.out.print(getChunkIndex(fNodeExtra,chunk,index));\nSystem.out.println();\n}\nSystem.out.println(\"# end table\");\n}\n}\n", "nl": "Prints out the tables."}
{"code": "public Door(final TreeSpecies species,BlockFace face){\n  this(getWoodDoorOfSpecies(species),face,false);\n}\n", "nl": "Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to closed"}
{"code": "@Override public SourceDataTag clone(){\n  SourceDataTag clonedSourceDataTag=null;\n  try {\n    clonedSourceDataTag=(SourceDataTag)super.clone();\n    if (this.address != null) {\n      clonedSourceDataTag.setAddress(this.address.clone());\n    }\n    if (this.currentValue != null) {\n      clonedSourceDataTag.currentValue=this.currentValue.clone();\n    }\n  }\n catch (  CloneNotSupportedException e) {\n    e.printStackTrace();\n  }\n  return clonedSourceDataTag;\n}\n", "nl": "Does a deep clone of this data tag."}
{"code": "public boolean isContent(){\n  return isOptionEnabled(UrlFilterRuleOption.CONTENT);\n}\n", "nl": "If true -- ContentFilter rules cannot be applied to page matching this rule."}
{"code": "private void initPresenter(){\n  this.multiFilterBarPresenter=new MultiFilterBarImplementor(multiFilterBarModel,this);\n  this.popupManagePresenter=new MultiFilterFragmentPopupManageImplementor(this);\n  this.messageManagePresenter=new MessageManageImplementor(this);\n}\n", "nl": "<br> presenter."}
{"code": "public CandidateEstimator(DoubleDataSource signal,Window window,int frameShift,int samplingRate){\n  super(signal,window,frameShift,samplingRate,NCANDIDATES);\n  this.correlationInput=new double[MathUtils.closestPowerOfTwoAbove(2 * window.getLength())];\n  this.minF0=DEFAULT_MINF0;\n  this.maxF0=DEFAULT_MAXF0;\n}\n", "nl": "Track the F0 contour, using the Autocorrelation method."}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.ip_logs"}
{"code": "public static void i(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.i(tag,msg);\n}\n", "nl": "Send an INFO log message"}
{"code": "public void startHorizontalAnimate(){\n  isPlaying=true;\n  invalidate();\n}\n", "nl": "start loop animate"}
{"code": "protected AudioDeleteQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the audio file."}
{"code": "public static float toFloatBits(int r,int g,int b,int a){\n  int color=(a << 24) | (b << 16) | (g << 8)| r;\n  float floatColor=NumberUtils.intToFloatColor(color);\n  return floatColor;\n}\n", "nl": "Packs the four color components which should be in the range 0-255 into a 32-bit integer and then converts it to a float. Note that no range checking is performed for higher performance."}
{"code": "public static String loadFileToStringWithNewlines(String sFilename){\n  StringBuffer sb=new StringBuffer();\n  try {\n    BufferedReader in=new BufferedReader(new FileReader(sFilename));\n    String line;\n    while ((line=in.readLine()) != null) {\n      sb.append(line);\n      sb.append(\"\\n\");\n    }\n    in.close();\n  }\n catch (  Exception e) {\n    System.err.println(\"Coult not load file:\" + sFilename);\n    e.printStackTrace(System.err);\n  }\n  return sb.toString();\n}\n", "nl": "Loads the contents of a file into a string, preserving newlines."}
{"code": "private void updateDimensionRow(Document luceneDimensionRowDoc,Map<DimensionField,Field> fieldMap,IndexWriter writer,DimensionRow newRow) throws IOException {\n  for (  DimensionField field : dimension.getDimensionFields()) {\n    Field fieldToUpdate=fieldMap.get(field);\n    fieldToUpdate.setStringValue(newRow.get(field));\n  }\n  Term keyTerm=new Term(fieldMap.get(dimension.getKey()).name(),newRow.get(dimension.getKey()));\n  writer.updateDocument(keyTerm,luceneDimensionRowDoc);\n}\n", "nl": "Update the dimension row in the index."}
{"code": "private Map<String,List<ChartObject>> convertResult(StatisticsDocumentHandler handler){\n  Map<String,List<ChartObject>> asResult=new HashMap<>();\n  List<ChartObject> initial=handler.getResult();\n  final ChartObject chartObject=new ChartObject();\n  chartObject.setValues(new HashMap<>());\n  asResult.put(RESULT,Collections.singletonList(!initial.isEmpty() ? initial.get(0) : chartObject));\n  return asResult;\n}\n", "nl": "Convert to chart result view"}
{"code": "protected void shareBySinaWeibo(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SINA_WEIBO,getShareData(ShareConstant.SHARE_CHANNEL_SINA_WEIBO),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share weibo"}
{"code": "public BOMInputStream(InputStream delegate,boolean include,ByteOrderMark... boms){\n  super(delegate);\n  if (boms == null || boms.length == 0) {\n    throw new IllegalArgumentException(\"No BOMs specified\");\n  }\n  this.include=include;\n  Arrays.sort(boms,ByteOrderMarkLengthComparator);\n  this.boms=Arrays.asList(boms);\n}\n", "nl": "Constructs a new BOM InputStream that detects the specified BOMs and optionally includes them."}
{"code": "public User(){\n}\n", "nl": "Instantiates a new user."}
{"code": "public AbortPreparedTransactionSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private VUserManagerService(Context context,VPackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){\n  mContext=context;\n  mPm=pm;\n  mInstallLock=installLock;\n  mPackagesLock=packagesLock;\nsynchronized (mInstallLock) {\nsynchronized (mPackagesLock) {\n      mUsersDir=new File(dataDir,USER_INFO_DIR);\n      mUsersDir.mkdirs();\n      File userZeroDir=new File(mUsersDir,\"0\");\n      userZeroDir.mkdirs();\n      mBaseUserPath=baseUserPath;\n      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);\n      readUserListLocked();\n      ArrayList<VUserInfo> partials=new ArrayList<VUserInfo>();\n      for (int i=0; i < mUsers.size(); i++) {\n        VUserInfo ui=mUsers.valueAt(i);\n        if (ui.partial && i != 0) {\n          partials.add(ui);\n        }\n      }\n      for (int i=0; i < partials.size(); i++) {\n        VUserInfo ui=partials.get(i);\n        VLog.w(LOG_TAG,\"Removing partially created user #\" + i + \" (name=\"+ ui.name+ \")\");\n        removeUserStateLocked(ui.id);\n      }\n      sInstance=this;\n    }\n  }\n}\n", "nl": "Available for testing purposes."}
{"code": "public static int readInt(){\n  return scanner.nextInt();\n}\n", "nl": "Reads the next token from standard input, parses it as an integer, and returns the integer."}
{"code": "public SootClass(String name,int modifiers){\n  if (name.charAt(0) == '[')   throw new RuntimeException(\"Attempt to make a class whose name starts with [\");\n  setName(name);\n  this.modifiers=modifiers;\n  refType=RefType.v(name);\n  refType.setSootClass(this);\n  if (Options.v().debug_resolver())   G.v().out.println(\"created \" + name + \" with modifiers \"+ modifiers);\n  setResolvingLevel(BODIES);\n  Scene.v().getClassNumberer().add(this);\n}\n", "nl": "Constructs an empty SootClass with the given name and modifiers."}
{"code": "public TopicSubscriber createDurableSubscriber(Topic topic,String name,String selector,boolean noLocal) throws JMSException {\n  throw new IllegalStateException(\"Forbidden call on a QueueSession.\");\n}\n", "nl": "API method."}
{"code": "public static <T,U,V>ImmutablePair<T,V> withRight(ImmutablePair<T,U> pair,V right){\n  return new ImmutablePair<>(pair.getLeft(),right);\n}\n", "nl": "Given an ImmutablePair, and a right value, returns a new ImmutablePair with the same left value, and the specified right value."}
{"code": "protected void mergeLists(GossipManager gossipManager,RemoteGossipMember senderMember,List<GossipMember> remoteList){\n  for (  LocalGossipMember i : gossipManager.getDeadList()) {\n    if (i.getId().equals(senderMember.getId())) {\n      LOGGER.info(gossipManager.getMyself() + \" contacted by dead member \" + senderMember.getUri());\n      LocalGossipMember newLocalMember=new LocalGossipMember(senderMember.getClusterName(),senderMember.getUri(),senderMember.getId(),senderMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());\n      gossipManager.reviveMember(newLocalMember);\n      newLocalMember.startTimeoutTimer();\n    }\n  }\n  for (  GossipMember remoteMember : remoteList) {\n    if (remoteMember.getId().equals(gossipManager.getMyself().getId())) {\n      continue;\n    }\n    if (gossipManager.getLiveMembers().contains(remoteMember)) {\n      LocalGossipMember localMember=gossipManager.getLiveMembers().get(gossipManager.getLiveMembers().indexOf(remoteMember));\n      if (remoteMember.getHeartbeat() > localMember.getHeartbeat()) {\n        localMember.setHeartbeat(remoteMember.getHeartbeat());\n        localMember.resetTimeoutTimer();\n      }\n    }\n else     if (!gossipManager.getLiveMembers().contains(remoteMember) && !gossipManager.getDeadList().contains(remoteMember)) {\n      LocalGossipMember newLocalMember=new LocalGossipMember(remoteMember.getClusterName(),remoteMember.getUri(),remoteMember.getId(),remoteMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());\n      gossipManager.createOrReviveMember(newLocalMember);\n      newLocalMember.startTimeoutTimer();\n    }\n else {\n      if (gossipManager.getDeadList().contains(remoteMember)) {\n        LocalGossipMember localDeadMember=gossipManager.getDeadList().get(gossipManager.getDeadList().indexOf(remoteMember));\n        if (remoteMember.getHeartbeat() > localDeadMember.getHeartbeat()) {\n          LocalGossipMember newLocalMember=new LocalGossipMember(remoteMember.getClusterName(),remoteMember.getUri(),remoteMember.getId(),remoteMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());\n          gossipManager.reviveMember(newLocalMember);\n          newLocalMember.startTimeoutTimer();\n          LOGGER.debug(\"Removed remote member \" + remoteMember.getAddress() + \" from dead list and added to local member list.\");\n        }\n else {\n          LOGGER.debug(\"me \" + gossipManager.getMyself());\n          LOGGER.debug(\"sender \" + senderMember);\n          LOGGER.debug(\"remote \" + remoteList);\n          LOGGER.debug(\"live \" + gossipManager.getLiveMembers());\n          LOGGER.debug(\"dead \" + gossipManager.getDeadList());\n        }\n      }\n else {\n        LOGGER.debug(\"me \" + gossipManager.getMyself());\n        LOGGER.debug(\"sender \" + senderMember);\n        LOGGER.debug(\"remote \" + remoteList);\n        LOGGER.debug(\"live \" + gossipManager.getLiveMembers());\n        LOGGER.debug(\"dead \" + gossipManager.getDeadList());\n      }\n    }\n  }\n}\n", "nl": "Merge remote list (received from peer), and our local member list. Simply, we must update the heartbeats that the remote list has with our list. Also, some additional logic is needed to make sure we have not timed out a member and then immediately received a list with that member."}
{"code": "private void readObjectNoData() throws ObjectStreamException {\n  throw new InvalidObjectException(\"no data found when attempting to \" + \"deserialize TxnMgrProxy instance\");\n}\n", "nl": "During deserialization of an instance of this class, if it is found that the stream contains no data, this method is automatically invoked. Because it is expected that the stream should always contain data, this implementation of this method simply declares that something must be wrong."}
{"code": "public static void normalizeVector3(FloatBuffer buf,int index){\n  Vector3f tempVec3=Vector3f.newInstance();\n  populateFromBuffer(tempVec3,buf,index);\n  tempVec3.normalizeLocal();\n  setInBuffer(tempVec3,buf,index);\n  Vector3f.recycle(tempVec3);\n}\n", "nl": "Normalize a Vector3f in-buffer."}
{"code": "@VisibleForTesting public boolean isSystemBuild(PackageManager pm,String packageName){\n  try {\n    ApplicationInfo info=pm.getApplicationInfo(packageName,ApplicationInfo.FLAG_SYSTEM);\n    if ((info.flags & ApplicationInfo.FLAG_SYSTEM) == 0)     throw new SecurityException();\n  }\n catch (  NameNotFoundException e) {\n    Log.e(TAG,\"Package with name \" + packageName + \" not found\");\n    return false;\n  }\ncatch (  SecurityException e) {\n    Log.e(TAG,\"Caller with package name \" + packageName + \" is not in the system build\");\n    return false;\n  }\n  return true;\n}\n", "nl": "Returns whether the caller application is a part of the system build."}
{"code": "public boolean isRetained(){\n  return retained;\n}\n", "nl": "Gets the value of the retained property."}
{"code": "protected synchronized void startEvictor(long delay){\n  if (null != evictor) {\n    evictor.cancel();\n    evictor=null;\n  }\n  if (delay > 0) {\n    evictor=new Evictor();\n    EVICTION_TIMER.schedule(evictor,delay,delay);\n  }\n}\n", "nl": "Start the eviction thread or service, or when <i>delay</i> is non-positive, stop it if it is already running."}
{"code": "public void close() throws JMSException {\n  try {\n    if (!m_closed) {\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.fine(\"GSQueueBrowserImpl.close() closing browser: \" + toString());\n      }\n      m_session.removeBrower(this);\n    }\n    m_closed=true;\n  }\n  finally {\n    if (null != gsIterator) {\n      gsIterator.cancel();\n      gsIterator=null;\n    }\n  }\n}\n", "nl": "API method."}
{"code": "public void updateView(String what){\n  uptodate=false;\n  if (doClear) {\n    clear();\n    doClear=false;\n  }\n  commandManager.updateEnableState();\n  setTitle();\n  statusBar.setText2(\"Rows: \" + countVisibleNodes());\n  uptodate=true;\n  FindToolBar findToolBar=searchManager.getFindDialogAsToolBar();\n  if (findToolBar.isClosing()) {\n    showFindToolBar=false;\n    findToolBar.setClosing(false);\n  }\n  if (!findToolBar.isEnabled() && showFindToolBar) {\n    mainPanel.add(findToolBar,BorderLayout.NORTH);\n    findToolBar.setEnabled(true);\n    frame.getContentPane().validate();\n    getCommandManager().updateEnableState();\n  }\n else   if (findToolBar.isEnabled() && !showFindToolBar) {\n    mainPanel.remove(findToolBar);\n    findToolBar.setEnabled(false);\n    frame.getContentPane().validate();\n    getCommandManager().updateEnableState();\n  }\n  if (findToolBar.isEnabled())   findToolBar.clearMessage();\n}\n", "nl": "ask view to rescan itself. This is method is wrapped into a runnable object and put in the swing event queue to avoid concurrent modifications."}
{"code": "private static Set<URL> urlsToReflect(List<String> packagePrefixes){\n  List<String> prefixesWithFlags=ImmutableList.<String>builder().addAll(packagePrefixes).add(\"org.flagz\").build();\n  return prefixesWithFlags.stream().flatMap(null).collect(Collectors.toSet());\n}\n", "nl": "Get the appropriate set of URLs. This returns a set of URLs for a given set of package prefixes. You can use an empty string to get everything but it can be slow for big apps."}
{"code": "private RevealatorHelper(){\n}\n", "nl": "Disallow instantiation."}
{"code": "public List<X509Certificate> checkServerTrusted(X509Certificate[] chain,String authType,String hostname) throws CertificateException {\n  return checkTrusted(chain,authType,hostname,false);\n}\n", "nl": "For backward compatibility with older Android API that used String for the hostname only."}
{"code": "private Object readResolve(){\n  return LazyHolder.INSTANCE;\n}\n", "nl": "Handle deserialization of the singleton."}
{"code": "public void write(OutputStream os) throws IOException {\n  if (responseFormatType == ResponseFormatType.CSV) {\n    writeCsvResponse(os);\n  }\n else   if (responseFormatType == ResponseFormatType.JSONAPI) {\n    writeJsonApiResponse(os,missingIntervals,volatileIntervals,pagination);\n  }\n else {\n    writeJsonResponse(os,missingIntervals,volatileIntervals,pagination);\n  }\n}\n", "nl": "Writes the response string in the proper format."}
{"code": "@Override public Change configureCacheObject(final RuleTag ruleTag,final Properties properties) throws ConfigurationException {\n  setCommonProperties((RuleTagCacheObject)ruleTag,properties);\n  String tmpStr=properties.getProperty(\"ruleText\");\n  if (tmpStr != null) {\n    ((RuleTagCacheObject)ruleTag).setRuleText(tmpStr);\n    setParentSupervisionIds(ruleTag);\n  }\n  ruleTag.setTopic(tagPublicationTrunk + \".\" + ruleTag.getLowestProcessId());\n  return null;\n}\n", "nl": "For rules, sets the rule text field (which in turn parses the rule expression and set the corresponding field). Also sets the parent equipments and processes for this rule."}
{"code": "@Deprecated public UrlSpaceConfigurer userDetails(UserDetails userDetails){\n  return credentialsProvider(new DefaultCredentialsProvider(userDetails));\n}\n", "nl": "Creates a secured space with the provided user details."}
{"code": "protected AbstractSpaceQuery(Class<?> entryClass,ISpacePredicate predicate){\n  this._entryTypeName=entryClass.getName();\n  this._predicate=predicate;\n}\n", "nl": "Creates a space query using the specified class and predicate."}
{"code": "public JSONException syntaxError(String message){\n  return new JSONException(message + toString());\n}\n", "nl": "Make a JSONException to signal a syntax error."}
{"code": "protected FaveAddLinkQuery link(String value){\n  return unsafeParam(\"link\",value);\n}\n", "nl": "Link URL."}
{"code": "public static String copyFromClipboard(){\n  try {\n    String data=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);\n    return data;\n  }\n catch (  HeadlessException|UnsupportedFlavorException|IOException e) {\n    LOGGER.log(Level.WARNING,\"Error retrieving text from clipboard.\",e);\n    return \"\";\n  }\n}\n", "nl": "Retrieve text from clipboard"}
{"code": "private void addHelpNodesToTree(HelpNode node,DefaultTreeModel model,MutableTreeNode parent){\n  MutableTreeNode n=new DefaultMutableTreeNode(node);\n  int index=model.getChildCount(parent);\n  model.insertNodeInto(n,parent,index);\n  for (int i=0; i < node.nodes.size(); i++) {\n    addHelpNodesToTree(node.nodes.get(i),model,n);\n  }\n}\n", "nl": "Recursive method to add nodes to the JTree."}
{"code": "public XmlStreamReader(InputStream is,boolean lenient) throws IOException {\n  this(is,lenient,null);\n}\n", "nl": "Creates a Reader for a raw InputStream. <p> It follows the same logic used for files. <p> If lenient detection is indicated and the detection above fails as per specifications it then attempts the following: <p> If the content type was 'text/html' it replaces it with 'text/xml' and tries the detection again. <p> Else if the XML prolog had a charset encoding that encoding is used. <p> Else if the content type had a charset encoding that encoding is used. <p> Else 'UTF-8' is used. <p> If lenient detection is indicated an XmlStreamReaderException is never thrown."}
{"code": "public TIntIterator(TIntHash hash){\n  super(hash);\n  this._hash=hash;\n}\n", "nl": "Creates a TIntIterator for the elements in the specified collection."}
{"code": "public static int geometric(double p){\n  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException(\"Probability must be between 0.0 and 1.0\");\n  return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p));\n}\n", "nl": "Returns a random integer from a geometric distribution with success probability <em>p</em>."}
{"code": "public NumberRangeModel(long lo,long hi,long min,long max){\n  this(new Long(lo),new Long(hi),new Long(min),new Long(max));\n}\n", "nl": "Create a new NumberRangeModel for the given range."}
{"code": "private void prepareBuffers(){\n  ByteBuffer[] out1=new ByteBuffer[1];\n  ByteBuffer buffer=ByteBuffer.allocate(dimensionValue1.length());\n  buffer.put(dimensionValue1.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  buffer.rewind();\n  out1[0]=buffer;\n  ByteBuffer[] out2=new ByteBuffer[1];\n  ByteBuffer buffer2=ByteBuffer.allocate(dimensionValue2.length());\n  buffer2.put(dimensionValue2.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  buffer2.rewind();\n  out2[0]=buffer2;\n  byte[] arr1=packByteBufferIntoSingleByteArray(out1);\n  byte[] arr2=packByteBufferIntoSingleByteArray(out2);\n  buff1=ByteBuffer.wrap(arr1);\n  buff1.position(4);\n  buff1.limit(buff1.position() + dimensionValue1.length());\n  buff2=ByteBuffer.wrap(arr2);\n  buff2.position(4);\n  buff2.limit(buff2.position() + dimensionValue2.length());\n}\n", "nl": "This will prepare the byte buffers in the required format for comparision."}
{"code": "public static String toDateString(java.util.Date date,String format){\n  if (date == null)   return \"\";\n  SimpleDateFormat dateFormat=null;\n  if (format != null) {\n    dateFormat=new SimpleDateFormat(format);\n  }\n else {\n    dateFormat=new SimpleDateFormat();\n  }\n  Calendar calendar=Calendar.getInstance();\n  calendar.setTime(date);\n  return dateFormat.format(date);\n}\n", "nl": "Makes a date String in the given from a Date"}
{"code": "protected void checkAndSendNotation(Notation not){\n  if (isRootDocument()) {\n    int index=fNotations.indexOf(not);\n    if (index == -1) {\n      XMLResourceIdentifier id=new XMLResourceIdentifierImpl(not.publicId,not.systemId,not.baseURI,not.expandedSystemId);\n      addNotation(not.name,id,not.augmentations);\n      if (fSendUEAndNotationEvents && fDTDHandler != null) {\n        fDTDHandler.notationDecl(not.name,id,not.augmentations);\n      }\n    }\n else {\n      Notation localNotation=(Notation)fNotations.get(index);\n      if (!not.isDuplicate(localNotation)) {\n        reportFatalError(\"NonDuplicateNotation\",new Object[]{not.name});\n      }\n    }\n  }\n else {\n    fParentXIncludeHandler.checkAndSendNotation(not);\n  }\n}\n", "nl": "The purpose of this method is to check if a Notation conflicts with a previously declared notation in the current pipeline stack.  If there is no conflict, the Notation is sent by the root pipeline."}
{"code": "private static Scope buildScope(){\n  return Scope.build(Scope.R_BASICPROFILE,Scope.R_EMAILADDRESS);\n}\n", "nl": "Build the list of member permissions our LinkedIn session requires"}
{"code": "public static void forEachRegistry(ServiceHost serviceHost,String tenantLink,Consumer<Collection<String>> registryLinksConsumer,Consumer<Collection<Throwable>> failureConsumer){\n  List<QueryTask> queryTasks=new ArrayList<QueryTask>();\n  if (tenantLink != null) {\n    queryTasks.add(buildRegistryQueryByGroup(null));\n    queryTasks.add(buildRegistryQueryByGroup(tenantLink));\n  }\n else {\n    queryTasks.add(buildAllRegistriesQuery());\n  }\n  List<Operation> queryOperations=new ArrayList<>();\n  for (  QueryTask queryTask : queryTasks) {\n    queryOperations.add(Operation.createPost(UriUtils.buildUri(serviceHost,ServiceUriPaths.CORE_QUERY_TASKS)).setBody(queryTask).setReferer(serviceHost.getUri()));\n  }\n  if (!queryOperations.isEmpty()) {\n    OperationJoin.create(queryOperations.toArray(new Operation[0])).setCompletion(null).sendWith(serviceHost);\n  }\n else {\n    registryLinksConsumer.accept(Collections.emptyList());\n  }\n}\n", "nl": "Do something with each registry available to the given group (and global registries)"}
{"code": "public ArithmeticExpression(int operation,Expression left,Expression right){\n  super(operation,ADD,MOD,left,right);\n  m_type=null;\n}\n", "nl": "Create a new ArithmeticExpression."}
{"code": "public static int daysInFebruary(int year){\n  return (((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28);\n}\n", "nl": "Given integer argument year, returns number of days in February of that year."}
{"code": "public int insertBefore(int parentIndex,int newChildIndex,int refChildIndex){\n  if (refChildIndex == -1) {\n    appendChild(parentIndex,newChildIndex);\n    return newChildIndex;\n  }\n  int nchunk=newChildIndex >> CHUNK_SHIFT;\n  int nindex=newChildIndex & CHUNK_MASK;\n  int rchunk=refChildIndex >> CHUNK_SHIFT;\n  int rindex=refChildIndex & CHUNK_MASK;\n  int previousIndex=getChunkIndex(fNodePrevSib,rchunk,rindex);\n  setChunkIndex(fNodePrevSib,newChildIndex,rchunk,rindex);\n  setChunkIndex(fNodePrevSib,previousIndex,nchunk,nindex);\n  return newChildIndex;\n}\n", "nl": "Inserts a child before the specified node in the table."}
{"code": "public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){\n  if (map == null || key == null) {\n    return false;\n  }\n  map.put(key,value);\n  return true;\n}\n", "nl": "add key-value pair to map, key need not null"}
{"code": "public static boolean hasNameChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){\n  return !sourceDataTag.getName().equals(oldSourceDataTag.getName());\n}\n", "nl": "Checks if the name has changed between the old and the new data tag."}
{"code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_bluetooth);\n  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n  unpairedListView=(ListView)findViewById(R.id.unpairedListView);\n  mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();\n  if (mBluetoothAdapter == null) {\n    Toast.makeText(Bluetooth.this,\"Sorry, Your device doesn't support Bluetooth !\",Toast.LENGTH_SHORT).show();\n  }\n else {\n    if (mBluetoothAdapter.isEnabled()) {\n      mBluetoothAdapter.disable();\n    }\n    Intent enableBtIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\n    startActivityForResult(enableBtIntent,REQUEST_ENABLE_BT);\n  }\n  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);\n}\n", "nl": "Default method which launches itself as soon as activity starts"}
{"code": "public LabelRenderer(){\n}\n", "nl": "Create a new LabelRenderer. By default the field \"label\" is used as the field name for looking up text, and no image is used."}
{"code": "public NonSquareOperatorException(int wrong,int expected){\n  super(org.hipparchus.migration.exception.util.LocalizedFormats.NON_SQUARE_OPERATOR,wrong,expected);\n}\n", "nl": "Construct an exception from the mismatched dimensions."}
{"code": "private ClassLoader lookupLoader(final URL[] urls,final ClassLoader parent){\n  if (urls == null) {\n    return parent;\n  }\nsynchronized (loaderTable) {\n    Object ref;\n    while ((ref=refQueue.poll()) != null) {\n      if (ref instanceof LoaderKey) {\n        LoaderKey key=(LoaderKey)ref;\n        loaderTable.remove(key);\n      }\n else       if (ref instanceof LoaderEntry) {\n        LoaderEntry entry=(LoaderEntry)ref;\n        if (!entry.removed) {\n          loaderTable.remove(entry.key);\n        }\n      }\n    }\n    LoaderKey key=new LoaderKey(urls,parent);\n    LoaderEntry entry=(LoaderEntry)loaderTable.get(key);\n    ClassLoader loader;\n    if (entry == null || (loader=(ClassLoader)entry.get()) == null) {\n      if (entry != null) {\n        loaderTable.remove(key);\n        entry.removed=true;\n      }\n      loader=findOriginLoader(urls,parent);\n      if (loader == null) {\n        loader=createClassLoader(urls,parent,requireDlPerm);\n      }\n      entry=new LoaderEntry(key,loader);\n      loaderTable.put(key,entry);\n    }\n    return loader;\n  }\n}\n", "nl": "Look up the class loader for the given codebase URL path and the given parent class loader. A new class loader instance will be created and returned if no match is found."}
{"code": "protected void mouseClicked(int mouseX,int mouseY,int mouseButton){\n  this.buttonId=null;\n  if (mouseButton != 0 || !this.guiList.mouseClicked(mouseX,mouseY,mouseButton)) {\n    try {\n      super.mouseClicked(mouseX,mouseY,mouseButton);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton"}
{"code": "public boolean isClosed(){\n  return journalWriter == null;\n}\n", "nl": "Returns true if this cache has been closed."}
{"code": "public void flushChanges(){\n  for (  GradleEditorEntityTable table : myTablesByGroupName.values()) {\n    if (table.isEditing()) {\n      table.getCellEditor().stopCellEditing();\n    }\n  }\n}\n", "nl": "Instructs current component to flush all changes made by a user to the underlying gradle config."}
{"code": "public PhotosDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"photos.deleteComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){\n  if (parameterTypes != null) {\n    for (int i=0; i < parameterTypes.length; i++) {\n      if (i > 0) {\n        buffer.append(',');\n        buffer.append(' ');\n      }\n      buffer.append(parameterTypes[i]);\n      if (parameterNames != null && parameterNames[i] != null) {\n        buffer.append(' ');\n        buffer.append(parameterNames[i]);\n      }\n    }\n  }\n  return buffer;\n}\n", "nl": "Creates a display string of a parameter list (without the parentheses) for the given parameter types and names."}
{"code": "public AccountGetBannedQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset required to select a certain subset of users. By default - 0."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200519,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget]'s flight time increased by %num0 due to the effect of [%SkillName]."}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n{\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public ConstructorDecl fullCopy(){\n  ConstructorDecl tree=(ConstructorDecl)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "private void grow(int newLength){\n  if (newLength < segments.length)   throw new IllegalArgumentException(\"grow(newLine=\" + newLength + \"): can't grow smaller\");\n else   if (newLength > segments.length) {\n    final int[][] tmp=new int[newLength][];\n    System.arraycopy(segments,0,tmp,0,segments.length);\n    for (int i=segments.length; i < newLength; i++) {\n      tmp[i]=new int[SEGMENT_SIZE];\n    }\n    segments=tmp;\n  }\n}\n", "nl": "resizes the array"}
{"code": "private void pickBaseLineConnections(ScoutWidget[] list){\n  final int baseline=Direction.BASE.getDirection();\n  final int north=Direction.NORTH.getDirection();\n  final int south=Direction.SOUTH.getDirection();\n  final int east=Direction.EAST.getDirection();\n  final int west=Direction.WEST.getDirection();\n  for (int i=1; i < len; i++) {\n    float[][] widgetProbability=mProbability[i];\n    if (widgetProbability == null || widgetProbability[baseline] == null) {\n      continue;\n    }\n    float maxValue=0.0f;\n    float maxNorth=widgetProbability[north][Utils.max(widgetProbability[north])];\n    float maxSouth=widgetProbability[south][Utils.max(widgetProbability[south])];\n    int maxIndex=Utils.max(widgetProbability[baseline]);\n    float maxBaseline=widgetProbability[baseline][maxIndex];\n    if (maxBaseline < maxNorth || maxBaseline < maxSouth) {\n      continue;\n    }\n    String s;\n    if (DEBUG) {\n      System.out.println(\" b check \" + list[i] + \" \"+ widgetProbability[4][maxIndex]);\n      s=list[i] + \"(\" + Direction.toString(baseline)+ \") -> \"+ list[maxIndex]+ \" \"+ Direction.toString(baseline);\n      System.out.println(\"try \" + s);\n    }\n    if (list[i].setConstraint(baseline,list[maxIndex],baseline,0)) {\n      Utils.zero(mBinaryProbability[i][Direction.ORIENTATION_VERTICAL]);\n      Arrays.fill(widgetProbability[baseline],0.0f);\n      widgetProbability[north]=null;\n      Arrays.fill(widgetProbability[south],0.0f);\n      if (DEBUG) {\n        System.out.println(\"connect \" + s);\n      }\n    }\n  }\n}\n", "nl": "This searches for baseline connections with a very narrow tolerance"}
{"code": "public static void usage(){\n  System.out.println(VERSION);\n  System.out.println(\"Usage:\");\n  System.out.println(\"    -dumpASCII file : dump the final wave to file\");\n  System.out.println(\"    -dumpAudio file : dump audio to file \");\n  System.out.println(\"    -help           : shows usage information\");\n  System.out.println(\"    -detailedMetrics: turn on detailed metrics\");\n  System.out.println(\"    -dumpRelations  : dump the relations \");\n  System.out.println(\"    -dumpUtterance  : dump the final utterance\");\n  System.out.println(\"    -metrics        : turn on metrics\");\n  System.out.println(\"    -run  name      : sets the name of the run\");\n  System.out.println(\"    -silent         : don't say anything\");\n  System.out.println(\"    -verbose        : verbose output\");\n  System.out.println(\"    -version        : shows version number\");\n  System.out.println(\"    -timeTest       : runs a lengthy time test\");\n  System.out.println(\"    -iter count     : run for count iterations\");\n  System.out.println(\"    -time XX:XX     : speak the given time\");\n  System.out.println(\"    -time now       : speak the current time\");\n  System.out.println(\"    -period secs    : period of iter\");\n  System.out.println(\"    -clockMode      : tells time every 5 mins\");\n  System.out.println(\"    -voice VOICE    : \" + VoiceManager.getInstance().toString());\n  System.exit(0);\n}\n", "nl": "Prints the usage message for FreeTTSTime."}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public static String readFileToString(File file,Charset encoding) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.toString(in,Charsets.toCharset(encoding));\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file into a String. The file is always closed."}
{"code": "public static boolean lenientOn(){\n  return \"lenient\".equals(UtilProperties.getPropertyValue(\"minilang.properties\",\"validation.level\"));\n}\n", "nl": "Returns <code>true</code> if <code>validation.level=lenient</code>."}
{"code": "private void destroyChildGroup(ThreadGroup group){\n  int numChildren=group.activeGroupCount();\n  if (numChildren == 0)   return;\n  ThreadGroup[] children=new ThreadGroup[numChildren];\n  int numGroups=group.enumerate(children);\n  for (int i=0; i < numGroups; i++) {\n    children[i].interrupt();\n    destroyChildGroup(children[i]);\n  }\n}\n", "nl": "interrupt any threads from child groups for this pool"}
{"code": "public static void copyFile(String source,String dest) throws IOException {\n  File sourceFile=new File(source);\n  File destFile=new File(dest);\n  FileChannel inputChannel=null;\n  FileChannel outputChannel=null;\n  try {\n    inputChannel=new FileInputStream(sourceFile).getChannel();\n    outputChannel=new FileOutputStream(destFile).getChannel();\n    outputChannel.transferFrom(inputChannel,0,inputChannel.size());\n  }\n  finally {\n    try {\n      inputChannel.close();\n      outputChannel.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Copy file using NOI"}
{"code": "public void action(){\nsynchronized (myAgent) {\n    NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;\n    ACLMessage msg=new ACLMessage(ACLMessage.INFORM);\n    msg.setSender(a.getAID());\n    msg.addReceiver(a.ResultConsumer);\n    try {\n      msg.setContentObject(Result);\n    }\n catch (    IOException ex) {\n      System.err.println(\"Cannot add result to message. Sending empty message.\");\n      ex.printStackTrace(System.err);\n    }\n    a.send(msg);\n  }\n}\n", "nl": "Actually sends the result to the dispatching agent."}
{"code": "public void nullify(){\n  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {\n    UniqueVertexGraph gCurLevel=getGraphLevelByNGramSize(iNGramSize);\n    java.util.Iterator iIter=gCurLevel.getEdgeSet().iterator();\n    while (iIter.hasNext()) {\n      WeightedEdge weEdge=(WeightedEdge)iIter.next();\n      weEdge.setWeight(0.0);\n    }\n  }\n}\n", "nl": "Sets all weights in all graphs to zero"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public ElementAnnotationValue fullCopy(){\n  ElementAnnotationValue tree=(ElementAnnotationValue)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public static float max(float a,float b){\n  return (a >= b) ? a : b;\n}\n", "nl": "Returns the greater of two <code>float</code> values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. Does none of the special checks for NaN or -0.0f that <code>Math.max</code> does."}
{"code": "public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {\n  BufferedReader br1=toBufferedReader(input1);\n  BufferedReader br2=toBufferedReader(input2);\n  String line1=br1.readLine();\n  String line2=br2.readLine();\n  while (line1 != null && line2 != null && line1.equals(line2)) {\n    line1=br1.readLine();\n    line2=br2.readLine();\n  }\n  return line1 == null ? line2 == null ? true : false : line1.equals(line2);\n}\n", "nl": "Compare the contents of two Readers to determine if they are equal or not, ignoring EOL characters. <p/> This method buffers the input internally using <code>BufferedReader</code> if they are not already buffered."}
{"code": "public PhotosGetByIdQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Return photo sizes in a special format"}
{"code": "public InGroupPredicate(String group){\n  super(group);\n}\n", "nl": "Create a new InGroupPredicate."}
{"code": "public Set<String> pullingUpdatedConfigs(Map<String,String> configItemMaps,int readTimeout){\n  Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);\n  params.put(\"configs\",JsonUtil.INSTANCE.toJson(configItemMaps));\n  return doPost(ClientUris.CONFIG_PULLING,headers,params,readTimeout,Set.class);\n}\n", "nl": "Pulling updated configs"}
{"code": "public void testXmlRpcRequest() throws Exception {\n  XmlRpcClient client=this.getRpcClient(url,\"admin\",\"ofbiz\");\n  Object[] params=new Object[]{55.00,\"message from xml-rpc client\"};\n  Map<String,Object> result=UtilGenerics.cast(client.execute(\"testScv\",params));\n  assertEquals(\"XML-RPC Service result success\",\"service done\",result.get(\"resp\"));\n}\n", "nl": "Test Xml Rpc by java class call with a Object List"}
{"code": "public static String readFileToString(File file,Charset encoding) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.toString(in,Charsets.toCharset(encoding));\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file into a String. The file is always closed."}
{"code": "@Override public void suiteStart(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Unsupported, because HtmlReporter doesn't participate in Visitor implementation. You should call \"generateReport\"."}
{"code": "public BoardFixTopicQuery fixTopic(UserActor actor,int groupId,int topicId){\n  return new BoardFixTopicQuery(getClient(),actor,groupId,topicId);\n}\n", "nl": "Pins a topic (fixes its place) to the top of a community's discussion board."}
{"code": "public IntIterator rangeSortedBy(String field,long lo,long hi,int indexType){\n  Index index=getIndex(field,long.class,true);\n  return index.rows(lo,hi,indexType);\n}\n", "nl": "Return an iterator over a range of rwos in this table, determined by a bounded range for a given data field. A new index over the data field will be created if it doesn't already exist."}
{"code": "public void updateView(){\n  Set<Integer> needToBeUncollapsed=new HashSet<>();\n  for (  Integer taxId : toSelectTaxonIds) {\n    if (mainViewer.getTaxId2Node(taxId) == null) {\n      needToBeUncollapsed.add(taxId);\n    }\n  }\n  if (needToBeUncollapsed.size() > 0) {\n    Set<Integer> toDelete=new HashSet<>();\n    for (    int t : needToBeUncollapsed) {\n      Node v=TaxonomyData.getTree().getANode(t);\n      while (v.getInDegree() > 0) {\n        v=v.getFirstInEdge().getSource();\n        int vt=(Integer)v.getInfo();\n        toDelete.add(vt);\n      }\n    }\n    needToBeUncollapsed.removeAll(toDelete);\n    for (    int t : needToBeUncollapsed) {\n      Node v=TaxonomyData.getTree().getANode(t);\n      while (v.getInDegree() > 0) {\n        Node w=v.getFirstInEdge().getSource();\n        int wt=(Integer)v.getInfo();\n        if (mainViewer.getCollapsedIds().contains(wt)) {\n          mainViewer.getCollapsedIds().remove(wt);\n          break;\n        }\n        for (Edge e=w.getFirstOutEdge(); e != null; e=w.getNextOutEdge(e)) {\n          Node u=e.getTarget();\n          if (u != v) {\n            mainViewer.getCollapsedIds().add((Integer)u.getInfo());\n          }\n        }\n        v=w;\n      }\n    }\n    mainViewer.setDoReInduce(true);\n    mainViewer.updateView(Director.ALL);\n  }\n  toSelect.clear();\n  for (  int t : toSelectTaxonIds) {\n    toSelect.add(mainViewer.getTaxId2Node(t));\n  }\n  toDeselect.clear();\n  for (  int t : toDeSelectTaxonIds) {\n    toDeselect.add(mainViewer.getTaxId2Node(t));\n  }\n  mainViewer.selectedNodes.addAll(toSelect);\n  mainViewer.fireDoSelect(toSelect);\n  Node v=toSelect.getLastElement();\n  if (v != null) {\n    final Point p=mainViewer.trans.w2d(mainViewer.getLocation(v));\n    if (mainViewer.getFoundNode() == null)     mainViewer.setFoundNode(v);\n    mainViewer.scrollRectToVisible(new Rectangle(p.x - 60,p.y - 25,120,50));\n  }\n  mainViewer.selectedNodes.removeAll(toDeselect);\n  mainViewer.fireDoDeselect(toDeselect);\n  toSelect.clear();\n  toDeselect.clear();\n  mainViewer.repaint();\n  toSelectTaxonIds.clear();\n  toDeSelectTaxonIds.clear();\n  mainViewer.repaint();\n}\n", "nl": "something has been changed or selected, rescan view"}
{"code": "@NotNull public ThreeState isSyncNeeded(){\n  long lastSync=getLastGradleSyncTimestamp();\n  if (lastSync < 0) {\n    return ThreeState.UNSURE;\n  }\n  return isSyncNeeded(lastSync) ? ThreeState.YES : ThreeState.NO;\n}\n", "nl": "Indicates whether a project sync with Gradle is needed. A Gradle sync is usually needed when a build.gradle or settings.gradle file has been updated <b>after</b> the last project sync was performed."}
{"code": "public int findRow(String name){\n  for (int row=0; row < getRowCount(); row++)   if (getRowName(row).equals(name))   return row;\n  return -1;\n}\n", "nl": "get the named row"}
{"code": "public boolean dnsDomainIs(String host,String domain){\n  return host.endsWith(domain);\n}\n", "nl": "Tests if an URL is in a given domain."}
{"code": "public double doGraphCompareToSet(String sSummaryTextFile,Set<String> ssModelFiles,String sGraphModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){\n  throw new NotImplementedException();\n}\n", "nl": "Performs comparison between the graph representation of a (summary) text file and a set of (model summary) text files. The comparison result is the similarity of the given text to the union of the representation of the texts in the text set. <b>NOT IMPLEMENTED</b>"}
{"code": "public ResourcesPoet addIntegerArrayStrings(String name,@NotNull List<String> values){\n  Element element=document.createElement(\"integer-array\");\n  element.setAttribute(\"name\",name);\n  for (  String value : values) {\n    Element valueElement=document.createElement(\"item\");\n    valueElement.appendChild(document.createTextNode(value));\n    element.appendChild(valueElement);\n  }\n  resourceElement.appendChild(element);\n  return this;\n}\n", "nl": "Add an integer array to the config"}
{"code": "public static <T>void addToJMenu(JPopupMenu popupMenu,T[] choices,T initialChoice,final CallBack<T> callBack){\n  add(popupMenu,choices,initialChoice,callBack);\n}\n", "nl": "add choices to an existing menu"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints"}
{"code": "private void loadProxySettings(){\n  this.httpProxy=System.getenv(this.httpEnv);\n  this.httpsProxy=System.getenv(this.httpsEnv);\n  this.ftpProxy=System.getenv(this.ftpEnv);\n  this.noProxy=System.getenv(this.noProxyEnv);\n}\n", "nl": "Loads the proxy settings from the system environment variables."}
{"code": "public ItemStack(final Material type,final int amount){\n  this(type.getId(),amount);\n}\n", "nl": "An item stack with no extra data"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.ip_logs"}
{"code": "public TestLogAppender(){\n  logger=(Logger)LoggerFactory.getILoggerFactory().getLogger(ROOT_LOGGER_NAME);\n  logger.addAppender(this);\n  setContext(logger.getLoggerContext());\n  start();\n}\n", "nl": "Find root of all loggers and add this appender."}
{"code": "public PhotosObject(Activity a,int photosType){\n  this.adapter=new PhotoAdapter(a,new ArrayList<Photo>());\n  this.service=PhotoService.getService();\n  this.requestKey=Mysplash.getInstance().getUser();\n  this.photosType=photosType;\n  this.photosOrder=PhotoApi.ORDER_BY_LATEST;\n  this.photosPage=0;\n  this.refreshing=false;\n  this.loading=false;\n  this.over=false;\n}\n", "nl": "<br> life cycle."}
{"code": "protected void writeNetscapeExt() throws IOException {\n  out.write(0x21);\n  out.write(0xff);\n  out.write(11);\n  writeString(\"NETSCAPE\" + \"2.0\");\n  out.write(3);\n  out.write(1);\n  writeShort(repeat);\n  out.write(0);\n}\n", "nl": "Writes Netscape application extension to define repeat count."}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPilotPermit && getId().equals(((AirMapPilotPermit)o).getId());\n}\n", "nl": "Comparison based on ID (Not Permit ID)"}
{"code": "public void addGlobalGroupDecl(XSGroupDecl decl){\n  fGlobalGroupDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n", "nl": "register one global group"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public Annotation fullCopy(){\n  Annotation tree=(Annotation)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){\n  try {\n    PackageManager pm=context.getPackageManager();\n    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);\n    if (handlers == null || handlers.size() == 0) {\n      return false;\n    }\n    for (    ResolveInfo resolveInfo : handlers) {\n      IntentFilter filter=resolveInfo.filter;\n      if (filter == null)       continue;\n      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;\n      if (resolveInfo.activityInfo == null)       continue;\n      return true;\n    }\n  }\n catch (  RuntimeException e) {\n    Log.e(TAG,\"Runtime exception while getting specialized handlers\");\n  }\n  return false;\n}\n", "nl": "Used to check whether there is a specialized handler for a given intent."}
{"code": "public boolean computeScrollOffset(long time){\n  if (isFinished()) {\n    return false;\n  }\nswitch (mMode) {\ncase SCROLL_MODE:\n    final long elapsedTime=time - mScrollerX.mStartTime;\n  final int duration=mScrollerX.mDuration;\nif (elapsedTime < duration) {\n  float q=(float)(elapsedTime) / duration;\n  q=viscousFluid(q);\n  mScrollerX.updateScroll(q);\n  mScrollerY.updateScroll(q);\n}\n else {\n  abortAnimation();\n}\nbreak;\ncase FLING_MODE:\nif (!mScrollerX.mFinished) {\nif (!mScrollerX.update(time)) {\nif (!mScrollerX.continueWhenFinished(time)) {\n  mScrollerX.finish();\n}\n}\n}\nif (!mScrollerY.mFinished) {\nif (!mScrollerY.update(time)) {\nif (!mScrollerY.continueWhenFinished(time)) {\nmScrollerY.finish();\n}\n}\n}\nbreak;\ndefault :\nbreak;\n}\nreturn true;\n}\n", "nl": "Call this when you want to know the new location. If it returns true, the animation is not yet finished."}
{"code": "public MaryHeader(int newType){\n  if ((newType > TIMELINE) || (newType < UNKNOWN)) {\n    throw new IllegalArgumentException(\"Unauthorized Mary file type [\" + type + \"].\");\n  }\n  type=newType;\n  assert version == VERSION;\n  assert hasLegalMagic();\n  assert hasLegalType();\n}\n", "nl": "Consruct a MaryHeader from scratch. <p/> Fundamental guarantee: after construction, the MaryHeader has a valid magic number and a valid type."}
{"code": "public Well19937a(){\n  super(K);\n}\n", "nl": "Creates a new random number generator. <p> The instance is initialized using the current time as the seed."}
{"code": "private final int popPEStack(){\n  return fPEStack[--fPEDepth];\n}\n", "nl": "pop the stack"}
{"code": "public static String sampaEn2sampaDe(String En){\n  String result=En;\n  if (sampaEn2sampaDe.containsKey(En)) {\n    result=sampaEn2sampaDe.get(En);\n  }\n  return result;\n}\n", "nl": "Converts a single phonetic symbol in English sampa representation into its equivalent in German sampa representation."}
{"code": "public void loadCommentHistory(){\n  IPath pluginStateLocation=SVNUIPlugin.getPlugin().getStateLocation().append(COMMENT_HIST_FILE);\n  File file=pluginStateLocation.toFile();\n  if (!file.exists())   return;\n  try {\n    BufferedInputStream is=new BufferedInputStream(new FileInputStream(file));\n    try {\n      SAXParserFactory factory=SAXParserFactory.newInstance();\n      try {\n        SAXParser parser=factory.newSAXParser();\n        parser.parse(new InputSource(is),new CommentHistoryContentHandler());\n      }\n catch (      SAXException ex) {\n        throw new SVNException(Policy.bind(\"RepositoryManager.parsingProblem\",COMMENT_HIST_FILE),ex);\n      }\ncatch (      ParserConfigurationException e) {\n        throw new SVNException(Policy.bind(\"RepositoryManager.parsingProblem\",COMMENT_HIST_FILE),e);\n      }\n    }\n  finally {\n      is.close();\n    }\n  }\n catch (  IOException e) {\n    SVNUIPlugin.log(new Status(IStatus.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,Policy.bind(\"RepositoryManager.ioException\"),e));\n  }\ncatch (  TeamException e) {\n    SVNUIPlugin.log(e.getStatus());\n  }\n}\n", "nl": "load the comment history"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200952,skilltarget,num0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] recovered %num0 HP because [%SkillCaster] used [%SkillName]."}
{"code": "@RequestMapping(method=RequestMethod.POST) ResponseEntity<Bookmark> addBookmark(@PathVariable(value=\"username\") String username,@RequestBody Bookmark bookmark) throws UserNotFoundException {\n  Optional<User> optional=usersRepository.findByUsername(username);\n  if (optional.isPresent()) {\n    User user=optional.get();\n    user.addBookmark(bookmark);\n    bookmark.setUser(user);\n    bookmarksRepository.save(bookmark);\n    return new ResponseEntity<>(bookmark,HttpStatus.CREATED);\n  }\n else {\n    throw new UserNotFoundException(username);\n  }\n}\n", "nl": "A method to add a bookmark."}
{"code": "private String stringToConstant(String string){\n  int length=string.length();\n  for (int i=0; i < length; i++) {\n    char character=string.charAt(i);\n    if (character != \"_\".charAt(0) && Character.isUpperCase(character) && i != 0) {\n      String firstPart=string.substring(0,i);\n      String secondPart=string.substring(i,length);\n      String newFirstPart=firstPart + \"_\";\n      string=newFirstPart + secondPart;\n      i=newFirstPart.length();\n      length++;\n    }\n  }\n  return string;\n}\n", "nl": "convert a string to a constant schema"}
{"code": "@Override protected void synchronizeChildren(){\n  needsSyncChildren(false);\n  DocumentType doctype;\n  NamedNodeMap entities;\n  EntityImpl entDef;\n  if (null != (doctype=getOwnerDocument().getDoctype()) && null != (entities=doctype.getEntities())) {\n    entDef=(EntityImpl)entities.getNamedItem(getNodeName());\n    if (entDef == null)     return;\n    isReadOnly(false);\n    for (Node defkid=entDef.getFirstChild(); defkid != null; defkid=defkid.getNextSibling()) {\n      Node newkid=defkid.cloneNode(true);\n      insertBefore(newkid,null);\n    }\n    setReadOnly(true,true);\n  }\n}\n", "nl": "EntityReference's children are a reflection of those defined in the named Entity. This method creates them if they haven't been created yet. This doesn't support editing the Entity though, since this only called once for all."}
{"code": "public Message receive(long timeout) throws JMSException {\n  if (m_closed) {\n    return null;\n  }\n  if (m_session.m_msgListeners.getValue() != 0) {\n    throw new IllegalStateException(\"Forbidden call to receive() on asynchronous session.\");\n  }\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.log(Level.FINE,toString2() + \"GSMessageConsumerImpl.receive()\");\n  }\n  if (timeout == Message.DEFAULT_TIME_TO_LIVE) {\n    timeout=Lease.FOREVER;\n  }\n  long startTime=0;\n  GSMessageImpl message=null;\n  while (!m_closed && timeout > 10) {\n    try {\n      startTime=SystemTime.timeMillis();\nsynchronized (m_session.stopMonitor) {\n        if (m_session.m_stopped) {\n          if (_logger.isLoggable(Level.FINE)) {\n            _logger.log(Level.FINE,toString2() + \"receive(): Waiting on a stopped session.\");\n          }\n          try {\n            m_session.stopMonitor.wait(timeout);\n          }\n catch (          InterruptedException e) {\n            if (_logger.isLoggable(Level.SEVERE)) {\n              _logger.log(Level.SEVERE,toString2() + \"receive(): Interrupted while waiting on a stopped session: \" + e);\n            }\n          }\n          if (_logger.isLoggable(Level.FINE)) {\n            _logger.log(Level.FINE,toString2() + \"receive(): Stopped waiting on a stopped session - restarting iteration.\");\n          }\n          continue;\n        }\n        if (_logger.isLoggable(Level.FINEST)) {\n          _logger.log(Level.FINEST,toString2() + \"onProcess=true\");\n        }\n        m_session.onProcess=true;\n      }\n      if (m_isQueue) {\n        if (_logger.isLoggable(Level.FINEST)) {\n          _logger.log(Level.FINEST,toString2() + \"Retrieving a message from queue.\");\n        }\n        message=receiveFromQueueNoBlock(timeout);\n      }\n else {\n        if (_logger.isLoggable(Level.FINEST)) {\n          _logger.log(Level.FINEST,toString2() + \"Retrieving a message from topic.\");\n        }\n        message=receiveFromTopic(timeout);\n      }\n      if (message == null) {\n        continue;\n      }\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.log(Level.FINE,toString2() + \"receive(): Got message: \" + message.JMSMessageID);\n      }\n      if (checkMessageForConsumer(message)) {\n        prepareMessageForConsumer(message);\n        if (m_session.isAutoAck()) {\n          m_session.acknowledge();\n          if (m_isQueue && !m_session.isAutoAck()) {\n            m_session.renewTransaction();\n          }\n        }\n else {\n          m_session.addUnackedMessage(message,m_consumerID);\n        }\n        m_session.m_numOfConsumedMsg++;\n        break;\n      }\n else {\n        if (_logger.isLoggable(Level.FINE)) {\n          _logger.log(Level.FINE,toString2() + \"Message not valid for consumer: \" + message.JMSMessageID);\n        }\n      }\n    }\n catch (    ReceiveFromQueueException e) {\n      String text=\"Internal error while fetching a message from a Queue. \";\n      if (_logger.isLoggable(Level.SEVERE)) {\n        _logger.log(Level.SEVERE,toString2() + text + e.orig);\n      }\n      if (m_session.isAutoAck()) {\n        if (_logger.isLoggable(Level.FINE)) {\n          _logger.log(Level.FINE,toString2() + \"receive(): Session's ack mode is AUTO_ACKNOWLEDGE\" + \" or DUPS_OK_ACKNOWLEDGE.\\nRenewing transaction.\");\n        }\n      }\n else       if (m_session.m_acknowledgeMode == Session.SESSION_TRANSACTED) {\n        if (_logger.isLoggable(Level.FINE)) {\n          _logger.log(Level.FINE,toString2() + \"receive(): Session's ack mode is SESSION_TRANSACTED.\\n\" + \"Rolling back transaction \"+ m_session.getTransaction());\n        }\n        try {\n          m_session.rollback();\n        }\n catch (        JMSException e1) {\n          if (_logger.isLoggable(Level.SEVERE)) {\n            _logger.log(Level.SEVERE,toString2() + \"receive(): Failed to roll back transaction\");\n          }\n        }\n        TransactionRolledBackException re=new TransactionRolledBackException(text + \"Transaction rolled back.\");\n        re.setLinkedException(e.orig);\n        throw re;\n      }\n else       if (m_session.m_acknowledgeMode == Session.CLIENT_ACKNOWLEDGE) {\n        if (_logger.isLoggable(Level.FINE)) {\n          _logger.log(Level.FINE,toString2() + \"receive(): Session's ack mode is CLIENT_ACKNOWLEDGE.\\n\" + \"Recovering messages of transaction \"+ m_session.getTransaction());\n        }\n        try {\n          m_session.recoverMessages();\n        }\n catch (        RollbackFailedException e1) {\n          if (_logger.isLoggable(Level.SEVERE)) {\n            _logger.log(Level.SEVERE,toString2() + \"receive(): Failed to recover messages of transaction \" + m_session.getTransaction()+ e1.orig);\n          }\n        }\n        try {\n          m_session.renewTransaction();\n        }\n catch (        TransactionCreateException e1) {\n          if (_logger.isLoggable(Level.SEVERE)) {\n            _logger.log(Level.SEVERE,toString2() + \"receive(): Failed to renew transaction\",e1.orig);\n          }\n        }\n        TransactionRolledBackException re=new TransactionRolledBackException(text + \"Transaction rolled back.\");\n        re.setLinkedException(e.orig);\n        throw re;\n      }\n    }\ncatch (    CommitFailedException e) {\n      String text=\"Internal error during auto commit. Message=\" + message.JMSMessageID + \", Txn=\"+ m_session.getTransaction();\n      if (_logger.isLoggable(Level.SEVERE)) {\n        _logger.log(Level.SEVERE,toString2() + text + e.orig);\n      }\n      try {\n        m_session.renewTransaction();\n      }\n catch (      TransactionCreateException e1) {\n        if (_logger.isLoggable(Level.SEVERE)) {\n          _logger.log(Level.SEVERE,toString2() + \"receive(): Failed to renew transaction: \" + e1.orig);\n        }\n      }\n    }\ncatch (    TransactionCreateException e) {\n      if (_logger.isLoggable(Level.SEVERE)) {\n        _logger.log(Level.SEVERE,toString2() + \"receive(): Failed to renew transaction: \" + e.orig);\n      }\n      break;\n    }\n finally {\n      long now=SystemTime.timeMillis();\n      timeout=timeout - (now - startTime);\nsynchronized (m_session.stopMonitor) {\n        if (m_session.onProcess) {\n          if (_logger.isLoggable(Level.FINEST)) {\n            _logger.log(Level.FINEST,toString2() + \"onProcess=false\");\n          }\n          m_session.onProcess=false;\n          m_session.stopMonitor.notifyAll();\n        }\n      }\n    }\n  }\n  return (Message)message;\n}\n", "nl": "API method. It is a Synch receive implementation which reads ExternalEntry from space, then it checks if the ExternalEntry is still valid and did not expired. In case of a CLIENT_ACK then we prepare a JMSAckDataEntry to be later written to space, otherwise (if ACK is not necessary) if it is a Queue, we perform a space.clear() operation, which clears the entry from space, but if it is a Topic we leave it as is."}
{"code": "public static UserLayer createNewUserLayer(){\n  UserLayer userLayer=styleFactory.createUserLayer();\n  return userLayer;\n}\n", "nl": "Creates the new user layer."}
{"code": "public double[] generate(int nSamples){\n  int m=nSamples / 2;\n  double r;\n  double pi=Math.PI;\n  double[] w=new double[nSamples];\nswitch (windowType) {\ncase BARTLETT:\n    for (int n=0; n < nSamples; n++)     w[n]=1.0f - Math.abs(n - m) / m;\n  break;\ncase HANNING:\nr=pi / (m + 1);\nfor (int n=-m; n < m; n++) w[m + n]=0.5f + 0.5f * Math.cos(n * r);\nbreak;\ncase HAMMING:\nr=pi / m;\nfor (int n=-m; n < m; n++) w[m + n]=0.54f + 0.46f * Math.cos(n * r);\nbreak;\ncase BLACKMAN:\nr=pi / m;\nfor (int n=-m; n < m; n++) w[m + n]=0.42f + 0.5f * Math.cos(n * r) + 0.08f * Math.cos(2 * n * r);\nbreak;\ndefault :\nfor (int n=0; n < nSamples; n++) w[n]=1.0f;\n}\nreturn w;\n}\n", "nl": "Generate a window"}
{"code": "private VendorOptionManager(){\n  internal_addVendorOption(new NoVendorOption());\n  internal_addVendorOption(new GeoServerVendorOption());\n  populate();\n}\n", "nl": "Instantiates a new vendor option manager."}
{"code": "@Override public void updateValue(String key,String value){\n  boolean dataUpdated=false;\n  if (fieldValueMap.containsKey(key)) {\n    if (fieldValueMap.get(key).compareTo(value) != 0) {\n      dataUpdated=true;\n      fieldValueMap.put(key,value);\n    }\n  }\n else {\n    dataUpdated=true;\n    fieldValueMap.put(key,value);\n  }\n  if (dataUpdated) {\n    writeConfigFile();\n  }\n}\n", "nl": "Update property value."}
{"code": "public Builder discCacheExtraOptions(int maxImageWidthForDiscCache,int maxImageHeightForDiscCache,CompressFormat compressFormat,int compressQuality,BitmapProcessor processorForDiscCache){\n  this.maxImageWidthForDiscCache=maxImageWidthForDiscCache;\n  this.maxImageHeightForDiscCache=maxImageHeightForDiscCache;\n  this.imageCompressFormatForDiscCache=compressFormat;\n  this.imageQualityForDiscCache=compressQuality;\n  this.processorForDiscCache=processorForDiscCache;\n  return this;\n}\n", "nl": "Sets options for resizing/compressing of downloaded images before saving to disc cache.<br /> <b>NOTE: Use this option only when you have appropriate needs. It can make ImageLoader slower.</b>"}
{"code": "private void distributeExtraSpace(int extraHeight){\n  int topSpacerHeight;\n  int middleSpacerHeight;\n  int bottomSpacerHeight;\n  if (extraHeight < mTotalSpacerHeight) {\n    topSpacerHeight=Math.round(extraHeight * (TOP_SPACER_HEIGHT_DP / TOTAL_SPACER_HEIGHT_DP));\n    extraHeight-=topSpacerHeight;\n    middleSpacerHeight=Math.round(extraHeight * (MIDDLE_SPACER_HEIGHT_DP / (MIDDLE_SPACER_HEIGHT_DP + BOTTOM_SPACER_HEIGHT_DP)));\n    extraHeight-=middleSpacerHeight;\n    bottomSpacerHeight=extraHeight;\n  }\n else {\n    topSpacerHeight=mTopSpacerHeight;\n    middleSpacerHeight=mMiddleSpacerHeight;\n    bottomSpacerHeight=mBottomSpacerHeight;\n    extraHeight-=mTotalSpacerHeight;\n    topSpacerHeight+=(extraHeight + 1) / 2;\n    bottomSpacerHeight+=extraHeight / 2;\n  }\n  int widthSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.EXACTLY);\n  mTopSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(topSpacerHeight,MeasureSpec.EXACTLY));\n  mMiddleSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(middleSpacerHeight,MeasureSpec.EXACTLY));\n  mBottomSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(bottomSpacerHeight,MeasureSpec.EXACTLY));\n}\n", "nl": "Distribute extra vertical space between the three spacer views."}
{"code": "private BooleanQuery startswithFilterQuery(String luceneFieldName,ApiFilter filter){\n  return filter.getValues().stream().map(null).map(null).collect(getBooleanQueryCollector(BooleanClause.Occur.SHOULD)).build();\n}\n", "nl": "Startswith-filter operation."}
{"code": "@Override public void endElement(String name) throws SAXException {\n  if (saxParser != null) {\n    saxParser.endElement(name);\n  }\n}\n", "nl": "The SAX <code>endElement</code> method. Does nothing."}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 1 && viewer.getPcoaTab().getSecondPC() == 2 && !viewer.getPcoaTab().isIs3dMode();\n}\n", "nl": "this is currently selected?"}
{"code": "private AttackGymResponse doActions(List<BattleAction> actions) throws LoginFailedException, RemoteServerException {\n  AttackGymMessage.Builder message=AttackGymMessage.newBuilder().setGymId(gym.getId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setBattleId(battleResponse.getBattleId());\n  for (  BattleAction action : actions) {\n    message.addAttackActions(action);\n  }\n  ServerRequest serverRequest=new ServerRequest(RequestType.ATTACK_GYM,message.build());\n  api.getRequestHandler().sendServerRequests(serverRequest);\n  try {\n    AttackGymResponse response=AttackGymResponse.parseFrom(serverRequest.getData());\n    if (response.getBattleLog().getState() == BattleState.DEFEATED || response.getBattleLog().getState() == BattleState.VICTORY || response.getBattleLog().getState() == BattleState.TIMED_OUT) {\n      concluded=true;\n    }\n    outcome=response.getBattleLog().getState();\n    return response;\n  }\n catch (  InvalidProtocolBufferException e) {\n    throw new RemoteServerException();\n  }\n}\n", "nl": "Do Actions in battle."}
{"code": "protected PhotosEditQuery photoId(int value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Photo ID."}
{"code": "static public InputStream findClusterXSLSchema(String _clusterXSLSchema) throws ClusterConfigurationException {\n  String schemaNameToBeUsed=_clusterXSLSchema;\n  if (schemaNameToBeUsed.equalsIgnoreCase(ClusterXML.CLUSTER_SCHEMA_NAME_PARTITIONED_SYNC2BACKUP))   schemaNameToBeUsed=ClusterXML.CLUSTER_SCHEMA_NAME_PARTITIONED;\n  InputStream schemaInputStream;\n  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + Constants.Schemas.SCHEMAS_FOLDER+ \"/\"+ schemaNameToBeUsed+ ClusterXML.CLUSTER_SCHEMA_XSL_FILE_SUFFIX;\n  schemaInputStream=getResourceStream(schemaFilePath);\n  if (schemaInputStream != null) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"Loaded the cluster xsl schema < \" + getResourceURL(schemaFilePath) + \" > for the cluster config setup.\");\n    }\n    return schemaInputStream;\n  }\n else {\n    String missingSchemaMsg=\"Could not find the cluster xsl schema file: \" + _clusterXSLSchema;\n    throw new ClusterConfigurationException(missingSchemaMsg);\n  }\n}\n", "nl": "Look for the requested cluster XSL schema file in the ResourceBundle (classpath) under <EE home dir>/config/schemas/<reqested_schema_name>-cluster-schema.xsl. If it does no find it in the disk (the default) it looks for it in the JSpaces.jar, in same path. if the requested schema file does not exist in the disk config/schemas dir.. In this case we throw exception (which does not interrupt the system load but acts as a warning) NOTE that the <com.gs.home> must be part of the classpath, in this case."}
{"code": "public PhotosGetAllQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Return image sizes in special format."}
{"code": "protected void computeWeightsForPts(){\n  int i;\n  int s, t;\n  off_graph_edge p;\n  IVarAbstraction node;\n  pre_cnt=0;\n  for (i=0; i < n_var; ++i) {\n    pre[i]=-1;\n    count[i]=0;\n    rep[i]=i;\n    repsize[i]=1;\n    node=int2var.get(i);\n    node.top_value=Integer.MIN_VALUE;\n  }\n  for (i=0; i < n_var; ++i)   if (pre[i] == -1)   tarjan_scc(i);\n  for (i=0; i < n_var; ++i) {\n    p=varGraph.get(i);\n    s=find_parent(i);\n    while (p != null) {\n      t=find_parent(p.t);\n      if (t != s)       count[t]++;\n      p=p.next;\n    }\n  }\n  for (i=0; i < n_var; ++i) {\n    p=varGraph.get(i);\n    if (p != null && rep[i] != i) {\n      t=find_parent(i);\n      while (p.next != null)       p=p.next;\n      p.next=varGraph.get(t);\n      varGraph.set(t,varGraph.get(i));\n      varGraph.set(i,null);\n    }\n  }\n  queue.clear();\n  for (i=0; i < n_var; ++i)   if (rep[i] == i && count[i] == 0)   queue.addLast(i);\n  i=0;\n  while (!queue.isEmpty()) {\n    s=queue.getFirst();\n    queue.removeFirst();\n    node=int2var.get(s);\n    node.top_value=i;\n    i+=repsize[s];\n    p=varGraph.get(s);\n    while (p != null) {\n      t=find_parent(p.t);\n      if (t != s) {\n        if (--count[t] == 0)         queue.addLast(t);\n      }\n      p=p.next;\n    }\n  }\n  for (i=n_var - 1; i > -1; --i) {\n    if (rep[i] != i) {\n      node=int2var.get(find_parent(i));\n      IVarAbstraction me=int2var.get(i);\n      me.top_value=node.top_value + repsize[node.id] - 1;\n      --repsize[node.id];\n    }\n  }\n}\n", "nl": "Prepare for a near optimal worklist selection strategy inspired by Ben's PLDI 07 work. Prerequisite: impact graph"}
{"code": "public void start() throws ErlangVersionException, DownloadException, ExtractionException, StartupException {\n  if (rabbitMqProcess != null) {\n    throw new IllegalStateException(\"Start shouldn't be called more than once unless stop() has been called before.\");\n  }\n  check();\n  download();\n  extract();\n  run();\n}\n", "nl": "Starts the RabbitMQ server process and blocks the current thread until the initialization is completed."}
{"code": "public CMM(){\n  params=new CMMParams();\n}\n", "nl": "Constructs a Conditional Markov Model for sequence labeling with default  parameters for use in training."}
{"code": "public void linkConceptTypes(){\n  Set<Rule> rules=getRules();\n  LOG.debug(rules.size() + \" rules initialized...\");\n  for (  Rule rule : rules) {\n    workingMemory.putIfAbsent(rule.getId(),new InferenceRule(rule,graph));\n    if (rule.getHypothesisTypes().isEmpty() && rule.getConclusionTypes().isEmpty()) {\n      linkConceptTypes(rule);\n    }\n  }\n}\n", "nl": "Link all unlinked rules in the rule base to their matching types"}
{"code": "public static GeneralPath cardinalSpline(GeneralPath p,float pts[],int start,int npoints,float slack,boolean closed,float tx,float ty){\n  int len=2 * npoints;\n  int end=start + len;\n  if (len < 6) {\n    throw new IllegalArgumentException(\"To create spline requires at least 3 points\");\n  }\n  float dx1, dy1, dx2, dy2;\n  if (closed) {\n    dx2=pts[start + 2] - pts[end - 2];\n    dy2=pts[start + 3] - pts[end - 1];\n  }\n else {\n    dx2=pts[start + 4] - pts[start];\n    dy2=pts[start + 5] - pts[start + 1];\n  }\n  int i;\n  for (i=start + 2; i < end - 2; i+=2) {\n    dx1=dx2;\n    dy1=dy2;\n    dx2=pts[i + 2] - pts[i - 2];\n    dy2=pts[i + 3] - pts[i - 1];\n    p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);\n  }\n  if (closed) {\n    dx1=dx2;\n    dy1=dy2;\n    dx2=pts[start] - pts[i - 2];\n    dy2=pts[start + 1] - pts[i - 1];\n    p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);\n    dx1=dx2;\n    dy1=dy2;\n    dx2=pts[start + 2] - pts[end - 2];\n    dy2=pts[start + 3] - pts[end - 1];\n    p.curveTo(tx + pts[end - 2] + slack * dx1,ty + pts[end - 1] + slack * dy1,tx + pts[0] - slack * dx2,ty + pts[1] - slack * dy2,tx + pts[0],ty + pts[1]);\n    p.closePath();\n  }\n else {\n    p.curveTo(tx + pts[i - 2] + slack * dx2,ty + pts[i - 1] + slack * dy2,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);\n  }\n  return p;\n}\n", "nl": "Compute a cardinal spline, a series of cubic Bezier splines smoothly connecting a set of points. Cardinal splines maintain C(1) continuity, ensuring the connected spline segments form a differentiable curve, ensuring at least a minimum level of smoothness."}
{"code": "private void BrowseSummaryDirBtnActionPerformed(java.awt.event.ActionEvent evt){\n  JFileChooser fc=new JFileChooser();\n  fc.setCurrentDirectory((SummariesRootDirEdt.getText().length() == 0) ? new java.io.File(\".\") : new java.io.File(SummariesRootDirEdt.getText()));\n  fc.setSelectedFile(fc.getCurrentDirectory());\n  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n  int iRet=fc.showOpenDialog(this);\n  if (iRet == JFileChooser.APPROVE_OPTION) {\n    SummariesRootDirEdt.setText(fc.getSelectedFile().getAbsolutePath());\n  }\n}\n", "nl": "Select the directory of the peer summaries."}
{"code": "public int model(){\n  return theModel;\n}\n", "nl": "Returns the content models of this element type."}
{"code": "public void addMultiOptionGroup(MultiOptionGroup multiOption){\n  Map<GroupIdEnum,GroupConfigInterface> panelMap=groupMap.get(panelId);\n  if (panelMap == null) {\n    panelMap=new HashMap<GroupIdEnum,GroupConfigInterface>();\n    groupMap.put(panelId,panelMap);\n  }\n  if (multiOption != null) {\n    panelMap.put(multiOption.getId(),multiOption);\n  }\n}\n", "nl": "Adds the multi option group."}
{"code": "private static byte[] readClass(final InputStream is) throws IOException {\n  if (is == null) {\n    throw new IOException(\"Class not found\");\n  }\n  byte[] b=new byte[is.available()];\n  int len=0;\n  while (true) {\n    int n=is.read(b,len,b.length - len);\n    if (n == -1) {\n      if (len < b.length) {\n        byte[] c=new byte[len];\n        System.arraycopy(b,0,c,0,len);\n        b=c;\n      }\n      return b;\n    }\n    len+=n;\n    if (len == b.length) {\n      byte[] c=new byte[b.length + 1000];\n      System.arraycopy(b,0,c,0,len);\n      b=c;\n    }\n  }\n}\n", "nl": "Reads the bytecode of a class."}
{"code": "public Builder longColumnsMathOp(String newColumnName,MathOp mathOp,String... columnNames){\n  return transform(new LongColumnsMathOpTransform(newColumnName,mathOp,columnNames));\n}\n", "nl": "Calculate and add a new long column by performing a mathematical operation on a number of existing columns. New column is added to the end."}
{"code": "private boolean indicateReadCommitted(ITransactionalEntryData entry,ITemplateHolder template){\n  if (indicateDirtyRead(template) || !template.isReadCommittedRequested())   return false;\n  ServerTransaction est=entry.getWriteLockTransaction();\n  if (template.getXidOriginatedTransaction() != null && est != null && template.getXidOriginatedTransaction().equals(est))   return false;\n  return true;\n}\n", "nl": "given an entry and a template, return true if read-committed should be performed should be called when xtn & entry are locked (but called from count w/o locks in order not to harm performance"}
{"code": "private byte[] createBitfield(List<IChunkDescriptor> chunks){\n  int chunkCount=chunks.size();\n  byte[] bitfield=new byte[(int)Math.ceil(chunkCount / 8d)];\n  int completePieces=0;\n  int bitfieldIndex=0;\n  while (chunkCount > 0) {\n    int b=0, offset=bitfieldIndex * 8;\n    int k=chunkCount < 8 ? chunkCount : 8;\n    for (int i=0; i < k; i++) {\n      IChunkDescriptor chunk=chunks.get(offset + i);\n      if (chunk.getStatus() == DataStatus.VERIFIED) {\n        b+=0b1 << (7 - i);\n        completePieces++;\n      }\n    }\n    bitfield[bitfieldIndex]=(byte)b;\n    bitfieldIndex++;\n    chunkCount-=8;\n  }\n  this.completePieces.addAndGet(completePieces);\n  return bitfield;\n}\n", "nl": "Creates a standard bittorrent bitfield, where n-th bit (couting from high position to low) indicates the availability of n-th piece."}
{"code": "public void updateView(){\n  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);\n  if (classificationViewer == null)   return;\n  classificationViewer.updateView(Director.ALL);\n}\n", "nl": "something has been changed or selected, rescan view"}
{"code": "private Entry findEntry(Lease lease) throws UnknownLeaseException {\n  Entry e=findEntryDo(lease);\n  if (e != null && (e.renew < e.endTime || SystemTime.timeMillis() < e.endTime)) {\n    return e;\n  }\n  throw new UnknownLeaseException();\n}\n", "nl": "Find a lease entry, throw exception if not found or expired normally"}
{"code": "public ImageSize scale(float scale){\n  return new ImageSize((int)(width * scale),(int)(height * scale));\n}\n", "nl": "Scales dimensions according to incoming scale. Returns new object."}
{"code": "public void recordHit(){\n  mIsHit=true;\n}\n", "nl": "Records that the histogram condition occurred."}
{"code": "public XIncludeParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){\n  this(symbolTable,grammarPool,null);\n}\n", "nl": "Constructs a parser configuration using the specified symbol table and grammar pool. <p/>"}
{"code": "private void purgeCache(){\n  boolean removedOne=false;\n  Entry<String,CacheEntry> oldest=null;\n  Set<Entry<String,CacheEntry>> entries=this.cache.entrySet();\n  for (Iterator<Entry<String,CacheEntry>> it=entries.iterator(); it.hasNext(); ) {\n    Entry<String,CacheEntry> entry=it.next();\n    if (entry.getValue().isExpired()) {\n      it.remove();\n      removedOne=true;\n    }\n else     if (oldest == null || entry.getValue().expireAt < oldest.getValue().expireAt) {\n      oldest=entry;\n    }\n  }\n  if (!removedOne && oldest != null) {\n    this.cache.remove(oldest.getKey());\n  }\n}\n", "nl": "Purge cache to get some free space for a new entry."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200463,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] is unable to fly because you used [%SkillName]."}
{"code": "public static JsonWriterWithViewHelper withView(Class view){\n  return new JsonWriterWithViewHelper(JSON.writerWithView(view));\n}\n", "nl": "Returns a helper class that can be used to write JSON using a specific JSON view.  For example: <code>JsonHelper.withView(PublicView.class).asJson(instance)</code>"}
{"code": "public static long readVLong(DataInput stream) throws IOException {\n  byte firstByte=stream.readByte();\n  int len=decodeVIntSize(firstByte);\n  if (len == 1) {\n    return firstByte;\n  }\n  long i=0;\n  for (int idx=0; idx < len - 1; idx++) {\n    byte b=stream.readByte();\n    i=i << 8;\n    i=i | (b & 0xFF);\n  }\n  return (isNegativeVInt(firstByte) ? (i ^ -1L) : i);\n}\n", "nl": "Reads a zero-compressed encoded long from input stream and returns it."}
{"code": "private static String limitErrorMessage(@NotNull String message){\n  int offset=StringUtil.lineColToOffset(message,30,0);\n  if (offset < 0) {\n    offset=message.length();\n  }\n  return message.substring(0,Math.min(offset,1024));\n}\n", "nl": "Limit the error message retrieved from the emulator to the smaller of 1K characters or 30 lines."}
{"code": "public boolean isSrcPrec(){\n  return isSrcPrec;\n}\n", "nl": "Returns the isSrcPrec."}
{"code": "public GammaDistribution(double shape,double scale) throws MathIllegalArgumentException {\n  this(shape,scale,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);\n}\n", "nl": "Creates a new gamma distribution with specified values of the shape and scale parameters."}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists."}
{"code": "public static void e(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.e(tag,msg);\n}\n", "nl": "Send an ERROR log message"}
{"code": "public void loadData(String path){\n  if (path == null) {\n    LogUtils.warn(\"current directory is null\");\n    return;\n  }\n  ArrayList<FileItem> datas=new ArrayList<FileItem>();\n  if (rootPath == null) {\n    rootPath=path;\n  }\n  LogUtils.debug(\"current directory path: \" + path);\n  currentPath=path;\n  if (showHomeDir) {\n    FileItem fileRoot=new FileItem();\n    fileRoot.setDirectory(true);\n    fileRoot.setIcon(homeIcon);\n    fileRoot.setName(DIR_ROOT);\n    fileRoot.setSize(0);\n    fileRoot.setPath(rootPath);\n    datas.add(fileRoot);\n  }\n  if (showUpDir && !path.equals(\"/\")) {\n    FileItem fileParent=new FileItem();\n    fileParent.setDirectory(true);\n    fileParent.setIcon(upIcon);\n    fileParent.setName(DIR_PARENT);\n    fileParent.setSize(0);\n    fileParent.setPath(new File(path).getParent());\n    datas.add(fileParent);\n  }\n  File[] files;\n  if (allowExtensions == null) {\n    if (onlyListDir) {\n      files=FileUtils.listDirs(currentPath);\n    }\n else {\n      files=FileUtils.listDirsAndFiles(currentPath);\n    }\n  }\n else {\n    if (onlyListDir) {\n      files=FileUtils.listDirs(currentPath,allowExtensions);\n    }\n else {\n      files=FileUtils.listDirsAndFiles(currentPath,allowExtensions);\n    }\n  }\n  if (files != null) {\n    for (    File file : files) {\n      if (!showHideDir && file.getName().startsWith(\".\")) {\n        continue;\n      }\n      FileItem fileItem=new FileItem();\n      boolean isDirectory=file.isDirectory();\n      fileItem.setDirectory(isDirectory);\n      if (isDirectory) {\n        fileItem.setIcon(folderIcon);\n        fileItem.setSize(0);\n      }\n else {\n        fileItem.setIcon(fileIcon);\n        fileItem.setSize(file.length());\n      }\n      fileItem.setName(file.getName());\n      fileItem.setPath(file.getAbsolutePath());\n      datas.add(fileItem);\n    }\n  }\n  data.clear();\n  data.addAll(datas);\n  notifyDataSetChanged();\n}\n", "nl": "Load data array list."}
{"code": "public String makeLinkAuto(HttpServletRequest request,HttpServletResponse response,String url,Boolean absPath,Boolean interWebapp,String webSiteId,Boolean controller){\n  return makeLinkAuto(request,response,url,absPath,interWebapp,webSiteId,controller,null,null,null);\n}\n", "nl": "SCIPIO: Builds an Ofbiz navigation link, where possible inferring <em>some</em> of its properties by analyzing the passed URI (<code>url</code>) and <code>webSiteId</code>."}
{"code": "private IncludeReference(@NonNull Module module,@NonNull VirtualFile fromFile,@Nullable VirtualFile toFile){\n  myModule=module;\n  myFromFile=fromFile;\n  myToFile=toFile;\n}\n", "nl": "Creates a new include reference"}
{"code": "public SecureSetUserLevelQuery levels(String... value){\n  return unsafeParam(\"levels\",value);\n}\n", "nl": "Set levels"}
{"code": "public void postRequest(Context context,String url,String body,ApiListener apiListener){\n  try {\n    JSONObject bodyObject=body != null ? new JSONObject(body) : null;\n    postRequest(context,url,bodyObject,apiListener);\n  }\n catch (  JSONException e) {\n    apiListener.onApiError(new LIApiError(\"Unable to convert body to json object \" + e.toString(),e));\n  }\n}\n", "nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using POST Method"}
{"code": "public MessagesMarkAsReadQuery messageIds(Integer... value){\n  return unsafeParam(\"message_ids\",value);\n}\n", "nl": "IDs of messages to mark as read."}
{"code": "public Builder withSortOrder(RangeRequest.SortOrder order){\n  this.sortOrder=order;\n  return this;\n}\n", "nl": "Sort the return key value pairs in the provided <i>order</i>."}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.passreset"}
{"code": "@Override public void onDestroy(){\n  Log_OC.v(TAG,\"Destroying service\");\n  mBinder=null;\n  mServiceHandler=null;\n  mServiceLooper.quit();\n  mServiceLooper=null;\n  mNotificationManager=null;\n  AccountManager am=AccountManager.get(getApplicationContext());\n  am.removeOnAccountsUpdatedListener(this);\n  super.onDestroy();\n}\n", "nl": "Service clean up"}
{"code": "@JsonIgnore public boolean isInMaintenance(){\n  return (this.mode == DataTagConstants.MODE_MAINTENANCE);\n}\n", "nl": "Checks if the data tag is in maintenance mode."}
{"code": "public static synchronized void report(){\n  System.err.println(\"counter : \" + c);\n}\n", "nl": "reports the counter content."}
{"code": "public static String decrypt16bits(String encrypted) throws Exception {\n  SecretKeySpec skeySpec=new SecretKeySpec(Settings.sEncryptKey.getBytes(),\"AES\");\n  Cipher cipher=Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.DECRYPT_MODE,skeySpec);\n  byte[] original=cipher.doFinal(Hex.decodeHex(encrypted.toCharArray()));\n  String originalString=new String(original);\n  return originalString;\n}\n", "nl": "this method change the message encrypt String to normal String using 32bits AES"}
{"code": "private void initSpringSecurity(ServletContext servletContext,EnumSet<DispatcherType> disps){\n  log.debug(\"Registering Spring Security Filter\");\n  FilterRegistration.Dynamic springSecurityFilter=servletContext.addFilter(\"springSecurityFilterChain\",new DelegatingFilterProxy());\n  springSecurityFilter.addMappingForUrlPatterns(disps,false,\"/*\");\n  springSecurityFilter.setAsyncSupported(true);\n}\n", "nl": "Initializes Spring Security."}
{"code": "public void sentData(){\n  hasSentData=true;\n  lastSendTime=System.currentTimeMillis();\n}\n", "nl": "Method called when data is sent to this peer."}
{"code": "public static boolean hasModule(@Nullable Project project,@NotNull String gradlePath,boolean checkProjectFolder){\n  if (project == null) {\n    return false;\n  }\n  for (  Module module : ModuleManager.getInstance(project).getModules()) {\n    if (gradlePath.equals(getGradlePath(module))) {\n      return true;\n    }\n  }\n  if (checkProjectFolder) {\n    File location=getModuleDefaultPath(project.getBaseDir(),gradlePath);\n    if (location.isFile()) {\n      return true;\n    }\n else     if (location.isDirectory()) {\n      File[] children=location.listFiles();\n      return children == null || children.length > 0;\n    }\n else {\n      return false;\n    }\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Checks if the project already has a module with given Gradle path."}
{"code": "public void add(BlockedPlayer plr){\n  blockedList.put(plr.getObjId(),plr);\n}\n", "nl": "Adds a player to the blocked users list<br /> <ul> <li>Does not send packets or update the database</li> </ul>"}
{"code": "private ComputeDescription findComputeDescription() throws Exception {\n  QueryTask.QuerySpecification qs=new QueryTask.QuerySpecification();\n  qs.query.addBooleanClause(QueryTask.Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_ID,\"ovf-*\",QueryTask.QueryTerm.MatchType.WILDCARD).build());\n  QueryTask qt=QueryTask.create(qs).setDirect(true);\n  String resultJson=sendRequest(SimpleHttpsClient.HttpMethod.POST,ServiceUriPaths.CORE_QUERY_TASKS,Utils.toJson(qt));\n  QueryTask result=Utils.fromJson(resultJson,QueryTask.class);\n  result.results.documentLinks.get(0);\n  String descJson=sendRequest(SimpleHttpsClient.HttpMethod.GET,result.results.documentLinks.get(0),null);\n  return Utils.fromJson(descJson,ComputeDescription.class);\n}\n", "nl": "Do a query to get the ComputeDescription. Perhaps the OvfImporter should return the links of the created descriptions?"}
{"code": "private Vector appendVector(Vector vec,Vector appvec){\n  if (appvec != null) {\n    for (int count=0; count < appvec.size(); count++) {\n      vec.addElement(appvec.elementAt(count));\n    }\n  }\n  return vec;\n}\n", "nl": "Append two vectors, returning the result."}
{"code": "public void onRecentTabsPageClosed(){\n  if (!mCanDisableSessionInvalidations)   return;\n  --mNumRecentTabPages;\n  if (mNumRecentTabPages == 0) {\n    setSessionInvalidationsEnabled(false,UNREGISTER_FOR_SESSION_SYNC_INVALIDATIONS_DELAY_MS);\n  }\n}\n", "nl": "Called when a RecentTabsPage is closed."}
{"code": "protected void waitForImage(Image image){\n  int id=++nextTrackerID;\n  tracker.addImage(image,id);\n  try {\n    tracker.waitForID(id,0);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  tracker.removeImage(image,id);\n}\n", "nl": "Wait for an image to load."}
{"code": "public Object loadFromString(final String xml) throws XMLException {\n  Object readObject=null;\n  try {\n    readObject=unmarshaller.unmarshal(new StringReader(xml));\n    if (readObject instanceof JAXBElement) {\n      readObject=((JAXBElement)readObject).getValue();\n    }\n  }\n catch (  JAXBException e) {\n    throw new XMLException(\"Cannot unmarshal the XML\",e);\n  }\ncatch (  IllegalArgumentException e) {\n    throw new XMLException(\"Cannot unmarshal the XML\",e);\n  }\n  return readObject;\n}\n", "nl": "Loads an XML document from a stream and unmarshals it."}
{"code": "@Override public final void confirmEquipmentStateOK(){\n  confirmEquipmentStateOK(null);\n}\n", "nl": "Sends a note to the business layer, to confirm that the equipment is properly configured, connected to its source and running"}
{"code": "public void despawnObjects(boolean remove){\n  for (  HouseObject<?> obj : getSpawnedObjects()) {\n    if (obj.isInWorld()) {\n      obj.getController().onDelete();\n      obj.clearKnownlist();\n    }\n    if (remove) {\n      obj.removeFromHouse();\n    }\n  }\n  if (remove) {\n    setPersistentState(PersistentState.UPDATE_REQUIRED);\n    save();\n  }\n}\n", "nl": "Use before switching house"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "protected void performHighlight(Highlight h,MotionEvent e){\n  if (!(h == null || h.equalTo(mLastHighlighted))) {\n    mChart.highlightValue(h,true);\n    mLastHighlighted=h;\n  }\n}\n", "nl": "Perform a highlight operation."}
{"code": "public void unexport(long remoteObjID){\n  List<ChannelEntry> channelEntries=getChannels(remoteObjID);\n  for (  ChannelEntry chEntry : channelEntries)   closeConnection(chEntry);\n}\n", "nl": "unexport supplied remote objectID and close all channel sockets"}
{"code": "public static boolean isPotentiallyEncryptedString(String string){\n  checkNotNull(string,\"string\");\n  byte[] encryptedBytes;\n  try {\n    encryptedBytes=BaseEncoding.base64().omitPadding().decode(string);\n  }\n catch (  IllegalArgumentException e) {\n    return false;\n  }\n  return isPotentiallyEncryptedBytes(encryptedBytes);\n}\n", "nl": "Returns true if the provided String _could_ be encrypted credentials, even if it can't be decrypted by a specific instance."}
{"code": "@Override public int onStartCommand(Intent intent,int flags,int startId){\n  Log_OC.d(TAG,\"Starting command with id \" + startId);\n  if (!intent.hasExtra(EXTRA_ACCOUNT) || !intent.hasExtra(EXTRA_FILE)) {\n    Log_OC.e(TAG,\"Not enough information provided in intent\");\n    return START_NOT_STICKY;\n  }\n else {\n    final Account account=intent.getParcelableExtra(EXTRA_ACCOUNT);\n    final OCFile file=intent.getParcelableExtra(EXTRA_FILE);\n    AbstractList<String> requestedDownloads=new Vector<String>();\n    try {\n      DownloadFileOperation newDownload=new DownloadFileOperation(account,file);\n      newDownload.addDatatransferProgressListener(this);\n      newDownload.addDatatransferProgressListener((FileDownloaderBinder)mBinder);\n      Pair<String,String> putResult=mPendingDownloads.putIfAbsent(account.name,file.getRemotePath(),newDownload);\n      if (putResult != null) {\n        String downloadKey=putResult.first;\n        requestedDownloads.add(downloadKey);\n        sendBroadcastNewDownload(newDownload,putResult.second);\n      }\n    }\n catch (    IllegalArgumentException e) {\n      Log_OC.e(TAG,\"Not enough information provided in intent: \" + e.getMessage());\n      return START_NOT_STICKY;\n    }\n    if (requestedDownloads.size() > 0) {\n      Message msg=mServiceHandler.obtainMessage();\n      msg.arg1=startId;\n      msg.obj=requestedDownloads;\n      mServiceHandler.sendMessage(msg);\n    }\n  }\n  return START_NOT_STICKY;\n}\n", "nl": "Entry point to add one or several files to the queue of downloads. New downloads are added calling to startService(), resulting in a call to this method. This ensures the service will keep on working although the caller activity goes away."}
{"code": "@Override public Node cloneNode(boolean deep){\n  ElementDefinitionImpl newnode=(ElementDefinitionImpl)super.cloneNode(deep);\n  newnode.attributes=attributes.cloneMap(newnode);\n  return newnode;\n}\n", "nl": "Replicate this object."}
{"code": "public FileAlterationObserver(String directoryName,FileFilter fileFilter,IOCase caseSensitivity){\n  this(new File(directoryName),fileFilter,caseSensitivity);\n}\n", "nl": "Construct an observer for the specified directory, file filter and file comparator."}
{"code": "protected void prepareBarHighlight(float x,float y1,float y2,float barspaceHalf,Transformer trans){\n  float barWidth=0.5f;\n  float left=x - barWidth + barspaceHalf;\n  float right=x + barWidth - barspaceHalf;\n  float top=y1;\n  float bottom=y2;\n  mBarRect.set(left,top,right,bottom);\n  trans.rectValueToPixel(mBarRect,mAnimator.getPhaseY());\n}\n", "nl": "Prepares a bar for being highlighted."}
{"code": "private void stopAutoNoopTimer(){\n  if (autoNoopTimer != null) {\n    autoNoopTimer.interrupt();\n    autoNoopTimer=null;\n  }\n}\n", "nl": "Stops the auto-noop timer thread."}
{"code": "public synchronized boolean retainAll(Collection c){\n  Object[] elements=getArray();\n  int len=elements.length;\n  if (len != 0) {\n    int newlen=0;\n    Object[] temp=new Object[len];\n    for (int i=0; i < len; ++i) {\n      Object element=elements[i];\n      if (c.contains(element))       temp[newlen++]=element;\n    }\n    if (newlen != len) {\n      setArray(copyOfRange(temp,0,newlen,Object[].class));\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Retains only the elements in this list that are contained in the specified collection.  In other words, removes from this list all of its elements that are not contained in the specified collection."}
{"code": "public void writeBody(DataOutput dataOut) throws IOException {\n  SerializationHelper.writeObject((OutputStream)dataOut,Body);\n}\n", "nl": "Used serialize the message body to an output stream"}
{"code": "public void stop(){\n  mStarted=false;\n  mEnableSessionInvalidationsTimer.pause();\n  Intent intent=new Intent(mContext,InvalidationClientService.class);\n  intent.putExtra(InvalidationIntentProtocol.EXTRA_STOP,true);\n  mContext.startService(intent);\n}\n", "nl": "Stops the invalidation client."}
{"code": "public GraphSimilarityComparatorAdapter(){\n}\n", "nl": "Creates a new instance of GraphSimilarityComparatorAdapter"}
{"code": "private void maybeRunPendingJobsH(){\nsynchronized (mJobs) {\n    Iterator<JobStatus> it=mPendingJobs.iterator();\n    if (DEBUG) {\n    }\n    while (it.hasNext()) {\n      JobStatus nextPending=it.next();\n      JobServiceContext availableContext=null;\n      for (int i=0; i < mActiveServices.size(); i++) {\n        JobServiceContext jsc=mActiveServices.get(i);\n        final JobStatus running=jsc.getRunningJob();\n        if (running != null && running.matches(nextPending.getUid(),nextPending.getJobId())) {\n          availableContext=null;\n          break;\n        }\n        if (jsc.isAvailable()) {\n          availableContext=jsc;\n        }\n      }\n      if (availableContext != null) {\n        if (!availableContext.executeRunnableJob(nextPending)) {\n          if (DEBUG) {\n          }\n          mJobs.remove(nextPending);\n        }\n        it.remove();\n      }\n    }\n  }\n}\n", "nl": "Reconcile jobs in the pending queue against available execution contexts. A controller can force a job into the pending queue even if it's already running, but here is where we decide whether to actually execute it."}
{"code": "@Nullable public Bitmap generateIconForUrl(String url,boolean includePrivateRegistries){\n  if (TextUtils.isEmpty(url))   return null;\n  String text=getIconTextForUrl(url,includePrivateRegistries);\n  if (TextUtils.isEmpty(text))   return null;\n  return generateIconForText(text);\n}\n", "nl": "Returns a Bitmap representing the icon to be used for |url|."}
{"code": "protected FIRFilter(){\n}\n", "nl": "Create a new, uninitialised FIR filter. Subclasses need to call"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "private static String readKeyValue(Integer keyHandle,String keyPath,String valueName){\n  Integer actualKeyHandle=null;\n  try {\n    actualKeyHandle=openKey(keyHandle,keyPath);\n    if (actualKeyHandle == null)     return null;\n    return queryKeyValue(actualKeyHandle,valueName);\n  }\n  finally {\n    closeKey(actualKeyHandle);\n  }\n}\n", "nl": "Opens the specified key path and reads the specified value."}
{"code": "public synchronized void removePeer(JsonRpcPeer peer){\n  if (mReceivingPeers.remove(peer) != null) {\n    mReceivingPeersSnapshot=null;\n    if (mListener != null) {\n      mListener.onPeerUnregistered(peer);\n    }\n  }\n}\n", "nl": "Unregister an existing peer."}
{"code": "@Override public Node firstChild(){\n  if (fCurrentNode == null)   return null;\n  Node node=getFirstChild(fCurrentNode);\n  if (node != null) {\n    fCurrentNode=node;\n  }\n  return node;\n}\n", "nl": "Return the first child Node from the current node, after applying filter, whatToshow. If result is not null, set the current Node."}
{"code": "public ChunkManager(World world){\n  this.world=world;\n}\n", "nl": "Used when loading an existing world."}
{"code": "public static S2Point robustCrossProd(S2Point a,S2Point b){\n  S2Point x=S2Point.crossProd(S2Point.add(b,a),S2Point.sub(b,a));\n  if (!x.equals(new S2Point(0,0,0))) {\n    return x;\n  }\n  return ortho(a);\n}\n", "nl": "Return a vector \"c\" that is orthogonal to the given unit-length vectors \"a\" and \"b\". This function is similar to a.CrossProd(b) except that it does a better job of ensuring orthogonality when \"a\" is nearly parallel to \"b\", and it returns a non-zero result even when a == b or a == -b. It satisfies the following properties (RCP == RobustCrossProd): (1) RCP(a,b) != 0 for all a, b (2) RCP(b,a) == -RCP(a,b) unless a == b or a == -b (3) RCP(-a,b) == -RCP(a,b) unless a == b or a == -b (4) RCP(a,-b) == -RCP(a,b) unless a == b or a == -b"}
{"code": "public ChangeSet decrement(String path,byte delta){\n  return increment(path,-delta);\n}\n", "nl": "Decrement a byte property with the given delta."}
{"code": "private void addMetaData(DataQueryParams params,Grid grid){\n  if (!params.isSkipMeta()) {\n    Map<String,Object> metaData=new HashMap<>();\n    Map<String,String> uidNameMap=AnalyticsUtils.getUidNameMap(params);\n    Map<String,String> cocNameMap=AnalyticsUtils.getCocNameMap(params);\n    uidNameMap.putAll(cocNameMap);\n    uidNameMap.put(DATA_X_DIM_ID,DISPLAY_NAME_DATA_X);\n    metaData.put(AnalyticsMetaDataKey.NAMES.getKey(),uidNameMap);\n    Calendar calendar=PeriodType.getCalendar();\n    List<String> periodUids=calendar.isIso8601() ? getDimensionalItemIds(params.getDimensionOrFilterItems(PERIOD_DIM_ID)) : getLocalPeriodIdentifiers(params.getDimensionOrFilterItems(PERIOD_DIM_ID),calendar);\n    metaData.put(PERIOD_DIM_ID,periodUids);\n    metaData.put(CATEGORYOPTIONCOMBO_DIM_ID,cocNameMap.keySet());\n    for (    DimensionalObject dim : params.getDimensionsAndFilters()) {\n      if (!metaData.keySet().contains(dim.getDimension())) {\n        metaData.put(dim.getDimension(),getDimensionalItemIds(dim.getItems()));\n      }\n    }\n    User user=securityManager.getCurrentUser(params);\n    List<OrganisationUnit> organisationUnits=asTypedList(params.getDimensionOrFilterItems(ORGUNIT_DIM_ID));\n    Collection<OrganisationUnit> roots=user != null ? user.getOrganisationUnits() : null;\n    if (params.isHierarchyMeta()) {\n      metaData.put(AnalyticsMetaDataKey.ORG_UNIT_HIERARCHY.getKey(),getParentGraphMap(organisationUnits,roots));\n    }\n    if (params.isShowHierarchy()) {\n      metaData.put(AnalyticsMetaDataKey.ORG_UNIT_NAME_HIERARCHY.getKey(),getParentNameGraphMap(organisationUnits,roots,true));\n    }\n    if (params.isDimensionItemMeta()) {\n      metaData.put(AnalyticsMetaDataKey.DIMENSION_ITEMS.getKey(),AnalyticsUtils.getUidDimensionalItemMap(params));\n    }\n    grid.setMetaData(metaData);\n  }\n}\n", "nl": "Adds meta data values to the given grid based on the given data query parameters."}
{"code": "public static short readLittleEndianShort(DataInputStream dis) throws IOException {\n  short bits=(short)(0x0000ff & dis.readByte());\n  bits|=(((short)(0x0000ff & dis.readByte())) << 8);\n  return bits;\n}\n", "nl": "Reads the next little-endian short from the given DataInputStream."}
{"code": "public void clear(){\n  panel.clear();\n}\n", "nl": "Clear all displayed console messages."}
{"code": "public String dnsResolve(String host){\n  try {\n    InetAddress ina=InetAddress.getByName(host);\n    return ina.getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    Logger.log(JavaxPacScriptParser.class,LogLevel.DEBUG,\"DNS name not resolvable {0}.\",host);\n  }\n  return \"\";\n}\n", "nl": "Resolves the given DNS host name into an IP address, and returns it in the dot separated format as a string."}
{"code": "private void notifyUIRefreshComplete(boolean ignoreHook){\n  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {\n    if (DEBUG) {\n      PtrCLog.d(LOG_TAG,\"notifyUIRefreshComplete mRefreshCompleteHook run.\");\n    }\n    mRefreshCompleteHook.takeOver();\n    return;\n  }\n  if (mPtrUIHandlerHolder.hasHandler()) {\n    if (DEBUG) {\n      PtrCLog.i(LOG_TAG,\"PtrUIHandler: onUIRefreshComplete\");\n    }\n    mPtrUIHandlerHolder.onUIRefreshComplete(this);\n  }\n  mPtrIndicator.onUIRefreshComplete();\n  tryScrollBackToTopAfterComplete();\n  tryToNotifyReset();\n}\n", "nl": "Do real refresh work. If there is a hook, execute the hook first."}
{"code": "public boolean intersectsRange(Date start,Date end){\n  return intersectsRange(new DateRange(start,end));\n}\n", "nl": "Returns <code>true</code> if <code>start</code> and <code>end</code> intersect this range."}
{"code": "public boolean canZoomOutMoreY(){\n  return (mScaleY > mMinScaleY);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed out on the y-axis"}
{"code": "public EggIncubator(PokemonGo api,EggIncubatorOuterClass.EggIncubator proto){\n  this.api=api;\n  this.proto=proto;\n}\n", "nl": "Create new EggIncubator with given proto."}
{"code": "public boolean isNull(int index){\n  return JSONObject.NULL.equals(opt(index));\n}\n", "nl": "Determine if the value is null."}
{"code": "public static String decode(String str) throws RuntimeException {\n  byte[] bytes;\n  try {\n    bytes=str.getBytes(\"ASCII\");\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new RuntimeException(\"ASCII is not supported!\",e);\n  }\n  byte[] decoded=decode(bytes);\n  return new String(decoded);\n}\n", "nl": "<p> Decodes the supplied string. </p> <p> The supplied string is decoded into a binary sequence, and then the sequence is encoded with the system default charset and returned. </p>"}
{"code": "@Override public Vector whatCanGoHere(int[] state){\n  Vector ret=new Vector();\n  for (int i=0; i < fNumElements; i++) {\n    if (state[i + 1] == STATE_START)     ret.addElement(fAllElements[i]);\n  }\n  return ret;\n}\n", "nl": "Check which elements are valid to appear at this point. This method also works if the state is in error, in which case it returns what should have been seen."}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous :-)"}
{"code": "public static Map<String,String> parseKeyAndValueToMap(String source){\n  if (StringUtil.isEmpty(source)) {\n    return null;\n  }\n  try {\n    JSONObject jsonObject=new JSONObject(source);\n    return parseKeyAndValueToMap(jsonObject);\n  }\n catch (  JSONException e) {\n    if (isPrintException) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n}\n", "nl": "parse key-value pairs to map. ignore empty key, if getValue exception, put empty value"}
{"code": "private static PermissionInfo[] parsePermissions(String s){\n  try {\n    ArrayList l=new ArrayList();\n    StreamTokenizer st=createTokenizer(s);\n    char delim='\"';\n    if (st.nextToken() == StreamTokenizer.TT_WORD && st.sval.equals(\"delim\")) {\n      if (st.nextToken() == '=') {\n        if (st.nextToken() == StreamTokenizer.TT_WORD) {\n          if (st.sval.length() > 1) {\n            throw new IllegalArgumentException(\"excess delimiter characters\");\n          }\n          delim=st.sval.charAt(0);\n        }\n else {\n          delim=(char)st.ttype;\n        }\n        if (delim == ';') {\n          throw new IllegalArgumentException(\"illegal delimiter ';'\");\n        }\n      }\n else {\n        st=createTokenizer(s);\n      }\n      st.nextToken();\n    }\n    st.quoteChar(delim);\n    do {\n      String type, name=null, actions=null;\n      if (st.ttype != StreamTokenizer.TT_WORD) {\n        throw new IllegalArgumentException(\"expected permission type\");\n      }\n      type=st.sval;\n      st.nextToken();\n      if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {\n        l.add(new PermissionInfo(type,null,null));\n        continue;\n      }\n else       if (st.ttype == delim) {\n        name=st.sval;\n      }\n else {\n        throw new IllegalArgumentException(\"expected permission name or ';'\");\n      }\n      st.nextToken();\n      if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {\n        l.add(new PermissionInfo(type,name,null));\n        continue;\n      }\n else       if (st.ttype != ',') {\n        throw new IllegalArgumentException(\"expected ',' or ';'\");\n      }\n      if (st.nextToken() != delim) {\n        throw new IllegalArgumentException(\"expected permission actions\");\n      }\n      actions=st.sval;\n      st.nextToken();\n      if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {\n        l.add(new PermissionInfo(type,name,actions));\n        continue;\n      }\n else {\n        throw new IllegalArgumentException(\"expected ';'\");\n      }\n    }\n while (st.nextToken() != StreamTokenizer.TT_EOF);\n    return (PermissionInfo[])l.toArray(new PermissionInfo[l.size()]);\n  }\n catch (  IOException ex) {\n    throw (Error)new InternalError().initCause(ex);\n  }\n}\n", "nl": "Parses permission information from given GrantPermission name string. Throws an IllegalArgumentException if the name string is misformatted."}
{"code": "final void removeHalfEdges(DoubleEdgeListHalfEdge edge){\n  int index=this.edges.indexOf(edge);\n  this.removeHalfEdges(index,edge);\n}\n", "nl": "Removes the given half edge and its twin."}
{"code": "@Override public synchronized void stop(){\n  LOGGER.info(\"Stopping the C2MON alive timer mechanism.\");\n  timer.cancel();\n  running=false;\n}\n", "nl": "Stops the timer mechanism. No more checks are made on the alive timers. <p>Can be restarted using the start method."}
{"code": "public void addActivity(Activity activity){\n  if (activityStack == null) {\n    activityStack=new Stack<Activity>();\n  }\n  activityStack.add(activity);\n}\n", "nl": "add Activity to Stack"}
{"code": "public void mergeStyles(Properties styles){\n  for (  String token : styles.stringPropertyNames()) {\n    String stv=styles.getProperty(token);\n    try {\n      TokenType tt=TokenType.valueOf(token);\n      SyntaxStyle tokenStyle=new SyntaxStyle(stv);\n      put(tt,tokenStyle);\n    }\n catch (    IllegalArgumentException ex) {\n      LOG.warning(\"illegal token type or style for: \" + token);\n    }\n  }\n}\n", "nl": "You can call the mergeStyles method with a Properties file to customize the existing styles.  Any existing styles will be overwritten by the styles you provide."}
{"code": "public PhotosCopyQuery copy(UserActor actor,int ownerId,int photoId){\n  return new PhotosCopyQuery(getClient(),actor,ownerId,photoId);\n}\n", "nl": "Allows to copy a photo to the \"Saved photos\" album"}
{"code": "public ExceptionalUnitGraph(Body body,ThrowAnalysis throwAnalysis,boolean omitExceptingUnitEdges){\n  super(body);\n  initialize(throwAnalysis,omitExceptingUnitEdges);\n}\n", "nl": "Constructs the graph for a given Body instance, using the <code>ThrowAnalysis</code> and <code>omitExceptingUnitEdges</code> value that are passed as parameters."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201094,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] was affected by [%SkillCaster]'s [%SkillName]."}
{"code": "public synchronized void stop(){\n  this.stopped=true;\n}\n", "nl": "Stops the example."}
{"code": "public boolean stopWhenTouchingEnd(){\n  return stopWhenTouchingEnd;\n}\n", "nl": "Whether or not this frame provider stops when the first frame touches the last input sample. When this returns true, the last frame will be the first one including the last sample; when this returns false, the last frame will be the last that still contains any data. Defaults to true."}
{"code": "@Override public void onTextChanged(CharSequence s,int start,int before,int count){\n  if (iTextWatcher != null) {\n    iTextWatcher.onTextChanged(this.curEditText);\n  }\n}\n", "nl": "This method is called to notify you that, within <code>s</code>, the <code>count</code> characters beginning at <code>start</code> have just replaced old text that had length <code>before</code>. It is an error to attempt to make changes to <code>s</code> from this callback."}
{"code": "public void clearTriggered(OperationID operationId){\n  if (operationId != null && _alreadyTriggeredEvents.contains(operationId)) {\n    _outgoingEvents.remove(operationId);\n    _alreadyTriggeredEvents.remove(operationId);\n  }\n}\n", "nl": "Check if all notifications were received and clear them"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"show window=pagesetup;\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public DistinguishableEffectSize distinguishableEffectSizes(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2){\n  SymmetricInputValidation(number_impressions_1,number_actions_1,number_impressions_2,number_actions_2);\n  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);\n  double pooled_rate=1.0 * (number_actions_1 + number_actions_2) / (number_impressions_1 + number_impressions_2);\n  double effect_size=zval * sqrt(pooled_rate * (1 - pooled_rate) * (1.0 / number_impressions_1 + 1.0 / number_impressions_2));\n  return new DistinguishableEffectSize.Builder().withNegativeEffectSize(-effect_size).withPositiveEffectSize(effect_size).build();\n}\n", "nl": "Calculates, for the current amount of data, the smallest (closest to 0) effect size that, if measured, could be confidently said to be nonzero. This is NOT a symmetric function; it takes rate_1 as a constant and considers effect size as a function of rate_2."}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"java.lang.String getSystemTimeZoneID(java.lang.String,java.lang.String)\")) {\n    java_util_TimeZone_getSystemTimeZoneID(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures."}
{"code": "private boolean matchCollectionItemNestedProperty(Collection<?> collection,int tokenIndex){\n  for (  Object item : collection) {\n    for (int i=tokenIndex; i < _tokens.length && item != null; i++)     item=AbstractTypeIntrospector.getNestedValue(item,i,_tokens,_propertyInfo,_fieldPath);\n    if (item != null && executePredicate(item))     return true;\n  }\n  return false;\n}\n", "nl": "Handles the following query: \"...collection[*].property = ?\""}
{"code": "protected final void createDelegate(){\n  if (delegate == null) {\n    try {\n      Object obj=element.createExecutableExtension(ATT_CLASS);\n      if (obj instanceof IActionDelegate) {\n        delegate=(IActionDelegate)obj;\n      }\n    }\n catch (    Throwable e) {\n      if (e instanceof CoreException) {\n        SVNUIPlugin.log((CoreException)e);\n      }\n else {\n        SVNUIPlugin.log(new Status(Status.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,\"Internal plug-in action delegate error on creation.\",e));\n      }\n    }\n  }\n}\n", "nl": "Creates the delegate and refreshes its enablement."}
{"code": "public Builder primaryColor(int colorPrimary){\n  this.stepNumberBackgroundColor=colorPrimary;\n  this.buttonBackgroundColor=colorPrimary;\n  return this;\n}\n", "nl": "Set the primary color (background color of the left circles and buttons)"}
{"code": "public Boolean isRecordRepeatedSteps(){\n  return recordRepeatedSteps;\n}\n", "nl": "Gets the value of the recordRepeatedSteps property."}
{"code": "@SuppressWarnings(\"unchecked\") void addBox(ValueBox vb){\n  if (boxes instanceof List) {\n    List<ValueBox> list=(List<ValueBox>)boxes;\n    list.add(vb);\n  }\n else   if (boxes instanceof ValueBox) {\n    ValueBox ovb=(ValueBox)boxes;\n    List<ValueBox> list=new ArrayList<ValueBox>();\n    list.add(ovb);\n    list.add(vb);\n    boxes=list;\n  }\n else {\n    boxes=vb;\n  }\n}\n", "nl": "Adds a value box to this operand."}
{"code": "public static long calculateDifferentSecond(Date startDate,Date endDate){\n  return calculateDifference(startDate,endDate,DifferenceMode.Second);\n}\n", "nl": "Calculate different second long."}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"java.lang.Throwable fillInStackTrace()\")) {\n    java_lang_Throwable_fillInStackTrace(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures."}
{"code": "@Override public BigFraction reciprocal(){\n  return new BigFraction(denominator,numerator);\n}\n", "nl": "<p> Return the multiplicative inverse of this fraction. </p>"}
{"code": "private void checkValidityOfFifoTemplateOnEntry(Context context,IEntryHolder entry,ITemplateHolder template) throws FifoException {\n  TerminatingFifoXtnsInfo.FifoXtnEntryInfo eti=null;\n  boolean isDirtyRead=false;\n  boolean isReadCommitted=false;\n  if (context.isTemplateInitialSearch() && template.isInitialFifoSearchActive()) {\n    eti=_cacheManager.getFifoEntryXtnInfo(entry);\n    if (eti != null) {\n      if (TerminatingFifoXtnsInfo.isSeqTransactionGT(eti.getCreatingXtn(),template.getFifoXtnNumberOnSearchStart()))       throw _fifoException;\n      long xtnEntry;\n      if (template.isReadOperation()) {\n        isDirtyRead=indicateDirtyRead(template);\n        if (isDirtyRead)         return;\n        isReadCommitted=indicateReadCommitted(context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData(),template);\n        if (isReadCommitted) {\n          xtnEntry=eti.getEntryWriteXtnNumber();\n          if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,template.getFifoXtnNumberOnSearchStart()))           throw _fifoException;\n          return;\n        }\n      }\n      xtnEntry=eti.getTerminatingXtnWriteLock();\n      if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,template.getFifoXtnNumberOnSearchStart()))       throw _fifoException;\n      if (template.isWriteLockOperation()) {\n        xtnEntry=eti.getTerminatingXtnReadLock();\n        if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,template.getFifoXtnNumberOnSearchStart()))         throw _fifoException;\n      }\n    }\n  }\n  if (!context.isTemplateInitialSearch() && template.isInitialFifoSearchActive() && template.getPendingFifoSearchObject() != null) {\n    template.getPendingFifoSearchObject().addRejectedEntry(entry,context.getRecentFifoObject());\n    throw _fifoException;\n  }\n  if (context.isFifoThread()) {\n    long fifoThreadXtn=context.getRecentFifoObject().getFifoXtnNumber();\n    if (TerminatingFifoXtnsInfo.isSeqTransactionGT(template.getFifoXtnNumberOnSearchStart(),fifoThreadXtn))     throw _fifoException;\n    eti=_cacheManager.getFifoEntryXtnInfo(entry);\n    if (eti != null) {\n      long xtnEntry;\n      if (template.isReadOperation()) {\n        isDirtyRead=indicateDirtyRead(template);\n        if (isDirtyRead)         return;\n        isReadCommitted=indicateReadCommitted(context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData(),template);\n        if (isReadCommitted) {\n          xtnEntry=eti.getEntryWriteXtnNumber();\n          if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,fifoThreadXtn))           throw _fifoException;\n          return;\n        }\n      }\n      xtnEntry=eti.getTerminatingXtnWriteLock();\n      if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,fifoThreadXtn))       throw _fifoException;\n      if (template.isWriteLockOperation()) {\n        xtnEntry=eti.getTerminatingXtnReadLock();\n        if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,fifoThreadXtn))         throw _fifoException;\n      }\n    }\n  }\n}\n", "nl": "check if the fifo operation is valid, if not throw FifoExecption"}
{"code": "@Override public void populateExpression(Object objValue){\n  Integer newValue=0;\n  if (objValue instanceof Integer) {\n    newValue=((Integer)objValue).intValue();\n  }\n else   if (objValue instanceof Long) {\n    newValue=((Long)objValue).intValue();\n  }\n else   if (objValue instanceof Double) {\n    Double d=(Double)objValue;\n    newValue=d.intValue();\n  }\n else   if (objValue instanceof String) {\n    newValue=Integer.valueOf((String)objValue);\n  }\n  populateField(newValue);\n}\n", "nl": "Populate expression."}
{"code": "static String byteArrayToAltBase64(byte[] a){\n  return byteArrayToBase64(a,true);\n}\n", "nl": "Translates the specified byte array into an \"alternate representation\" Base64 string.  This non-standard variant uses an alphabet that does not contain the uppercase alphabetic characters, which makes it suitable for use in situations where case-folding occurs."}
{"code": "public void defineActions(IPageLayout layout){\n  layout.addNewWizardShortcut(\"org.eclipse.ui.wizards.new.project\");\n  layout.addNewWizardShortcut(\"org.eclipse.ui.wizards.new.folder\");\n  layout.addNewWizardShortcut(\"org.eclipse.ui.wizards.new.file\");\n  layout.addShowViewShortcut(IPageLayout.ID_RES_NAV);\n  layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);\n  layout.addShowViewShortcut(IPageLayout.ID_TASK_LIST);\n  layout.addShowViewShortcut(ISVNUIConstants.HISTORY_VIEW_ID);\n  layout.addShowViewShortcut(RepositoriesView.VIEW_ID);\n  layout.addShowViewShortcut(ISynchronizeView.VIEW_ID);\n  layout.addPerspectiveShortcut(\"org.eclipse.ui.resourcePerspective\");\n  layout.addPerspectiveShortcut(\"org.eclipse.team.ui.TeamSynchronizingPerspective\");\n}\n", "nl": "Defines the initial actions for a page. "}
{"code": "static List<String> decodeAll(Collection<String> eventKeys){\n  List<String> eventIds=Lists.newArrayList();\n  for (  String eventKey : eventKeys) {\n    decodeTo(eventKey,eventIds);\n  }\n  return eventIds;\n}\n", "nl": "Split Databus event keys into EventStore event IDs."}
{"code": "static VersionNumber identifyJavaVersion(final String userAgent){\n  VersionNumber version=VersionNumber.UNKNOWN;\n  final List<Pattern> patterns=new ArrayList<Pattern>();\n  patterns.add(Pattern.compile(\"Java/((\\\\d+)((\\\\.\\\\d+)+)?((\\\\-|_)[\\\\w\\\\d\\\\-]+)?)\"));\n  patterns.add(Pattern.compile(\"Java((\\\\d+)((\\\\.\\\\d+)+)?((\\\\-|_)[\\\\w\\\\d\\\\-]+)?)\"));\n  for (  final Pattern pattern : patterns) {\n    final Matcher m=pattern.matcher(userAgent);\n    if (m.find()) {\n      version=parseFirstVersionNumber(m.group(MAJOR_INDEX));\n      break;\n    }\n  }\n  return version;\n}\n", "nl": "This method try to determine the version number of the running <i>JVM</i> more accurately."}
{"code": "public static int floorMod(final int a,final int b) throws MathRuntimeException {\n  if (b == 0) {\n    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);\n  }\n  final int m=a % b;\n  if ((a ^ b) >= 0 || m == 0) {\n    return m;\n  }\n else {\n    return b + m;\n  }\n}\n", "nl": "Finds r such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0. <p> This methods returns the same value as integer modulo when a and b are same signs, but returns a different value when they are opposite (i.e. q is negative). </p>"}
{"code": "public void java_util_TimeZone_getSystemTimeZoneID(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getStringObject());\n}\n", "nl": "It should return a constant for TimeZone Gets the TimeZone for the given ID. private static native  java.lang.String getSystemTimeZoneID(java.lang.String,  java.lang.String);"}
{"code": "public Fraction abs(){\n  Fraction ret;\n  if (numerator >= 0) {\n    ret=this;\n  }\n else {\n    ret=negate();\n  }\n  return ret;\n}\n", "nl": "Returns the absolute value of this fraction."}
{"code": "public void append(byte[] bytes){\n  append(bytes,0,bytes.length);\n}\n", "nl": "Append specified bytes to the buffer"}
{"code": "public void onOk(int taskId,int playerId){\n  PlayerTransferRequest request=this.transfers.remove(taskId);\n  PlayerTransferTask task=this.tasks.remove(taskId);\n  task.status=PlayerTransferTask.STATUS_DONE;\n  task.comment=\"task done\";\n  this.dao.update(task);\n  GameServerInfo sourceServer=GameServerTable.getGameServerInfo(request.serverId);\n  if (sourceServer == null || sourceServer.getConnection() == null) {\n    log.error(\"Player transfer requests offline server! #\" + request.serverId);\n    return;\n  }\n  request.account.setActivated((byte)1);\n  request.saccount.setActivated((byte)1);\n  DAOManager.getDAO(AccountDAO.class).updateAccount(request.account);\n  DAOManager.getDAO(AccountDAO.class).updateAccount(request.saccount);\n  log.info(\"transfer #\" + taskId + \" went onOK!\");\n  sourceServer.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.OK,request));\n}\n", "nl": "response from target server after cloning character"}
{"code": "public TrackedEntityInstanceQueryParams addFilter(QueryItem filter){\n  this.filters.add(filter);\n  return this;\n}\n", "nl": "Adds a query item as filter to the parameters."}
{"code": "public static <T>T createPojoFromString(String response,Class<T> pojo){\n  GsonBuilder gsonBuilder=new GsonBuilder();\n  gsonBuilder.serializeNulls();\n  return gsonBuilder.create().fromJson(response,pojo);\n}\n", "nl": "Method used to convert string into pojo (Model class object)"}
{"code": "public static int checkField(int luaState,Object obj,String fieldName) throws LuaException {\n  LuaState L=LuaStateFactory.getExistingState(luaState);\nsynchronized (L) {\n    Field field=null;\n    Class objClass;\n    if (obj instanceof Class) {\n      objClass=(Class)obj;\n    }\n else {\n      objClass=obj.getClass();\n    }\n    try {\n      field=objClass.getField(fieldName);\n    }\n catch (    Exception e) {\n      return 0;\n    }\n    if (field == null) {\n      return 0;\n    }\n    Object ret=null;\n    try {\n      ret=field.get(obj);\n    }\n catch (    Exception e1) {\n      return 0;\n    }\n    if (obj == null) {\n      return 0;\n    }\n    L.pushObjectValue(ret);\n    return 1;\n  }\n}\n", "nl": "Checks if there is a field on the obj with the given name"}
{"code": "protected SysexMessage(byte[] data){\n  super(data);\n}\n", "nl": "Constructs a new <code>SysexMessage</code>."}
{"code": "@Override public Node cloneNode(boolean deep){\n  PSVIDocumentImpl newdoc=new PSVIDocumentImpl();\n  callUserDataHandlers(this,newdoc,UserDataHandler.NODE_CLONED);\n  cloneNode(newdoc,deep);\n  newdoc.mutationEvents=mutationEvents;\n  return newdoc;\n}\n", "nl": "Deep-clone a document, including fixing ownerDoc for the cloned children. Note that this requires bypassing the WRONG_DOCUMENT_ERR protection. I've chosen to implement it by calling importNode which is DOM Level 2."}
{"code": "public DecimalSpinner(double min,double max,double stepSize,double noOfDecimalPlaces){\n  createUI(min,min,max,stepSize,noOfDecimalPlaces);\n}\n", "nl": "Instantiates a new decimal spinner."}
{"code": "@Override public boolean hasMoreData(){\n  return signal.hasMoreData() && pitchmarks.hasMoreData() || periodsInMemory - shiftPeriods > 0;\n}\n", "nl": "Whether or not this frameprovider can provide another frame."}
{"code": "public static boolean equals(double x,double y,int maxUlps){\n  assert maxUlps > 0 && maxUlps < NAN_GAP;\n  long xInt=Double.doubleToLongBits(x);\n  long yInt=Double.doubleToLongBits(y);\n  if (xInt < 0) {\n    xInt=SGN_MASK - xInt;\n  }\n  if (yInt < 0) {\n    yInt=SGN_MASK - yInt;\n  }\n  return Math.abs(xInt - yInt) <= maxUlps;\n}\n", "nl": "Returns true iff both arguments are equal or within the range of allowed error (inclusive). Adapted from <a href=\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\"> Bruce Dawson</a>"}
{"code": "@Override protected void __setConfig(Object config){\n  m_spaceConfig=(SpaceConfig)config;\n}\n", "nl": "Implements the abstract methods of AbstractDynamicMBean"}
{"code": "public ArithmeticPostAggregation withFn(ArithmeticPostAggregationFunction fn){\n  return new ArithmeticPostAggregation(getName(),fn,getFields());\n}\n", "nl": "Get a new instance of this with the given function."}
{"code": "private Map<String,String> mapJobRowsToJobViews(JobRow jobRow){\n  try {\n    return jobPayloadBuilder.buildPayload(jobRow,uriInfo);\n  }\n catch (  JobRequestFailedException ignored) {\n    String msg=ErrorMessageFormat.JOBS_RETREIVAL_FAILED.format(jobRow.getId());\n    LOG.error(msg);\n    throw new JobRequestFailedException(msg);\n  }\n}\n", "nl": "Given a JobRow, map it to the Job payload to be returned to the user. If the JobRow cannot be successfully mapped to a Job View, JobRequestFailedException is thrown."}
{"code": "public static boolean isConstantAttribute(String attributeValue){\n  if (attributeValue.length() > 0) {\n    return !FlexibleStringExpander.containsExpression(FlexibleStringExpander.getInstance(attributeValue));\n  }\n  return true;\n}\n", "nl": "Returns <code>true</code> if <code>attributeValue</code> is a constant value (it does not contain an expression)."}
{"code": "public static boolean isGZip(BufferedInputStream instream){\n  instream.mark(2);\n  byte[] b=new byte[2];\n  try {\n    instream.read(b,0,2);\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(\"Couldn't read header from stream \",ex);\n  }\n  try {\n    instream.reset();\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(\"Couldn't reset stream \",ex);\n  }\n  return (b[0] == 31 && b[1] == -117);\n}\n", "nl": "Test for GZIP stream signature."}
{"code": "public boolean isHighQualityRenderingEnabled(){\n  return highQualityRenderingEnabled;\n}\n", "nl": "<p>Indicates whether the high quality rendering feature is enabled.</p>"}
{"code": "private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){\n  if (isDescending) {\n    K tk=fromKey;\n    fromKey=toKey;\n    toKey=tk;\n    boolean ti=fromInclusive;\n    fromInclusive=toInclusive;\n    toInclusive=ti;\n  }\n  if (lo != null) {\n    if (fromKey == null) {\n      fromKey=lo;\n      fromInclusive=loInclusive;\n    }\n else {\n      int c=m.compare(fromKey,lo);\n      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException(\"key out of range\");\n    }\n  }\n  if (hi != null) {\n    if (toKey == null) {\n      toKey=hi;\n      toInclusive=hiInclusive;\n    }\n else {\n      int c=m.compare(toKey,hi);\n      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException(\"key out of range\");\n    }\n  }\n  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);\n}\n", "nl": "Utility to create submaps, where given bounds override unbounded(null) ones and/or are checked against bounded ones."}
{"code": "public boolean isGlobalFindable(){\n  return doc.getDir().getMainViewer().getTree().getNumberOfNodes() > 0;\n}\n", "nl": "is a global find possible?"}
{"code": "private static Permission[] grantablePermissions(Permission[] permissions){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm == null || permissions.length == 0) {\n    return permissions;\n  }\n  try {\n    sm.checkPermission(new GrantPermission(permissions));\n    return permissions;\n  }\n catch (  SecurityException e) {\n  }\n  ArrayList list=new ArrayList(permissions.length);\n  for (int i=0; i < permissions.length; i++) {\n    try {\n      Permission p=permissions[i];\n      sm.checkPermission(new GrantPermission(p));\n      list.add(p);\n    }\n catch (    SecurityException e) {\n    }\n  }\n  return (Permission[])list.toArray(new Permission[list.size()]);\n}\n", "nl": "Returns subset of given permissions that is grantable given the current calling context."}
{"code": "public double[] toArray(){\n  double[] daRes=new double[3];\n  daRes[0]=ValueSimilarity;\n  daRes[1]=ContainmentSimilarity;\n  daRes[2]=SizeSimilarity;\n  return daRes;\n}\n", "nl": "Returns a 3-element double array corresponding to the aspects of GraphSimilarity."}
{"code": "private void initControls(){\n  mCancelBtn=(Button)findViewById(R.id.folder_picker_btn_cancel);\n  mCancelBtn.setOnClickListener(this);\n  mChooseBtn=(Button)findViewById(R.id.folder_picker_btn_choose);\n  mChooseBtn.setOnClickListener(this);\n}\n", "nl": "Set per-view controllers"}
{"code": "public static final void shuffleList(List l,int repeat){\n  for (int iCnt=0; iCnt < repeat; iCnt++)   shuffleList(l);\n}\n", "nl": "Repeatedly randomizes a given list."}
{"code": "public IndexState createIndex(String name,Path rootDir) throws Exception {\nsynchronized (indices) {\n    if (indexNames.containsKey(name)) {\n      throw new IllegalArgumentException(\"index \\\"\" + name + \"\\\" already exists\");\n    }\n    if (rootDir == null) {\n      indexNames.put(name,\"NULL\");\n    }\n else {\n      if (Files.exists(rootDir)) {\n        throw new IllegalArgumentException(\"rootDir \\\"\" + rootDir + \"\\\" already exists\");\n      }\n      indexNames.put(name,rootDir.toAbsolutePath().toString());\n    }\n    saveIndexNames();\n    IndexState state=new IndexState(this,name,rootDir,true);\n    indices.put(name,state);\n    return state;\n  }\n}\n", "nl": "Create a new index."}
{"code": "public StatusFrame(){\n  super();\n  initComponents();\n}\n", "nl": "Creates new form StatusFrame"}
{"code": "public boolean hasNext(){\n  try {\n    return !error && dataIndexReader.getPosition() < dataIndexReader.length();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n    return false;\n  }\n}\n", "nl": "Returns <tt>true</tt> if the iteration has more elements. (In other words, returns <tt>true</tt> if <tt>next</tt> would return an element rather than throwing an exception.)"}
{"code": "public void reset(){\n  internalReset(0L);\n}\n", "nl": "Resets variables maintaining the sum to zero.  This method may be a useful alternative to creating a new adder, but is only effective if there are no concurrent updates.  Because this method is intrinsically racy, it should only be used when it is known that no threads are concurrently updating."}
{"code": "public void attribute(String elemName,String attrName,String type,String value){\n  ElementType e=getElementType(elemName);\n  if (e == null) {\n    throw new Error(\"Attribute \" + attrName + \" specified for unknown element type \"+ elemName);\n  }\n  e.setAttribute(attrName,type,value);\n}\n", "nl": "Add or replace a default attribute for an element type in this schema."}
{"code": "public ByteArrayOutputStream(int size){\n  if (size < 0) {\n    throw new IllegalArgumentException(\"Negative initial size: \" + size);\n  }\nsynchronized (this) {\n    needNewBuffer(size);\n  }\n}\n", "nl": "Creates a new byte array output stream, with a buffer capacity of  the specified size, in bytes."}
{"code": "public static Having buildHavings(Map<LogicalMetric,Set<ApiHaving>> metricMap){\n  if (metricMap == null || metricMap.isEmpty()) {\n    return null;\n  }\n  List<Having> havings=metricMap.entrySet().stream().map(null).collect(Collectors.toList());\n  Having newHaving=havings.size() == 1 ? havings.get(0) : new AndHaving(havings);\n  LOG.trace(\"Having: {}\",newHaving);\n  return newHaving;\n}\n", "nl": "Build a having model that ANDs together having queries for each of the metrics."}
{"code": "public boolean isCheckUpper(){\n  return upperCheck;\n}\n", "nl": "Needs upper bound check?"}
{"code": "public static int copy(InputStream input,OutputStream output) throws IOException {\n  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];\n  int count=0;\n  int n=0;\n  while (-1 != (n=input.read(buffer))) {\n    output.write(buffer,0,n);\n    count+=n;\n  }\n  return count;\n}\n", "nl": "Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>."}
{"code": "public void removeAllEmails(){\n  try {\n    removeLastEmails(folder.getMessageCount());\n  }\n catch (  MessagingException e) {\n    LOGGER.error(\"error when removing all emails\",e);\n  }\n}\n", "nl": "Deletes all emails."}
{"code": "protected static ObjectReader initRaw(){\n  return init(CsvSchema.emptySchema().withoutQuoteChar());\n}\n", "nl": "Initialize an ObjectReader that does not quote things."}
{"code": "private void computeCoordinates(Graphics gc,Point center,String label,Font font,Triplet<Integer,Integer,Dimension> previous){\n  int x=center.x;\n  int y=center.y;\n  Rectangle bbox=new Rectangle();\n  Dimension labelSize=Basic.getStringSize(gc,label,font).getSize();\n  if (labelSize.height < 1)   return;\n  bbox.setSize(labelSize);\n  if (rTree.size() == 0) {\n    bbox.setLocation(x - bbox.width / 2,y);\n    if (!rTree.overlaps(bbox)) {\n      Pair<String,Integer> pair=new Pair<>(label,font.getSize());\n      rTree.add(bbox,pair);\n      return;\n    }\n  }\n  int direction=previous.getFirst();\n  for (int k=1; true; k++) {\n    for (int i=0; i < 2; i++) {\n      if (direction == 3)       direction=0;\n else       direction++;\n      for (int j=previous.getSecond(); j <= k; j++) {\nswitch (direction) {\ncase 0:\n          x+=useRectangleShape ? 8 : 5;\n        break;\ncase 1:\n      y+=5;\n    break;\ncase 2:\n  x-=useRectangleShape ? 8 : 5;\nbreak;\ncase 3:\ny-=5;\nbreak;\n}\nbbox.setLocation(x - bbox.width / 2,y);\nif (!rTree.overlaps(bbox)) {\nPair<String,Integer> pair=new Pair<>(label,font.getSize());\nprevious.setFirst(direction);\nprevious.setSecond(j);\nprevious.setThird(labelSize);\nrTree.add(bbox,pair);\nreturn;\n}\n}\n}\n}\n}\n", "nl": "compute coordinates for word cloud"}
{"code": "public void addInputProcessor(InputProcessor ip){\n  processors.addProcessor(ip);\n  Gdx.input.setInputProcessor(processors);\n}\n", "nl": "Add an input processor to accept input events"}
{"code": "private LimitSizeEntryList filterEntries(LimitSizeEntryList entries){\n  LimitSizeEntryList list=new LimitSizeEntryList(entries.capacity(),entries.getTrimSize());\n  if (collapsed) {\n    for (    ConsoleEntry entry : entries) {\n      if (filterEntry(entry)) {\n        ConsoleCollapsedEntry collapsedEntry=as(entry,ConsoleCollapsedEntry.class);\n        if (collapsedEntry != null) {\n          collapsedEntry.index=list.totalCount();\n          list.addObject(collapsedEntry);\n        }\n else {\n          collapsedEntry=entryLookup.addEntry(entry);\n          if (collapsedEntry.count == 1) {\n            collapsedEntry.index=list.totalCount();\n            list.addObject(collapsedEntry);\n          }\n        }\n      }\n    }\n  }\n else {\n    for (    ConsoleEntry entry : entries) {\n      if (filterEntry(entry)) {\n        list.addObject(entry);\n      }\n    }\n  }\n  return list;\n}\n", "nl": "Creates new list based by applying current filter to entries"}
{"code": "public static <T>T lockResult(Future<T> result,String lockPath) throws LockingException {\n  try {\n    return Await.result(result);\n  }\n catch (  LockingException le) {\n    throw le;\n  }\ncatch (  Exception e) {\n    throw new LockingException(lockPath,\"Encountered exception on locking \",e);\n  }\n}\n", "nl": "Wait for the result of a lock operation."}
{"code": "public IgDiskCache(File directory){\n  this(directory,DEFAULT_MAX_SIZE,DEFAULT_MAX_COUNT,AsyncTask.SERIAL_EXECUTOR);\n}\n", "nl": "Disk Cache initialization."}
{"code": "private Object writeReplace(){\n  return new DataTransferObject(v.getX(),v.getY(),v.getZ());\n}\n", "nl": "Replace the instance with a data transfer object for serialization."}
{"code": "public static Codecs findCodecsFormMimeType(String mimeType,boolean tryColorFormatSurface){\n  findSupportedColorFormats(mimeType);\n  SparseArray<ArrayList<String>> hardwareCodecs=sHardwareCodecs.get(mimeType);\n  SparseArray<ArrayList<String>> softwareCodecs=sSoftwareCodecs.get(mimeType);\n  Codecs list=new Codecs();\n  if (Build.VERSION.SDK_INT >= 18 && tryColorFormatSurface) {\n    int colorFormatSurface=MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;\n    try {\n      list.hardwareCodec=hardwareCodecs.get(colorFormatSurface).get(0);\n      list.hardwareColorFormat=colorFormatSurface;\n    }\n catch (    Exception e) {\n    }\n    try {\n      list.softwareCodec=softwareCodecs.get(colorFormatSurface).get(0);\n      list.softwareColorFormat=colorFormatSurface;\n    }\n catch (    Exception e) {\n    }\n    if (list.hardwareCodec != null) {\n      Log.v(TAG,\"Choosen primary codec: \" + list.hardwareCodec + \" with color format: \"+ list.hardwareColorFormat);\n    }\n else {\n      Log.e(TAG,\"No supported hardware codec found !\");\n    }\n    if (list.softwareCodec != null) {\n      Log.v(TAG,\"Choosen secondary codec: \" + list.hardwareCodec + \" with color format: \"+ list.hardwareColorFormat);\n    }\n else {\n      Log.e(TAG,\"No supported software codec found !\");\n    }\n    return list;\n  }\n  for (int i=0; i < SUPPORTED_COLOR_FORMATS.length; i++) {\n    try {\n      list.hardwareCodec=hardwareCodecs.get(SUPPORTED_COLOR_FORMATS[i]).get(0);\n      list.hardwareColorFormat=SUPPORTED_COLOR_FORMATS[i];\n      break;\n    }\n catch (    Exception e) {\n    }\n  }\n  for (int i=0; i < SUPPORTED_COLOR_FORMATS.length; i++) {\n    try {\n      list.softwareCodec=softwareCodecs.get(SUPPORTED_COLOR_FORMATS[i]).get(0);\n      list.softwareColorFormat=SUPPORTED_COLOR_FORMATS[i];\n      break;\n    }\n catch (    Exception e) {\n    }\n  }\n  if (list.hardwareCodec != null) {\n    Log.v(TAG,\"Choosen primary codec: \" + list.hardwareCodec + \" with color format: \"+ list.hardwareColorFormat);\n  }\n else {\n    Log.e(TAG,\"No supported hardware codec found !\");\n  }\n  if (list.softwareCodec != null) {\n    Log.v(TAG,\"Choosen secondary codec: \" + list.hardwareCodec + \" with color format: \"+ list.softwareColorFormat);\n  }\n else {\n    Log.e(TAG,\"No supported software codec found !\");\n  }\n  return list;\n}\n", "nl": "Determines the most appropriate encoder to compress the video from the Camera"}
{"code": "public GroupsGetMembersQueryWithFilter(VkApiClient client,Actor actor,GroupsGetMembersFilter filter){\n  super(client,\"groups.getMembers\",GetMembersFilterResponse.class);\n  accessToken(actor.getAccessToken());\n  filter(filter);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {\n  return toInputStream(input,Charsets.toCharset(encoding));\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>."}
{"code": "public static String join(String[] data,String joiner){\n  return join(Arrays.asList(data),joiner);\n}\n", "nl": "Join an array of string to one string with joiner. If an element of the array contains nothing or only space, it will be ignored"}
{"code": "public static NestableTransaction.Created create(NestableTransactionManager mgr,long leaseTime) throws LeaseDeniedException, RemoteException {\n  TransactionManager.Created rawTxn=mgr.create(leaseTime);\n  NestableServerTransaction tx=new NestableServerTransaction(mgr,rawTxn.id,null,leaseTime);\n  return new NestableTransaction.Created(tx,rawTxn.lease);\n}\n", "nl": "Create a new top-level transaction, under which nested transactions can be created."}
{"code": "private JobRow updateField(JobRow row,JobField field,String value){\n  return row.withFieldValue(field,value).withFieldValue(DATE_UPDATED,new DateTime(timestampGenerator.instant().toEpochMilli()).toDateTimeISO().toString());\n}\n", "nl": "Returns a copy of the specified JobRow with the specified field set to the specified value. The returned JobRow also has the DATE_UPDATED field set to the start of the current day."}
{"code": "public static char[] readChars(DataInputStream dis,int num) throws IOException {\n  char[] carray=new char[num];\n  for (int i=0; i < num; i++) {\n    carray[i]=readChar(dis);\n  }\n  return carray;\n}\n", "nl": "Reads a given number of chars from the stream"}
{"code": "public static ShareFileFragment newInstance(OCFile fileToShare,Account account){\n  ShareFileFragment fragment=new ShareFileFragment();\n  Bundle args=new Bundle();\n  args.putParcelable(ARG_FILE,fileToShare);\n  args.putParcelable(ARG_ACCOUNT,account);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Public factory method to create new ShareFileFragment instances."}
{"code": "public Vector3f add(Vector3f vec,Vector3f result){\n  result.x=x + vec.x;\n  result.y=y + vec.y;\n  result.z=z + vec.z;\n  return result;\n}\n", "nl": "<code>add</code> adds the values of a provided vector storing the values in the supplied vector."}
{"code": "@Override public String toString(){\n  return getClass().getSimpleName() + \" [Center: \" + center+ \"  xExtent: \"+ xExtent+ \"  yExtent: \"+ yExtent+ \"  zExtent: \"+ zExtent+ \"]\";\n}\n", "nl": "<code>toString</code> returns the string representation of this object. The form is: \"Radius: RRR.SSSS Center: <Vector>\"."}
{"code": "private static boolean groupSetsEqual(String[] groupSet0,String[] groupSet1){\n  if (groupSet0.length != groupSet1.length)   return false;\n  iLoop:   for (int i=0; i < groupSet0.length; i++) {\n    for (int j=0; j < groupSet1.length; j++) {\n      if (groupSet0[i].equals(groupSet1[j])) {\n        continue iLoop;\n      }\n    }\n    return false;\n  }\n  return true;\n}\n", "nl": "Determines if two sets of registrar member groups have identical contents. Assumes there are no duplicates, and the sets can never be null."}
{"code": "public static <E>DoubleStream shiftingWindowAveragingDouble(Stream<E> stream,int rollingFactor,ToDoubleFunction<? super E> mapper){\n  Objects.requireNonNull(stream);\n  Objects.requireNonNull(mapper);\n  DoubleStream doubleStream=stream.mapToDouble(mapper);\n  return shiftingWindowAveragingDouble(doubleStream,rollingFactor);\n}\n", "nl": "<p>Generates a stream that is computed from a provided stream following two steps.</p> <p>The first steps maps this stream to an <code>DoubleStream</code> that is then rolled following the same principle as the <code>roll()</code> method. This steps builds a <code>Stream&lt;DoubleStream&gt;</code>. </p> <p>Then the <code>average()</code> method is called on each <code>DoubleStream</code> using a mapper, and a <code>DoubleStream</code> of averages is returned.</p> <p>The resulting stream has the same number of elements as the provided stream, minus the size of the window width, to preserve consistency of each collection. </p> <p>A <code>NullPointerException</code> will be thrown if the provided stream or the mapper is null.</p>"}
{"code": "private UInteger(long value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n", "nl": "Create an <code>unsigned int</code>"}
{"code": "public void putGrammar(DTDGrammar grammar){\n  XMLDTDDescription desc=(XMLDTDDescription)grammar.getGrammarDescription();\n  fGrammars.put(desc,grammar);\n}\n", "nl": "Puts the specified grammar into the grammar pool and associate it to a root element name (this being internal, the lack of generality is irrelevant)."}
{"code": "@DELETE @Path(\"{experimentID}/pages/{pageName}\") @ApiOperation(value=\"Remove a page from an experiment\",notes=\"Pages can only be added to an experiment with DRAFT, RUNNING, or PAUSED states\") @Timed public Response deletePage(@PathParam(\"experimentID\") @ApiParam(value=\"Experiment ID\") final Experiment.ID experimentID,@PathParam(\"pageName\") @ApiParam(value=\"Page name where the experiment will appear\") final Page.Name pageName,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  Username userName=authorization.getUser(authorizationHeader);\n  Experiment experiment=experiments.getExperiment(experimentID);\n  if (experiment == null) {\n    throw new ExperimentNotFoundException(experimentID);\n  }\n  authorization.checkUserPermissions(userName,experiment.getApplicationName(),Permission.DELETE);\n  pages.deletePage(experimentID,pageName,authorization.getUserInfo(userName));\n  return httpHeader.headers(NO_CONTENT).build();\n}\n", "nl": "Remove the association of a page to an experiment"}
{"code": "static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){\n  double wr=(double)actualWidth / desiredWidth;\n  double hr=(double)actualHeight / desiredHeight;\n  double ratio=Math.min(wr,hr);\n  float n=1.0f;\n  while ((n * 2) <= ratio) {\n    n*=2;\n  }\n  return (int)n;\n}\n", "nl": "Returns the largest power-of-two divisor for use in downscaling a bitmap that will not result in the scaling past the desired dimensions."}
{"code": "public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount,String refNum,String authCode,boolean isSingleUse,boolean isPresent,boolean replace){\n  CartPaymentInfo inf=this.getPaymentInfo(id,refNum,authCode,amount,replace);\n  if (isSalesOrder()) {\n    GenericValue billingAddress=inf.getBillingAddress(this.getDelegator());\n    if (billingAddress != null) {\n      for (      GenericValue product : ShoppingCart.getItemsProducts(this.cartLines)) {\n        if (!ProductWorker.isBillableToAddress(product,billingAddress)) {\n          throw new IllegalArgumentException(\"The billing address is not compatible with ProductGeos rules.\");\n        }\n      }\n    }\n  }\n  inf.singleUse=isSingleUse;\n  inf.isPresent=isPresent;\n  if (replace) {\n    paymentInfo.remove(inf);\n  }\n  paymentInfo.add(inf);\n  return inf;\n}\n", "nl": "adds a payment method/payment method type"}
{"code": "private ArrayList<Long> buildCursorPositionMapping(final long[] order,final String columnName,final List<? extends Object> extraData){\n  ArrayList<Long> missingIds=new ArrayList<Long>();\n  mOrderedPositions=new ArrayList<Integer>(mCursor.getCount());\n  mExtraData=new ArrayList<Object>();\n  mMapCursorPositions=new HashMap<Long,Integer>(mCursor.getCount());\n  final int idPosition=mCursor.getColumnIndex(columnName);\n  if (mCursor.moveToFirst()) {\n    do {\n      mMapCursorPositions.put(mCursor.getLong(idPosition),mCursor.getPosition());\n    }\n while (mCursor.moveToNext());\n    for (int i=0; order != null && i < order.length; i++) {\n      final long id=order[i];\n      if (mMapCursorPositions.containsKey(id)) {\n        mOrderedPositions.add(mMapCursorPositions.get(id));\n        mMapCursorPositions.remove(id);\n        if (extraData != null) {\n          mExtraData.add(extraData.get(i));\n        }\n      }\n else {\n        missingIds.add(id);\n      }\n    }\n    mCursor.moveToFirst();\n  }\n  return missingIds;\n}\n", "nl": "This function populates mOrderedPositions with the cursor positions in the order based on the order passed in"}
{"code": "public Vector2f addLocal(Vector2f vec){\n  if (null == vec) {\n    logger.warning(\"Provided vector is null, null returned.\");\n    return null;\n  }\n  x+=vec.x;\n  y+=vec.y;\n  return this;\n}\n", "nl": "<code>addLocal</code> adds a provided vector to this vector internally, and returns a handle to this vector for easy chaining of calls. If the provided vector is null, null is returned."}
{"code": "public static void parse(String pathString,Path p){\n  int n=pathString.length();\n  ParserHelper ph=new ParserHelper(pathString,0);\n  ph.skipWhitespace();\n  float lastX=0;\n  float lastY=0;\n  float lastX1=0;\n  float lastY1=0;\n  float subPathStartX=0;\n  float subPathStartY=0;\n  char prevCmd=0;\n  while (ph.pos < n) {\n    char cmd=pathString.charAt(ph.pos);\nswitch (cmd) {\ncase '-':\ncase '+':\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\n      if (prevCmd == 'm' || prevCmd == 'M') {\n        cmd=(char)(((int)prevCmd) - 1);\n        break;\n      }\n else       if (prevCmd == 'c' || prevCmd == 'C') {\n        cmd=prevCmd;\n        break;\n      }\n else       if (prevCmd == 'l' || prevCmd == 'L') {\n        cmd=prevCmd;\n        break;\n      }\ndefault :\n{\n      ph.advance();\n      prevCmd=cmd;\n    }\n}\nboolean wasCurve=false;\nswitch (cmd) {\ncase 'M':\ncase 'm':\n{\n    float x=ph.nextFloat();\n    float y=ph.nextFloat();\n    if (cmd == 'm') {\n      subPathStartX+=x;\n      subPathStartY+=y;\n      p.rMoveTo(x,y);\n      lastX+=x;\n      lastY+=y;\n    }\n else {\n      subPathStartX=x;\n      subPathStartY=y;\n      p.moveTo(x,y);\n      lastX=x;\n      lastY=y;\n    }\n    break;\n  }\ncase 'Z':\ncase 'z':\n{\n  p.close();\n  p.moveTo(subPathStartX,subPathStartY);\n  lastX=subPathStartX;\n  lastY=subPathStartY;\n  lastX1=subPathStartX;\n  lastY1=subPathStartY;\n  wasCurve=true;\n  break;\n}\ncase 'L':\ncase 'l':\n{\nfloat x=ph.nextFloat();\nfloat y=ph.nextFloat();\nif (cmd == 'l') {\n  p.rLineTo(x,y);\n  lastX+=x;\n  lastY+=y;\n}\n else {\n  p.lineTo(x,y);\n  lastX=x;\n  lastY=y;\n}\nbreak;\n}\ncase 'H':\ncase 'h':\n{\nfloat x=ph.nextFloat();\nif (cmd == 'h') {\np.rLineTo(x,0);\nlastX+=x;\n}\n else {\np.lineTo(x,lastY);\nlastX=x;\n}\nbreak;\n}\ncase 'V':\ncase 'v':\n{\nfloat y=ph.nextFloat();\nif (cmd == 'v') {\np.rLineTo(0,y);\nlastY+=y;\n}\n else {\np.lineTo(lastX,y);\nlastY=y;\n}\nbreak;\n}\ncase 'C':\ncase 'c':\n{\nwasCurve=true;\nfloat x1=ph.nextFloat();\nfloat y1=ph.nextFloat();\nfloat x2=ph.nextFloat();\nfloat y2=ph.nextFloat();\nfloat x=ph.nextFloat();\nfloat y=ph.nextFloat();\nif (cmd == 'c') {\nx1+=lastX;\nx2+=lastX;\nx+=lastX;\ny1+=lastY;\ny2+=lastY;\ny+=lastY;\n}\np.cubicTo(x1,y1,x2,y2,x,y);\nlastX1=x2;\nlastY1=y2;\nlastX=x;\nlastY=y;\nbreak;\n}\ncase 'S':\ncase 's':\n{\nwasCurve=true;\nfloat x2=ph.nextFloat();\nfloat y2=ph.nextFloat();\nfloat x=ph.nextFloat();\nfloat y=ph.nextFloat();\nif (cmd == 's') {\nx2+=lastX;\nx+=lastX;\ny2+=lastY;\ny+=lastY;\n}\nfloat x1=2 * lastX - lastX1;\nfloat y1=2 * lastY - lastY1;\np.cubicTo(x1,y1,x2,y2,x,y);\nlastX1=x2;\nlastY1=y2;\nlastX=x;\nlastY=y;\nbreak;\n}\ncase 'A':\ncase 'a':\n{\nfloat rx=ph.nextFloat();\nfloat ry=ph.nextFloat();\nfloat theta=ph.nextFloat();\nint largeArc=(int)ph.nextFloat();\nint sweepArc=(int)ph.nextFloat();\nfloat x=ph.nextFloat();\nfloat y=ph.nextFloat();\ndrawArc(p,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc);\nlastX=x;\nlastY=y;\nbreak;\n}\n}\nif (!wasCurve) {\nlastX1=lastX;\nlastY1=lastY;\n}\nph.skipWhitespace();\n}\n}\n", "nl": "Parses a single SVG path and returns it as a <code>android.graphics.Path</code> object. An example path is <code>M250,150L150,350L350,350Z</code>, which draws a triangle."}
{"code": "@Override public void finish(){\n  for (  Entry<String,FileChannel> entry : fileNameAndStreamCache.entrySet()) {\n    try {\n      FileChannel channel=entry.getValue();\n      if (null != channel) {\n        channel.close();\n      }\n    }\n catch (    IOException exception) {\n      LOGGER.error(exception,exception.getMessage());\n    }\n  }\n}\n", "nl": "This method will be used to close all the streams currently present in the cache"}
{"code": "@VisibleForTesting int exactBinarySearch(long searchX,int startSearchIndex){\n  return approximateBinarySearch(searchX,startSearchIndex,mData.size() - 1,true,0);\n}\n", "nl": "Searches for the index of the value that is equal to or just less than the search X value, in the range of startSearchIndex to the end of the data array."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200755,skilltarget);\n}\n", "nl": "[%SkillTarget] woke up."}
{"code": "public static int exportName2Percent(String format,ViewerBase cViewer,File file,char separator,boolean reportSummarized,ProgressListener progressListener) throws IOException {\n  int totalLines=0;\n  try {\n    final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);\n    final String shortName=(cViewer.getClassName().toLowerCase().equals(\"taxonomy\") ? \"Taxon\" : cViewer.getClassName());\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){\n      final List<String> names=cViewer.getDocument().getSampleNames();\n      if (names.size() > 1) {\n        w.write(\"#Datasets\");\n        for (        String name : names) {\n          if (separator == ',')           name=name.replaceAll(\",\",\"_\");\n          w.write(separator + \" \" + name);\n        }\n        w.write(\"\\n\");\n      }\n      final NodeSet selected=cViewer.getSelectedNodes();\n      progressListener.setSubtask(shortName + \" to counts\");\n      progressListener.setMaximum(2 * selected.size());\n      progressListener.setProgress(0);\n      int[] total=new int[cViewer.getDocument().getSampleNames().size()];\n{\n        final Set<Integer> seen=new HashSet<>();\n        for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {\n          final Integer id=(Integer)v.getInfo();\n          if (id != null && !seen.contains(id)) {\n            seen.add(id);\n            final NodeData data=cViewer.getNodeData(v);\n            final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());\n            for (int i=0; i < counts.length; i++) {\n              total[i]+=counts[i];\n            }\n          }\n          progressListener.incrementProgress();\n        }\n      }\n{\n        final Set<Integer> seen=new HashSet<>();\n        for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {\n          final Integer id=(Integer)v.getInfo();\n          if (id != null && !seen.contains(id)) {\n            seen.add(id);\n            final NodeData data=cViewer.getNodeData(v);\n            final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());\n            final String name=getLabelSource(shortName,classification,format,v);\n            if (name != null) {\n              if (counts.length == names.size()) {\n                w.write(name);\n                for (int i=0; i < counts.length; i++) {\n                  double value=(total[i] == 0 ? 0 : (100.0 * counts[i]) / (double)total[i]);\n                  w.write(String.format(\"%c%f\",separator,(float)value));\n                }\n                w.write(\"\\n\");\n                totalLines++;\n              }\n else               System.err.println(\"Skipped \" + name + \", number of values: \"+ counts.length);\n            }\n          }\n          progressListener.incrementProgress();\n        }\n      }\n    }\n   }\n catch (  CanceledException canceled) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return totalLines;\n}\n", "nl": "export name to percentages"}
{"code": "public static List<ItemStack> consolidateItemStacks(List<ItemStack> inputStacks){\n  List<ItemStack> outputStacks=new ArrayList<ItemStack>();\n  for (  ItemStack sourceIS : inputStacks) {\n    boolean bFound=false;\n    for (    ItemStack destIS : outputStacks) {\n      if (destIS != null && sourceIS != null && itemStackIngredientsMatch(destIS,sourceIS)) {\n        bFound=true;\n        destIS.stackSize+=sourceIS.stackSize;\n      }\n    }\n    if (!bFound)     outputStacks.add(sourceIS.copy());\n  }\n  return outputStacks;\n}\n", "nl": "Take a list of ItemStacks and amalgamate where possible.<br>"}
{"code": "protected void writeImageDesc() throws IOException {\n  out.write(0x2c);\n  writeShort(0);\n  writeShort(0);\n  writeShort(width);\n  writeShort(height);\n  if (firstFrame) {\n    out.write(0);\n  }\n else {\n    out.write(0x80 | 0 | 0| 0| palSize);\n  }\n}\n", "nl": "Writes Image Descriptor"}
{"code": "public boolean after(Model m){\n  for (  String name : filters.keySet()) {\n    if (m.getURI().matches(name)) {\n      Object o=filters.get(name);\n      try {\n        IFilter f=null;\n        if (o instanceof IFilter) {\n          f=(IFilter)o;\n        }\n else {\n          f=(IFilter)(Class.forName((String)o).newInstance());\n          filters.put(name,f);\n        }\n        if (!f.after(m)) {\n          return false;\n        }\n      }\n catch (      Exception e) {\n        log.error(e.getMessage(),e);\n        filters.remove(name);\n      }\n    }\n  }\n  Module m1=floor();\n  if (m1 != null) {\n    return m1.after(m);\n  }\n  return true;\n}\n", "nl": "handle by filter and invoke the after"}
{"code": "public final String removeSizeInfo(String label){\n  int pos=label.indexOf(\"[\");\n  if (pos > 0)   return label.substring(0,pos).trim();\n  return label;\n}\n", "nl": "Removes the last part of a label, e.g. E.coli [100 Reads] -> E.coli"}
{"code": "public static byte[] decodeFromFile(String filename) throws java.io.IOException {\n  byte[] decodedData=null;\n  Base64.InputStream bis=null;\n  try {\n    java.io.File file=new java.io.File(filename);\n    byte[] buffer=null;\n    int length=0;\n    int numBytes=0;\n    if (file.length() > Integer.MAX_VALUE) {\n      throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n    }\n    buffer=new byte[(int)file.length()];\n    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);\n    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {\n      length+=numBytes;\n    }\n    decodedData=new byte[length];\n    System.arraycopy(buffer,0,decodedData,0,length);\n  }\n catch (  java.io.IOException e) {\n    throw e;\n  }\n finally {\n    try {\n      bis.close();\n    }\n catch (    Exception e) {\n    }\n  }\n  return decodedData;\n}\n", "nl": "Convenience method for reading a base64-encoded file and decoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>"}
{"code": "public static SpaceIndex createCompoundIndex(String[] paths,SpaceIndexType indexType,String indexName,boolean unique){\n  return createCompoundIndex_Impl(paths,indexType,indexName,unique);\n}\n", "nl": "Creates a space compound index from  the specified paths with the specified index type."}
{"code": "public static java.util.Date convertToDate(String str,boolean isExpiry){\n  SimpleDateFormat fmt=new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\n  java.util.Date dt=null;\n  try {\n    dt=fmt.parse(str);\n  }\n catch (  ParseException ex) {\n    Calendar cal=Calendar.getInstance();\n    if (isExpiry) {\n      cal.add(Calendar.DAY_OF_MONTH,1);\n      cal.set(Calendar.HOUR_OF_DAY,23);\n      cal.set(Calendar.MINUTE,59);\n    }\n else {\n      cal.set(Calendar.HOUR_OF_DAY,0);\n      cal.set(Calendar.MINUTE,0);\n    }\n    dt=cal.getTime();\n  }\n  return dt;\n}\n", "nl": "Function to convert String to Date Object. If invalid input then current or next day date is returned (Added by Ali Naqvi on 2006-5-16)."}
{"code": "public JSONObject(){\n  this.map=new HashMap();\n}\n", "nl": "Construct an empty JSONObject."}
{"code": "public int remove(final int key){\n  if (key == FREE_KEY) {\n    if (!m_hasFreeKey)     return NO_VALUE;\n    m_hasFreeKey=false;\n    --m_size;\n    return m_freeValue;\n  }\n  int ptr=(Tools.phiMix(key) & m_mask) << 1;\n  int k=m_data[ptr];\n  if (k == key) {\n    final int res=m_data[ptr + 1];\n    shiftKeys(ptr);\n    --m_size;\n    return res;\n  }\n else   if (k == FREE_KEY)   return NO_VALUE;\n  while (true) {\n    ptr=(ptr + 2) & m_mask2;\n    k=m_data[ptr];\n    if (k == key) {\n      final int res=m_data[ptr + 1];\n      shiftKeys(ptr);\n      --m_size;\n      return res;\n    }\n else     if (k == FREE_KEY)     return NO_VALUE;\n  }\n}\n", "nl": "remove a key"}
{"code": "@Override protected void createItemsLayout(){\n  if (mItemsLayout == null) {\n    mItemsLayout=new LinearLayout(getContext());\n    mItemsLayout.setOrientation(LinearLayout.VERTICAL);\n  }\n}\n", "nl": "Creates item layout if necessary"}
{"code": "public static void zipFiles(Collection<File> resFileList,File zipFile) throws IOException {\n  ZipOutputStream zipout=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile),TypedValue.BUFFER_SIZE));\n  for (  File resFile : resFileList) {\n    if (resFile.exists()) {\n      zipFile(resFile,zipout,\"\");\n    }\n  }\n  zipout.close();\n}\n", "nl": "zip list of file"}
{"code": "public void refreshToken(String refreshToken) throws LoginFailedException, RemoteServerException {\n  HttpUrl url=HttpUrl.parse(OAUTH_TOKEN_ENDPOINT).newBuilder().addQueryParameter(\"client_id\",CLIENT_ID).addQueryParameter(\"client_secret\",SECRET).addQueryParameter(\"refresh_token\",refreshToken).addQueryParameter(\"grant_type\",\"refresh_token\").build();\n  RequestBody reqBody=RequestBody.create(null,new byte[0]);\n  Request request=new Request.Builder().url(url).method(\"POST\",reqBody).build();\n  Response response=null;\n  try {\n    response=client.newCall(request).execute();\n  }\n catch (  IOException e) {\n    throw new RemoteServerException(\"Network Request failed to fetch refreshed tokenId\",e);\n  }\n  Moshi moshi=new Moshi.Builder().build();\n  GoogleAuthTokenJson googleAuthTokenJson=null;\n  try {\n    googleAuthTokenJson=moshi.adapter(GoogleAuthTokenJson.class).fromJson(response.body().string());\n    Log.d(TAG,\"\" + googleAuthTokenJson.getExpiresIn());\n  }\n catch (  IOException e) {\n    throw new RemoteServerException(\"Failed to unmarshal the Json response to fetch refreshed tokenId\",e);\n  }\n  if (googleAuthTokenJson.getError() != null) {\n    throw new LoginFailedException(googleAuthTokenJson.getError());\n  }\n else {\n    Log.d(TAG,\"Refreshed Token \" + googleAuthTokenJson.getIdToken());\n    expiresTimestamp=time.currentTimeMillis() + (googleAuthTokenJson.getExpiresIn() * 1000 - REFRESH_TOKEN_BUFFER_TIME);\n    tokenId=googleAuthTokenJson.getIdToken();\n  }\n}\n", "nl": "Given the refresh token fetches a new access token and returns AuthInfo."}
{"code": "private File createBmxFrameworkParameterFile(JAXBSource source,DMFramework framework,File workingDir){\n  Transformer transformer;\n  try {\n    TransformerFactory tf=TransformerFactory.newInstance(XSLT2_TRANSFORMER_IMPLEMENTATION,null);\n    InputStream transformationStream=ResourceHelper.getResourceInputStream(BMX_PARAMETERS_TRANSFORMATION);\n    if (transformationStream == null) {\n      throw new FileNotFoundException(String.format(\"Metadata.xml to BMX transformation file is absent: %s\",BMX_PARAMETERS_TRANSFORMATION));\n    }\n    StreamSource xslt=new StreamSource(transformationStream);\n    transformer=tf.newTransformer(xslt);\n    transformer.setParameter(BMX_FRAMEWORK_PARAM,framework.value());\n  }\n catch (  TransformerException|IOException e) {\n    throw new RuntimeException(e);\n  }\n  File result=new File(workingDir,framework.value + \".txt\");\n  try (Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(result),\"UTF-8\"))){\n    StreamResult streamResult=new StreamResult(writer);\n    transformer.transform(source,streamResult);\n    writer.flush();\n    return result;\n  }\n catch (  TransformerException|IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Transforms metadata.xml into a set of parameters for particular MXF framework."}
{"code": "public void updateDatabaseUploadResult(RemoteOperationResult uploadResult,UploadFileOperation upload){\n  Log_OC.d(TAG,\"updateDataseUploadResult uploadResult: \" + uploadResult + \" upload: \"+ upload);\n  if (uploadResult.isCancelled()) {\n    removeUpload(upload.getAccount().name,upload.getRemotePath());\n  }\n else {\n    String localPath=(FileUploader.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour()) ? upload.getStoragePath() : null;\n    if (uploadResult.isSuccess()) {\n      updateUploadStatus(upload.getOCUploadId(),UploadStatus.UPLOAD_SUCCEEDED,UploadResult.UPLOADED,upload.getRemotePath(),localPath);\n    }\n else {\n      updateUploadStatus(upload.getOCUploadId(),UploadStatus.UPLOAD_FAILED,UploadResult.fromOperationResult(uploadResult),upload.getRemotePath(),localPath);\n    }\n  }\n}\n", "nl": "Updates the persistent upload database with upload result."}
{"code": "private List<DataQueryParams> groupByAggregationType(DataQueryParams params){\n  List<DataQueryParams> queries=new ArrayList<>();\n  if (!params.getDataElements().isEmpty()) {\n    ListMap<AggregationType,DimensionalItemObject> aggregationTypeDataElementMap=QueryPlannerUtils.getAggregationTypeDataElementMap(params);\n    for (    AggregationType aggregationType : aggregationTypeDataElementMap.keySet()) {\n      DataQueryParams query=DataQueryParams.newBuilder(params).withDataElements(aggregationTypeDataElementMap.get(aggregationType)).withAggregationType(aggregationType).build();\n      queries.add(query);\n    }\n  }\n else   if (!params.getDataElementGroupSets().isEmpty()) {\n    DimensionalObject degs=params.getDataElementGroupSets().get(0);\n    DataElementGroup deg=(DataElementGroup)(degs.hasItems() ? degs.getItems().get(0) : null);\n    AggregationType aggregationType=ObjectUtils.firstNonNull(params.getAggregationType(),SUM);\n    if (deg != null && !deg.getMembers().isEmpty()) {\n      PeriodType periodType=PeriodType.getPeriodTypeByName(params.getPeriodType());\n      aggregationType=ObjectUtils.firstNonNull(params.getAggregationType(),deg.getAggregationType());\n      aggregationType=QueryPlannerUtils.getAggregationType(deg.getValueType(),aggregationType,periodType,deg.getPeriodType());\n    }\n    DataQueryParams query=DataQueryParams.newBuilder(params).withAggregationType(aggregationType).build();\n    queries.add(query);\n  }\n else {\n    DataQueryParams query=DataQueryParams.newBuilder(params).withAggregationType(ObjectUtils.firstNonNull(params.getAggregationType(),SUM)).build();\n    queries.add(query);\n  }\n  if (queries.size() > 1) {\n    log.debug(\"Split on aggregation type: \" + queries.size());\n  }\n  return queries;\n}\n", "nl": "Groups the given query in sub queries based on the aggregation type of its data elements. The aggregation type can be sum, average aggregation or average disaggregation. Sum means that the data elements have sum aggregation operator. Average aggregation means that the data elements have the average aggregation operator and that the period type of the data elements have higher or equal frequency than the aggregation period type. Average disaggregation means that the data elements have the average aggregation operator and that the period type of the data elements have lower frequency than the aggregation period type. Average bool means that the data elements have the average aggregation operator and the bool value type. <p> If no data elements are present, the aggregation type will be determined based on the first data element in the first data element group in the first data element group set in the query. <p> If the aggregation type is already set/overridden in the request, the query will be returned unchanged. If there are no data elements or data element group sets specified the aggregation type will fall back to sum."}
{"code": "public void zoom(float scaleX,float scaleY,float xValue,float yValue,AxisDependency axis){\n  Runnable job=new ZoomJob(mViewPortHandler,scaleX,scaleY,xValue,yValue,getTransformer(axis),axis,this);\n  addViewportJob(job);\n}\n", "nl": "Zooms in or out by the given scale factor. x and y are the values (NOT PIXELS) which to zoom to or from (the values of the zoom center)."}
{"code": "public Matrix(int m,int n,double s){\n  this.m=m;\n  this.n=n;\n  A=new double[m][n];\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      A[i][j]=s;\n    }\n  }\n}\n", "nl": "Construct an m-by-n constant matrix."}
{"code": "public void onPinch(long time,float x0,float y0,float x1,float y1,boolean firstEvent){\n  if ((mOverviewAnimationType != OverviewAnimationType.START_PINCH && mOverviewAnimationType != OverviewAnimationType.NONE) || mStackTabs == null) {\n    return;\n  }\n  if (mPinch0TabIndex < 0)   startAnimation(time,OverviewAnimationType.START_PINCH);\n  boolean inverse=(mCurrentMode == Orientation.PORTRAIT) ? y0 > y1 : LocalizationUtils.isLayoutRtl() ? (x0 <= x1) : (x0 > x1);\n  float pinch0X=inverse ? x1 : x0;\n  float pinch0Y=inverse ? y1 : y0;\n  float pinch1X=inverse ? x0 : x1;\n  float pinch1Y=inverse ? y0 : y1;\n  float pinch0Offset=(mCurrentMode == Orientation.PORTRAIT) ? pinch0Y : LocalizationUtils.isLayoutRtl() ? -pinch0X : pinch0X;\n  float pinch1Offset=(mCurrentMode == Orientation.PORTRAIT) ? pinch1Y : LocalizationUtils.isLayoutRtl() ? -pinch1X : pinch1X;\n  if (firstEvent) {\n    mPinch0TabIndex=-1;\n    mPinch1TabIndex=-1;\n    mScrollingTab=null;\n    commitDiscard(time,false);\n  }\n  int pinch0TabIndex=mPinch0TabIndex;\n  int pinch1TabIndex=mPinch1TabIndex;\n  if (mPinch0TabIndex < 0) {\n    pinch0TabIndex=getTabIndexAtPositon(pinch0X,pinch0Y);\n    pinch1TabIndex=getTabIndexAtPositon(pinch1X,pinch1Y);\n    if (pinch0TabIndex < 0 || pinch1TabIndex < 0) {\n      pinch0TabIndex=-1;\n      pinch1TabIndex=-1;\n    }\n  }\n  if (pinch0TabIndex >= 0 && mPinch0TabIndex == pinch0TabIndex && mPinch1TabIndex == pinch1TabIndex) {\n    final float minScrollTarget=getMinScroll(false);\n    final float maxScrollTarget=getMaxScroll(false);\n    final float oldScrollTarget=MathUtils.clamp(mScrollTarget,minScrollTarget,maxScrollTarget);\n    if (pinch0TabIndex >= pinch1TabIndex) {\n      float screenDelta0=pinch0Offset - mLastPinch0Offset;\n      if (pinch0TabIndex == 0) {\n        setScrollTarget(oldScrollTarget + screenDelta0,false);\n      }\n else {\n        float tab0ScrollSpace=mStackTabs[pinch0TabIndex].getScrollOffset() + oldScrollTarget;\n        float tab0Screen=scrollToScreen(tab0ScrollSpace);\n        float tab0ScrollFinal=screenToScroll(tab0Screen + screenDelta0);\n        setScrollTarget(tab0ScrollFinal - mStackTabs[pinch0TabIndex].getScrollOffset(),false);\n      }\n    }\n else {\n      float screenDelta0=pinch0Offset - mLastPinch0Offset;\n      float tab0ScreenBefore=approxScreen(mStackTabs[pinch0TabIndex],oldScrollTarget);\n      float tab0ScreenAfter=tab0ScreenBefore + screenDelta0;\n      float screenDelta1=pinch1Offset - mLastPinch1Offset;\n      float tab1ScreenBefore=approxScreen(mStackTabs[pinch1TabIndex],oldScrollTarget);\n      float tab1ScreenAfter=tab1ScreenBefore + screenDelta1;\n      float globalScrollBefore=screenToScroll(tab0ScreenBefore);\n      float globalScrollAfter=screenToScroll((tab0ScreenAfter + tab0ScreenBefore) / 2);\n      setScrollTarget(oldScrollTarget + globalScrollAfter - globalScrollBefore,true);\n      float minScreen=tab0ScreenAfter;\n      float maxScreen=tab0ScreenAfter;\n      for (int i=pinch0TabIndex; i <= pinch1TabIndex; i++) {\n        float screenBefore=approxScreen(mStackTabs[i],oldScrollTarget);\n        float t=(screenBefore - tab0ScreenBefore) / (tab1ScreenBefore - tab0ScreenBefore);\n        float screenAfter=(1 - t) * tab0ScreenAfter + t * tab1ScreenAfter;\n        screenAfter=Math.max(minScreen,screenAfter);\n        screenAfter=Math.min(maxScreen,screenAfter);\n        minScreen=screenAfter + StackTab.sStackedTabVisibleSize;\n        maxScreen=screenAfter + mStackTabs[i].getSizeInScrollDirection(mCurrentMode);\n        float newScrollOffset=screenToScroll(screenAfter) - mScrollTarget;\n        mStackTabs[i].setScrollOffset(newScrollOffset);\n      }\n      float delta1=tab1ScreenAfter - tab1ScreenBefore;\n      for (int i=pinch1TabIndex + 1; i < mStackTabs.length; i++) {\n        delta1/=2;\n        float screenAfter=approxScreen(mStackTabs[i],oldScrollTarget) + delta1;\n        screenAfter=Math.max(minScreen,screenAfter);\n        screenAfter=Math.min(maxScreen,screenAfter);\n        minScreen=screenAfter + StackTab.sStackedTabVisibleSize;\n        maxScreen=screenAfter + mStackTabs[i].getSizeInScrollDirection(mCurrentMode);\n        mStackTabs[i].setScrollOffset(screenToScroll(screenAfter) - mScrollTarget);\n      }\n      minScreen=tab0ScreenAfter;\n      maxScreen=tab0ScreenAfter;\n      float posScreen=tab0ScreenAfter;\n      float delta0=tab0ScreenAfter - tab0ScreenBefore;\n      for (int i=pinch0TabIndex - 1; i > 0; i--) {\n        delta0/=2;\n        minScreen=posScreen - mStackTabs[i].getSizeInScrollDirection(mCurrentMode);\n        maxScreen=posScreen - StackTab.sStackedTabVisibleSize;\n        float screenAfter=approxScreen(mStackTabs[i],oldScrollTarget) + delta0;\n        screenAfter=Math.max(minScreen,screenAfter);\n        screenAfter=Math.min(maxScreen,screenAfter);\n        mStackTabs[i].setScrollOffset(screenToScroll(screenAfter) - mScrollTarget);\n      }\n    }\n  }\n  mPinch0TabIndex=pinch0TabIndex;\n  mPinch1TabIndex=pinch1TabIndex;\n  mLastPinch0Offset=pinch0Offset;\n  mLastPinch1Offset=pinch1Offset;\n  mEvenOutProgress=0.0f;\n  requestUpdate();\n}\n", "nl": "Called when at least 2 touch events are detected."}
{"code": "private void initPresenter(int type){\nswitch (type) {\ncase SEARCH_PHOTOS_TYPE:\n    this.searchPresenter=new SearchPhotosImplementor(searchModel,this);\n  break;\ncase SEARCH_COLLECTIONS_TYPE:\nthis.searchPresenter=new SearchCollectionsImplementor(searchModel,this);\nbreak;\ncase SEARCH_USERS_TYPE:\nthis.searchPresenter=new SearchUsersImplementor(searchModel,this);\nbreak;\n}\nthis.pagerPresenter=new PagerImplementor(this);\nthis.loadPresenter=new LoadImplementor(loadModel,this);\nthis.scrollPresenter=new ScrollImplementor(scrollModel,this);\n}\n", "nl": "<br> presenter."}
{"code": "boolean isAliveTag(Long tagId){\n  if (equipmentConfiguration.getAliveTagId() == tagId) {\n    return true;\n  }\n  for (  SubEquipmentConfiguration subEquipmentConfiguration : equipmentConfiguration.getSubEquipmentConfigurations().values()) {\n    if (subEquipmentConfiguration.getAliveTagId() != null && subEquipmentConfiguration.getAliveTagId().equals(tagId)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check whether the given tag id corresponds to the alive tag of the equipment, or any sub equipments."}
{"code": "private void buildDFA(CMNode syntaxTree){\n  int EOCPos=fLeafCount;\n  XSCMLeaf nodeEOC=new XSCMLeaf(XSParticleDecl.PARTICLE_ELEMENT,null,-1,fLeafCount++);\n  fHeadNode=new XSCMBinOp(XSModelGroupImpl.MODELGROUP_SEQUENCE,syntaxTree,nodeEOC);\n  fLeafList=new XSCMLeaf[fLeafCount];\n  fLeafListType=new int[fLeafCount];\n  postTreeBuildInit(fHeadNode);\n  fFollowList=new CMStateSet[fLeafCount];\n  for (int index=0; index < fLeafCount; index++)   fFollowList[index]=new CMStateSet(fLeafCount);\n  calcFollowList(fHeadNode);\n  fElemMap=new Object[fLeafCount];\n  fElemMapType=new int[fLeafCount];\n  fElemMapId=new int[fLeafCount];\n  fElemMapSize=0;\n  Occurence[] elemOccurenceMap=null;\n  for (int outIndex=0; outIndex < fLeafCount; outIndex++) {\n    fElemMap[outIndex]=null;\n    int inIndex=0;\n    final int id=fLeafList[outIndex].getParticleId();\n    for (; inIndex < fElemMapSize; inIndex++) {\n      if (id == fElemMapId[inIndex])       break;\n    }\n    if (inIndex == fElemMapSize) {\n      XSCMLeaf leaf=fLeafList[outIndex];\n      fElemMap[fElemMapSize]=leaf.getLeaf();\n      if (leaf instanceof XSCMRepeatingLeaf) {\n        if (elemOccurenceMap == null) {\n          elemOccurenceMap=new Occurence[fLeafCount];\n        }\n        elemOccurenceMap[fElemMapSize]=new Occurence((XSCMRepeatingLeaf)leaf,fElemMapSize);\n      }\n      fElemMapType[fElemMapSize]=fLeafListType[outIndex];\n      fElemMapId[fElemMapSize]=id;\n      fElemMapSize++;\n    }\n  }\n  if (DEBUG) {\n    if (fElemMapId[fElemMapSize - 1] != -1)     System.err.println(\"interal error in DFA: last element is not EOC.\");\n  }\n  fElemMapSize--;\n  int[] fLeafSorter=new int[fLeafCount + fElemMapSize];\n  int fSortCount=0;\n  for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {\n    final int id=fElemMapId[elemIndex];\n    for (int leafIndex=0; leafIndex < fLeafCount; leafIndex++) {\n      if (id == fLeafList[leafIndex].getParticleId())       fLeafSorter[fSortCount++]=leafIndex;\n    }\n    fLeafSorter[fSortCount++]=-1;\n  }\n  int curArraySize=fLeafCount * 4;\n  CMStateSet[] statesToDo=new CMStateSet[curArraySize];\n  fFinalStateFlags=new boolean[curArraySize];\n  fTransTable=new int[curArraySize][];\n  CMStateSet setT=fHeadNode.firstPos();\n  int unmarkedState=0;\n  int curState=0;\n  fTransTable[curState]=makeDefStateList();\n  statesToDo[curState]=setT;\n  curState++;\n  HashMap stateTable=new HashMap();\n  while (unmarkedState < curState) {\n    setT=statesToDo[unmarkedState];\n    int[] transEntry=fTransTable[unmarkedState];\n    fFinalStateFlags[unmarkedState]=setT.getBit(EOCPos);\n    unmarkedState++;\n    CMStateSet newSet=null;\n    int sorterIndex=0;\n    for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {\n      if (newSet == null)       newSet=new CMStateSet(fLeafCount);\n else       newSet.zeroBits();\n      int leafIndex=fLeafSorter[sorterIndex++];\n      while (leafIndex != -1) {\n        if (setT.getBit(leafIndex)) {\n          newSet.union(fFollowList[leafIndex]);\n        }\n        leafIndex=fLeafSorter[sorterIndex++];\n      }\n      if (!newSet.isEmpty()) {\n        Integer stateObj=(Integer)stateTable.get(newSet);\n        int stateIndex=(stateObj == null ? curState : stateObj.intValue());\n        if (stateIndex == curState) {\n          statesToDo[curState]=newSet;\n          fTransTable[curState]=makeDefStateList();\n          stateTable.put(newSet,new Integer(curState));\n          curState++;\n          newSet=null;\n        }\n        transEntry[elemIndex]=stateIndex;\n        if (curState == curArraySize) {\n          final int newSize=(int)(curArraySize * 1.5);\n          CMStateSet[] newToDo=new CMStateSet[newSize];\n          boolean[] newFinalFlags=new boolean[newSize];\n          int[][] newTransTable=new int[newSize][];\n          System.arraycopy(statesToDo,0,newToDo,0,curArraySize);\n          System.arraycopy(fFinalStateFlags,0,newFinalFlags,0,curArraySize);\n          System.arraycopy(fTransTable,0,newTransTable,0,curArraySize);\n          curArraySize=newSize;\n          statesToDo=newToDo;\n          fFinalStateFlags=newFinalFlags;\n          fTransTable=newTransTable;\n        }\n      }\n    }\n  }\n  if (elemOccurenceMap != null) {\n    fCountingStates=new Occurence[curState];\n    for (int i=0; i < curState; ++i) {\n      int[] transitions=fTransTable[i];\n      for (int j=0; j < transitions.length; ++j) {\n        if (i == transitions[j]) {\n          fCountingStates[i]=elemOccurenceMap[j];\n          break;\n        }\n      }\n    }\n  }\n  if (DEBUG_VALIDATE_CONTENT)   dumpTree(fHeadNode,0);\n  fHeadNode=null;\n  fLeafList=null;\n  fFollowList=null;\n  fLeafListType=null;\n  fElemMapId=null;\n}\n", "nl": "Builds the internal DFA transition table from the given syntax tree."}
{"code": "public static boolean isValidBedGraphLine(String line){\n  String[] bdg=line.split(\"\\t\");\n  if (bdg.length < 4) {\n    return false;\n  }\n  try {\n    Integer.parseInt(bdg[1]);\n    Integer.parseInt(bdg[2]);\n  }\n catch (  NumberFormatException e) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Return true if line looks like a valid bedgraph record "}
{"code": "public static void updateAll(DataStore dataStore,Iterable<Update> updates,Set<String> tags){\n  updateAll(dataStore,updates.iterator(),tags);\n}\n", "nl": "Creates, updates or deletes zero or more pieces of content in the data store. You can attach a set of databus event tags for these updates"}
{"code": "public void calculateDimensions(Paint labelpaint,ViewPortHandler viewPortHandler){\n  mTextWidthMax=getMaximumEntryWidth(labelpaint);\n  mTextHeightMax=getMaximumEntryHeight(labelpaint);\nswitch (mOrientation) {\ncase VERTICAL:\n{\n      float maxWidth=0f, maxHeight=0f, width=0f;\n      float labelLineHeight=Utils.getLineHeight(labelpaint);\n      final int count=mLabels.length;\n      boolean wasStacked=false;\n      for (int i=0; i < count; i++) {\n        boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;\n        if (!wasStacked)         width=0.f;\n        if (drawingForm) {\n          if (wasStacked)           width+=mStackSpace;\n          width+=mFormSize;\n        }\n        if (mLabels[i] != null) {\n          if (drawingForm && !wasStacked)           width+=mFormToTextSpace;\n else           if (wasStacked) {\n            maxWidth=Math.max(maxWidth,width);\n            maxHeight+=labelLineHeight + mYEntrySpace;\n            width=0.f;\n            wasStacked=false;\n          }\n          width+=Utils.calcTextWidth(labelpaint,mLabels[i]);\n          if (i < count - 1)           maxHeight+=labelLineHeight + mYEntrySpace;\n        }\n else {\n          wasStacked=true;\n          width+=mFormSize;\n          if (i < count - 1)           width+=mStackSpace;\n        }\n        maxWidth=Math.max(maxWidth,width);\n      }\n      mNeededWidth=maxWidth;\n      mNeededHeight=maxHeight;\n      break;\n    }\ncase HORIZONTAL:\n{\n    int labelCount=mLabels.length;\n    float labelLineHeight=Utils.getLineHeight(labelpaint);\n    float labelLineSpacing=Utils.getLineSpacing(labelpaint) + mYEntrySpace;\n    float contentWidth=viewPortHandler.contentWidth() * mMaxSizePercent;\n    ArrayList<FSize> calculatedLabelSizes=new ArrayList<>(labelCount);\n    ArrayList<Boolean> calculatedLabelBreakPoints=new ArrayList<>(labelCount);\n    ArrayList<FSize> calculatedLineSizes=new ArrayList<>();\n    float maxLineWidth=0.f;\n    float currentLineWidth=0.f;\n    float requiredWidth=0.f;\n    int stackedStartIndex=-1;\n    for (int i=0; i < labelCount; i++) {\n      boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;\n      calculatedLabelBreakPoints.add(false);\n      if (stackedStartIndex == -1) {\n        requiredWidth=0.f;\n      }\n else {\n        requiredWidth+=mStackSpace;\n      }\n      if (mLabels[i] != null) {\n        calculatedLabelSizes.add(Utils.calcTextSize(labelpaint,mLabels[i]));\n        requiredWidth+=drawingForm ? mFormToTextSpace + mFormSize : 0.f;\n        requiredWidth+=calculatedLabelSizes.get(i).width;\n      }\n else {\n        calculatedLabelSizes.add(new FSize(0.f,0.f));\n        requiredWidth+=drawingForm ? mFormSize : 0.f;\n        if (stackedStartIndex == -1) {\n          stackedStartIndex=i;\n        }\n      }\n      if (mLabels[i] != null || i == labelCount - 1) {\n        float requiredSpacing=currentLineWidth == 0.f ? 0.f : mXEntrySpace;\n        if (!mWordWrapEnabled || currentLineWidth == 0.f || (contentWidth - currentLineWidth >= requiredSpacing + requiredWidth)) {\n          currentLineWidth+=requiredSpacing + requiredWidth;\n        }\n else {\n          calculatedLineSizes.add(new FSize(currentLineWidth,labelLineHeight));\n          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);\n          calculatedLabelBreakPoints.set(stackedStartIndex > -1 ? stackedStartIndex : i,true);\n          currentLineWidth=requiredWidth;\n        }\n        if (i == labelCount - 1) {\n          calculatedLineSizes.add(new FSize(currentLineWidth,labelLineHeight));\n          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);\n        }\n      }\n      stackedStartIndex=mLabels[i] != null ? -1 : stackedStartIndex;\n    }\n    mCalculatedLabelSizes=calculatedLabelSizes.toArray(new FSize[calculatedLabelSizes.size()]);\n    mCalculatedLabelBreakPoints=calculatedLabelBreakPoints.toArray(new Boolean[calculatedLabelBreakPoints.size()]);\n    mCalculatedLineSizes=calculatedLineSizes.toArray(new FSize[calculatedLineSizes.size()]);\n    mNeededWidth=maxLineWidth;\n    mNeededHeight=labelLineHeight * (float)(mCalculatedLineSizes.length) + labelLineSpacing * (float)(mCalculatedLineSizes.length == 0 ? 0 : (mCalculatedLineSizes.length - 1));\n    break;\n  }\n}\n}\n", "nl": "Calculates the dimensions of the Legend. This includes the maximum width and height of a single entry, as well as the total width and height of the Legend."}
{"code": "public boolean ifUserExists(){\n  return this.firebaseAuth.getCurrentUser() != null;\n}\n", "nl": "Allows to know if the current user already exists or not"}
{"code": "public AuthenticatorException(String msg,List<String> messages,Throwable nested){\n  super(msg,messages,nested);\n}\n", "nl": "Constructs an <code>GeneralException</code> with the specified detail message, list and nested Exception."}
{"code": "public boolean isInitializationComplete(){\n  return (currentStage == ZWaveNodeInitStage.DONE);\n}\n", "nl": "Returns whether the initialization process has completed."}
{"code": "@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {\n  elementText=new StringBuilder();\nswitch (qName) {\ncase \"Iteration\":\n    iteration=new Iteration();\n  iterationHits.clear();\nbreak;\ncase \"Iteration_stat\":\nbreak;\ncase \"Iteration_hits\":\niterationHits.clear();\nbreak;\ncase \"Hit\":\nhit=new Hit();\nbreak;\ncase \"Hsp\":\nhsp=new HSP();\nbreak;\n}\n}\n", "nl": "start an element"}
{"code": "void subscribeByRegex(final Set<String> regexList,final BaseListener listener,final boolean sendInitialUpdateSeperately) throws CacheSynchronizationException {\n  final Set<Long> allMatchingTags=new HashSet<Long>();\n  Set<Long> newTagIds=cacheSynchronizer.initTags(regexList,allMatchingTags);\n  handleTagSubscription(allMatchingTags,newTagIds,listener,sendInitialUpdateSeperately);\n}\n", "nl": "Subscribes the given listener to the list of tags matching at least one of the regular expressions.  In case a tag is not yet in the client cache, it is fetched from the server. Also all the topic subscription will handled."}
{"code": "private boolean scanPokemonScreen(){\n  @ColorInt int[] pixels=screen.grabPixels(area);\n  if (pixels != null) {\n    boolean shouldShow=pixels[0] == Color.rgb(250,250,250) && pixels[1] == Color.rgb(28,135,150);\n    setIVButtonDisplay(shouldShow);\n    return shouldShow;\n  }\n  return false;\n}\n", "nl": "scanPokemonScreen Scans the device screen to check area[0] for the white and area[1] for the transfer button. If both exist then the user is on the pokemon screen."}
{"code": "public BoolDataType(){\n  this.bool=false;\n}\n", "nl": "Construct an empty BoolDataType."}
{"code": "public String convert(){\n  if (s == null) {\n    try {\n      ByteArrayInputStream bs=new ByteArrayInputStream(bytes);\n      DataInputStream d=new DataInputStream(bs);\n      String buf=d.readUTF();\n      sHashCode=buf.hashCode();\n      return buf;\n    }\n catch (    IOException e) {\n      return \"!!IOException!!\";\n    }\n  }\n  return s;\n}\n", "nl": "Converts internal representation into an actual String."}
{"code": "private static String[] modify(Integer[] order,String[] array){\n  String[] tmp=new String[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n", "nl": "modify an array according to the given order"}
{"code": "private void addFallbackSelector(Properties settings,ProtocolDispatchSelector ps){\n  String proxy=settings.getProperty(\"default\");\n  if (proxy != null) {\n    ps.setFallbackSelector(ProxyUtil.parseProxySettings(proxy));\n  }\n}\n", "nl": "Installs a fallback selector that is used whenever no protocol specific selector is defined."}
{"code": "@Override public boolean equals(Object object){\n  return object == null || object == this;\n}\n", "nl": "A Null object is equal to the null value and to itself."}
{"code": "final DoubleEdgeList createTriangulation(Vector2... points){\n  if (points == null)   throw new NullPointerException(Messages.getString(\"geometry.decompose.nullArray\"));\n  int size=points.length;\n  if (size < 4)   throw new IllegalArgumentException(Messages.getString(\"geometry.decompose.invalidSize\"));\n  double winding=Geometry.getWinding(points);\n  if (winding < 0.0) {\n    Geometry.reverseWinding(points);\n  }\n  SweepLineState sweepstate=new SweepLineState();\n  PriorityQueue<SweepLineVertex> queue=sweepstate.initialize(points);\n  while (!queue.isEmpty()) {\n    SweepLineVertex vertex=queue.poll();\n    if (vertex.type == SweepLineVertexType.START) {\n      this.start(vertex,sweepstate);\n    }\n else     if (vertex.type == SweepLineVertexType.END) {\n      this.end(vertex,sweepstate);\n    }\n else     if (vertex.type == SweepLineVertexType.SPLIT) {\n      this.split(vertex,sweepstate);\n    }\n else     if (vertex.type == SweepLineVertexType.MERGE) {\n      this.merge(vertex,sweepstate);\n    }\n else     if (vertex.type == SweepLineVertexType.REGULAR) {\n      this.regular(vertex,sweepstate);\n    }\n  }\n  sweepstate.dcel.triangulateYMonotonePolygons();\n  return sweepstate.dcel;\n}\n", "nl": "Creates a triangulation of the given simple polygon and places it in the returned doubly-connected edge list (DCEL)."}
{"code": "public static void main(String[] sArgs){\n  int[][] iaTest=new int[1][2];\n  for (int iX=0; iX < iaTest.length; iX++) {\n    for (int iY=0; iY < iaTest[0].length; iY++) {\n      iaTest[iX][iY]=iX;\n      System.out.print(iX);\n    }\n    System.out.println();\n  }\n  ArrayGraph atg=new ArrayGraph();\n  System.err.println(gr.demokritos.iit.jinsect.utils.graphToDot(atg.getGraphForArray(iaTest,2,100000).getGraphLevel(0),true));\n}\n", "nl": "Testing function."}
{"code": "public synchronized void showThreadTrace(){\n  if (!_threadLocalTraceEnabled)   throw new IllegalStateException();\n  if (_traceLoggingLevel == OFF_VALUE && !_hasAssociatedLogOn)   return;\n  _logger.log(Level.INFO,\"Trace Thread Start [\" + _traceLength + \"]\");\n  sortTrace(_threadTrace.get());\n  for (  LogRecord record : _threadTrace.get())   traceLogRecord(record);\n  if (_associatedLoggers != null) {\n    for (    String associatedLogName : _associatedLoggers)     TraceableLogger.getLogger(associatedLogName).showThreadTrace();\n  }\n  _logger.log(Level.INFO,\"Trace Thread End [\" + _traceLength + \"]\");\n}\n", "nl": "Display the trace of the current thread"}
{"code": "public PolyType(Class baseClass,PolyEntry... entries){\n  this(baseClass,null,entries);\n}\n", "nl": "No default value."}
{"code": "@Override public void showMessage(String message){\n  Snackbar.make(root,message,Snackbar.LENGTH_SHORT).show();\n}\n", "nl": "To show message passed in Snackbar."}
{"code": "public short[][] production_table(){\n  return _production_table;\n}\n", "nl": "Access to production table."}
{"code": "public void zoomOut(){\n  PointF center=mViewPortHandler.getContentCenter();\n  Matrix save=mViewPortHandler.zoomOut(center.x,-center.y);\n  mViewPortHandler.refresh(save,this,false);\n  calculateOffsets();\n  postInvalidate();\n}\n", "nl": "Zooms out by 0.7f, from the charts center. center."}
{"code": "public BriefUnitGraph(Body body){\n  super(body);\n  int size=unitChain.size();\n  if (Options.v().time())   Timers.v().graphTimer.start();\n  unitToSuccs=new HashMap<Unit,List<Unit>>(size * 2 + 1,0.7f);\n  unitToPreds=new HashMap<Unit,List<Unit>>(size * 2 + 1,0.7f);\n  buildUnexceptionalEdges(unitToSuccs,unitToPreds);\n  makeMappedListsUnmodifiable(unitToSuccs);\n  makeMappedListsUnmodifiable(unitToPreds);\n  buildHeadsAndTails();\n  if (Options.v().time())   Timers.v().graphTimer.end();\n  soot.util.PhaseDumper.v().dumpGraph(this,body);\n}\n", "nl": "Constructs a BriefUnitGraph given a Body instance."}
{"code": "protected void initializeStorage(ISVNRemoteFile file,IProgressMonitor monitor) throws TeamException {\n  storage=((IResourceVariant)file).getStorage(monitor);\n}\n", "nl": "Initialize the strogae of this instance from the given file."}
{"code": "public GroupsJoinQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID or screen name of the community."}
{"code": "public final static double abs(double dNum){\n  return (dNum > 0) ? dNum : -dNum;\n}\n", "nl": "Math.abs reimplemented."}
{"code": "public static int makeListItemSurveyResp(Delegator delegator,GenericValue item,List<String> surveyResps) throws GenericEntityException {\n  if (UtilValidate.isNotEmpty(surveyResps)) {\n    int count=0;\n    for (    String responseId : surveyResps) {\n      GenericValue listResp=delegator.makeValue(\"ShoppingListItemSurvey\");\n      listResp.set(\"shoppingListId\",item.getString(\"shoppingListId\"));\n      listResp.set(\"shoppingListItemSeqId\",item.getString(\"shoppingListItemSeqId\"));\n      listResp.set(\"surveyResponseId\",responseId);\n      delegator.create(listResp);\n      count++;\n    }\n    return count;\n  }\n  return -1;\n}\n", "nl": "Creates records for survey responses on survey items"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache"}
{"code": "public ResultEntry convertEntriesToResultArrays(IQueryResultSet<IEntryPacket> entries){\n  LinkedList<String> columnNames=new LinkedList<String>();\n  LinkedList<String> columnLabelsList=new LinkedList<String>();\n  LinkedList<String> tableNamesList=new LinkedList<String>();\n  for (  SelectColumn col : query.getQueryColumns()) {\n    if (col.isVisible()) {\n      columnNames.add(col.getName());\n      columnLabelsList.add(col.getAlias());\n      tableNamesList.add(col.getColumnTableData().getTableName());\n    }\n  }\n  String[] fieldNames=columnNames.toArray(new String[columnNames.size()]);\n  String[] columnLabels=columnLabelsList.toArray(new String[columnLabelsList.size()]);\n  String[] tableNames=tableNamesList.toArray(new String[tableNamesList.size()]);\n  Object[][] fieldValues=new Object[entries.size()][columnNames.size()];\n  Iterator<IEntryPacket> iter=entries.iterator();\n  int row=0;\n  while (iter.hasNext()) {\n    IEntryPacket entry=iter.next();\n    int column=0;\n    for (int i=0; i < query.getQueryColumns().size(); i++) {\n      SelectColumn sc=query.getQueryColumns().get(i);\n      if (!sc.isVisible())       continue;\n      fieldValues[row][column++]=entries.getFieldValue(sc,entry);\n    }\n    row++;\n  }\n  ResultEntry result=new ResultEntry(fieldNames,columnLabels,tableNames,fieldValues);\n  return result;\n}\n", "nl": "Converts the list of ExternaEntries to 2 dimensional array that contains the values of the entries. Each row matches specific IEntryPacket. The conversion is necessary for entries ordering."}
{"code": "public ChangeReport(final long changeId){\n  this.changeId=changeId;\n}\n", "nl": "Creates a new ChangeReport."}
{"code": "public static AlarmValueImpl createAlarmValue(Alarm alarm,Tag tag){\n  AlarmValueImpl alarmValueImpl=null;\n  if (alarm != null && tag != null) {\n    alarmValueImpl=new AlarmValueImpl(alarm.getId(),alarm.getFaultCode(),alarm.getFaultMember(),alarm.getFaultFamily(),alarm.getInfo(),alarm.getTagId(),tag.getDescription(),alarm.getTimestamp(),alarm.isActive());\n  }\n  return alarmValueImpl;\n}\n", "nl": "Creates an <code>AlarmValueImpl</code> object. Also adds Tag Description information."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public PackageAccess fullCopy(){\n  PackageAccess tree=(PackageAccess)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public boolean isCellEditable(int row,int col){\n  return true;\n}\n", "nl": "Checks if is cell editable."}
{"code": "public double lengthSquared(){\n  return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);\n}\n", "nl": "Gets the magnitude of the vector squared."}
{"code": "private void updateTexts(DocumentEvent e){\n  Document doc=e.getDocument();\n  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {\n    String projectName=projectNameTextField.getText();\n    String projectFolder=projectLocationTextField.getText();\n    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);\n  }\n  panel.fireChangeEvent();\n}\n", "nl": "Handles changes in the Project name and project directory,"}
{"code": "public boolean isUseAntiAlias(){\n  return useAntiAlias;\n}\n", "nl": "Checks if is use anti alias."}
{"code": "@Override public void write(char[] chr) throws IOException {\n  out.write(chr);\n}\n", "nl": "Write the characters from an array."}
{"code": "String toString(int indentFactor,int indent) throws JSONException {\n  int len=length();\n  if (len == 0) {\n    return \"[]\";\n  }\n  int i;\n  StringBuilder sb=new StringBuilder(\"[\");\n  if (len == 1) {\n    sb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));\n  }\n else {\n    int newindent=indent + indentFactor;\n    sb.append('\\n');\n    for (i=0; i < len; i+=1) {\n      if (i > 0) {\n        sb.append(\",\\n\");\n      }\n      for (int j=0; j < newindent; j+=1) {\n        sb.append(' ');\n      }\n      sb.append(JSONObject.valueToString(this.myArrayList.get(i),indentFactor,newindent));\n    }\n    sb.append('\\n');\n    for (i=0; i < indent; i+=1) {\n      sb.append(' ');\n    }\n  }\n  sb.append(']');\n  return sb.toString();\n}\n", "nl": "Make a prettyprinted JSON text of this JSONArray. Warning: This method assumes that the signalData structure is acyclical."}
{"code": "public ColorPanel(Color initialColor){\n  this(initialColor,true);\n}\n", "nl": "Creates a color editor panel."}
{"code": "@Override public void start(){\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(\"starting all alive timers\");\n  }\n  clusterCache.acquireWriteLockOnKey(C2monCacheLoader.aliveStatusInitialized);\n  try {\n    if (!clusterCache.hasKey(C2monCacheLoader.aliveStatusInitialized) || !(Boolean)clusterCache.getCopy(C2monCacheLoader.aliveStatusInitialized)) {\n      Long aliveTagId;\n      Process process;\n      for (      Long id : processCache.getKeys()) {\n        processCache.acquireReadLockOnKey(id);\n        try {\n          process=processCache.get(id);\n          aliveTagId=process.getAliveTagId();\n          if (aliveTagId != null) {\n            if (controlTagCache.hasKey(process.getStateTagId())) {\n              if (processFacade.isRunning(process)) {\n                aliveTimerFacade.start(aliveTagId);\n              }\n            }\n else {\n              LOGGER.warn(\"Unable to locate state tag in cache (id = \" + process.getStateTagId() + \") \"+ \"cannot start alive timer for this process.\");\n            }\n          }\n        }\n  finally {\n          processCache.releaseReadLockOnKey(id);\n        }\n      }\n      Equipment equipment;\n      for (      Long id : equipmentCache.getKeys()) {\n        equipmentCache.acquireReadLockOnKey(id);\n        try {\n          equipment=equipmentCache.get(id);\n          aliveTagId=equipment.getAliveTagId();\n          if (aliveTagId != null) {\n            if (controlTagCache.hasKey(equipment.getStateTagId())) {\n              if (equipmentFacade.isRunning(equipment)) {\n                aliveTimerFacade.start(aliveTagId);\n              }\n            }\n else {\n              LOGGER.warn(\"Unable to locate state tag in cache (id = \" + equipment.getStateTagId() + \") \"+ \"cannot start alive timer for this equipment.\");\n            }\n          }\n        }\n  finally {\n          equipmentCache.releaseReadLockOnKey(id);\n        }\n      }\n      SubEquipment subEquipment;\n      for (      Long id : subEquipmentCache.getKeys()) {\n        subEquipmentCache.acquireReadLockOnKey(id);\n        try {\n          subEquipment=subEquipmentCache.get(id);\n          aliveTagId=subEquipment.getAliveTagId();\n          if (aliveTagId != null) {\n            if (controlTagCache.hasKey(subEquipment.getStateTagId())) {\n              if (subEquipmentFacade.isRunning(subEquipment)) {\n                aliveTimerFacade.start(aliveTagId);\n              }\n            }\n else {\n              LOGGER.warn(\"Unable to locate state tag in cache (id = \" + subEquipment.getStateTagId() + \") cannot \"+ \"start alive timer for this subequipment.\");\n            }\n          }\n        }\n  finally {\n          subEquipmentCache.releaseReadLockOnKey(id);\n        }\n      }\n      aliveTimerFacade.startAllTimers();\n      clusterCache.put(C2monCacheLoader.aliveStatusInitialized,Boolean.TRUE);\n    }\n  }\n catch (  Exception e) {\n    LOGGER.error(\"initialise() : Error starting alive timer mechanism.\",e);\n  }\n finally {\n    clusterCache.releaseWriteLockOnKey(C2monCacheLoader.aliveStatusInitialized);\n  }\n  LOGGER.info(\"Finished initializing all alive timers.\");\n}\n", "nl": "Starts the alive timer mechanisms at server start up."}
{"code": "public static INDArray[] append(INDArray[] history,INDArray append){\n  INDArray[] appended=new INDArray[history.length];\n  appended[0]=append;\n  for (int i=0; i < history.length - 1; i++) {\n    appended[i + 1]=history[i];\n  }\n  return appended;\n}\n", "nl": "append a pixel frame to an history (throwing the last frame)"}
{"code": "public GroupsGetInvitedUsersQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Additional fields list to return"}
{"code": "public static Long streamOpCRC32(String stream){\n  CRC32 crc=requestCRC.get();\n  try {\n    crc.update(stream.getBytes(UTF_8));\n    return crc.getValue();\n  }\n  finally {\n    crc.reset();\n  }\n}\n", "nl": "Generate crc32 for any op which only passes a stream name."}
{"code": "public CoreDocumentImpl(DocumentType doctype){\n  this(doctype,false);\n}\n", "nl": "For DOM2 support. The createDocument factory method is in DOMImplementation."}
{"code": "public <OBJ extends SRC>InterfaceAdapter<SRC,DST> register(Class<OBJ> inClass,DST outInterface){\n  Adapter<OBJ,DST> ret=new GenericAdapter<OBJ,DST>(inClass,outInterface);\n  register(ret);\n  return this;\n}\n", "nl": "Helper method for registering for use in situations where the interface does not rely on 'TARGET.this', such as Block."}
{"code": "@BindingAdapter({\"items\",\"view_provider\"}) public static void bindViewPagerAdapter(ViewPager viewPager,Observable<List<ViewModel>> items,ViewProvider viewProvider){\n  PagerAdapter previousAdapter=viewPager.getAdapter();\n  BindingUtils.bindAdapterWithDefaultBinder(viewPager,items,viewProvider);\n  if (previousAdapter != null)   ExampleApplication.getRefWatcher(viewPager.getContext()).watch(previousAdapter);\n}\n", "nl": "Binding Adapter Wrapper for checking memory leak"}
{"code": "public void loadWeather(Player player){\n  onWeatherChange(player.getWorldId(),player);\n}\n", "nl": "When a player connects, it loads his weather"}
{"code": "private void populateResultsBox(IVScanResult ivScanResult){\n  ivScanResult.sortCombinations();\n  populateResultsHeader(ivScanResult);\n  if (ivScanResult.getCount() == 1) {\n    populateSingleIVMatch(ivScanResult);\n  }\n else {\n    populateMultipleIVMatch(ivScanResult);\n  }\n  setResultScreenPercentageRange(ivScanResult);\n  adjustSeekbarsThumbs();\n  hideSeeAllLinkIfFlagSet(ivScanResult);\n  populateAdvancedInformation(ivScanResult);\n  populatePrevScanNarrowing();\n}\n", "nl": "Sets all the information in the result box."}
{"code": "public Feature build(){\n  checkEncloses(supportedVersionRange,defaultVersionRange,\"supportedVersionRange %s does not enclose defaultVersionRange %s on %s\",featureName);\n  for (  ChildBinding binding : childBindings.build()) {\n    checkEncloses(supportedVersionRange,binding.range,\"parent supportedVersionRange %s does not include binding range %s for child %s\",binding.child.featureName);\n    checkEncloses(binding.child.supportedVersionRange,binding.range,\"child supportedVersionRange %s does not include binding range %s for child %s\",binding.child.featureName);\n  }\n  return new Feature(this);\n}\n", "nl": "Returns the feature with the previously given configuration."}
{"code": "public BasicBlock pull() throws NoSuchElementException {\n  if (q.size() == 0)   throw new NoSuchElementException(\"Pull from empty BBQ\");\n  BasicBlock b=(q.get(0));\n  q.remove(0);\n  b.inq=false;\n  return b;\n}\n", "nl": "Removes the first block in the queue (and resets its <i>inq</i> flag)."}
{"code": "protected void initShapeRenderers(){\n  shapeRendererList=new HashMap<>();\n  shapeRendererList.put(ScatterChart.ScatterShape.SQUARE.toString(),new SquareShapeRenderer());\n  shapeRendererList.put(ScatterChart.ScatterShape.CIRCLE.toString(),new CircleShapeRenderer());\n  shapeRendererList.put(ScatterChart.ScatterShape.TRIANGLE.toString(),new TriangleShapeRenderer());\n  shapeRendererList.put(ScatterChart.ScatterShape.CROSS.toString(),new CrossShapeRenderer());\n  shapeRendererList.put(ScatterChart.ScatterShape.X.toString(),new XShapeRenderer());\n  shapeRendererList.put(ScatterChart.ScatterShape.CHEVRON_UP.toString(),new ChevronUpShapeRenderer());\n  shapeRendererList.put(ScatterChart.ScatterShape.CHEVRON_DOWN.toString(),new ChevronDownShapeRenderer());\n}\n", "nl": "Init default ShapeRenderers."}
{"code": "public ServerTransaction(){\n}\n", "nl": "Do not use, required for externalizable"}
{"code": "private static boolean isLowercaseLetter(char ch){\n  return ('a' <= ch && ch <= 'z');\n}\n", "nl": "Returns true if the given character is a lowercase letter (a-z)."}
{"code": "protected TextViewer createText(Composite parent){\n  return new TextViewer(parent,SWT.V_SCROLL | SWT.WRAP | SWT.MULTI| SWT.READ_ONLY);\n}\n", "nl": "Create the TextViewer"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private List<Result> makeTopNResults(JsonNode jsonResult,Set<DimensionColumn> dimensionColumns,Set<MetricColumn> metricColumns,DateTimeZone dateTimeZone){\n  List<Result> results=new ArrayList<>();\n  for (  JsonNode record : jsonResult) {\n    DateTime timeStamp=new DateTime(record.get(\"timestamp\").asText(),dateTimeZone);\n    JsonNode result=record.get(\"result\");\n    for (    final JsonNode entry : result) {\n      LinkedHashMap<DimensionColumn,DimensionRow> dimensionRows=extractDimensionRows(dimensionColumns,entry);\n      LinkedHashMap<MetricColumn,Object> metricValues=extractMetricValues(metricColumns,entry);\n      results.add(new Result(dimensionRows,metricValues,timeStamp));\n    }\n  }\n  return results;\n}\n", "nl": "Create a list of results from a JsonNode of a topN response."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_ME_TO_B(String value0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200574,value0,skilltarget,skillname);\n}\n", "nl": "You summoned %0 to [%SkillTarget] by using [%SkillName]."}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.challenges"}
{"code": "private boolean canChangeNickname(Legion legion,int targetObjectId,String newNickname){\n  if (!isValidNickname(newNickname)) {\n    return false;\n  }\n else   if (!legion.isMember(targetObjectId)) {\n    return false;\n  }\n  return true;\n}\n", "nl": "This method will check all restrictions for changing nickname"}
{"code": "public void handleDecode(Result rawResult){\n  inactivityTimer.onActivity();\n  beepManager.playBeepSoundAndVibrate();\n  handleDecodeExternally(rawResult);\n}\n", "nl": "A valid barcode has been found, so give an indication of success and show the results."}
{"code": "@SuppressWarnings(\"unchecked\") public static <K,V>Map<String,V> toMap(Object... data){\n  if (data.length == 1 && data[0] instanceof Map) {\n    return UtilGenerics.<String,V>checkMap(data[0]);\n  }\n  if (data.length % 2 == 1) {\n    IllegalArgumentException e=new IllegalArgumentException(\"You must pass an even sized array to the toMap method (size = \" + data.length + \")\");\n    Debug.logInfo(e,module);\n    throw e;\n  }\n  Map<String,V> map=new HashMap<String,V>();\n  for (int i=0; i < data.length; ) {\n    map.put((String)data[i++],(V)data[i++]);\n  }\n  return map;\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "public void clearMemoryCache(){\n  checkConfiguration();\n  configuration.memoryCache.clear();\n}\n", "nl": "Clears memory cache"}
{"code": "public ItemToSkillTreeCursor queryItemToSkillTreeItem(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Selection=\"itst.\" + S.COLUMN_ITEM_TO_SKILL_TREE_ITEM_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new ItemToSkillTreeCursor(wrapJoinHelper(builderItemToSkillTree(),qh));\n}\n", "nl": "****************************** ITEM TO SKILL TREE QUERIES"}
{"code": "public MessagesDenyMessagesFromCommunityQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"messages.denyMessagesFromCommunity\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ColorPoint(final double point,final Color color){\n  if (color == null) {\n    throw new NullPointerException(\"color can't be null\");\n  }\n  if (point > 1 || point < 0) {\n    throw new IndexOutOfBoundsException(\"Point of color must be between 0 and 1.\");\n  }\n  this.point=point;\n  this.color=color;\n}\n", "nl": "Creates a color point with a point and a color."}
{"code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"Meganizer\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    PeakMemoryUsageMonitor.start();\n    (new DAAMeganizer()).run(args);\n    System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());\n    System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n", "nl": "meganizes a DAA file"}
{"code": "public ZWaveScheduleEntryLockCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){\n  super(node,controller,endpoint);\n}\n", "nl": "Creates a new instance of the ZWaveScheduleEntryLockCommandClass class."}
{"code": "public IdQuery(String typeName,Object id,Object routing,QueryResultType queryResultType){\n  this(typeName,id,routing,queryResultType,0);\n}\n", "nl": "Creates an IdQuery using the specified type, id, routing and query result type."}
{"code": "public AudioGetRecommendationsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of audio files."}
{"code": "public EmailBuilder bcc(String bcc){\n  this.bcc.add(bcc);\n  return this;\n}\n", "nl": "adds a \"Bcc\" (blind carbon copy) recipients to the email that is being built."}
{"code": "public static void v(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.v(tag,buildMsg(msg));\n  }\n}\n", "nl": "verbose log"}
{"code": "private static URL[] pathToURLs(String path) throws MalformedURLException {\n  if (path == null) {\n    return null;\n  }\nsynchronized (pathToURLsCache) {\n    Object[] v=(Object[])pathToURLsCache.get(path);\n    if (v != null) {\n      return ((URL[])v[0]);\n    }\n  }\n  StringTokenizer st=new StringTokenizer(path);\n  URL[] urls=new URL[st.countTokens()];\n  for (int i=0; st.hasMoreTokens(); i++) {\n    urls[i]=new URL(st.nextToken());\n  }\nsynchronized (pathToURLsCache) {\n    pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});\n  }\n  return urls;\n}\n", "nl": "Convert a string containing a space-separated list of URLs into a corresponding array of URL objects, throwing a MalformedURLException if any of the URLs are invalid.  This method returns null if the specified string is null."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Resurrect_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200862,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the resurrection state as it used [%SkillName]."}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());\n  result=prime * result + ((getCascadeId() == null) ? 0 : getCascadeId().hashCode());\n  result=prime * result + ((getRootKey() == null) ? 0 : getRootKey().hashCode());\n  result=prime * result + ((getRootName() == null) ? 0 : getRootName().hashCode());\n  result=prime * result + ((getName() == null) ? 0 : getName().hashCode());\n  result=prime * result + ((getHotkey() == null) ? 0 : getHotkey().hashCode());\n  result=prime * result + ((getParentId() == null) ? 0 : getParentId().hashCode());\n  result=prime * result + ((getIsLeaf() == null) ? 0 : getIsLeaf().hashCode());\n  result=prime * result + ((getIsAutoExpand() == null) ? 0 : getIsAutoExpand().hashCode());\n  result=prime * result + ((getIconName() == null) ? 0 : getIconName().hashCode());\n  result=prime * result + ((getSortNo() == null) ? 0 : getSortNo().hashCode());\n  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());\n  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());\n  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());\n  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());\n  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());\n  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());\n  return result;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table sys_catalog"}
{"code": "public Utf8_Enumeration(){\n}\n", "nl": "For creating an empty enumeration; you must use reset() after this to initialize the enumeration."}
{"code": "public static void apply(Document srcDoc,String srcClassification,Collection<Integer> srcClassIds,String tarRMA6FileName,ProgressListener progress,Single<Long> totalReads) throws IOException, CanceledException {\n  final long startTime=System.currentTimeMillis();\n  final IConnector connector=srcDoc.getConnector();\n  final String[] classifications=connector.getAllClassificationNames().clone();\n  final RMA6FileCreator rma6FileCreator=new RMA6FileCreator(tarRMA6FileName,true);\n  rma6FileCreator.writeHeader(ProgramProperties.getProgramVersion(),srcDoc.getBlastMode(),classifications,false);\n  rma6FileCreator.startAddingQueries();\n  try {\n    try (IReadBlockIterator iterator=connector.getReadsIteratorForListOfClassIds(srcClassification,srcClassIds,0,10,true,true)){\n      progress.setTasks(\"Extracting\",\"Processing file: \" + Basic.getFileNameWithoutPath(srcDoc.getMeganFile().getFileName()));\n      progress.setProgress(0);\n      progress.setMaximum(iterator.getMaximumProgress());\n      while (iterator.hasNext()) {\n        final IReadBlock readBlock=iterator.next();\n        final StringBuilder blastTextBuf=new StringBuilder();\n        blastTextBuf.append(FileInputIterator.PREFIX_TO_INDICATE_TO_PARSE_FILENAME_STRING);\n        blastTextBuf.append(\"Query= \").append(readBlock.getReadHeader()).append(\"\\n\");\n        int[][] match2classification2id=new int[readBlock.getNumberOfAvailableMatchBlocks()][classifications.length];\n        for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {\n          final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n          blastTextBuf.append(matchBlock.getText());\n          for (int k=0; k < classifications.length; k++) {\n            match2classification2id[i][k]=matchBlock.getId(classifications[k]);\n          }\n        }\n        totalReads.set(totalReads.get() + 1);\n        final byte[] readBytes=(\">\" + readBlock.getReadHeader() + \"\\n\"+ readBlock.getReadSequence()).getBytes();\n        final byte[] matchBytes=computeSAM(srcDoc.getBlastMode(),1000,blastTextBuf.toString());\n        rma6FileCreator.addQuery(readBytes,readBytes.length,readBlock.getNumberOfAvailableMatchBlocks(),matchBytes,matchBytes.length,match2classification2id,0L);\n        progress.setProgress(iterator.getProgress());\n      }\n    }\n   }\n  finally {\n    rma6FileCreator.endAddingQueries();\n    rma6FileCreator.writeClassifications(new String[0],null,null);\n    rma6FileCreator.writeAuxBlocks(null);\n    rma6FileCreator.close();\n    final Document doc=new Document();\n    doc.setProgressListener(progress);\n    doc.getMeganFile().setFile(tarRMA6FileName,MeganFile.Type.RMA6_FILE);\n    doc.getActiveViewers().addAll(Arrays.asList(classifications));\n  }\n  System.err.println(\"Extraction required \" + ((System.currentTimeMillis() - startTime) / 1000) + \" seconds\");\n}\n", "nl": "extract all named classes in the given classsification to a new RMA6 file"}
{"code": "@CalledByNative public static boolean isAccessibilityEnabled(Context context){\n  AccessibilityManager manager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);\n  return manager != null && manager.isEnabled() && manager.isTouchExplorationEnabled();\n}\n", "nl": "Checks to see that this device has accessibility and touch exploration enabled."}
{"code": "@Override protected Expression generateExpression(){\n  if (windBarbsPanel == null) {\n    return null;\n  }\n  Expression expression=windBarbsPanel.getExpression();\n  return expression;\n}\n", "nl": "Generate expression."}
{"code": "public Node addRoot(){\n  throw new UnsupportedOperationException(\"Changes to tree structure not allowed for spanning trees.\");\n}\n", "nl": "Unsupported operation. Spanning trees should not be edited."}
{"code": "public static boolean checkAndCreateFolder(String path){\n  boolean created=false;\n  try {\n    FileFactory.FileType fileType=FileFactory.getFileType(path);\n    if (FileFactory.isFileExist(path,fileType)) {\n      created=true;\n    }\n else {\n      created=FileFactory.mkdirs(path,fileType);\n    }\n  }\n catch (  IOException e) {\n    LOGGER.error(e.getMessage());\n  }\n  return created;\n}\n", "nl": "This method will check and create the given path"}
{"code": "void addFillComponents(Container panel,int[] cols,int[] rows){\n  Dimension filler=new Dimension(10,10);\n  boolean filled_cell_11=false;\n  CellConstraints cc=new CellConstraints();\n  if (cols.length > 0 && rows.length > 0) {\n    if (cols[0] == 1 && rows[0] == 1) {\n      panel.add(Box.createRigidArea(filler),cc.xy(1,1));\n      filled_cell_11=true;\n    }\n  }\n  for (int index=0; index < cols.length; index++) {\n    if (cols[index] == 1 && filled_cell_11) {\n      continue;\n    }\n    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));\n  }\n  for (int index=0; index < rows.length; index++) {\n    if (rows[index] == 1 && filled_cell_11) {\n      continue;\n    }\n    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));\n  }\n}\n", "nl": "Adds fill components to empty cells in the first row and first column of the grid. This ensures that the grid spacing will be the same as shown in the designer."}
{"code": "public INSECTFileDB(String sPrefix,String sBaseDir){\n  if (sPrefix == null)   Prefix=\"\";\n else   Prefix=sPrefix;\n  if (sBaseDir == null)   BaseDir=\"./\";\n else   BaseDir=sBaseDir;\n}\n", "nl": "Creates a new instance of INSECTFileDB"}
{"code": "public LoadImplementor(LoadModel model,LoadView view){\n  this.model=model;\n  this.view=view;\n}\n", "nl": "<br> life cycle."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_A_TO_B(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201033,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] summoned %0 by using [%SkillName]."}
{"code": "@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {\n  fSeenDoctypeDecl=true;\n  fRootElement.setValues(null,rootElement,rootElement,null);\n  String eid=null;\n  try {\n    eid=XMLEntityManager.expandSystemId(systemId,fDocLocation.getExpandedSystemId(),false);\n  }\n catch (  java.io.IOException e) {\n  }\n  XMLDTDDescription grammarDesc=new XMLDTDDescription(publicId,systemId,fDocLocation.getExpandedSystemId(),eid,rootElement);\n  fDTDGrammar=fGrammarBucket.getGrammar(grammarDesc);\n  if (fDTDGrammar == null) {\n    if (fGrammarPool != null && (systemId != null || publicId != null)) {\n      fDTDGrammar=(DTDGrammar)fGrammarPool.retrieveGrammar(grammarDesc);\n    }\n  }\n  if (fDTDGrammar == null) {\n    if (!fBalanceSyntaxTrees) {\n      fDTDGrammar=new DTDGrammar(fSymbolTable,grammarDesc);\n    }\n else {\n      fDTDGrammar=new BalancedDTDGrammar(fSymbolTable,grammarDesc);\n    }\n  }\n else {\n    fValidationManager.setCachedDTD(true);\n  }\n  fGrammarBucket.setActiveGrammar(fDTDGrammar);\n  if (fDocumentHandler != null) {\n    fDocumentHandler.doctypeDecl(rootElement,publicId,systemId,augs);\n  }\n}\n", "nl": "Notifies of the presence of the DOCTYPE line in the document."}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public WallCreateCommentQuery createComment(UserActor actor,int postId){\n  return new WallCreateCommentQuery(getClient(),actor,postId);\n}\n", "nl": "Adds a comment to a post on a user wall or community wall."}
{"code": "@Override public synchronized void put(String key,Entry entry){\n  pruneIfNeeded(entry.data.length);\n  File file=getFileForKey(key);\n  try {\n    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));\n    CacheHeader e=new CacheHeader(key,entry);\n    boolean success=e.writeHeader(fos);\n    if (!success) {\n      fos.close();\n      VolleyLog.d(\"Failed to write header for %s\",file.getAbsolutePath());\n      throw new IOException();\n    }\n    fos.write(entry.data);\n    fos.close();\n    putEntry(key,e);\n    return;\n  }\n catch (  IOException e) {\n  }\n  boolean deleted=file.delete();\n  if (!deleted) {\n    VolleyLog.d(\"Could not clean up file %s\",file.getAbsolutePath());\n  }\n}\n", "nl": "Puts the entry with the specified key into the cache."}
{"code": "public static boolean isDailyReminderSet(Context context){\n  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  return prefs.getBoolean(context.getString(R.string.key_daily_reminder),true);\n}\n", "nl": "Returns true if the user has selected to be notified about daily events"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public void execute() throws BuildException {\n  if (values.isEmpty()) {\n    throw new BuildException(\"You must set at least one value!\",getLocation());\n  }\n  if (target == null) {\n    throw new BuildException(\"Target must be set!\",getLocation());\n  }\n  for (  String val : values) {\n    log(\"Process '\" + val + \"' location with '\"+ target+ \"' target ...\",Project.MSG_VERBOSE);\n    CallTarget antCall=(CallTarget)getProject().createTask(\"antcall\");\n    antCall.init();\n    antCall.setLocation(getLocation());\n    antCall.setTarget(target);\n    Property prop=antCall.createParam();\n    prop.setName(name);\n    prop.setValue(val);\n    antCall.execute();\n  }\n}\n", "nl": "Execute this task."}
{"code": "public int pointsToSetHashCode(){\n  final int PRIME=31;\n  int result=1;\n  for (  AllocAndContext elem : this) {\n    result=PRIME * result + elem.hashCode();\n  }\n  return result;\n}\n", "nl": "Computes a hash code based on the contents of the points-to set. Note that hashCode() is not overwritten on purpose. This is because Spark relies on comparison by object identity."}
{"code": "public void read(Reader reader,Collection<String> knownSamples,boolean clear) throws IOException {\n  int countNotFound=0;\n  if (clear)   clear();\n  try (BufferedReader r=new BufferedReader(reader)){\n    String aLine=r.readLine();\n    while (aLine != null && aLine.trim().length() == 0) {\n      aLine=r.readLine();\n    }\n    if (aLine != null) {\n      String[] tokens=Basic.splitWithQuotes(aLine,'\\t');\n      if (tokens.length < 1 || !tokens[0].startsWith(SAMPLE_ID)) {\n        throw new IOException(SAMPLE_ID + \" tag not found, no sample-attributes data...\");\n      }\n      final int tokensPerLine=tokens.length;\n      final Set<String> newAttributes=new HashSet<>();\n      final List<String> attributesOrder=new LinkedList<>();\n      for (int i=1; i < tokensPerLine; i++) {\n        String attribute=tokens[i];\n        if (!isSecretAttribute(attribute) && !isHiddenAttribute(attribute) && (newAttributes.contains(attribute) || getAttributeOrder().contains(attribute))) {\n          int count=1;\n          while (newAttributes.contains(attribute + \".\" + count) || getAttributeOrder().contains(attribute + \".\" + count)) {\n            count++;\n          }\n          System.err.println(\"Attribute \" + attribute + \" already exists, renaming to: \"+ attribute+ \".\"+ count);\n          attribute+=\".\" + count;\n        }\n        newAttributes.add(attribute);\n        attributesOrder.add(attribute);\n      }\n      final String[] pos2attribute=attributesOrder.toArray(new String[attributesOrder.size()]);\n      for (int i=0; i < pos2attribute.length; i++) {\n        if (isHiddenAttribute(pos2attribute[i]))         pos2attribute[i]=null;\n else         getAttributeOrder().add(pos2attribute[i]);\n      }\n      final Set<String> mentionedSamples=new HashSet<>();\n      while ((aLine=r.readLine()) != null) {\n        aLine=aLine.trim();\n        if (aLine.startsWith(\"#\")) {\n          if (description == null)           description=aLine;\n else           if (!description.equals(\"#EOF\") && !description.equals(\"# EOF\"))           description+=\" \" + aLine;\n        }\n else {\n          tokens=Basic.splitWithQuotes(aLine,'\\t');\n          if (tokens.length > 0) {\n            if (tokens.length != tokensPerLine)             throw new IOException(\"Expected \" + tokensPerLine + \" tokens, got \"+ tokens.length+ \" in line: \"+ aLine);\n            final String sample=tokens[0].trim();\n            if (sample.length() == 0)             continue;\n            if (mentionedSamples.contains(sample)) {\n              System.err.println(\"Sample occurs more than once: \" + sample + \", ignoring repeated occurrences\");\n              continue;\n            }\n            mentionedSamples.add(sample);\n            if (knownSamples == null || knownSamples.contains(sample)) {\n              Map<String,Object> attribute2value=new HashMap<>();\n              for (int i=1; i < tokensPerLine; i++) {\n{\n                  String attribute=pos2attribute[i - 1];\n                  if (attribute != null)                   attribute2value.put(attribute,tokens[i].equals(\"NA\") ? null : tokens[i]);\n                }\n              }\n              addSample(sample,attribute2value,true,true);\n            }\n else {\n              System.err.println(\"Sample mentioned in metadata is not present in document, skipping: \" + sample);\n              countNotFound++;\n            }\n          }\n        }\n      }\n      setAllAttributeTypesFromValues();\n    }\n  }\n  finally {\n    if (countNotFound > 0)     NotificationsInSwing.showWarning(MainViewer.getLastActiveFrame(),\"Loaded metadata, ignored \" + countNotFound + \" unknown input samples.\");\n else {\n      if (knownSamples != null) {\n        for (        String sample : knownSamples)         putSampleLabel(sample,sample);\n      }\n    }\n  }\n}\n", "nl": "reads metadata from a readerWriter"}
{"code": "@Deprecated public static boolean hasParentType(Delegator delegator,String entityName,String primaryKey,String childType,String parentTypeField,String parentType){\n  return EntityTypeUtil.hasParentType(delegator,entityName,primaryKey,childType,parentTypeField,parentType);\n}\n", "nl": "A generic method to be used on Type enities, e.g. ProductType.  Recurse to the root level in the type hierarchy and checks if the specified type childType has parentType as its parent somewhere in the hierarchy."}
{"code": "GSMessageImpl duplicate() throws JMSException {\n  GSSimpleMessageImpl dup=new GSSimpleMessageImpl();\n  copyTo(dup);\n  return dup;\n}\n", "nl": "Creates a duplicate object (deep clone) of the message."}
{"code": "public void run(IRunnableWithProgress runnable,IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n  runnable.run(monitor);\n}\n", "nl": "Run the given runnable"}
{"code": "public SelectedSymbolMask(SymbolMaskEnum level){\n  if (maskOrderlist.isEmpty()) {\n    maskOrderlist.add(SymbolMaskEnum.E_STYLED_LAYER);\n    maskOrderlist.add(SymbolMaskEnum.E_STYLE);\n    maskOrderlist.add(SymbolMaskEnum.E_FEATURE_TYPE_STYLE);\n    maskOrderlist.add(SymbolMaskEnum.E_RULE);\n    maskOrderlist.add(SymbolMaskEnum.E_SYMBOLIZER);\n  }\n  for (  SymbolMaskEnum key : maskOrderlist) {\n    maskList.add(key);\n    if (key == level) {\n      break;\n    }\n  }\n}\n", "nl": "Instantiates a new selected symbol mask."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_GLORY_POINT_LOSE_PERSONAL(int num0){\n  return new SM_SYSTEM_MESSAGE(1402209,num0);\n}\n", "nl": "You lost personal %num0 Glory Points."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200909,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer spinning."}
{"code": "@Override public void postEvent(EventLogEvent event){\n  AuditLogEntryEnvelope auditLogEntryEnvelope=new AuditLogEntryEnvelope(createFromEvent(event),repository);\n  LOGGER.debug(\"posting auditLogEntryEnvelope: {}\",auditLogEntryEnvelope);\n  threadPoolExecutor.submit(auditLogEntryEnvelope);\n  LOGGER.debug(\"posted auditLogEntryEnvelope: {}\",auditLogEntryEnvelope);\n}\n", "nl": "Will be called by the EventLogImpl with events which the listener registered for."}
{"code": "public String toString(){\n  return getClass().getName() + \"[\" + lease+ \"]\";\n}\n", "nl": "Returns a string created from the proxy class name and the result of calling toString on the contained lease."}
{"code": "public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  VideoBeanDao.dropTable(db,ifExists);\n}\n", "nl": "Drops underlying database table using DAOs."}
{"code": "public DocsGetQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of documents to return. By default, all documents."}
{"code": "private int indexOf(int tabId){\n  return mTabIdList.indexOf(tabId);\n}\n", "nl": "Finds the index of the given Tab ID."}
{"code": "protected boolean receiveAndExecute(SpaceDataEventListener eventListener) throws Throwable, TransactionException {\n  Object template=getReceiveTemplate();\n  if (triggerOperationHandler != null) {\n    Object trigger;\n    try {\n      trigger=triggerOperationHandler.triggerReceive(template,getGigaSpace(),receiveTimeout);\n    }\n catch (    SpaceInterruptedException e) {\n      return false;\n    }\n    if (logger.isTraceEnabled()) {\n      logger.trace(message(\"Trigger operation handler returned [\" + trigger + \"]\"));\n    }\n    if (trigger == null) {\n      return false;\n    }\n    if (triggerOperationHandler.isUseTriggerAsTemplate()) {\n      template=trigger;\n    }\n  }\n  if (this.getTransactionManager() != null) {\n    TransactionStatus status=this.getTransactionManager().getTransaction(this.getTransactionDefinition());\n    boolean messageReceived;\n    try {\n      messageReceived=doReceiveAndExecute(eventListener,template,status);\n    }\n catch (    RuntimeException ex) {\n      rollbackOnException(status,ex);\n      throw ex;\n    }\ncatch (    Error err) {\n      rollbackOnException(status,err);\n      throw err;\n    }\n    if (!status.isCompleted()) {\n      if (!messageReceived || status.isRollbackOnly()) {\n        this.getTransactionManager().rollback(status);\n      }\n else {\n        this.getTransactionManager().commit(status);\n      }\n    }\n    return messageReceived;\n  }\n  return doReceiveAndExecute(eventListener,template,null);\n}\n", "nl": "Execute the listener for a message received from the given consumer, wrapping the entire operation in an external transaction if demanded."}
{"code": "@Override public List<WebElement> findElementsByLinkText(String linkText){\n  return ((FindsByLinkText)super.getWrappedDriver()).findElementsByLinkText(linkText);\n}\n", "nl": "Finds elements by link text."}
{"code": "@NotNull public static String ensureNamespaceImported(@NotNull XmlFile file,@NotNull String namespaceUri,@Nullable String suggestedPrefix){\n  final XmlTag rootTag=file.getRootTag();\n  assert rootTag != null;\n  final XmlElementFactory elementFactory=XmlElementFactory.getInstance(file.getProject());\n  String prefix=rootTag.getPrefixByNamespace(namespaceUri);\n  if (prefix != null) {\n    return prefix;\n  }\n  ApplicationManager.getApplication().assertWriteAccessAllowed();\n  if (suggestedPrefix != null) {\n    prefix=suggestedPrefix;\n  }\n else   if (TOOLS_URI.equals(namespaceUri)) {\n    prefix=TOOLS_PREFIX;\n  }\n else   if (ANDROID_URI.equals(namespaceUri)) {\n    prefix=ANDROID_NS_NAME;\n  }\n else {\n    prefix=APP_PREFIX;\n  }\n  if (rootTag.getAttribute(XMLNS_PREFIX + prefix) != null) {\n    String base=prefix;\n    for (int i=2; ; i++) {\n      prefix=base + Integer.toString(i);\n      if (rootTag.getAttribute(XMLNS_PREFIX + prefix) == null) {\n        break;\n      }\n    }\n  }\n  String name=XMLNS_PREFIX + prefix;\n  final XmlAttribute xmlnsAttr=elementFactory.createXmlAttribute(name,namespaceUri);\n  final XmlAttribute[] attributes=rootTag.getAttributes();\n  XmlAttribute next=attributes.length > 0 ? attributes[0] : null;\n  for (  XmlAttribute attribute : attributes) {\n    String attributeName=attribute.getName();\n    if (!attributeName.startsWith(XMLNS_PREFIX) || attributeName.compareTo(name) > 0) {\n      next=attribute;\n      break;\n    }\n  }\n  if (next != null) {\n    rootTag.addBefore(xmlnsAttr,next);\n  }\n else {\n    rootTag.add(xmlnsAttr);\n  }\n  return prefix;\n}\n", "nl": "Ensures that the given namespace is imported in the given XML document."}
{"code": "public NotIsolatedAnalysis(DirectedGraph<Unit> dg,LatestComputation latest,Map<Unit,EquivalentValue> equivRhsMap){\n  this(dg,latest,equivRhsMap,new ArrayPackedSet<EquivalentValue>(new CollectionFlowUniverse<EquivalentValue>(equivRhsMap.values())));\n}\n", "nl": "Automatically performs the Isolation-analysis on the graph <code>dg</code> using the Latest-computation <code>latest</code>.<br> the <code>equivRhsMap</code> is only here to avoid doing these things again..."}
{"code": "public void changeCurrentItem(int indexToChange){\n  if (indexToChange < 0 || indexToChange > spaceItems.size())   throw new ArrayIndexOutOfBoundsException(\"Please be more careful, we do't have such item : \" + indexToChange);\n else {\n    updateSpaceItems(indexToChange);\n  }\n}\n", "nl": "Change current selected item to given index"}
{"code": "@Deployment(resources={\"process/errorHandling.bpmn20.xml\"}) public void testCamelRouteWorksAsIntended() throws Exception {\n  Map<String,Object> variables=new HashMap<String,Object>();\n  variables.put(\"routing\",Routing.DEFAULT);\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"ErrorHandling\",variables);\n  Job job=managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(job);\n  managementService.executeJob(job.getId());\n  Thread.sleep(WAIT);\n  assertEquals(\"Process instance not completed\",0,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n}\n", "nl": "Process instance should be removed after completion. Works as intended, if no exception interrupts the Camel route."}
{"code": "@Override public boolean equals(Object object){\n  if (object == this) {\n    return true;\n  }\n  if (object instanceof MultivariateSummaryStatistics == false) {\n    return false;\n  }\n  MultivariateSummaryStatistics other=(MultivariateSummaryStatistics)object;\n  return other.getN() == getN() && MathArrays.equalsIncludingNaN(other.getGeometricMean(),getGeometricMean()) && MathArrays.equalsIncludingNaN(other.getMax(),getMax()) && MathArrays.equalsIncludingNaN(other.getMean(),getMean()) && MathArrays.equalsIncludingNaN(other.getMin(),getMin()) && MathArrays.equalsIncludingNaN(other.getSum(),getSum()) && MathArrays.equalsIncludingNaN(other.getSumSq(),getSumSq()) && MathArrays.equalsIncludingNaN(other.getSumLog(),getSumLog()) && other.getCovariance().equals(getCovariance());\n}\n", "nl": "Returns true iff <code>object</code> is a <code>MultivariateSummaryStatistics</code> instance and all statistics have the same values as this."}
{"code": "private void processResultFromGallery(int destType,Intent intent){\n  Uri uri=intent.getData();\n  if (uri == null) {\n    if (croppedUri != null) {\n      uri=croppedUri;\n    }\n else {\n      this.failPicture(\"null data from photo library\");\n      return;\n    }\n  }\n  int rotate=0;\n  String fileLocation=FileHelper.getRealPath(uri,this.cordova);\n  Log.d(LOG_TAG,\"File locaton is: \" + fileLocation);\n  if (this.mediaType != PICTURE) {\n    this.callbackContext.success(fileLocation);\n  }\n else {\n    if (this.targetHeight == -1 && this.targetWidth == -1 && (destType == FILE_URI || destType == NATIVE_URI) && !this.correctOrientation) {\n      this.callbackContext.success(uri.toString());\n    }\n else {\n      String uriString=uri.toString();\n      String mimeType=FileHelper.getMimeType(uriString,this.cordova);\n      if (!(\"image/jpeg\".equalsIgnoreCase(mimeType) || \"image/png\".equalsIgnoreCase(mimeType))) {\n        Log.d(LOG_TAG,\"I either have a null image path or bitmap\");\n        this.failPicture(\"Unable to retrieve path to picture!\");\n        return;\n      }\n      Bitmap bitmap=null;\n      try {\n        bitmap=getScaledBitmap(uriString);\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n      if (bitmap == null) {\n        Log.d(LOG_TAG,\"I either have a null image path or bitmap\");\n        this.failPicture(\"Unable to create bitmap!\");\n        return;\n      }\n      if (this.correctOrientation) {\n        rotate=getImageOrientation(uri);\n        if (rotate != 0) {\n          Matrix matrix=new Matrix();\n          matrix.setRotate(rotate);\n          try {\n            bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);\n            this.orientationCorrected=true;\n          }\n catch (          OutOfMemoryError oom) {\n            this.orientationCorrected=false;\n          }\n        }\n      }\n      if (destType == DATA_URL) {\n        this.processPicture(bitmap,this.encodingType);\n      }\n else       if (destType == FILE_URI || destType == NATIVE_URI) {\n        if ((this.targetHeight > 0 && this.targetWidth > 0) || (this.correctOrientation && this.orientationCorrected)) {\n          try {\n            String modifiedPath=this.ouputModifiedBitmap(bitmap,uri);\n            this.callbackContext.success(\"file://\" + modifiedPath + \"?\"+ System.currentTimeMillis());\n          }\n catch (          Exception e) {\n            e.printStackTrace();\n            this.failPicture(\"Error retrieving image.\");\n          }\n        }\n else {\n          this.callbackContext.success(fileLocation);\n        }\n      }\n      if (bitmap != null) {\n        bitmap.recycle();\n        bitmap=null;\n      }\n      System.gc();\n    }\n  }\n}\n", "nl": "Applies all needed transformation to the image received from the gallery."}
{"code": "public int size(){\n  return 3;\n}\n", "nl": "Returns the size of this cp_info object."}
{"code": "private static void clearReferencesRmiTargets(ClassLoader classLoader){\n  try {\n    Class<?> objectTargetClass=Class.forName(\"sun.rmi.transport.Target\");\n    Field cclField=objectTargetClass.getDeclaredField(\"ccl\");\n    cclField.setAccessible(true);\n    Class<?> objectTableClass=Class.forName(\"sun.rmi.transport.ObjectTable\");\n    Field objTableField=objectTableClass.getDeclaredField(\"objTable\");\n    objTableField.setAccessible(true);\n    Object objTable=objTableField.get(null);\n    if (objTable == null) {\n      return;\n    }\n    if (objTable instanceof Map<?,?>) {\n      Iterator<?> iter=((Map<?,?>)objTable).values().iterator();\n      while (iter.hasNext()) {\n        Object obj=iter.next();\n        Object cclObject=cclField.get(obj);\n        if (classLoader == cclObject) {\n          iter.remove();\n        }\n      }\n    }\n    Field implTableField=objectTableClass.getDeclaredField(\"implTable\");\n    implTableField.setAccessible(true);\n    Object implTable=implTableField.get(null);\n    if (implTable == null) {\n      return;\n    }\n    if (implTable instanceof Map<?,?>) {\n      Iterator<?> iter=((Map<?,?>)implTable).values().iterator();\n      while (iter.hasNext()) {\n        Object obj=iter.next();\n        Object cclObject=cclField.get(obj);\n        if (classLoader == cclObject) {\n          iter.remove();\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.log(Level.WARNING,\"Failed to clear context class loader referenced from sun.rmi.transport.Target \",e);\n  }\n}\n", "nl": "This depends on the internals of the Sun JVM so it does everything by reflection."}
{"code": "public void removeString(String word,Tuple t){\n  removeLeaf(root,word,t,0);\n}\n", "nl": "Remove a word/Tuple pair from the trie."}
{"code": "@Override public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static float readLittleEndianFloat(DataInputStream dataStream) throws IOException {\n  return Float.intBitsToFloat(readLittleEndianInt(dataStream));\n}\n", "nl": "Reads the next float from the given DataInputStream, where the data is in little endian."}
{"code": "public void addEvidence(DocumentNGramGraph dDoc,String sFinalCategory){\n  addEvidence(new Decision(dDoc,sFinalCategory,1.0,new HashMap(0)),sFinalCategory);\n}\n", "nl": "Updates the evidence of the determiner with new data, in order to correct erroneous decisions."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200638,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has changed your casting speed by using [%SkillName]."}
{"code": "@Override protected final void invalidateQuietly(final DataTag tag,final TagQualityStatus statusToAdd,final String description,final Timestamp timestamp){\n  dataTagCacheObjectFacade.addQualityFlag(tag,statusToAdd,description);\n  ((DataTagCacheObject)tag).setCacheTimestamp(timestamp);\n}\n", "nl": "To be called internally only within a dataTag synchronized block (if object in cache). Does not notify listeners. Only cache timestamp is set (others are null). Should not be made public."}
{"code": "public JsonNodeELResolver(){\n  this(false);\n}\n", "nl": "Creates a new read/write BeanELResolver."}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-3.0001,-3.0,-2.0,-1.0,0.0,1.0,2.0,3.0,4.0,10.0,11.0,12.0,12.0001};\n}\n", "nl": "Creates the default cumulative probability distribution test input values."}
{"code": "public void start() throws IOException {\n}\n", "nl": "Start the feature provider."}
{"code": "@Override public boolean isFingerprintRegistered(){\n  return impl.isFingerprintRegistered();\n}\n", "nl": "Returns <code>true</code> when the user has at least one fingerprint registered"}
{"code": "@Override public InputSource resolveEntity(String name,String publicId,String baseURI,String systemId) throws SAXException, IOException {\n  if (fEntityResolver != null) {\n    LSInput lsInput=fEntityResolver.resolveResource(XML_TYPE,null,publicId,systemId,baseURI);\n    if (lsInput != null) {\n      final String pubId=lsInput.getPublicId();\n      final String sysId=lsInput.getSystemId();\n      final String baseSystemId=lsInput.getBaseURI();\n      final Reader charStream=lsInput.getCharacterStream();\n      final InputStream byteStream=lsInput.getByteStream();\n      final String data=lsInput.getStringData();\n      final String encoding=lsInput.getEncoding();\n      InputSource inputSource=new InputSource();\n      inputSource.setPublicId(pubId);\n      inputSource.setSystemId((baseSystemId != null) ? resolveSystemId(sysId,baseSystemId) : sysId);\n      if (charStream != null) {\n        inputSource.setCharacterStream(charStream);\n      }\n else       if (byteStream != null) {\n        inputSource.setByteStream(byteStream);\n      }\n else       if (data != null && data.length() != 0) {\n        inputSource.setCharacterStream(new StringReader(data));\n      }\n      inputSource.setEncoding(encoding);\n      return inputSource;\n    }\n  }\n  return null;\n}\n", "nl": "Resolves the given resource and adapts the <code>LSInput</code> returned into an <code>InputSource</code>."}
{"code": "public static Double evaluateToDouble(String expression,Map<String,Object> vars){\n  Object result=evaluate(expression,vars);\n  if (result == null) {\n    throw new IllegalStateException(\"Result must be not null\");\n  }\n  if (!isNumeric(String.valueOf(result))) {\n    throw new IllegalStateException(\"Result must be numeric: \" + result + \", \"+ result.getClass());\n  }\n  return Double.valueOf(String.valueOf(result));\n}\n", "nl": "Evaluates the given expression. The given variables will be substituted  in the expression. Converts the result of the evaluation to a Double. Throws an IllegalStateException if the result could not be converted to a Double"}
{"code": "public void writeServer(String server) throws IOException {\n  writeHeader(HttpWriter.SERVER,server);\n}\n", "nl": "Writes out the \"Server\" header entry to the response output stream, appending \"\\r\\n\"."}
{"code": "public void resetCache(){\n  Cache.clear();\n  ElementAccessTime.clear();\n  CacheAccess.clear();\n  TimeCnt=Long.MIN_VALUE;\n}\n", "nl": "Clears the cache."}
{"code": "public void pushDebugRect(Rect rect,int color){\n  if (rect.left > rect.right) {\n    int tmp=rect.right;\n    rect.right=rect.left;\n    rect.left=tmp;\n  }\n  if (rect.top > rect.bottom) {\n    int tmp=rect.bottom;\n    rect.bottom=rect.top;\n    rect.top=tmp;\n  }\n  mRenderHost.pushDebugRect(rect,color);\n}\n", "nl": "Pushes a rectangle to be drawn on the screen on top of everything."}
{"code": "private boolean canReadFile(File file){\n  if (!file.exists()) {\n    log.info(\"File \" + file.getAbsolutePath() + \" does not exist\");\n    return false;\n  }\n  if (!file.canRead()) {\n    log.info(\"File \" + file.getAbsolutePath() + \" cannot be read\");\n    return false;\n  }\n  return true;\n}\n", "nl": "Tests whether the file exists and can be read by the application."}
{"code": "@Override public void close(){\n  unsubscribe();\n}\n", "nl": "Close the resources and unsubscribe."}
{"code": "public boolean select(Viewer viewer,Object parentElement,Object element){\n  if (element instanceof ILogEntry) {\n    ILogEntry logEntry=(ILogEntry)element;\n    return (filterDate(logEntry,startDate,endDate) && filterRevision(logEntry,startRevision,endRevision) && filterUser(logEntry,user)&& filterComment(logEntry,comment));\n  }\n  return false;\n}\n", "nl": "Returns whether the given element matches the user, comment, start and  end date of this filter."}
{"code": "@Override public void endDTD(Augmentations augs) throws XNIException {\n  fInDTD=false;\n}\n", "nl": "The end of the DTD."}
{"code": "public DividerDecoration build(){\n  return new DividerDecoration(mHeight,mLPadding,mRPadding,mColour);\n}\n", "nl": "Instantiates a DividerDecoration with the specified parameters."}
{"code": "public static boolean launchLyftApp(Context context,DeepLinkParams deepLinkParams){\n  if (!isLyftInstalled(context)) {\n    Intent intent=new Intent(Intent.ACTION_VIEW);\n    intent.setData(Uri.parse(\"https://play.google.com/store/apps/details?id=\" + LYFT_PACKAGE_NAME + \"&referrer=\"+ deepLinkParams.getClientId()));\n    context.startActivity(intent);\n    return false;\n  }\n  PackageManager packageManager=context.getPackageManager();\n  Intent i=packageManager.getLaunchIntentForPackage(LYFT_PACKAGE_NAME);\n  if (i == null) {\n    return false;\n  }\n  i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  String deepLinkString=createDeepLinkString(deepLinkParams);\n  i.setData(Uri.parse(deepLinkString));\n  context.startActivity(i);\n  return true;\n}\n", "nl": "Attempts to deeplink to the Lyft app. If Lyft is not installed on the device, the Play Store will be launched to the Lyft app details page."}
{"code": "public static boolean isFixed(InvokeExpr ie){\n  return ie instanceof StaticInvokeExpr || ie instanceof SpecialInvokeExpr || !clientOverwriteableOverwrites(ie.getMethod());\n}\n", "nl": "Returns true if a method call is fixed, i.e., assuming that all classes in the Scene resemble library code, then client code cannot possible overwrite the called method. This is trivially true for InvokeStatic and InvokeSpecial, but can also hold for virtual invokes if all possible call targets in the library cannot be overwritten."}
{"code": "public EqIOException(final Throwable e){\n  super(e);\n}\n", "nl": "Creates a new EquipmentIO exception with the exception as content."}
{"code": "public StatusConsole(int iWidth){\n  Width=iWidth;\n}\n", "nl": "Creates a new instance of StatusConsole"}
{"code": "protected NewsfeedGetBannedQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "\"1\" - return extra information about users and communities"}
{"code": "public void hideToolbar(){\n  hideToolbar(true);\n}\n", "nl": "Hides the toolbar and clears the selection on the screen."}
{"code": "public static String joinPath(String... paths){\n  if (paths.length == 0) {\n    return \"\";\n  }\n else {\n    String output=paths[0];\n    for (int i=1; i < paths.length; i++) {\n      output=joinPath(output,paths[i]);\n    }\n    return output;\n  }\n}\n", "nl": "IO combining paths"}
{"code": "PacketSpec(PacketSpecBuilder builder){\n  this.name=builder.name;\n  this.types=ImmutableMap.copyOf(builder.types);\n  this.handler=builder.handler;\n}\n", "nl": "Creates a finalized immutable packet from the builder"}
{"code": "private void drawablesSelected(List<File> files){\n  Array<FileHandle> fileHandles=new Array<>();\n  for (  File file : files) {\n    fileHandles.add(new FileHandle(file));\n  }\n  drawablesSelected(fileHandles);\n}\n", "nl": "Called when a selection of drawables has been chosen from the newDrawablesDialog(). Adds the new drawables to the project."}
{"code": "public PokemonGo(OkHttpClient client){\n  this(client,new SystemTimeImpl(),hash(UUID.randomUUID().toString()));\n}\n", "nl": "Instantiates a new Pokemon go. Deprecated: specify a time implementation"}
{"code": "public static void main(String[] args){\n  In in;\n  String urlName=\"http://introcs.cs.princeton.edu/stdlib/InTest.txt\";\n  System.out.println(\"readAll() from URL \" + urlName);\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(urlName);\n    System.out.println(in.readAll());\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println(\"readLine() from URL \" + urlName);\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(urlName);\n    while (!in.isEmpty()) {\n      String s=in.readLine();\n      System.out.println(s);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println(\"readString() from URL \" + urlName);\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(urlName);\n    while (!in.isEmpty()) {\n      String s=in.readString();\n      System.out.println(s);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println(\"readLine() from current directory\");\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(\"./InTest.txt\");\n    while (!in.isEmpty()) {\n      String s=in.readLine();\n      System.out.println(s);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println(\"readLine() from relative path\");\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(\"../stdlib/InTest.txt\");\n    while (!in.isEmpty()) {\n      String s=in.readLine();\n      System.out.println(s);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println(\"readChar() from file\");\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(\"InTest.txt\");\n    while (!in.isEmpty()) {\n      char c=in.readChar();\n      System.out.print(c);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println();\n  System.out.println(\"readLine() from absolute OS X / Linux path\");\n  System.out.println(\"---------------------------------------------------------------------------\");\n  in=new In(\"/n/fs/introcs/www/java/stdlib/InTest.txt\");\n  try {\n    while (!in.isEmpty()) {\n      String s=in.readLine();\n      System.out.println(s);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n  System.out.println(\"readLine() from absolute Windows path\");\n  System.out.println(\"---------------------------------------------------------------------------\");\n  try {\n    in=new In(\"G:\\\\www\\\\introcs\\\\stdlib\\\\InTest.txt\");\n    while (!in.isEmpty()) {\n      String s=in.readLine();\n      System.out.println(s);\n    }\n    System.out.println();\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  System.out.println();\n}\n", "nl": "Unit tests the <tt>In</tt> data type."}
{"code": "public static InputStream toInputStream(CharSequence input){\n  return toInputStream(input,Charset.defaultCharset());\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the default character encoding of the platform."}
{"code": "@Override protected void readImpl(){\n  macroPosition=readC();\n  macroXML=readS();\n}\n", "nl": "Read macro data"}
{"code": "protected boolean isEnabledForManagedResources(){\n  return true;\n}\n", "nl": "Method isEnabledForManagedResources."}
{"code": "private void applyTorqueAction(){\n  TreePath path=this.tree.getSelectionPath();\n  if (path != null) {\n    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();\n    if (node.getUserObject() instanceof SandboxBody) {\n      SandboxBody body=(SandboxBody)node.getUserObject();\n      double torque=ApplyTorqueDialog.show(ControlUtilities.getParentWindow(this));\n      if (torque != 0.0) {\nsynchronized (Simulation.LOCK) {\n          body.applyTorque(torque);\n        }\n      }\n    }\n  }\n}\n", "nl": "Applies a torque to the given body if the user accepts the input."}
{"code": "@deprecated public final void reset(String str){\n  int length=0;\n  if (str != null) {\n    length=str.length();\n  }\n  reset(str,0,length);\n}\n", "nl": "/*    "}
{"code": "public MessagesIsMessagesFromGroupAllowedQuery isMessagesFromGroupAllowed(Actor actor,int groupId,int userId){\n  return new MessagesIsMessagesFromGroupAllowedQuery(getClient(),actor,groupId,userId);\n}\n", "nl": "Returns information specifying whether a user allowed to send messages from community."}
{"code": "private static Pattern createPattern(String propertyString,boolean asBoolean){\n  Pattern pattern=null;\n  if (!asBoolean) {\n    String copyVariablesFromProperties=propertyString;\n    pattern=patternsCache.get(copyVariablesFromProperties);\n    if (pattern == null) {\n      pattern=Pattern.compile(copyVariablesFromProperties);\n      patternsCache.put(copyVariablesFromProperties,pattern);\n    }\n  }\n  return pattern;\n}\n", "nl": "Copies variables from Camel into Activiti. This method will copy the Camel body to the \"camelBody\" variable. It will copy the Camel body to individual variables within Activiti if it is of type  Map&lt;String, Object&gt; or it will copy the Object as it comes. <ul> <li>If the copyVariablesFromProperties parameter is set on the endpoint, the properties are copied instead</li> <li>If the copyCamelBodyToBodyAsString parameter is set on the endpoint, the camelBody is converted to java.lang.String and added as a camelBody variable, unless it is a Map&lt;String, Object&gt;</li> <li>If the copyVariablesFromHeader parameter is set on the endpoint, each Camel Header will be copied to an individual variable within Activiti.</li> </ul>"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set mode=\");\n  String mode=np.getLabelRespectCase();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setMode(Comparer.COMPARISON_MODE.valueOfIgnoreCase(mode));\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected MarketAddQuery price(float value){\n  return unsafeParam(\"price\",value);\n}\n", "nl": "Item price"}
{"code": "public boolean isSuccessful(){\n  return code >= 200 && code < 300;\n}\n", "nl": "Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted."}
{"code": "@RequestMapping(value=\"/\",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<AuthorDTO> create(@RequestBody AuthorDTO authorDTO) throws URISyntaxException {\n  log.debug(\"Create AuthorDTO : {}\",authorDTO);\n  if (authorDTO.isIdSet()) {\n    return ResponseEntity.badRequest().header(\"Failure\",\"Cannot create Author with existing ID\").body(null);\n  }\n  AuthorDTO result=authorDTOService.save(authorDTO);\n  return ResponseEntity.created(new URI(\"/api/authors/\" + result.id)).body(result);\n}\n", "nl": "Create a new Author."}
{"code": "int observerCount(){\n  return observers.get().length;\n}\n", "nl": "Returns the number of current observers."}
{"code": "private Map<String,List<Experiment.ID>> prepareResponseEntity(List<Experiment.ID> experimentIDs){\n  Map<String,List<Experiment.ID>> responseEntity=new HashMap<>();\n  responseEntity.put(\"experimentIDs\",experimentIDs);\n  return responseEntity;\n}\n", "nl": "Wraps the response list into a map to add it to the JSON key \"experimentIDs\"."}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "private void onResume(){\n  mSubscription=mSubscription.isUnsubscribed() ? new CompositeSubscription() : mSubscription;\n  Map<Integer,Observable> observables=mCache.getObservables(mUUID);\n  for (  Map.Entry<Integer,Observable> entry : observables.entrySet()) {\n    if (!mDispatchedObservablesHistory.contains(entry.getKey())) {\n      dispatchObservableToHost(entry.getKey(),entry.getValue());\n    }\n  }\n}\n", "nl": "Called when the host is being resumed after going invisible, and anyway after any initialisation of the host."}
{"code": "public void startNumber(){\n}\n", "nl": "Indicates the beginning of a number in the JSON input. This method will be called when reading the first character of the number."}
{"code": "public static PreResponse buildErrorPreResponse(Throwable throwable){\n  ResponseContext responseContext=new ResponseContext(new LinkedHashMap<>());\n  if (throwable instanceof ResponseException) {\n    ResponseException responseException=(ResponseException)throwable;\n    responseContext.put(ResponseContextKeys.STATUS.getName(),responseException.getStatusCode());\n    responseContext.put(ResponseContextKeys.ERROR_MESSAGE.getName(),responseException.getReason());\n  }\n else {\n    responseContext.put(ResponseContextKeys.STATUS.getName(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());\n    responseContext.put(ResponseContextKeys.ERROR_MESSAGE.getName(),throwable.getMessage());\n  }\n  return new PreResponse(new ResultSet(Collections.emptyList(),new Schema(AllGranularity.INSTANCE)),responseContext);\n}\n", "nl": "Builds the PreResponse that stores the error message. <p> A PreResponse containing just an error has an empty ResultSet, a Schema that uses the AllGranularity as a placeholder granularity, and contains in the ResponseContext the status code for the error response, and an error message."}
{"code": "private static boolean isNonLeft(int i0,int i1,int i2,int i3,double[] pts){\n  double l1, l2, l4, l5, l6, angle1, angle2, angle;\n  l1=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i1 + 1],2) + Math.pow(pts[i2] - pts[i1],2));\n  l2=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i2 + 1],2) + Math.pow(pts[i3] - pts[i2],2));\n  l4=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i0 + 1],2) + Math.pow(pts[i3] - pts[i0],2));\n  l5=Math.sqrt(Math.pow(pts[i1 + 1] - pts[i0 + 1],2) + Math.pow(pts[i1] - pts[i0],2));\n  l6=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i0 + 1],2) + Math.pow(pts[i2] - pts[i0],2));\n  angle1=Math.acos(((l2 * l2) + (l6 * l6) - (l4 * l4)) / (2 * l2 * l6));\n  angle2=Math.acos(((l6 * l6) + (l1 * l1) - (l5 * l5)) / (2 * l6 * l1));\n  angle=(Math.PI - angle1) - angle2;\n  if (angle <= 0.0) {\n    return (true);\n  }\n else {\n    return (false);\n  }\n}\n", "nl": "Convex hull helper method for detecting a non left turn about 3 points"}
{"code": "ParamPart(String name,InputStream in,String boundary,String encoding) throws IOException {\n  super(name);\n  this.encoding=encoding;\n  PartInputStream pis=new PartInputStream(in,boundary);\n  ByteArrayOutputStream baos=new ByteArrayOutputStream(512);\n  byte[] buf=new byte[128];\n  int read;\n  while ((read=pis.read(buf)) != -1) {\n    baos.write(buf,0,read);\n  }\n  pis.close();\n  baos.close();\n  value=baos.toByteArray();\n}\n", "nl": "Constructs a parameter part; this is called by the parser."}
{"code": "public DistributedLogConfiguration(){\n  super();\n  addConfiguration(new SystemConfiguration());\n}\n", "nl": "Construct distributedlog configuration with default settings. It also loads the settings from system properties."}
{"code": "public CommitRecord(BasicLogRecord rec){\n  txNum=(Long)rec.nextVal(BIGINT).asJavaVal();\n  lsn=rec.getLSN();\n}\n", "nl": "Creates a log record by reading one other value from the log."}
{"code": "private synchronized void removeChildNode(DefaultMutableTreeNode child){\n  DefaultTreeModel model=(DefaultTreeModel)getModel();\n  model.removeNodeFromParent(child);\n}\n", "nl": "This method removes the node from its parent"}
{"code": "public static void init(Context context,boolean is_top){\n  cameraManager=new CameraManager(context,is_top);\n}\n", "nl": "Initializes this static object with the Context of the calling Activity."}
{"code": "public static List<ScreenWiggleLocusInfo> tdfRangeToScreen(String ibfFile,String chrom,int startLocation,int endLocation,List<Double> genomeToScreenMapping){\n  List<ScreenWiggleLocusInfo> screenWiggleLocusInfoList=new ArrayList<ScreenWiggleLocusInfo>();\n  for (int i=0; i < genomeToScreenMapping.size(); i++) {\n    screenWiggleLocusInfoList.add(new ScreenWiggleLocusInfo());\n  }\n  TDFReader reader=TDFReader.getReader(ibfFile);\n  for (  String dsName : reader.getDatasetNames()) {\n    String[] tokens=dsName.split(\"/\");\n    String chrName=tokens[1];\n    if (!chrName.equals(chrom) || !dsName.contains(\"raw\")) {\n      continue;\n    }\n    TDFDataset ds=reader.getDataset(dsName);\n    int tileWidth=ds.tileWidth;\n    int startTile=startLocation / tileWidth;\n    int endTile=endLocation / tileWidth;\n    for (int tileNumber=startTile; tileNumber <= endTile; tileNumber++) {\n      TDFTile tile=reader.readTile(ds,tileNumber);\n      if (tile == null) {\n      }\n else {\n        int nTracks=reader.getTrackNames().length;\n        if (nTracks > 1) {\n          throw new RuntimeException(\"More than one track found in tdf file \" + ibfFile);\n        }\n        int nBins=tile.getSize();\n        if (nBins > 0) {\n          for (int b=0; b < nBins; b++) {\n            int start=tile.getStartPosition(b);\n            int end=tile.getEndPosition(b);\n            if (start > endLocation) {\n              break;\n            }\n            if (end >= startLocation) {\n              int tileStartPos=tile.getStartPosition(b);\n              float tileValue=tile.getValue(0,b);\n              int idx=Utils.getIndexOfclosestValue(tileStartPos + 1,genomeToScreenMapping);\n              screenWiggleLocusInfoList.get(idx).increment(tileValue);\n            }\n          }\n        }\n      }\n    }\n  }\n  reader.close();\n  return screenWiggleLocusInfoList;\n}\n", "nl": "Fetch data in tdf file in given range and puts it in a list of ScreenWiggleLocusInfo.  a Adapted from dumpRange. Really it should implement iterator."}
{"code": "private void initWritingAttributes(ImmutableEndpoint endpoint){\n  Properties params=endpoint.getEndpointURI().getParams();\n  if (params != null) {\n    try {\n      String writeLeaseStr=(String)params.get(ENDPOINT_PARAM_WRITE_LEASE);\n      if (writeLeaseStr != null) {\n        writeLease=Long.valueOf(writeLeaseStr);\n      }\n      String updateOrWriteStr=(String)params.get(ENDPOINT_PARAM_UPDATE_OR_WRITE);\n      if (updateOrWriteStr != null) {\n        updateOrWrite=Boolean.valueOf(updateOrWriteStr);\n      }\n      String updateTimeoutStr=(String)params.get(ENDPOINT_PARAM_UPDATE_TIMEOUT);\n      if (updateTimeoutStr != null) {\n        updateTimeout=Long.valueOf(updateTimeoutStr);\n      }\n    }\n catch (    NumberFormatException e) {\n      throw new MuleRuntimeException(CoreMessages.failedToCreateConnectorFromUri(endpoint.getEndpointURI()),e);\n    }\n  }\n}\n", "nl": "Extract the writeLease, updateOrWrite & updateTimeout from the URI. If atrribute is missing sets the default."}
{"code": "public Set<String> keySet(){\n  return this.map.keySet();\n}\n", "nl": "Get a set of keys of the JSONObject."}
{"code": "public void finishModification() throws IOException {\n  getFileFooter().setClassificationsFooter(io.getPosition());\n  getClassificationsFooter().write(io);\n  getFileFooter().setAuxStart(io.getPosition());\n  getFileFooter().setAuxFooter(io.getPosition());\n  getAuxBlocksFooter().write(io);\n  getFileFooter().setFileFooter(io.getPosition());\n  getFileFooter().write(io);\n  close();\n}\n", "nl": "finish the rescan process"}
{"code": "@Override public void createRaster(Symbolizer symbolizer){\n}\n", "nl": "Creates the raster."}
{"code": "public void addNewVariable(){\n  EnvVar envVar=this.envMgr.addNewEnvVar(\"NewEnvVar\",String.class,null);\n  if (envVar != null) {\n    dataList.add(envVar);\n    this.fireTableDataChanged();\n  }\n}\n", "nl": "Adds the new variable."}
{"code": "public void intersectRanges(QueryTemplatePacket template){\n  for (  Map.Entry<String,Range> entry : template.getRanges().entrySet()) {\n    String fieldName=entry.getKey();\n    Range newRange=entry.getValue();\n    Range prevRange=_ranges.get(fieldName);\n    if (prevRange == null) {\n      _ranges.put(fieldName,newRange);\n    }\n else {\n      Range intersection=prevRange.intersection(newRange);\n      _ranges.put(fieldName,intersection);\n      if (intersection instanceof EmptyRange) {\n        setAlwaysEmpty(true);\n        return;\n      }\n    }\n  }\n}\n", "nl": "Merge given templates into one template. If merge fails - the templates are attached to the original exp nodes"}
{"code": "public static synchronized boolean isBodyColorRandom(){\n  return bodyColorRandom;\n}\n", "nl": "Returns true if random colors should be used for new bodies."}
{"code": "public Set<Triplet<R,C,V>> cellSet(){\n  Set<Triplet<R,C,V>> set=new HashSet<>();\n  for (  R rowKey : dataMap.keySet()) {\n    Map<C,V> row=dataMap.get(rowKey);\n    for (    C columnKey : row.keySet()) {\n      set.add(new Triplet<>(rowKey,columnKey,row.get(columnKey)));\n    }\n  }\n  return set;\n}\n", "nl": "get current set of all cells. Changes to this set do not affect the table"}
{"code": "public boolean checkRace(Race playerRace){\n  ItemTemplate template=DataManager.ITEM_DATA.getItemTemplate(id);\n  return template.getRace() == Race.PC_ALL && (race == null || race == playerRace) || template.getRace() != Race.PC_ALL && template.getRace() == playerRace;\n}\n", "nl": "Method is used to check item race; Some items having PC_ALL really are not for both races, like some foods and weapons"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_ME_TO_B(int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200544,num0,skilltarget,skillname);\n}\n", "nl": "You inflicted %num0 damage on [%SkillTarget] by using [%SkillName]."}
{"code": "public static void line(double x0,double y0,double x1,double y1){\n  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));\n  draw();\n}\n", "nl": "Draws a line segment between (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>) and (<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>)."}
{"code": "public static int growSize(int currentSize){\n  return currentSize <= 4 ? 8 : currentSize + (currentSize >> 1);\n}\n", "nl": "Given the current size of an array, returns an ideal size to which the array should grow. This is typically double the given size, but should not be relied upon to do so in the future."}
{"code": "public void watchMonitoredDataCache(PreferenceChangeListener pcl){\n  addListener(INT_KEY_MONDATA_CACHE,pcl);\n}\n", "nl": "Registers a listener for changes of size of cache for monitored data."}
{"code": "private double correlationOfFeature(String dataFile,String[] features,int indVarColNumber,int[] X,int x,int rowIni,int rowEnd){\n  double corXminusx;\n  Regression reg=new Regression();\n  int j=0;\n  int[] Xminusx=new int[X.length - 1];\n  for (int i=0; i < X.length; i++)   if (X[i] != x)   Xminusx[j++]=X[i];\n  reg.multipleLinearRegression(dataFile,indVarColNumber,Xminusx,features,interceptTerm,rowIni,rowEnd);\n  corXminusx=reg.getCorrelation();\n  return corXminusx;\n}\n", "nl": "Correlation of X minus a feature x which is part of the set X: J(X_k - x_i)"}
{"code": "protected void filterColumns(){\n  if (m_parent == null)   return;\n  for (int i=0; i < m_pnames.size(); ++i) {\n    String name=(String)m_pnames.get(i);\n    Column col=m_parent.getColumn(name);\n    boolean contained=m_names.contains(name);\n    boolean removedFromParent=(col == null);\n    if (removedFromParent || !m_colFilter.include(col,name) || contained) {\n      m_pnames.remove(i--);\n      if (!contained) {\n        ((ColumnEntry)m_entries.get(name)).dispose();\n        m_entries.remove(name);\n      }\n      fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),i,EventConstants.DELETE);\n    }\n  }\n  m_pnames.clear();\n  Iterator pcols=m_parent.getColumnNames();\n  for (int i=0, j=m_columns.size(); pcols.hasNext(); ++i) {\n    String name=(String)pcols.next();\n    Column col=m_parent.getColumn(i);\n    if (m_colFilter.include(col,name) && !m_names.contains(name)) {\n      m_pnames.add(name);\n      ColumnEntry entry=(ColumnEntry)m_entries.get(name);\n      if (entry == null) {\n        entry=new ColumnEntry(j++,col,new ColumnMetadata(this,name));\n        m_entries.put(name,entry);\n        fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),i,EventConstants.INSERT);\n      }\n else {\n        entry.colnum=j++;\n      }\n      m_lastCol=m_columns.size() - 1;\n    }\n  }\n}\n", "nl": "Determines which columns are inherited from the backing parent table."}
{"code": "public void deactivate(){\n  if (myActive) {\n    getRenderingQueue().cancelAllUpdates();\n    ResourceNotificationManager manager=ResourceNotificationManager.getInstance(myFile.getProject());\n    manager.removeListener(this,myFacet,myFile,myConfiguration);\n    myConfigurationModificationCount=myConfiguration.getModificationCount();\n    myConfiguration.removeListener(myConfigurationListener);\n    myActive=false;\n  }\n}\n", "nl": "Notify model that it's not active. This means it can stop watching for events etc. It may be activated again in the future."}
{"code": "public PickRequest withAllowedMimeType(@Nullable final String pAllowedMimeType){\n  this.mMimeType=pAllowedMimeType == null ? QiPick.MIME_TYPE_IMAGES_ALL : pAllowedMimeType;\n  return this;\n}\n", "nl": "Set MIME type of files that can be picked. It is the only way for pre-KitKat (API 19)"}
{"code": "public boolean init(StepMetaInterface smi,StepDataInterface sdi){\n  meta=(MDKeyGenStepMeta)smi;\n  data=(MDKeyGenStepData)sdi;\n  return super.init(smi,sdi);\n}\n", "nl": "Initialize and do work where other steps need to wait for..."}
{"code": "public VideoGetCommentsQuery sort(VideoGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public DistributedLogClientBuilder serverSet(ServerSet serverSet){\n  DistributedLogClientBuilder newBuilder=newBuilder(this);\n  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(serverSet);\n  newBuilder._enableRegionStats=false;\n  return newBuilder;\n}\n", "nl": "Serverset to access proxy services."}
{"code": "public CM_L2AUTH_LOGIN_CHECK(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_L2AUTH_LOGIN_CHECK </tt> packet"}
{"code": "private boolean canShowLoaderView(int deltaY){\n  final int itemsCount=getCount();\n  if (itemsCount < 0) {\n    return false;\n  }\n  final int viewsCount=getChildCount();\n  final int firstVisibleItem=getFirstVisiblePosition();\n  final int lastVisibleItem=getLastVisiblePosition();\n  if (lastVisibleItem - firstVisibleItem + 1 >= itemsCount)   return false;\n  final int lastViewBottom=getChildAt(viewsCount - 1).getBottom();\n  final int listBottom=getHeight() - getListPaddingBottom();\n  return (lastVisibleItem >= itemsCount - 1 && lastViewBottom == listBottom && deltaY < 0);\n}\n", "nl": "Checks if the load footer can be showing?"}
{"code": "@GET @Path(\"{experimentID}/events\") @Produces(TEXT_PLAIN) @ApiOperation(value=\"Export all event records for an experiment\",notes=\"A wrapper for POST API with default parameters\",response=StreamingOutput.class) @Timed public Response exportActions_get(@PathParam(\"experimentID\") @ApiParam(value=\"Experiment ID\") final Experiment.ID experimentID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  if (authorizationHeader != null) {\n    Username userName=authorization.getUser(authorizationHeader);\n    Experiment experiment=experiments.getExperiment(experimentID);\n    if (experiment == null) {\n      throw new ExperimentNotFoundException(experimentID);\n    }\n    authorization.checkUserPermissions(userName,experiment.getApplicationName(),READ);\n  }\n  return exportActions(experimentID,new Parameters(),authorizationHeader);\n}\n", "nl": "Export all events for the specified experiment, including both actions and impressions. Returns a tab-delimited text file."}
{"code": "protected int generateInteger(String value,String parameterName) throws BadApiRequestException {\n  try {\n    return value == null ? 0 : Integer.parseInt(value);\n  }\n catch (  NumberFormatException nfe) {\n    LOG.debug(INTEGER_INVALID.logFormat(value,parameterName),nfe);\n    throw new BadApiRequestException(INTEGER_INVALID.logFormat(value,parameterName),nfe);\n  }\n}\n", "nl": "Parses the requested input String by converting it to an integer, while treating null as zero."}
{"code": "public void associateAsyncPrettyPrinterWithId(String requestId,AsyncPrettyPrinter asyncPrettyPrinter){\n  if (mRequestIdMap.put(requestId,asyncPrettyPrinter) != null) {\n    throw new IllegalArgumentException(\"cannot associate different \" + \"pretty printers with the same request id: \" + requestId);\n  }\n}\n", "nl": "Associates an asynchronous pretty printer with a response request id The pretty printer will be used to pretty print the response body that has the particular request id"}
{"code": "@Override public void dataChanged(FieldIdEnum changedField){\n  updateSymbol();\n}\n", "nl": "Data changed."}
{"code": "public void zoomIn(){\n  MPPointF center=mViewPortHandler.getContentCenter();\n  mViewPortHandler.zoomIn(center.x,-center.y,mZoomInMatrixBuffer);\n  mViewPortHandler.refresh(mZoomInMatrixBuffer,this,false);\n  MPPointF.recycleInstance(center);\n  calculateOffsets();\n  postInvalidate();\n}\n", "nl": "Zooms in by 1.4f, into the charts center. center."}
{"code": "public Builder reorderColumns(String... newOrder){\n  return transform(new ReorderColumnsTransform(newOrder));\n}\n", "nl": "Reorder the columns using a partial or complete new ordering. If only some of the column names are specified for the new order, the remaining columns will be placed at the end, according to their current relative ordering"}
{"code": "@Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {\n  if (fEntityResolver != null) {\n    LSInput inputSource=resourceIdentifier == null ? fEntityResolver.resolveResource(null,null,null,null,null) : fEntityResolver.resolveResource(getType(resourceIdentifier),resourceIdentifier.getNamespace(),resourceIdentifier.getPublicId(),resourceIdentifier.getLiteralSystemId(),resourceIdentifier.getBaseSystemId());\n    if (inputSource != null) {\n      String publicId=inputSource.getPublicId();\n      String systemId=inputSource.getSystemId();\n      String baseSystemId=inputSource.getBaseURI();\n      InputStream byteStream=inputSource.getByteStream();\n      Reader charStream=inputSource.getCharacterStream();\n      String encoding=inputSource.getEncoding();\n      String data=inputSource.getStringData();\n      XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,baseSystemId);\n      if (charStream != null) {\n        xmlInputSource.setCharacterStream(charStream);\n      }\n else       if (byteStream != null) {\n        xmlInputSource.setByteStream(byteStream);\n      }\n else       if (data != null && data.length() != 0) {\n        xmlInputSource.setCharacterStream(new StringReader(data));\n      }\n      xmlInputSource.setEncoding(encoding);\n      return xmlInputSource;\n    }\n  }\n  return null;\n}\n", "nl": "Resolves an external parsed entity. If the entity cannot be resolved, this method should return null."}
{"code": "@Override protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {\n  Class<?> clazz=Class.forName(objectStreamClass.getName(),false,classLoader);\n  if (clazz != null) {\n    return clazz;\n  }\n else {\n    return super.resolveClass(objectStreamClass);\n  }\n}\n", "nl": "Resolve a class specified by the descriptor using the specified ClassLoader or the super ClassLoader."}
{"code": "public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){\n  Window window=activity.getWindow();\n  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);\n  View mChildView=mContentView.getChildAt(0);\n  if (mChildView != null) {\n    ViewCompat.setFitsSystemWindows(mChildView,false);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    int statusBarHeight=getStatusBarHeight(activity);\n    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n      if (hideStatusBarBackground) {\n        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        window.setStatusBarColor(COLOR_TRANSLUCENT);\n      }\n else {\n        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));\n      }\n      if (mChildView != null) {\n        ViewCompat.requestApplyInsets(mChildView);\n      }\n    }\n else {\n      ViewGroup mDecorView=(ViewGroup)window.getDecorView();\n      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {\n        mChildView=mDecorView.getChildAt(0);\n        mContentView.removeView(mChildView);\n        mChildView=mContentView.getChildAt(0);\n        if (mChildView != null) {\n          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();\n          if (lp != null && lp.topMargin >= statusBarHeight) {\n            lp.topMargin-=statusBarHeight;\n            mChildView.setLayoutParams(lp);\n          }\n        }\n        mDecorView.setTag(false);\n      }\n    }\n  }\n}\n", "nl": "change to full screen mode"}
{"code": "public GroupsSearchQuery market(Boolean value){\n  return unsafeParam(\"market\",value);\n}\n", "nl": "Set market"}
{"code": "@Override public Element createElementNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {\n  return new PSVIElementNSImpl(this,namespaceURI,qualifiedName,localpart);\n}\n", "nl": "Create an element with PSVI information"}
{"code": "protected Session(HttpServletRequest request){\n  super(GigaSessionManager.this,request);\n  _data=new SessionData(getClusterId());\n  _data.setMaxIdleMs(TimeUnit.SECONDS.toMillis(_dftMaxIdleSecs));\n  _data.setExpiryTime(getMaxInactiveInterval() < 0 ? Long.MAX_VALUE : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(getMaxInactiveInterval())));\n  _data.setCookieSet(0);\n  Enumeration<String> attributeNames=getAttributeNames();\n  HashMap<String,Object> attributes=new HashMap<String,Object>();\n  while (attributeNames.hasMoreElements()) {\n    String nextAttribute=attributeNames.nextElement();\n    attributes.put(nextAttribute,request.getAttribute(nextAttribute));\n  }\n  _data.setAttributeMap(attributes);\n  if (Log.getLog().isDebugEnabled())   Log.getLog().debug(\"New Session from request, \" + _data.toStringExtended());\n}\n", "nl": "Session from a request."}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"find read=\");\n  String regularExpression=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  Pattern pattern=Pattern.compile(regularExpression);\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  for (int row=0; row < viewer.getAlignment().getNumberOfSequences(); row++) {\n    Lane lane=viewer.getAlignment().getLane(row);\n    Matcher matcher=pattern.matcher(lane.getName());\n    if (matcher.find()) {\n      final Alignment alignment=viewer.getAlignment();\n      int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(lane.getFirstNonGapPosition());\n      int firstCol=lane.getFirstNonGapPosition() - firstJump;\n      int lastCol=lane.getLastNonGapPosition() - firstJump - 1;\n      row=alignment.getRowCompressor().getRow(row);\n      viewer.getSelectedBlock().select(row,firstCol,row,lastCol,alignment.isTranslate());\n      System.err.println(\"Found: \" + lane.getName());\n      executeImmediately(\"zoom axis=both what=selection;\");\n      return;\n    }\n  }\n  System.err.println(\"No match\");\n}\n", "nl": "parses the given command and executes it"}
{"code": "public BigReal(char[] in,int offset,int len,MathContext mc){\n  d=new BigDecimal(in,offset,len,mc);\n}\n", "nl": "Build an instance from a characters representation."}
{"code": "public static DhisHttpResponse httpGET(String requestURL,boolean authorize,String username,String password,Map<String,String> headers,int timeout,boolean processResponse) throws Exception {\n  DefaultHttpClient httpclient=null;\n  DhisHttpResponse dhisHttpResponse=null;\n  HttpParams params=new BasicHttpParams();\n  try {\n    HttpConnectionParams.setConnectionTimeout(params,timeout);\n    HttpConnectionParams.setSoTimeout(params,timeout);\n    httpclient=new DefaultHttpClient(params);\n    HttpGet httpGet=new HttpGet(requestURL);\n    if (headers instanceof Map) {\n      for (      Map.Entry<String,String> e : headers.entrySet()) {\n        httpGet.addHeader(e.getKey(),e.getValue());\n      }\n    }\n    if (authorize) {\n      httpGet.setHeader(\"Authorization\",CodecUtils.getBasicAuthString(username,password));\n    }\n    HttpResponse response=httpclient.execute(httpGet);\n    if (processResponse) {\n      dhisHttpResponse=processResponse(requestURL,username,response);\n    }\n else {\n      dhisHttpResponse=new DhisHttpResponse(response,null,response.getStatusLine().getStatusCode());\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Exception occurred in the httpGET call with username \" + username,e);\n    throw e;\n  }\n finally {\n    if (httpclient != null) {\n      httpclient.getConnectionManager().shutdown();\n    }\n  }\n  return dhisHttpResponse;\n}\n", "nl": "<pre> <b>Description : </b> Method to make an http GET call to a given URL with/without authentication."}
{"code": "public JSONArray put(int index,Collection value) throws JSONException {\n  put(index,new JSONArray(value));\n  return this;\n}\n", "nl": "Put a value in the JSONArray, where the value will be a JSONArray which is produced from a Collection."}
{"code": "public Boolean shouldAllowBridgeAccess(String url){\n  return shouldAllowNavigation(url);\n}\n", "nl": "Hook for allowing page to call exec(). By default, this returns the result of shouldAllowNavigation(). It's generally unsafe to allow untrusted content to be loaded into a CordovaWebView, even within an iframe, so it's best not to touch this."}
{"code": "@Override public void addDataTag(final SourceDataTag sourceDataTag){\n  dataTagTable.put(sourceDataTag.getId(),sourceDataTag);\n}\n", "nl": "Adds a data tag to be controlled by this activator."}
{"code": "public AddAndroidActivityPath(@Nullable VirtualFile targetFolder,@Nullable File template,Map<String,Object> predefinedParameterValues,Disposable parentDisposable){\n  myTemplate=template;\n  myPredefinedParameterValues=predefinedParameterValues;\n  myParentDisposable=parentDisposable;\n  myIsNewModule=false;\n  myTargetFolder=targetFolder != null && !targetFolder.isDirectory() ? targetFolder.getParent() : targetFolder;\n}\n", "nl": "Creates a new instance of the wizard path."}
{"code": "protected void resetDateObj(DateTimeData data){\n  data.year=0;\n  data.month=0;\n  data.day=0;\n  data.hour=0;\n  data.minute=0;\n  data.second=0;\n  data.utc=0;\n  data.timezoneHr=0;\n  data.timezoneMin=0;\n}\n", "nl": "Resets object representation of date/time"}
{"code": "public static int stringMod(String string,int mod){\n  int hashCode=0;\n  if (string != null) {\n    hashCode=string.hashCode();\n    if (hashCode < 0) {\n      hashCode=Math.abs(hashCode);\n      hashCode=hashCode < 0 ? 0 : hashCode;\n    }\n  }\n  return hashCode % (mod > 0 ? mod : 1);\n}\n", "nl": "<p>Method: string mod operator,return 0~(mod-1)</p>"}
{"code": "public boolean with_arrayref(){\n  return soot.PhaseOptions.getBoolean(options,\"with-arrayref\");\n}\n", "nl": "With Array References -- . With this option enabled, array references can be considered as  common subexpressions; however, we are more conservative when  writing into an array, because array objects may be aliased. We  also assume that the application is single-threaded or that the  array references occur in a synchronized block. That is, we  assume that an array element may not be changed by other threads  between two array references."}
{"code": "public void closeThriftReader(){\n  thriftReader.close();\n}\n", "nl": "Below method will be used to close the reader"}
{"code": "public AxisLabelLayout(String group,AxisLayout layout,Rectangle2D bounds,double spacing){\n  super(group);\n  if (bounds != null)   setLayoutBounds(bounds);\n  m_layout=layout;\n  m_model=layout.getRangeModel();\n  m_axis=layout.getAxis();\n  m_scale=layout.getScale();\n  m_spacing=spacing;\n}\n", "nl": "Create a new AxisLabelLayout layout."}
{"code": "public static void updateAllForFacade(DataStore dataStore,Iterator<Update> updateIter,Set<String> tags){\n  Iterator<List<Update>> batchIter=new TimePartitioningIterator<>(updateIter,50,1,2500,Duration.millis(500L));\n  while (batchIter.hasNext()) {\n    dataStore.updateAllForFacade(batchIter.next(),tags);\n  }\n}\n", "nl": "Creates, updates or deletes zero or more pieces of content in the data store facades."}
{"code": "public boolean end(){\n  outputList.add(new ByteArrayInputStream(outputData));\n  totBytes+=outputData.length;\n  return true;\n}\n", "nl": "Marks the end of a set of data. Audio data for a single utterance should be groupd between begin/end pairs."}
{"code": "public GroupsGetRequestsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of results to return."}
{"code": "public boolean equals(Object obj){\n  return (obj instanceof ConstraintAlternatives && Constraint.equal(constraints,((ConstraintAlternatives)obj).constraints));\n}\n", "nl": "Two instances of this class are equal if they have the same constraints (ignoring order)."}
{"code": "@Nullable private static String validateTemplate(TemplateMetadata metadata,int currentMinSdk,int buildApi){\n  if (!metadata.isSupported()) {\n    return \"This template requires a more recent version of Android Studio. Please update.\";\n  }\n  int templateMinSdk=metadata.getMinSdk();\n  if (templateMinSdk > currentMinSdk && currentMinSdk >= 1) {\n    return String.format(\"This template requires a minimum SDK version of at least %1$d, and the current min version is %2$d\",templateMinSdk,currentMinSdk);\n  }\n  int templateMinBuildApi=metadata.getMinBuildApi();\n  if (templateMinBuildApi > buildApi && buildApi >= 1) {\n    return String.format(\"This template requires a build target API version of at least %1$d, and the current version is %2$d\",templateMinBuildApi,buildApi);\n  }\n  return null;\n}\n", "nl": "Validates this template to make sure it's supported"}
{"code": "public MessagesSearchQuery search(Actor actor){\n  return new MessagesSearchQuery(getClient(),actor);\n}\n", "nl": "Returns a list of the current user's private messages that match search criteria."}
{"code": "public List<CustomerReview> loadCustomerReviews(List<Product> products){\n  EntityManager em=emf.createEntityManager();\n  TypedQuery<CustomerReview> queryReviews;\n  List<CustomerReview> resReview=null;\n  try {\n    em.getTransaction().begin();\n    queryReviews=em.createQuery(\"SELECT p FROM CustomerReview p\",CustomerReview.class);\n    resReview=queryReviews.getResultList();\n    if (resReview.size() > 5) {\n      logger.info(resReview.size() + \" Customer Reviews already available in the db\");\n    }\n else {\n      new XMLParser().readCustomerReview(em,\"com/sap/espm/model/data/CustomerReviews.xml\",products);\n      em.getTransaction().commit();\n      queryReviews=em.createQuery(\"SELECT p FROM CustomerReview p\",CustomerReview.class);\n      resReview=queryReviews.getResultList();\n      logger.info(resReview.size() + \" Products loaded into the db\");\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"Exception occured\",e);\n  }\n finally {\n    em.close();\n  }\n  return resReview;\n}\n", "nl": "Load CustomerReviews to db from CustomerReivews.xml"}
{"code": "public static UByte valueOf(String value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(Short.parseShort(value)));\n}\n", "nl": "Get an instance of an <code>unsigned byte</code>"}
{"code": "public static void o(Zmat A,int w,int d){\n  int nr=A.nrow;\n  int nc=A.ncol;\n  A.getProperties();\n  boolean real=true;\n  real:   for (int i=A.bx; i <= A.rx; i++) {\n    for (int j=A.bx; j <= A.cx; j++) {\n      if (A.im[i - A.bx][j - A.bx] != 0.) {\n        real=false;\n        break real;\n      }\n    }\n  }\n  if (!real) {\n    String temp=Integer.toString(nr + A.bx - 1);\n    int rfw=temp.length() + 1;\n    int ww=w + d + 10;\n    int ncp=(Parameters.PageWidth - rfw) / ww;\n    int jl=0;\n    while (jl < nc) {\n      int ju=Math.min(nc,jl + ncp);\n      System.out.print(\"\\n\");\n      String head=\"\";\n      while (head.length() < rfw)       head=head + \" \";\n      System.out.print(head);\n      for (int j=jl; j < ju; j++) {\n        head=Integer.toString(j + A.bx);\n        while (head.length() < ww)         head=\" \" + head;\n        System.out.print(head);\n      }\n      System.out.print(\"\\n\");\n      for (int i=0; i < nr; i++) {\n        String row=Integer.toString(i + A.bx);\n        while (row.length() < rfw)         row=\" \" + row;\n        System.out.print(row);\n        for (int j=jl; j < ju; j++) {\n          String snum=DoubletoEstring(A.re[i][j],w,d);\n          if (A.im[i][j] < 0)           snum=snum + \" - \" + DoubletoEstring(-A.im[i][j],d + 6,d)+ \"i\";\n else           snum=snum + \" + \" + DoubletoEstring(A.im[i][j],d + 6,d)+ \"i\";\n          System.out.print(snum);\n        }\n        System.out.print(\"\\n\");\n      }\n      jl=jl + ncp;\n    }\n  }\n else {\n    String temp=Integer.toString(A.rx);\n    int rfw=temp.length() + 1;\n    int ncp=(Parameters.PageWidth - rfw) / w;\n    int jl=A.bx;\n    while (jl <= A.cx) {\n      int ju=Math.min(A.cx,jl + ncp - 1);\n      System.out.print(\"\\n\");\n      String head=\"\";\n      while (head.length() < rfw)       head=head + \" \";\n      System.out.print(head);\n      for (int j=jl; j <= ju; j++) {\n        head=Integer.toString(j);\n        while (head.length() < w)         head=\" \" + head;\n        System.out.print(head);\n      }\n      System.out.print(\"\\n\");\n      for (int i=A.bx; i <= A.rx; i++) {\n        String row=Integer.toString(i);\n        while (row.length() < rfw)         row=\" \" + row;\n        System.out.print(row);\n        for (int j=jl; j <= ju; j++)         System.out.print(DoubletoEstring(A.re[i - A.bx][j - A.bx],w,d));\n        System.out.print(\"\\n\");\n      }\n      jl=jl + ncp;\n    }\n  }\n}\n", "nl": "Prints a Zmat in w.d e format.  This method checks to see if the Zmat is real, in which case it prints only the real part."}
{"code": "public IteratorBuilder leaseDuration(long leaseDuration){\n  this.iteratorConfig.setLeaseDuration(leaseDuration);\n  return this;\n}\n", "nl": "The requested initial lease time on the resulting match set. Defaults to <code>FOREVER</code>."}
{"code": "protected AdamsFieldStateInterpolator<T> create(boolean newForward,FieldODEStateAndDerivative<T> newGlobalPreviousState,FieldODEStateAndDerivative<T> newGlobalCurrentState,FieldODEStateAndDerivative<T> newSoftPreviousState,FieldODEStateAndDerivative<T> newSoftCurrentState,FieldEquationsMapper<T> newMapper){\n  return new AdamsFieldStateInterpolator<T>(scalingH,reference,scaled,nordsieck,newForward,newGlobalPreviousState,newGlobalCurrentState,newSoftPreviousState,newSoftCurrentState,newMapper);\n}\n", "nl": "Create a new instance."}
{"code": "public boolean isHttps(){\n  Attribute<Boolean> isHttpsAttr=ctx.attr(AttributeKey.<Boolean>valueOf(IS_HTTPS_ATTRIBUTE_NAME));\n  Boolean isHttps=isHttpsAttr.get();\n  if (isHttps == null) {\n    return false;\n  }\n else {\n    return isHttps;\n  }\n}\n", "nl": "Returns true if this is an HTTPS request."}
{"code": "private void handleTagSubscription(Set<Long> subscriptionList,Set<Long> newTagIds,final BaseListener listener,boolean sendInitialUpdateSeperately){\n  final Map<Long,Tag> initialUpdates=new HashMap<>(subscriptionList.size());\n  ClientDataTagImpl cdt=null;\n  for (  Long tagId : subscriptionList) {\n    cdt=controller.getActiveCache().get(tagId);\n    if (sendInitialUpdateSeperately) {\n      initialUpdates.put(tagId,cdt.clone());\n    }\n  }\n  if (sendInitialUpdateSeperately && listener instanceof DataTagListener) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"handleTagSubscription() - Sending initial values to DataTagListener\");\n    }\n    Collection<ClientDataTagValue> oldFormat=new ArrayList<>(initialUpdates.size());\n    for (    Tag value : initialUpdates.values()) {\n      oldFormat.add((ClientDataTagValue)value);\n    }\n    ((DataTagListener)listener).onInitialUpdate(oldFormat);\n  }\n else   if (sendInitialUpdateSeperately && listener instanceof TagListener) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"handleTagSubscription() - Sending initial values to DataTagListener\");\n    }\n    Collection<Tag> values=initialUpdates.values();\n    ((TagListener)listener).onInitialUpdate(values);\n  }\n  for (  Long tagId : subscriptionList) {\n    cdt=controller.getActiveCache().get(tagId);\n    cdt.addUpdateListener(listener,initialUpdates.get(tagId));\n  }\n  if (!newTagIds.isEmpty()) {\n    cacheSynchronizer.subscribeTags(newTagIds);\n    fireOnNewTagSubscriptionsEvent(newTagIds);\n  }\n}\n", "nl": "Handles the listener subscription to the tags. Furthermore it triggers the topic subscription for new tag points"}
{"code": "public void startTransition(){\n  if (mViewToShow != null) {\n    ViewParent parent=mViewToShow.getParent();\n    ((ViewGroup)parent).removeView(mViewToShow);\n    addChildView(mViewToShow);\n    if (mViewToHide != null)     mViewToShow.setAlpha(0.0f);\n  }\n}\n", "nl": "Called when the animation is starting."}
{"code": "public Optional<Double> avg(){\n  if (isEmpty())   return Optional.empty();\n  return Optional.of(sum() / getEventCount());\n}\n", "nl": "Return the average of the histogram."}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public final synchronized void clear(){\n  fCatalog=null;\n}\n", "nl": "<p>Forces the cache of catalog mappings to be cleared.</p>"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_TOO_MANY_MEMBERS(int num0,String worldname1){\n  return new SM_SYSTEM_MESSAGE(1400180,num0,worldname1);\n}\n", "nl": "The %num0 player limit of %WORLDNAME1 has been exceeded."}
{"code": "@Deprecated public Potion(PotionType type,int level,boolean splash,boolean extended){\n  this(type,level,splash);\n  this.extended=extended;\n}\n", "nl": "Create a new potion of the given type and level."}
{"code": "@Override public Set<String> locateSimilarDocuments(DocumentNGramGraph dngCur){\n  String sClusterLabel=null;\n  double dSim=0.0;\n  double dPrvSim=0.0;\n  Vertex vBestCandidate=null;\n  Vertex vCur=getRootHierarchyNode(Hierarchy);\n  LinkedList<String> lPath=new LinkedList<String>();\n  lPath.add(vCur.getLabel());\n  do {\n    dPrvSim=dSim;\n    Iterator iChildren=utils.getAdjacentIncomingVertices(Hierarchy,vCur).iterator();\n    vBestCandidate=vCur;\n    if (iChildren.hasNext()) {\n      while (iChildren.hasNext()) {\n        Vertex vCandidate=(Vertex)iChildren.next();\n        double dCurSim=Double.NEGATIVE_INFINITY;\n        try {\n          initComparator();\n          dCurSim=Comparator.getSimilarityBetween(dngCur,getRepresentationFromCluster(vCandidate.getLabel())).getOverallSimilarity();\n        }\n catch (        InvalidClassException ex) {\n          System.err.println(\"Invalid document type. Ignoring...\");\n          ex.printStackTrace(System.err);\n        }\n        if (dCurSim > dSim) {\n          vBestCandidate=vCandidate;\n          dSim=dCurSim;\n        }\n      }\n    }\n    vCur=vBestCandidate;\n    sClusterLabel=vBestCandidate.getLabel();\n    lPath.add(sClusterLabel);\n  }\n while (dPrvSim < dSim);\n  System.err.println(utils.printIterable(lPath,\"->\\n\"));\n  return getDocumentIDsFromCluster(sClusterLabel);\n}\n", "nl": "Returns the set of documents of the cluster that is most appropriate, given a document graph."}
{"code": "public MulticastTimeToLive(int ttl){\n  if (ttl < 0 || ttl > MAX_TIME_TO_LIVE) {\n    throw new IllegalArgumentException(\"invalid time to live\");\n  }\n  this.ttl=ttl;\n}\n", "nl": "Creates a <code>MulticastTimeToLive</code> constraint for the given time to live value."}
{"code": "public void atan(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){\n  double[] function=new double[1 + order];\n  final double x=operand[operandOffset];\n  function[0]=FastMath.atan(x);\n  if (order > 0) {\n    final double[] q=new double[order];\n    q[0]=1;\n    final double x2=x * x;\n    final double f=1.0 / (1 + x2);\n    double coeff=f;\n    function[1]=coeff * q[0];\n    for (int n=2; n <= order; ++n) {\n      double v=0;\n      q[n - 1]=-n * q[n - 2];\n      for (int k=n - 1; k >= 0; k-=2) {\n        v=v * x2 + q[k];\n        if (k > 2) {\n          q[k - 2]=(k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];\n        }\n else         if (k == 2) {\n          q[0]=q[1];\n        }\n      }\n      if ((n & 0x1) == 0) {\n        v*=x;\n      }\n      coeff*=f;\n      function[n]=coeff * v;\n    }\n  }\n  compose(operand,operandOffset,function,result,resultOffset);\n}\n", "nl": "Compute arc tangent of a derivative structure."}
{"code": "public final void testFallBackList(){\n  try {\n    fFileManager.fallback(data);\n  }\n catch (  DataFallbackException e) {\n    fail(\"Data could not be written to the log file \" + e.getMessage());\n  }\n  boolean empty=fFileManager.isFallbackFileEmpty();\n  assertFalse(empty);\n}\n", "nl": "Tests the fallback([Collection]) method. The test will be successful when something is written in the fallback log file"}
{"code": "public void dumpBinary(ByteBuffer bb) throws IOException {\n  bb.putInt(frameData.length);\n  for (int i=0; i < frameData.length; i++) {\n    bb.putShort(frameData[i]);\n  }\n  bb.putInt(residualData.length);\n  bb.put(residualData);\n}\n", "nl": "Dumps the samples to the given ByteBuffer"}
{"code": "public List<RecognitionResult> recognize(RecognitionRequest request) throws ClarifaiException {\n  return Arrays.asList(new ClarifaiRequester<RecognitionResult[]>(connectionFactory,credentialManager,POST,\"/multiop\",RecognitionResult[].class,maxAttempts).execute(request));\n}\n", "nl": "Makes a recognition request for tags and/or embeddings."}
{"code": "public static void copyPropertiesInclude(Object from,Object to,String[] includsArray) throws Exception {\n  List<String> includesList=null;\n  if (includsArray != null && includsArray.length > 0) {\n    includesList=Arrays.asList(includsArray);\n  }\n else {\n    return;\n  }\n  Method[] fromMethods=from.getClass().getDeclaredMethods();\n  Method[] toMethods=to.getClass().getDeclaredMethods();\n  Method fromMethod=null, toMethod=null;\n  String fromMethodName=null, toMethodName=null;\n  for (int i=0; i < fromMethods.length; i++) {\n    fromMethod=fromMethods[i];\n    fromMethodName=fromMethod.getName();\n    if (!fromMethodName.contains(\"get\")) {\n      if (!fromMethodName.startsWith(\"is\")) {\n        continue;\n      }\n    }\n    String str=fromMethodName.substring(fromMethodName.startsWith(\"is\") ? 2 : 3);\n    if (!includesList.contains(str.substring(0,1).toLowerCase() + str.substring(1))) {\n      continue;\n    }\n    toMethodName=\"set\" + fromMethodName.substring(fromMethodName.startsWith(\"is\") ? 2 : 3);\n    toMethod=findMethodByName(toMethods,toMethodName);\n    if (toMethod == null) {\n      continue;\n    }\n    Object value=fromMethod.invoke(from,new Object[0]);\n    if (value == null) {\n      continue;\n    }\n    if (value instanceof Collection) {\n      @SuppressWarnings(\"rawtypes\") Collection newValue=(Collection)value;\n      if (newValue.size() <= 0) {\n        continue;\n      }\n    }\n    toMethod.invoke(to,new Object[]{value});\n  }\n}\n", "nl": "Object property value is copied, only the property value of the specified name is copied"}
{"code": "public JRakLibClient(Logger logger,String serverIP,int serverPort){\n  if (serverPort < 1 || serverPort > 65536) {\n    throw new IllegalArgumentException(\"Invalid port range.\");\n  }\n  this.logger=logger;\n  this.serverEndpoint=new InetSocketAddress(serverIP,serverPort);\n  externalQueue=new LinkedList<>();\n  internalQueue=new LinkedList<>();\n  start();\n}\n", "nl": "Creates a new JRakLibClient and connects right away."}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(getClass().getSimpleName());\n  sb.append(\" [\");\n  sb.append(\"Hash = \").append(hashCode());\n  sb.append(\", userId=\").append(userId);\n  sb.append(\", provider=\").append(provider);\n  sb.append(\", openId=\").append(openId);\n  sb.append(\"]\");\n  return sb.toString();\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table sys_user_thirdparty"}
{"code": "public static void main(String args[]){\n  if (args.length < 2) {\n    System.out.println(\"Error: Must have 2 parameters, one is config filename, \" + \"the other is the local filename to upload\");\n    return;\n  }\n  System.out.println(\"java.version=\" + System.getProperty(\"java.version\"));\n  String conf_filename=args[0];\n  String local_filename=args[1];\n  try {\n    ClientGlobal.init(conf_filename);\n    System.out.println(\"network_timeout=\" + ClientGlobal.g_network_timeout + \"ms\");\n    System.out.println(\"charset=\" + ClientGlobal.g_charset);\n    TrackerClient tracker=new TrackerClient();\n    TrackerServer trackerServer=tracker.getConnection();\n    StorageServer storageServer=null;\n    StorageClient1 client=new StorageClient1(trackerServer,storageServer);\n    NameValuePair[] metaList=new NameValuePair[1];\n    metaList[0]=new NameValuePair(\"fileName\",local_filename);\n    String fileId=client.upload_file1(local_filename,null,metaList);\n    System.out.println(\"upload success. file id is: \" + fileId);\n    int i=0;\n    while (i++ < 10) {\n      byte[] result=client.download_file1(fileId);\n      System.out.println(i + \", download result is: \" + result.length);\n    }\n    trackerServer.close();\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n", "nl": "entry point"}
{"code": "private void validateHostAddress(RegistryState state,SslTrustCertificateState sslTrust){\n  String hostname=UriUtilsExtended.extractHost(state.address);\n  X509Certificate certificate=null;\n  try {\n    certificate=KeyUtil.decodeCertificate(sslTrust.certificate);\n  }\n catch (  CertificateException e1) {\n    throw new IllegalArgumentException(String.format(\"Invalid certificate provided from host: %s\",hostname));\n  }\n  try {\n    new DefaultHostnameVerifier().verify(hostname,certificate);\n  }\n catch (  SSLException e) {\n    String errorMessage=String.format(\"Registry hostname (%s) does not match certificates CN (%s).\",hostname,sslTrust.commonName);\n    throw new IllegalArgumentException(errorMessage);\n  }\n}\n", "nl": "Validates that certificate CN equals the hostname specified by user. Docker daemon will be later instructed to find and trust this certificate only if these two matches. See: https://docs.docker.com/docker-trusted-registry/userguide/"}
{"code": "public NelderMeadSimplex(final double[] steps){\n  this(steps,DEFAULT_RHO,DEFAULT_KHI,DEFAULT_GAMMA,DEFAULT_SIGMA);\n}\n", "nl": "Build a Nelder-Mead simplex with default coefficients. The default coefficients are 1.0 for rho, 2.0 for khi and 0.5 for both gamma and sigma."}
{"code": "@Override public Filter createFilter(){\n  return new IsBetweenExtended();\n}\n", "nl": "Creates the filter."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200353,skillname);\n}\n", "nl": "You dispelled the magic effect by using [%SkillName]."}
{"code": "@Override public boolean contains(S2Cell cell){\n  return contains(cell.id());\n}\n", "nl": "This is a fast operation (logarithmic in the size of the cell union)."}
{"code": "@RequestMapping(value=\"/{id}/download/extractBinary\",method=GET) @ResponseBody public ResponseEntity<byte[]> extractBinaryFileDownload(@PathVariable Integer id){\n  Book book=bookRepository.findOne(id);\n  log.debug(\"File Download: {}\",book.getExtractFileName());\n  return ResponseEntity.ok().header(HttpHeaders.CONTENT_TYPE,book.getExtractContentType()).header(HttpHeaders.CONTENT_DISPOSITION,\"attachment; filename=\\\"\" + book.getExtractFileName() + \"\\\"\").contentLength(book.getExtractSize()).body(book.getExtractBinary());\n}\n", "nl": "File download facility for extractBinary."}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "private void blackmanHarris3sMin(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.42;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.42323 - 0.49755 * Math.cos(twoPI * i / size) + 0.07922 * Math.cos(2 * twoPI * i / size));\n}\n", "nl": "Fill an array with the values of a minimum 3-sample Blackman-Harris window function"}
{"code": "public StsdBox(RandomAccessFile fis,long pos){\n  this.fis=fis;\n  this.pos=pos;\n  findBoxAvcc();\n  findSPSandPPS();\n}\n", "nl": "Parse the sdsd box in an mp4 file fis: proper mp4 file pos: stsd box's position in the file"}
{"code": "public void evalNotifications(DispatchContext dctx,Map<String,? extends Object> context,Map<String,Object> result){\n  for (  ModelNotification notify : this.notifications) {\n    notify.callNotify(dctx,this,context,result);\n  }\n}\n", "nl": "Evaluates notifications"}
{"code": "public static Map<String,Object> testServiceLockWaitTimeoutRetryCantRecover(DispatchContext dctx,Map<String,? extends Object> context){\n  Delegator delegator=dctx.getDelegator();\n  LocalDispatcher dispatcher=dctx.getDispatcher();\n  Locale locale=(Locale)context.get(\"locale\");\n  try {\n    GenericValue testingType=EntityQuery.use(delegator).from(\"TestingType\").where(\"testingTypeId\",\"SVCLWTRTCR\").queryOne();\n    testingType.set(\"description\",\"New description for SVCLWTRTCR from Lock Wait Timeout Lock GRABBER, this should be replaced by the one in the Waiter service.\");\n    testingType.store();\n    Debug.logInfo(\"In testServiceLockWaitTimeoutRetryCantRecover (grabber) just updated SVCLWTRTCR, running sub-service in own transaction\",module);\n    Map<String,Object> waiterResult=dispatcher.runSync(\"testServiceLockWaitTimeoutRetryCantRecoverWaiter\",null,5,true);\n    if (ServiceUtil.isError(waiterResult)) {\n      return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ServiceTestLockWaitTimeoutRetryCantRecoverWaiter\",locale),null,null,waiterResult);\n    }\n    Debug.logInfo(\"In testServiceLockWaitTimeoutRetryCantRecover (grabber) successfully finished running sub-service in own transaction\",module);\n  }\n catch (  GenericServiceException e) {\n    String errMsg=\"Error running deadlock test services: \" + e.toString();\n    Debug.logError(e,errMsg,module);\n  }\ncatch (  GenericEntityException e) {\n    Debug.logError(e,\"Entity Engine Exception running lock wait timeout test main/Grabber thread: \" + e.toString(),module);\n    return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ServiceTestLockInterruptedExceptionRetryGrabber\",UtilMisc.toMap(\"errorString\",e.toString()),locale));\n  }\n  return ServiceUtil.returnSuccess();\n}\n", "nl": "NOTE that this is a funny case where the auto-retry in the service engine for the call to testServiceLockWaitTimeoutRetryCantRecoverWaiter would NOT be able to recover because it would try again given the new transaction and all, but the lock for the waiting thread would still be there... so it will fail repeatedly. TODO: there's got to be some way to do this, but how?!? :( NOTE: maybe this will work: create a list that the service engine maintains of services it will run after the current service run is complete, and AFTER it has committed or rolled back its transaction; if a service finds it has a lock wait timeout, add itself to the list for its parent service (somehow...) and off we go!"}
{"code": "public static void pickImage(Activity activity){\n  pickImage(activity,REQUEST_PICK);\n}\n", "nl": "Pick image from an Activity"}
{"code": "public static float min(final float a,final float b){\n  if (a > b) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a != b) {\n    return Float.NaN;\n  }\n  int bits=Float.floatToRawIntBits(a);\n  if (bits == 0x80000000) {\n    return a;\n  }\n  return b;\n}\n", "nl": "Compute the minimum of two values"}
{"code": "@Override public WebDriver frame(int index){\n  frameSwitcher.putFramePathOnStack(index);\n  return targetLocator.frame(index);\n}\n", "nl": "Switches to frame indicated by index and puts the frame on FrameSwitcher's stack."}
{"code": "@SuppressWarnings(\"unchecked\") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4){\n  return from(JoinPatterns.when(p1,p2,p3,p4));\n}\n", "nl": "Joins together the results from four patterns via their plans. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/and_then_when.png\" alt=\"\">"}
{"code": "private void registerDeviceStateReceiver(){\n  IntentFilter filter=new IntentFilter();\n  filter.addAction(Intent.ACTION_POWER_DISCONNECTED);\n  filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);\n  registerReceiver(mDeviceStateReceiver,filter);\n}\n", "nl": "Register a BroadcastReceiver to detect when conditions become wrong for precaching."}
{"code": "public void checkDayTimeChange(){\n  DayTime oldDayTime=this.dayTime;\n  calculateDayTime();\n  onHourChange();\n  if (oldDayTime != this.dayTime) {\n    onDayTimeChange();\n  }\n}\n", "nl": "Calculate new day time and send events on change"}
{"code": "public void testMatricesValues1(){\n  SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare));\n  RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{3.0 / 5.0,-4.0 / 5.0},{4.0 / 5.0,3.0 / 5.0}});\n  RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{3.0,0.0},{0.0,1.0}});\n  RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{4.0 / 5.0,3.0 / 5.0},{3.0 / 5.0,-4.0 / 5.0}});\n  RealMatrix u=svd.getU();\n  Assert.assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);\n  RealMatrix s=svd.getS();\n  Assert.assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);\n  RealMatrix v=svd.getV();\n  Assert.assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);\n  Assert.assertTrue(u == svd.getU());\n  Assert.assertTrue(s == svd.getS());\n  Assert.assertTrue(v == svd.getV());\n}\n", "nl": "test matrices values"}
{"code": "public boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase SERVICE_NAME:\n    return isSetServiceName();\ncase SEQUENCE_ID:\n  return isSetSequenceId();\ncase CALL_TYPE:\nreturn isSetCallType();\ncase TIMEOUT:\nreturn isSetTimeout();\n}\nthrow new IllegalStateException();\n}\n", "nl": "Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise"}
{"code": "public String createManufacturingOrders(String facilityId,Date date,String workEffortName,String description,String routingId,String orderId,String orderItemSeqId,String shipGroupSeqId,String shipmentId,GenericValue userLogin) throws GenericEntityException {\n  String workEffortId=null;\n  if (root != null) {\n    if (UtilValidate.isEmpty(facilityId)) {\n      if (orderId != null) {\n        GenericValue order=EntityQuery.use(delegator).from(\"OrderHeader\").where(\"orderId\",orderId).queryOne();\n        String productStoreId=order.getString(\"productStoreId\");\n        if (productStoreId != null) {\n          GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);\n          if (productStore != null) {\n            facilityId=productStore.getString(\"inventoryFacilityId\");\n          }\n        }\n      }\n      if (facilityId == null && shipmentId != null) {\n        GenericValue shipment=EntityQuery.use(delegator).from(\"Shipment\").where(\"shipmentId\",shipmentId).queryOne();\n        facilityId=shipment.getString(\"originFacilityId\");\n      }\n    }\n    Map<String,Object> tmpMap=root.createManufacturingOrder(facilityId,date,workEffortName,description,routingId,orderId,orderItemSeqId,shipGroupSeqId,shipmentId,true,true);\n    workEffortId=(String)tmpMap.get(\"productionRunId\");\n  }\n  return workEffortId;\n}\n", "nl": "It visits the in-memory tree that represents a bill of materials and it creates a manufacturing order for each of the nodes that needs to be manufactured."}
{"code": "public static String buildLinkHostPartAndEncode(HttpServletRequest request,HttpServletResponse response,String url,Boolean fullPath,Boolean secure,Boolean encode) throws WebAppConfigurationException, IOException {\n  boolean didFullStandard=false;\n  boolean didFullSecure=false;\n  StringBuilder newURL=new StringBuilder();\n  Boolean secureFullPathFlag=checkFullSecureOrStandard(request,response,false,fullPath,secure);\n  if (secureFullPathFlag != null) {\n    if (secureFullPathFlag) {\n      didFullSecure=true;\n    }\n else {\n      didFullStandard=true;\n    }\n    OfbizUrlBuilder builder;\n    try {\n      builder=OfbizUrlBuilder.from(request);\n    }\n catch (    GenericEntityException e) {\n      throw new IOException(e);\n    }\n    builder.buildHostPart(newURL,url,secureFullPathFlag);\n  }\n  newURL.append(url);\n  String res;\n  if (!Boolean.FALSE.equals(encode)) {\n    RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());\n    res=rh.doLinkURLEncode(request,response,newURL,false,didFullStandard,didFullSecure);\n  }\n else {\n    res=newURL.toString();\n  }\n  return res;\n}\n", "nl": "SCIPIO: Helper method, originally derived from catalog URL links, but needed repeatedly."}
{"code": "@SuppressWarnings({\"unchecked\"}) public void loadPlugins() throws Exception {\n  Path pluginsDir=stateDir.resolve(\"plugins\");\n  if (Files.exists(pluginsDir)) {\n    if (Files.isDirectory(pluginsDir) == false) {\n      throw new IllegalStateException(\"\\\"\" + pluginsDir.toAbsolutePath() + \"\\\" is not a directory\");\n    }\n    List<Path> files=new ArrayList<>();\n    try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginsDir)){\n      for (      Path sub : stream) {\n        files.add(sub);\n      }\n    }\n     for (    Path pluginDir : files) {\n      if (Files.isDirectory(pluginDir)) {\n        if (pluginDir.getFileName().toString().startsWith(\"extra\")) {\n          continue;\n        }\n        List<Path> pluginFiles=new ArrayList<>();\n        try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginDir)){\n          for (          Path sub : stream) {\n            pluginFiles.add(sub);\n          }\n        }\n         Path propFile=pluginDir.resolve(PLUGIN_PROPERTIES_FILE);\n        if (Files.exists(propFile) == false) {\n          throw new IllegalStateException(\"plugin \\\"\" + pluginDir + \"\\\" is missing the \"+ PLUGIN_PROPERTIES_FILE+ \" file\");\n        }\n        System.out.println(\"Start plugin \" + pluginDir.toAbsolutePath());\n        Properties pluginProps=new Properties();\n        try (InputStream is=Files.newInputStream(propFile)){\n          pluginProps.load(is);\n        }\n         String pluginClassName=pluginProps.getProperty(\"class\");\n        if (pluginClassName == null) {\n          throw new IllegalStateException(\"property file \\\"\" + pluginDir + \"\\\" does not have the \\\"class\\\" property\");\n        }\n        List<URL> urls=new ArrayList<>();\n        for (        Path pluginFile : pluginFiles) {\n          if (pluginFile.toString().endsWith(\".jar\") || pluginFile.toString().endsWith(\".zip\")) {\n            urls.add(pluginFile.toUri().toURL());\n          }\n        }\n        Path pluginLibDir=pluginDir.resolve(\"lib\");\n        if (Files.exists(pluginLibDir)) {\n          List<Path> pluginLibFiles=new ArrayList<>();\n          try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginLibDir)){\n            for (            Path sub : stream) {\n              pluginLibFiles.add(sub);\n            }\n          }\n           for (          Path pluginFile : pluginLibFiles) {\n            if (pluginFile.toString().endsWith(\".jar\")) {\n              urls.add(pluginFile.toUri().toURL());\n            }\n          }\n        }\n        ClassLoader loader=URLClassLoader.newInstance(urls.toArray(new URL[0]));\n        Class<? extends Plugin> pluginClass=(Class<? extends Plugin>)loader.loadClass(pluginClassName);\n        Constructor<? extends Plugin> ctor;\n        try {\n          ctor=pluginClass.getConstructor(GlobalState.class);\n        }\n catch (        NoSuchMethodException e1) {\n          throw new IllegalStateException(\"class \\\"\" + pluginClassName + \"\\\" for plugin \\\"\"+ pluginDir+ \"\\\" does not have constructor that takes GlobalState\");\n        }\n        Plugin plugin;\n        try {\n          plugin=ctor.newInstance(this);\n        }\n catch (        Exception e) {\n          throw new IllegalStateException(\"failed to instantiate class \\\"\" + pluginClassName + \"\\\" for plugin \\\"\"+ pluginDir,e);\n        }\n        if (plugins.containsKey(plugin.getName())) {\n          throw new IllegalStateException(\"plugin \\\"\" + plugin.getName() + \"\\\" appears more than once\");\n        }\n        plugins.put(plugin.getName(),plugin);\n      }\n    }\n  }\n}\n", "nl": "Load any plugins."}
{"code": "public void mouseReleased(){\n  mShowDecorations=true;\n  mSnapCandidates.clear();\n  mSimilarMargins.clear();\n}\n", "nl": "Need to be called when the mouse is released"}
{"code": "@VisibleForTesting EnumSet<FailureReason> failureReasons(Context context){\n  EnumSet<FailureReason> reasons=EnumSet.noneOf(FailureReason.class);\n  reasons.addAll(mPrecacheLauncher.failureReasons());\n  if (!mDeviceState.isPowerConnected(context))   reasons.add(FailureReason.NO_POWER);\n  if (!mDeviceState.isWifiAvailable(context))   reasons.add(FailureReason.NO_WIFI);\n  if (timeSinceLastPrecacheMs(context) < WAIT_UNTIL_NEXT_PRECACHE_MS) {\n    reasons.add(FailureReason.NOT_ENOUGH_TIME_SINCE_LAST_PRECACHE);\n  }\n  if (PrecacheService.isPrecaching())   reasons.add(FailureReason.CURRENTLY_PRECACHING);\n  return reasons;\n}\n", "nl": "Returns the set of reasons that the last prefetch attempt failed to start."}
{"code": "public boolean isFileMarker(){\n  return type == Type.FILE_MARKER;\n}\n", "nl": "Returns <code>true</code> if the log entry is a file marker (representing the file where the log was extracted)."}
{"code": "public String eatId(){\n  if (!matchId())   throw new BadSyntaxException();\n  String s=tok.sval;\n  nextToken();\n  return s;\n}\n", "nl": "Throws an exception if the current token is not an identifier. Otherwise, returns the identifier string and moves to the next token."}
{"code": "public void updateInventories(GetInventoryResponse response){\n  for (  InventoryItemOuterClass.InventoryItem inventoryItem : response.getInventoryDelta().getInventoryItemsList()) {\n    InventoryItemDataOuterClass.InventoryItemData itemData=inventoryItem.getInventoryItemData();\n    if (itemData.getPokemonData().getPokemonId() == PokemonId.MISSINGNO && itemData.getPokemonData().getIsEgg()) {\n      hatchery.addEgg(new EggPokemon(itemData.getPokemonData()));\n    }\n    if (itemData.getPokemonData().getPokemonId() != PokemonId.MISSINGNO) {\n      pokebank.addPokemon(new Pokemon(api,inventoryItem.getInventoryItemData().getPokemonData()));\n    }\n    if (itemData.getItem().getItemId() != ItemId.UNRECOGNIZED && itemData.getItem().getItemId() != ItemId.ITEM_UNKNOWN) {\n      ItemData item=itemData.getItem();\n      itemBag.addItem(new Item(item));\n    }\n    if (itemData.getCandy().getFamilyId() != PokemonFamilyIdOuterClass.PokemonFamilyId.UNRECOGNIZED && itemData.getCandy().getFamilyId() != PokemonFamilyIdOuterClass.PokemonFamilyId.FAMILY_UNSET) {\n      candyjar.setCandy(itemData.getCandy().getFamilyId(),itemData.getCandy().getCandy());\n    }\n    if (itemData.hasPlayerStats()) {\n      api.getPlayerProfile().setStats(new Stats(itemData.getPlayerStats()));\n    }\n    if (itemData.hasPokedexEntry()) {\n      pokedex.add(itemData.getPokedexEntry());\n    }\n    if (itemData.hasEggIncubators()) {\n      for (      EggIncubatorOuterClass.EggIncubator incubator : itemData.getEggIncubators().getEggIncubatorList()) {\n        incubators.add(new EggIncubator(api,incubator));\n      }\n    }\n    lastInventoryUpdate=api.currentTimeMillis();\n  }\n}\n", "nl": "Updates the inventories with the latest data."}
{"code": "public void addListener(@NotNull ConfigurationListener listener){\n  if (myListeners == null) {\n    myListeners=new ArrayList<>();\n  }\n  myListeners.add(listener);\n}\n", "nl": "Adds a listener to be notified when the configuration changes"}
{"code": "public static void restartApplicationWithIntent(Activity activity,Intent intent){\n  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n  activity.finish();\n  activity.startActivity(intent);\n  killCurrentProcess();\n}\n", "nl": "Given an Intent, restarts the app and launches a startActivity to that intent. The flags NEW_TASK and CLEAR_TASK are set if the Intent does not have them, to ensure the app stack is fully cleared. Must only be used from your error activity."}
{"code": "public void registerShield(int worldId,SiegeShield shield){\n  List<SiegeShield> mapShields=registeredShields.get(worldId);\n  if (mapShields == null) {\n    mapShields=new ArrayList<SiegeShield>();\n    registeredShields.put(worldId,mapShields);\n  }\n  mapShields.add(shield);\n}\n", "nl": "Registers geo shield for zone lookup"}
{"code": "private void saveAllHTMLToFolder(File destinationFolder){\n  if (!destinationFolder.exists()) {\n    destinationFolder.mkdirs();\n  }\n  String filename=INDEX_HTML;\n  Color backgroundColour=PrefManager.getInstance().getPrefData().getBackgroundColour();\n  ExportHTML.save(destinationFolder,filename,sldDataList,backgroundColour);\n}\n", "nl": "Save all html to folder."}
{"code": "@Override public synchronized void reset() throws IOException {\n  try {\n    in.reset();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\n}\n", "nl": "Invokes the delegate's <code>reset()</code> method."}
{"code": "public int batchSet(ObjectInfo objInfo,Map keyValues,Map failKeys,int expires) throws MyException {\n  ServerInfo server;\n  ProtoCommon.PkgHeader header;\n  byte[] bsPackage;\n  int offset;\n  Iterator it;\n  Map.Entry entry;\n  String key;\n  String value;\n  byte[] bsKey;\n  byte[] bsValue;\n  header=new ProtoCommon.PkgHeader();\n  header.key_hash_code=objInfo.getHashCode();\n  server=this.serverGroup.getServer(header.key_hash_code);\n  if (server == null) {\n    this.status=2;\n    return -1 * this.status;\n  }\n  try {\n    header.body_len=objInfo.getPackLength() + 4;\n    header.cmd=ProtoCommon.FDHT_PROTO_CMD_BATCH_SET;\n    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);\n    header.timestamp=(int)(System.currentTimeMillis() / 1000);\n    header.expires=expires;\n    it=keyValues.entrySet().iterator();\n    while (it.hasNext()) {\n      entry=(Map.Entry)it.next();\n      key=(String)entry.getKey();\n      value=(String)entry.getValue();\n      header.body_len+=8 + key.getBytes(ClientGlobal.g_charset).length + value.getBytes(ClientGlobal.g_charset).length;\n    }\n    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];\n    ProtoCommon.packHeader(header,bsPackage);\n    offset=objInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);\n    ProtoCommon.int2buff(keyValues.size(),bsPackage,offset);\n    offset+=4;\n    it=keyValues.entrySet().iterator();\n    while (it.hasNext()) {\n      entry=(Map.Entry)it.next();\n      key=(String)entry.getKey();\n      value=(String)entry.getValue();\n      bsKey=key.getBytes(ClientGlobal.g_charset);\n      bsValue=value.getBytes(ClientGlobal.g_charset);\n      ProtoCommon.int2buff(bsKey.length,bsPackage,offset);\n      offset+=4;\n      System.arraycopy(bsKey,0,bsPackage,offset,bsKey.length);\n      offset+=bsKey.length;\n      ProtoCommon.int2buff(bsValue.length,bsPackage,offset);\n      offset+=4;\n      System.arraycopy(bsValue,0,bsPackage,offset,bsValue.length);\n      offset+=bsValue.length;\n    }\n    OutputStream out=server.sock.getOutputStream();\n    out.write(bsPackage);\n    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,-1);\n    return this.parseBatchUpdate(keyValues.size(),server,pkgInfo,failKeys);\n  }\n catch (  IOException ex) {\n    System.err.println(\"server \" + server.address.getAddress().getHostAddress() + \":\"+ server.address.getPort()+ \" IOException, error msg: \"+ ex.getMessage());\n    this.serverGroup.forceClose(server);\n    this.status=5;\n    return -1 * this.status;\n  }\n finally {\n    this.serverGroup.closeServer(server);\n  }\n}\n", "nl": "set values of multi keys"}
{"code": "protected GroupsSetCallbackSettingsQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID."}
{"code": "@Override public void onHandleIntent(Intent intent){\n  assert Looper.myLooper() != Looper.getMainLooper();\n  if (!sEnableCommunication) {\n    Log.v(TAG,\"Disabled.  Ignoring intent.\");\n    return;\n  }\n  if (!mStateHasBeenRestored) {\n    restoreState();\n  }\n  if (ACTION_INITIALIZE.equals(intent.getAction())) {\n    handleInitialize();\n  }\n else   if (ACTION_REGISTER_REQUEST.equals(intent.getAction())) {\n    handleRegisterRequest(intent);\n  }\n else   if (ACTION_POST_REQUEST.equals(intent.getAction())) {\n    handlePostRequestIntent(intent);\n  }\n else {\n    Log.e(TAG,\"Got unknown action from intent: \" + intent.getAction());\n  }\n}\n", "nl": "Handles an action on a thread separate from the UI thread."}
{"code": "public WhereOperator(QueryOperator source,String columnName,QueryPlan.PredicateOperator operator,DataType value) throws QueryPlanException {\n  super(OperatorType.WHERE,source);\n  this.operator=operator;\n  this.value=value;\n  columnName=this.checkSchemaForColumn(source.getOutputSchema(),columnName);\n  this.columnIndex=this.getOutputSchema().getFieldNames().indexOf(columnName);\n}\n", "nl": "Creates a new WhereOperator that pulls from source and only returns tuples for which the predicate is satisfied."}
{"code": "public Entry(float val,int xIndex){\n  mVal=val;\n  mXIndex=xIndex;\n}\n", "nl": "A Entry represents one single entry in the chart."}
{"code": "HessenbergTransformer(final RealMatrix matrix){\n  if (!matrix.isSquare()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getRowDimension();\n  householderVectors=matrix.getData();\n  ort=new double[m];\n  cachedP=null;\n  cachedPt=null;\n  cachedH=null;\n  transform();\n}\n", "nl": "Build the transformation to Hessenberg form of a general matrix."}
{"code": "public boolean removeUser(User user){\n  if (!isSelfAdmin()) {\n    return false;\n  }\n  Iterator<Pair<User,Role>> it=users.iterator();\n  while (it.hasNext()) {\n    Pair<User,Role> pair=it.next();\n    if (user.equals(pair.getFirst())) {\n      it.remove();\n      skype.removeUserFromGroup(user,this);\n      return true;\n    }\n  }\n  return true;\n}\n", "nl": "Removes a user from this group. Group admin rights are needed."}
{"code": "public WallGetQuery(VkApiClient client){\n  super(client,\"wall.get\",GetResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- ."}
{"code": "void sLock(Object obj,long txNum){\n  Object anchor=getAnchor(obj);\n  txWaitMap.put(txNum,anchor);\nsynchronized (anchor) {\n    Lockers lks=prepareLockers(obj);\n    if (hasSLock(lks,txNum))     return;\n    try {\n      long timestamp=System.currentTimeMillis();\n      while (!sLockable(lks,txNum) && !waitingTooLong(timestamp)) {\n        avoidDeadlock(lks,txNum,S_LOCK);\n        lks.requestSet.add(txNum);\n        anchor.wait(MAX_TIME);\n        lks.requestSet.remove(txNum);\n      }\n      if (!sLockable(lks,txNum))       throw new LockAbortException();\n      lks.sLockers.add(txNum);\n      getObjectSet(txNum).add(obj);\n    }\n catch (    InterruptedException e) {\n      throw new LockAbortException(\"abort tx.\" + txNum + \" by interrupted\");\n    }\n  }\n  txWaitMap.remove(txNum);\n}\n", "nl": "Grants an slock on the specified item. If any conflict lock exists when the method is called, then the calling thread will be placed on a wait list until the lock is released. If the thread remains on the wait list for a certain amount of time, then an exception is thrown."}
{"code": "public JobManagerException(String msg,Throwable nested){\n  super(msg,nested);\n}\n", "nl": "Constructs an <code>JobManagerException</code> with the specified detail message and nested Exception."}
{"code": "public static void triggerForResourcePool(Service sender,String resourcePoolLink){\n  EpzComputeEnumerationTaskState task=new EpzComputeEnumerationTaskState();\n  task.resourcePoolLink=resourcePoolLink;\n  task.documentSelfLink=extractRpId(task);\n  Operation.createPost(sender.getHost(),EpzComputeEnumerationTaskService.FACTORY_LINK).addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE).setBody(task).setCompletion(null).sendWith(sender);\n}\n", "nl": "Triggers the enumeration task for the given resource pool. Makes sure no multiple tasks are run in parallel for the same resource pool."}
{"code": "@Override public boolean hasExpired(final Long aliveTimerId){\n  aliveTimerCache.acquireReadLockOnKey(aliveTimerId);\n  try {\n    AliveTimer aliveTimer=aliveTimerCache.get(aliveTimerId);\n    return (System.currentTimeMillis() - aliveTimer.getLastUpdate() > aliveTimer.getAliveInterval() + aliveTimer.getAliveInterval() / 3);\n  }\n  finally {\n    aliveTimerCache.releaseReadLockOnKey(aliveTimerId);\n  }\n}\n", "nl": "Check whether this alive timer has expired."}
{"code": "public static void close(){\n  out.close();\n}\n", "nl": "Closes standard output."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public GenericClassDeclSubstituted fullCopy(){\n  GenericClassDeclSubstituted tree=(GenericClassDeclSubstituted)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\nswitch (i) {\ncase 6:\n        tree.children[i]=new List();\n      continue;\n  }\n  ASTNode child=(ASTNode)children[i];\n  if (child != null) {\n    child=child.fullCopy();\n    tree.setChild(child,i);\n  }\n}\n}\nreturn tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public Message receive() throws JMSException {\n  return receive(Message.DEFAULT_TIME_TO_LIVE);\n}\n", "nl": "API method. Using default readTimeout which is  Long.MAX_VALUE. This call blocks until a message arrives, the timeout expires, or this message consumer is m_closed."}
{"code": "public EncodingException(Throwable cause){\n  super(cause);\n}\n", "nl": "Creates an <code>EncodingException</code> with the specified cause and a detail message of <tt>(cause==null ? null : cause.toString())</tt> (which typically contains the class and detail message of <tt>cause</tt>)."}
{"code": "public Object jjtAccept(MithraQLVisitor visitor,Object data){\n  return visitor.visit(this,data);\n}\n", "nl": "Accept the visitor."}
{"code": "@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {\n  boolean inExtension=inExtensionNamespace();\n  super.startElement(namespaceURI,localName,qName,atts);\n  int entryType=-1;\n  Vector entryArgs=new Vector();\n  if (namespaceURI != null && extendedNamespaceName.equals(namespaceURI) && !inExtension) {\n    if (atts.getValue(\"xml:base\") != null) {\n      String baseURI=atts.getValue(\"xml:base\");\n      entryType=Catalog.BASE;\n      entryArgs.add(baseURI);\n      baseURIStack.push(baseURI);\n      debug.message(4,\"xml:base\",baseURI);\n      try {\n        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);\n        catalog.addEntry(ce);\n      }\n catch (      CatalogException cex) {\n        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {\n          debug.message(1,\"Invalid catalog entry type\",localName);\n        }\n else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {\n          debug.message(1,\"Invalid catalog entry (base)\",localName);\n        }\n      }\n      entryType=-1;\n      entryArgs=new Vector();\n    }\n else {\n      baseURIStack.push(baseURIStack.peek());\n    }\n    if (localName.equals(\"uriSuffix\")) {\n      if (checkAttributes(atts,\"suffix\",\"uri\")) {\n        entryType=Resolver.URISUFFIX;\n        entryArgs.add(atts.getValue(\"suffix\"));\n        entryArgs.add(atts.getValue(\"uri\"));\n        debug.message(4,\"uriSuffix\",atts.getValue(\"suffix\"),atts.getValue(\"uri\"));\n      }\n    }\n else     if (localName.equals(\"systemSuffix\")) {\n      if (checkAttributes(atts,\"suffix\",\"uri\")) {\n        entryType=Resolver.SYSTEMSUFFIX;\n        entryArgs.add(atts.getValue(\"suffix\"));\n        entryArgs.add(atts.getValue(\"uri\"));\n        debug.message(4,\"systemSuffix\",atts.getValue(\"suffix\"),atts.getValue(\"uri\"));\n      }\n    }\n else {\n      debug.message(1,\"Invalid catalog entry type\",localName);\n    }\n    if (entryType >= 0) {\n      try {\n        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);\n        catalog.addEntry(ce);\n      }\n catch (      CatalogException cex) {\n        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {\n          debug.message(1,\"Invalid catalog entry type\",localName);\n        }\n else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {\n          debug.message(1,\"Invalid catalog entry\",localName);\n        }\n      }\n    }\n  }\n}\n", "nl": "The SAX <code>startElement</code> method recognizes elements from the plain catalog format and instantiates CatalogEntry objects for them."}
{"code": "public JSearchPanel createSearchPanel(boolean monitorKeystrokes){\n  JSearchPanel jsp=new JSearchPanel(m_set,m_field,monitorKeystrokes);\n  if (m_lock != null) {\n    jsp.setLock(m_lock);\n  }\n  return jsp;\n}\n", "nl": "Create a new search text panel for searching over the data."}
{"code": "public TrustSource add(File trustedCAPemFile){\n  if (trustedCAPemFile == null) {\n    throw new IllegalArgumentException(\"Trusted CA file cannot be null\");\n  }\n  String pemFileContents;\n  try {\n    pemFileContents=Files.toString(trustedCAPemFile,Charset.forName(\"UTF-8\"));\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(\"Unable to read file containing PEM-encoded trusted CAs: \" + trustedCAPemFile.getAbsolutePath(),e);\n  }\n  return add(pemFileContents);\n}\n", "nl": "Returns a new TrustSource containing the same trusted CAs as this TrustSource, plus zero or more CAs contained in the PEM-encoded File. The File may contain multiple certificates and may contain comments or other non-PEM-encoded text, as long as the PEM-encoded certificates are delimited by appropriate BEGIN_CERTIFICATE and END_CERTIFICATE text blocks. The file may contain UTF-8 characters, but the PEM-encoded certificate data itself must be US-ASCII."}
{"code": "public boolean canContainKey(Object key){\n  return (key instanceof RegistrarLease && registrarID.equals(((RegistrarLease)key).getRegistrarID()));\n}\n", "nl": "Any RegistrarLease from the same server can be in the map"}
{"code": "public AccountSaveProfileInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.saveProfileInfo\",SaveProfileInfoResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list."}
{"code": "public void addAttribute(String uri,String localName,String qName,String type,String value){\n  ensureCapacity(length + 1);\n  data[length * 5]=uri;\n  data[length * 5 + 1]=localName;\n  data[length * 5 + 2]=qName;\n  data[length * 5 + 3]=type;\n  data[length * 5 + 4]=value;\n  length++;\n}\n", "nl": "Add an attribute to the end of the list. <p> <p> For the sake of speed, this method does no checking to see if the attribute is already in the list: that is the responsibility of the application. </p>"}
{"code": "private boolean useIsSameNode(Node node){\n  if (node instanceof NodeImpl) {\n    return false;\n  }\n  Document doc=node.getNodeType() == Node.DOCUMENT_NODE ? (Document)node : node.getOwnerDocument();\n  return (doc != null && doc.getImplementation().hasFeature(\"Core\",\"3.0\"));\n}\n", "nl": "Use isSameNode() for testing node identity if the DOM implementation supports DOM Level 3 core and it isn't the Xerces implementation."}
{"code": "public void addTargetLocation(String name){\n  if (name != null) {\n    this.targetLocationSet.add(name);\n  }\n}\n", "nl": "Adds a target location to this context."}
{"code": "protected void drawYAxis(Graphics2D gc,Dimension size){\n  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  boolean doDraw=(size == null);\n  Rectangle bbox=null;\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  if (isTranspose()) {\n    if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering())     y1+=topTreeSpace;\n    if (x0 >= x1)     return;\n    final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);\n    if (numberOfSeries > 0) {\n      int longest=0;\n      for (      String series : seriesNames) {\n        String label=seriesLabelGetter.getLabel(series);\n        longest=Math.max(longest,Basic.getStringSize(gc,label,gc.getFont()).getSize().width);\n      }\n      int right=Math.max(leftMargin,longest + 5);\n      if (doDraw)       gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));\n      int numberOfDataSets=getChartData().getNumberOfSeries();\n      double yStep=(y0 - y1) / (numberOfDataSets);\n      int d=numberOfSeries - 1;\n      for (      String series : seriesNames) {\n        String label=seriesLabelGetter.getLabel(series);\n        Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();\n        int x=right - labelSize.width - 4;\n        int y=(int)Math.round(y0 - (d + 0.5) * yStep);\n        if (doDraw) {\n          if (getChartData().getChartSelection().isSelectedSeries(series)) {\n            gc.setColor(ProgramProperties.SELECTION_COLOR);\n            fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);\n          }\n          gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));\n          gc.drawString(label,x,y);\n        }\n else {\n          Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);\n          if (bbox == null)           bbox=rect;\n else           bbox.add(rect);\n        }\n        if (sgc != null) {\n          sgc.setCurrentItem(new String[]{series,null});\n          drawRect(gc,x,y,labelSize.width,labelSize.height,0);\n          sgc.clearCurrentItem();\n        }\n        d--;\n      }\n    }\n  }\n else {\n    if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering())     y1+=topTreeSpace;\n    final int numberOfClasses=(classNames == null ? 0 : classNames.length);\n    if (numberOfClasses > 0) {\n      int longest=0;\n      for (      String className : classNames) {\n        longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);\n      }\n      int right=Math.max(leftMargin,longest + 5);\n      if (doDraw)       gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));\n      double yStep=(y0 - y1) / (double)numberOfClasses;\n      int c=numberOfClasses - 1;\n      for (      String className : classNames) {\n        Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();\n        int x=right - labelSize.width - 4;\n        int y=(int)Math.round(y0 - (c + 0.5) * yStep);\n        if (doDraw) {\n          if (getChartData().getChartSelection().isSelectedClass(className)) {\n            gc.setColor(ProgramProperties.SELECTION_COLOR);\n            fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);\n          }\n          gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));\n          gc.drawString(className,x,y);\n        }\n else {\n          Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);\n          if (bbox == null)           bbox=rect;\n else           bbox.add(rect);\n        }\n        c--;\n        if (sgc != null) {\n          sgc.setCurrentItem(new String[]{null,className});\n          drawRect(gc,x,y,labelSize.width,labelSize.height,0);\n          sgc.clearCurrentItem();\n        }\n      }\n    }\n  }\n  if (size != null && bbox != null) {\n    size.setSize(bbox.width + 3,bbox.height);\n  }\n}\n", "nl": "draw the y-axis"}
{"code": "public JSONArray optJSONArray(int index){\n  Object o=opt(index);\n  return o instanceof JSONArray ? (JSONArray)o : null;\n}\n", "nl": "Get the optional JSONArray associated with an index."}
{"code": "public AudioInputStream(TargetDataLine line){\n  TargetDataLineInputStream tstream=new TargetDataLineInputStream(line);\n  format=line.getFormat();\n  frameLength=AudioSystem.NOT_SPECIFIED;\n  frameSize=format.getFrameSize();\n  if (frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {\n    frameSize=1;\n  }\n  this.stream=tstream;\n  framePos=0;\n  markpos=0;\n}\n", "nl": "Constructs an audio input stream that reads its data from the target data line indicated.  The format of the stream is the same as that of the target data line, and the length is AudioSystem#NOT_SPECIFIED."}
{"code": "@Override protected boolean readIntoBuffer(int minLength){\n  if (bufferSpaceLeft() < minLength) {\n    increaseBufferSize(minLength + currentlyInBuffer());\n  }\n else   if (buf.length - writePos < minLength) {\n    compact();\n  }\n  int readSum=0;\n  while (readSum < minLength && hasMoreData()) {\n    prepareBlock();\n    int blockSize=getBlockSize();\n    if (buf.length < writePos + blockSize) {\n      increaseBufferSize(writePos + blockSize);\n    }\n    int read=readBlock(buf,writePos);\n    if (read == 0) {\n      break;\n    }\n    writePos+=read;\n    readSum+=read;\n  }\n  if (dataProcessor != null) {\n    dataProcessor.applyInline(buf,writePos - readSum,readSum);\n  }\n  return readSum >= minLength;\n}\n", "nl": "Attempt to get more data from the input source. If less than this can be read, the possible amount will be read, but canReadMore() will return false afterwards."}
{"code": "public final void unloadAll(){\n  objects.invalidateAll();\n}\n", "nl": "Unloads all objects from the manager"}
{"code": "public JSONArray put(int index,boolean value) throws JSONException {\n  put(index,value ? Boolean.TRUE : Boolean.FALSE);\n  return this;\n}\n", "nl": "Put or replace a boolean value in the JSONArray. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out."}
{"code": "private static float interpolate(float a,float b,float t){\n  return a + (b - a) * t;\n}\n", "nl": "Linear interpolate between a and b with parameter t."}
{"code": "@Override public synchronized Throwable initCause(Throwable throwable){\n  if (fException != this) {\n    throw new IllegalStateException();\n  }\n  if (throwable == this) {\n    throw new IllegalArgumentException();\n  }\n  fException=(Exception)throwable;\n  return this;\n}\n", "nl": "Initializes the cause of this <code>XNIException</code>. The value must be an instance of <code>Exception</code> or <code>null</code>."}
{"code": "public BooleanColumn(int nrows){\n  this(nrows,nrows,false);\n}\n", "nl": "Create a new BooleanColumn."}
{"code": "@deprecated public Object quoteLiteral(String string){\n  return this.tokenizer.quoteLiteral(string);\n}\n", "nl": "/*     "}
{"code": "TestException(){\n  super();\n}\n", "nl": "Create the test exception without any message."}
{"code": "private JTree buildJTree(HelpNode root){\n  if (root == null)   return new JTree();\n  MutableTreeNode rn=new DefaultMutableTreeNode(root);\n  DefaultTreeModel model=new DefaultTreeModel(rn);\n  JTree tree=new JTree(model);\n  for (int i=0; i < root.nodes.size(); i++) {\n    addHelpNodesToTree(root.nodes.get(i),model,rn);\n  }\n  this.expandAllNodes(tree);\n  return tree;\n}\n", "nl": "Builds a new JTree from the given HelpNode tree."}
{"code": "private static float spacing(MotionEvent event){\n  float x=event.getX(0) - event.getX(1);\n  float y=event.getY(0) - event.getY(1);\n  return (float)Math.sqrt(x * x + y * y);\n}\n", "nl": "returns the distance between two pointer touch points"}
{"code": "public static int hash(double[] value){\n  return Arrays.hashCode(value);\n}\n", "nl": "Returns an integer hash code representing the given double array."}
{"code": "public void skipNode(Object node){\n  if (!super.containsNode(node))   return;\n  Object[] preds=getPredsOf(node).toArray();\n  Object[] succs=getSuccsOf(node).toArray();\n  for (  Object element : preds) {\n    for (    Object element0 : succs) {\n      if (element != element0)       super.addEdge(element,element0);\n    }\n  }\n  for (  Object element : preds) {\n    super.removeEdge(element,node);\n  }\n  for (  Object element : succs) {\n    super.removeEdge(node,element);\n  }\n  super.removeNode(node);\n}\n", "nl": "Bypass the in edge to out edge. Not delete the node"}
{"code": "@Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augmentations) throws XNIException {\n}\n", "nl": "An unparsed entity declaration."}
{"code": "@RequestMapping(value=\"/metrics\",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Metric> updateMetric(@RequestBody Metric metric) throws URISyntaxException {\n  log.debug(\"REST request to update Metric : {}\",metric);\n  if (metric.getMetricId() == null) {\n    return createMetric(metric);\n  }\n  Metric result=metricRepository.save(metric);\n  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(\"metric\",metric.getMetricId().toString())).body(result);\n}\n", "nl": "PUT  /metrics : Updates an existing metric."}
{"code": "protected boolean checkAttributes(Element currentRulePart,Element token){\n  NamedNodeMap attNodes=currentRulePart.getAttributes();\n  if (token == null)   return false;\n  for (int z=0; z < attNodes.getLength(); z++) {\n    Node el=attNodes.item(z);\n    String currentAtt=el.getNodeName();\n    String currentVal=el.getNodeValue();\n    if (!token.hasAttribute(currentAtt)) {\n      if (currentVal.equals(\"!\")) {\n        return true;\n      }\n      return false;\n    }\n    if (currentVal.equals(\"!\")) {\n      return false;\n    }\n    if (currentVal.equals(\"\")) {\n      return true;\n    }\n    if (!currentVal.startsWith(\"INLIST\") && !currentVal.startsWith(\"INFSTLIST\") && !currentVal.startsWith(\"!INLIST\")&& !currentVal.startsWith(\"!INFSTLIST\")) {\n      if (!currentVal.startsWith(\"!\")) {\n        if (!token.getAttribute(currentAtt).equals(currentVal)) {\n          return false;\n        }\n      }\n else {\n        currentVal=currentVal.substring(1,currentVal.length());\n        if (token.getAttribute(currentAtt).equals(currentVal)) {\n          return false;\n        }\n      }\n    }\n else {\n      return checkList(currentVal,token.getAttribute(currentAtt));\n    }\n  }\n  return true;\n}\n", "nl": "checks rule part with tag \"attributes\"; checks if the MaryXML attributes and values of current token are the same as in the rule"}
{"code": "public SimpleFileFilter(String ext,String desc){\n  addExtension(ext);\n  this.desc=desc;\n}\n", "nl": "Create a new SimpleFileFilter."}
{"code": "public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,long endTime) throws JobManagerException {\n  schedule(serviceName,context,startTime,frequency,interval,-1,endTime);\n}\n", "nl": "Schedule a job to start at a specific time with specific recurrence info"}
{"code": "public final static byte[] decode(String str){\n  int sLen=str != null ? str.length() : 0;\n  if (sLen == 0)   return new byte[0];\n  int sepCnt=0;\n  for (int i=0; i < sLen; i++)   if (IA[str.charAt(i)] < 0)   sepCnt++;\n  if ((sLen - sepCnt) % 4 != 0)   return null;\n  int pad=0;\n  for (int i=sLen; i > 1 && IA[str.charAt(--i)] <= 0; )   if (str.charAt(i) == '=')   pad++;\n  int len=((sLen - sepCnt) * 6 >> 3) - pad;\n  byte[] dArr=new byte[len];\n  for (int s=0, d=0; d < len; ) {\n    int i=0;\n    for (int j=0; j < 4; j++) {\n      int c=IA[str.charAt(s++)];\n      if (c >= 0)       i|=c << (18 - j * 6);\n else       j--;\n    }\n    dArr[d++]=(byte)(i >> 16);\n    if (d < len) {\n      dArr[d++]=(byte)(i >> 8);\n      if (d < len)       dArr[d++]=(byte)i;\n    }\n  }\n  return dArr;\n}\n", "nl": "Decodes a BASE64 encoded <code>String</code>. All illegal characters will be ignored and can handle both strings with and without line separators.<br> <b>Note!</b> It can be up to about 2x the speed to call <code>decode(str.toCharArray())</code> instead. That will create a temporary array though. This version will use <code>str.charAt(i)</code> to iterate the string."}
{"code": "public SecureCheckTokenQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.checkToken\",TokenChecked.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.isShowLabels();\n}\n", "nl": "this is currently selected?"}
{"code": "public void push(E e){\n  checkNotNull(e);\n  Node<E> node=new Node<E>(e);\n  for (; ; ) {\n    node.next=top.get();\n    if ((top.get() == node.next) && top.compareAndSet(node.next,node)) {\n      return;\n    }\n    if (tryTransfer(e)) {\n      return;\n    }\n  }\n}\n", "nl": "Pushes an element onto the stack (in other words, adds an element at the top of this stack)."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_A_TO_ME(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200731,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] has caused you to summon %0 by using [%SkillName]."}
{"code": "public String print(String format,Object... args){\n  return String.format(format,args);\n}\n", "nl": "Prints the."}
{"code": "public void addServiceItems(ServiceMatches matches){\n  if (matches == null || matches.items == null) {\n    return;\n  }\n  for (  ServiceItem item : matches.items) {\n    serviceItems.put(item.serviceID,item);\n  }\n}\n", "nl": "Adds ServiceItems extracted from the ServiceMatches."}
{"code": "public boolean taxApplies(){\n  boolean taxApplies=false;\n  for (  ShoppingCartItem item : this) {\n    if (item.taxApplies()) {\n      taxApplies=true;\n      break;\n    }\n  }\n  return taxApplies;\n}\n", "nl": "Returns true when there are taxable items in the cart"}
{"code": "public Channel intercept(Channel channel){\n  return ClientInterceptors.intercept(channel,this);\n}\n", "nl": "Use this intercepter to trace all requests made by this client channel."}
{"code": "public void addAndRemoveEventListenerTypedNullType() throws Exception {\n  TestActivitiEventListener newListener=new TestActivitiEventListener();\n  dispatcher.addEventListener(newListener,(ActivitiEventType)null);\n  ActivitiEntityEventImpl event1=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_CREATED);\n  ActivitiEntityEventImpl event2=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_DELETED);\n  dispatcher.dispatchEvent(event1);\n  dispatcher.dispatchEvent(event2);\n  assertTrue(newListener.getEventsReceived().isEmpty());\n}\n", "nl": "Test that adding a listener with a null-type is never called."}
{"code": "@deprecated protected RbnfLenientScanner createScanner(ULocale locale,String extras){\n  RuleBasedCollator collator=null;\n  try {\n    collator=(RuleBasedCollator)Collator.getInstance(locale.toLocale());\n    if (extras != null) {\n      String rules=collator.getRules() + extras;\n      collator=new RuleBasedCollator(rules);\n    }\n    collator.setDecomposition(17);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    System.out.println(\"++++\");\n    collator=null;\n  }\n  return new RbnfLenientScannerImpl(collator,null);\n}\n", "nl": "/*    "}
{"code": "public final int yystate(){\n  return zzLexicalState;\n}\n", "nl": "Returns the current lexical state."}
{"code": "public int length(){\n  return Histogram.length() + Graph.length();\n}\n", "nl": "Returns the size of the full Document Object, by summing the Graph and Histogram sizes of the document."}
{"code": "public static float scaleToFitTargetSize(int[] dimensions,int targetWidth,int targetHeight){\n  if (dimensions.length < 2 || dimensions[0] <= 0 || dimensions[1] <= 0) {\n    throw new IllegalArgumentException(\"Expected dimensions to have length >= 2 && dimensions[0] > 0 && \" + \"dimensions[1] > 0\");\n  }\n  float scale=Math.max((float)targetWidth / dimensions[0],(float)targetHeight / dimensions[1]);\n  dimensions[0]*=scale;\n  dimensions[1]*=scale;\n  return scale;\n}\n", "nl": "Scales the provided dimension such that it is just large enough to fit the target width and height."}
{"code": "public void init(ForceSimulator fsim){\n  clear();\n  float x1=Float.MAX_VALUE, y1=Float.MAX_VALUE;\n  float x2=Float.MIN_VALUE, y2=Float.MIN_VALUE;\n  Iterator itemIter=fsim.getItems();\n  while (itemIter.hasNext()) {\n    ForceItem item=(ForceItem)itemIter.next();\n    float x=item.location[0];\n    float y=item.location[1];\n    if (x < x1)     x1=x;\n    if (y < y1)     y1=y;\n    if (x > x2)     x2=x;\n    if (y > y2)     y2=y;\n  }\n  float dx=x2 - x1, dy=y2 - y1;\n  if (dx > dy) {\n    y2=y1 + dx;\n  }\n else {\n    x2=x1 + dy;\n  }\n  setBounds(x1,y1,x2,y2);\n  itemIter=fsim.getItems();\n  while (itemIter.hasNext()) {\n    ForceItem item=(ForceItem)itemIter.next();\n    insert(item);\n  }\n  calcMass(root);\n}\n", "nl": "Initialize the simulation with the provided enclosing simulation. After this call has been made, the simulation can be queried for the  n-body force acting on a given item."}
{"code": "public ImageFactory(int maxImageWidth,int maxImageHeight){\n  setMaxImageDimensions(maxImageWidth,maxImageHeight);\n}\n", "nl": "Create a new ImageFactory. This instance will scale loaded images if they exceed the threshold arguments."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_START_CANCEL(String value0){\n  return new SM_SYSTEM_MESSAGE(1400798,value0);\n}\n", "nl": "Canceled sealing %0."}
{"code": "public MersenneTwister(int[] seed){\n  mt=new int[N];\n  setSeed(seed);\n}\n", "nl": "Creates a new random number generator using an int array seed."}
{"code": "public void show(PeekViewActivity activity,MotionEvent motionEvent){\n  PeekView peek;\n  if (layout == null) {\n    peek=new PeekView(activity,options,layoutRes,callbacks);\n  }\n else {\n    peek=new PeekView(activity,options,layout,callbacks);\n  }\n  peek.setOffsetByMotionEvent(motionEvent);\n  activity.showPeek(peek);\n}\n", "nl": "Show the PeekView"}
{"code": "@SuppressWarnings(\"WeakerAccess\") public boolean isFooter(int position){\n  return footer != null && position == getFooterPosition();\n}\n", "nl": "Returns if a footer is at the specified position."}
{"code": "protected String filterDataString(String sStr,NamedDocumentNGramGraph cCat){\n  return sStr;\n}\n", "nl": "Filters a data string to keep only words concerning a single category."}
{"code": "public static final void reportDOMError(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String message,short severity,String type){\n  if (errorHandler != null) {\n    error.reset();\n    error.fMessage=message;\n    error.fSeverity=severity;\n    error.fLocator=locator;\n    error.fType=type;\n    error.fRelatedData=locator.fRelatedNode;\n    if (!errorHandler.handleError(error))     throw abort;\n  }\n  if (severity == DOMError.SEVERITY_FATAL_ERROR)   throw abort;\n}\n", "nl": "Reports a DOM error to the user handler. <p/> If the error is fatal, the processing will be always aborted."}
{"code": "@Override protected void normalizeWhitespace(XMLString value){\n  int end=value.offset + value.length;\n  for (int i=value.offset; i < end; ++i) {\n    int c=value.ch[i];\n    if (XMLChar.isSpace(c)) {\n      value.ch[i]=' ';\n    }\n  }\n}\n", "nl": "Normalize whitespace in an XMLString converting all whitespace characters to space characters."}
{"code": "public TypeVariableBV typeVariable(Type type){\n  return typeVariable(hierarchy.typeNode(type));\n}\n", "nl": "Get type variable for the given type."}
{"code": "@Override public Filter createFilter(List<Expression> parameterList){\n  TOverlapsImpl filter=null;\n  if ((parameterList == null) || (parameterList.size() != 2)) {\n    filter=new TOverlapsExtended();\n  }\n else {\n    filter=new TOverlapsExtended(parameterList.get(0),parameterList.get(1));\n  }\n  return filter;\n}\n", "nl": "Creates the filter."}
{"code": "public PageLabel(String label,int s,int n,int seq,boolean iscur){\n  this.label=label;\n  this.s=s;\n  this.n=n;\n  this.curr=iscur;\n  this.seq=seq;\n}\n", "nl": "Instantiates a new page label."}
{"code": "private boolean isArcStart(final BSPTree<Sphere1D> node){\n  if ((Boolean)leafBefore(node).getAttribute()) {\n    return false;\n  }\n  if (!(Boolean)leafAfter(node).getAttribute()) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Check if an internal node corresponds to the start angle of an arc."}
{"code": "public static Object find(String[] urls) throws FinderException {\n  return spaceFinder.findService(urls);\n}\n", "nl": "SpaceFinder.find multiple URL provides ability to define space search order. It is useful when Jini URL for locating services on the network is not available. If the first space URL is unavailable, SpaceFinder will try the next one until a live proxy will be found. If all URLs are unavailable this method throws FinderException"}
{"code": "public void onStart(){\n  if (mInitializationComplete) {\n    startNowAndProcessPendingItems();\n  }\n else {\n    mOnStartPending=true;\n  }\n}\n", "nl": "Called when an activity gets an onStart call and is done with java only tasks."}
{"code": "@Override @Timed public Assignment assignUser(Assignment assignment,Experiment experiment,Date date){\n  Assignment new_assignment=null;\n  if (assignUserToOld) {\n    new_assignment=assignUserToOld(assignment,date);\n  }\n  if (assignUserToNew) {\n    new_assignment=assignUserToLookUp(assignment,date);\n  }\n  boolean countUp=true;\n  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,assignment,countUp,eventLog,date,assignUserToExport,assignBucketCount));\n  indexUserToExperiment(assignment);\n  indexUserToBucket(assignment);\n  indexExperimentsToUser(assignment);\n  return new_assignment;\n}\n", "nl": "Assigns the user to the specified bucket. Note, there is no validation that the experiment is running, is not deleted, or anything else. This method should only be used for cases where a user has been pre-assigned to a bucket."}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public static void skipMethods(@Nonnull DexReader reader,int count){\n  for (int i=0; i < count; i++) {\n    reader.skipUleb128();\n    reader.skipUleb128();\n    reader.skipUleb128();\n  }\n}\n", "nl": "Skips the reader over the specified number of encoded_method structures"}
{"code": "@Override public void onPaint(ViewTransform transform,Graphics2D g){\n  int x=transform.getSwingX(mAnchor.getDrawX());\n  int y=transform.getSwingY(mAnchor.getDrawY());\n  double progress=getProgress();\n  int alpha=255 - getPulsatingAlpha(progress);\n  int anchorSize=(int)SceneDraw.getAnchorSize(transform.getScale());\n  int radius=anchorSize + 4;\n  int strokeWidth=4;\n  boolean isNewConnection=mAnchor.getAnchor().getTarget() != null && mOriginalTarget != mAnchor.getAnchor().getTarget();\n  Color frame=new Color(mFrame.getRed(),mFrame.getGreen(),mFrame.getBlue(),alpha);\n  Color highlight=new Color(mColor.getRed(),mColor.getGreen(),mColor.getBlue(),alpha);\n  ConstraintWidget widget=mAnchor.getOwner();\n  int l=transform.getSwingX(widget.getDrawX());\n  int t=transform.getSwingY(widget.getDrawY());\n  int w=transform.getSwingDimension(widget.getDrawWidth());\n  if (mIsBaseline) {\n    int extra=radius - 3;\n    g.setColor(highlight);\n    g.setStroke(new BasicStroke(strokeWidth - 1));\n    int handleWidth=mAnchor.getBaselineHandleWidth(transform);\n    int padding=(w - handleWidth) / 2;\n    g.drawRoundRect(l + padding,t + transform.getSwingDimension(widget.getBaselineDistance()) - extra / 2,handleWidth + 1,extra,radius,radius);\n  }\n else {\n    if (isNewConnection) {\n      radius=anchorSize + 3;\n      strokeWidth=3;\n    }\n    Ellipse2D.Float circle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);\n    g.setColor(frame);\n    g.setStroke(new BasicStroke(strokeWidth));\n    g.draw(circle);\n    if (isNewConnection) {\n      g.setColor(mColorSet.getBackground());\n      g.fill(circle);\n      g.setColor(mColorSet.getAnchorConnectionCircle());\n      radius-=4;\n      Ellipse2D.Float innerCircle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);\n      g.fill(innerCircle);\n      g.draw(innerCircle);\n    }\n else {\n      circle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);\n      g.setColor(highlight);\n    }\n    g.setStroke(new BasicStroke(strokeWidth - 1));\n    g.draw(circle);\n  }\n  if (!mColorSet.useTooltips()) {\n    return;\n  }\n  boolean showTooltip=mShowTooltip;\n  boolean newConnection=mAnchor.getAnchor().getTarget() != mTargetAnchor;\n  showTooltip|=newConnection;\n  if (showTooltip && (System.currentTimeMillis() - mStartTime > WidgetDraw.TOOLTIP_DELAY)) {\n    WidgetDraw.drawTooltip(g,mColorSet,getText(),x,y,true);\n  }\n}\n", "nl": "Paint method for the animation. We simply draw an opaque circle at (x, y), applying a transparency as the animation progresses."}
{"code": "private static int nonEmptyLists(List<?>... lists){\n  int nonEmpty=0;\n  for (  List<?> list : lists) {\n    if (list != null && list.size() > 0) {\n      ++nonEmpty;\n    }\n  }\n  return nonEmpty;\n}\n", "nl": "Returns the number of empty lists among the argument lists."}
{"code": "public long generateNewPingId(){\n  PreferenceStore prefs=getPreferenceStore();\n  Random rnd=new Random();\n  long id=rnd.nextLong();\nsynchronized (DdmsPreferenceStore.class) {\n    prefs.setValue(PING_ID,id);\n    try {\n      prefs.save();\n    }\n catch (    IOException e) {\n    }\n  }\n  return id;\n}\n", "nl": "Generates a new random ping ID and saves it in the preference store."}
{"code": "public static DexlibAbstractInstruction fromOpcode(Opcode op,Instruction instruction,int codeAddress){\nswitch (op) {\ncase SPARSE_SWITCH_PAYLOAD:\ncase PACKED_SWITCH_PAYLOAD:\ncase ARRAY_PAYLOAD:\ncase NOP:\n    return new NopInstruction(instruction,codeAddress);\ncase MOVE:\ncase MOVE_FROM16:\ncase MOVE_16:\ncase MOVE_OBJECT:\ncase MOVE_OBJECT_FROM16:\ncase MOVE_OBJECT_16:\ncase MOVE_WIDE:\ncase MOVE_WIDE_FROM16:\ncase MOVE_WIDE_16:\n  return new MoveInstruction(instruction,codeAddress);\ncase MOVE_RESULT:\ncase MOVE_RESULT_OBJECT:\ncase MOVE_RESULT_WIDE:\nreturn new MoveResultInstruction(instruction,codeAddress);\ncase MOVE_EXCEPTION:\nreturn new MoveExceptionInstruction(instruction,codeAddress);\ncase RETURN_VOID:\nreturn new ReturnVoidInstruction(instruction,codeAddress);\ncase RETURN:\ncase RETURN_OBJECT:\ncase RETURN_WIDE:\nreturn new ReturnInstruction(instruction,codeAddress);\ncase CONST:\ncase CONST_4:\ncase CONST_16:\ncase CONST_HIGH16:\ncase CONST_WIDE:\ncase CONST_WIDE_16:\ncase CONST_WIDE_32:\ncase CONST_WIDE_HIGH16:\nreturn new ConstInstruction(instruction,codeAddress);\ncase CONST_STRING:\ncase CONST_STRING_JUMBO:\nreturn new ConstStringInstruction(instruction,codeAddress);\ncase CONST_CLASS:\nreturn new ConstClassInstruction(instruction,codeAddress);\ncase MONITOR_ENTER:\nreturn new MonitorEnterInstruction(instruction,codeAddress);\ncase MONITOR_EXIT:\nreturn new MonitorExitInstruction(instruction,codeAddress);\ncase CHECK_CAST:\nreturn new CheckCastInstruction(instruction,codeAddress);\ncase INSTANCE_OF:\nreturn new InstanceOfInstruction(instruction,codeAddress);\ncase ARRAY_LENGTH:\nreturn new ArrayLengthInstruction(instruction,codeAddress);\ncase NEW_INSTANCE:\nreturn new NewInstanceInstruction(instruction,codeAddress);\ncase NEW_ARRAY:\nreturn new NewArrayInstruction(instruction,codeAddress);\ncase FILLED_NEW_ARRAY:\nreturn new FilledNewArrayInstruction(instruction,codeAddress);\ncase FILLED_NEW_ARRAY_RANGE:\nreturn new FilledNewArrayRangeInstruction(instruction,codeAddress);\ncase FILL_ARRAY_DATA:\nreturn new FillArrayDataInstruction(instruction,codeAddress);\ncase THROW:\nreturn new ThrowInstruction(instruction,codeAddress);\ncase GOTO:\ncase GOTO_16:\ncase GOTO_32:\nreturn new GotoInstruction(instruction,codeAddress);\ncase PACKED_SWITCH:\nreturn new PackedSwitchInstruction(instruction,codeAddress);\ncase SPARSE_SWITCH:\nreturn new SparseSwitchInstruction(instruction,codeAddress);\ncase CMPL_FLOAT:\ncase CMPG_FLOAT:\ncase CMPL_DOUBLE:\ncase CMPG_DOUBLE:\ncase CMP_LONG:\nreturn new CmpInstruction(instruction,codeAddress);\ncase IF_EQ:\ncase IF_NE:\ncase IF_LT:\ncase IF_GE:\ncase IF_GT:\ncase IF_LE:\nreturn new IfTestInstruction(instruction,codeAddress);\ncase IF_EQZ:\ncase IF_NEZ:\ncase IF_LTZ:\ncase IF_GEZ:\ncase IF_GTZ:\ncase IF_LEZ:\nreturn new IfTestzInstruction(instruction,codeAddress);\ncase AGET:\ncase AGET_OBJECT:\ncase AGET_BOOLEAN:\ncase AGET_BYTE:\ncase AGET_CHAR:\ncase AGET_SHORT:\ncase AGET_WIDE:\nreturn new AgetInstruction(instruction,codeAddress);\ncase APUT:\ncase APUT_OBJECT:\ncase APUT_BOOLEAN:\ncase APUT_BYTE:\ncase APUT_CHAR:\ncase APUT_SHORT:\ncase APUT_WIDE:\nreturn new AputInstruction(instruction,codeAddress);\ncase IGET:\ncase IGET_OBJECT:\ncase IGET_BOOLEAN:\ncase IGET_BYTE:\ncase IGET_CHAR:\ncase IGET_SHORT:\ncase IGET_WIDE:\nreturn new IgetInstruction(instruction,codeAddress);\ncase IPUT:\ncase IPUT_OBJECT:\ncase IPUT_BOOLEAN:\ncase IPUT_BYTE:\ncase IPUT_CHAR:\ncase IPUT_SHORT:\ncase IPUT_WIDE:\nreturn new IputInstruction(instruction,codeAddress);\ncase SGET:\ncase SGET_OBJECT:\ncase SGET_BOOLEAN:\ncase SGET_BYTE:\ncase SGET_CHAR:\ncase SGET_SHORT:\ncase SGET_WIDE:\nreturn new SgetInstruction(instruction,codeAddress);\ncase SPUT:\ncase SPUT_OBJECT:\ncase SPUT_BOOLEAN:\ncase SPUT_BYTE:\ncase SPUT_CHAR:\ncase SPUT_SHORT:\ncase SPUT_WIDE:\nreturn new SputInstruction(instruction,codeAddress);\ncase INVOKE_VIRTUAL:\ncase INVOKE_VIRTUAL_RANGE:\nreturn new InvokeVirtualInstruction(instruction,codeAddress);\ncase INVOKE_INTERFACE:\ncase INVOKE_INTERFACE_RANGE:\nreturn new InvokeInterfaceInstruction(instruction,codeAddress);\ncase INVOKE_DIRECT:\ncase INVOKE_DIRECT_RANGE:\ncase INVOKE_SUPER:\ncase INVOKE_SUPER_RANGE:\nreturn new InvokeSpecialInstruction(instruction,codeAddress);\ncase INVOKE_STATIC:\ncase INVOKE_STATIC_RANGE:\nreturn new InvokeStaticInstruction(instruction,codeAddress);\ncase EXECUTE_INLINE:\ncase EXECUTE_INLINE_RANGE:\nreturn new ExecuteInlineInstruction(instruction,codeAddress);\ncase NEG_INT:\ncase NOT_INT:\ncase NEG_FLOAT:\ncase NEG_LONG:\ncase NOT_LONG:\ncase NEG_DOUBLE:\nreturn new UnopInstruction(instruction,codeAddress);\ncase INT_TO_LONG:\ncase INT_TO_DOUBLE:\ncase FLOAT_TO_LONG:\ncase FLOAT_TO_DOUBLE:\ncase LONG_TO_INT:\ncase LONG_TO_FLOAT:\ncase DOUBLE_TO_INT:\ncase DOUBLE_TO_FLOAT:\ncase LONG_TO_DOUBLE:\ncase DOUBLE_TO_LONG:\ncase INT_TO_FLOAT:\ncase FLOAT_TO_INT:\ncase INT_TO_BYTE:\ncase INT_TO_CHAR:\ncase INT_TO_SHORT:\nreturn new CastInstruction(instruction,codeAddress);\ncase ADD_INT:\ncase SUB_INT:\ncase MUL_INT:\ncase DIV_INT:\ncase REM_INT:\ncase AND_INT:\ncase OR_INT:\ncase XOR_INT:\ncase SHL_INT:\ncase SHR_INT:\ncase USHR_INT:\ncase ADD_FLOAT:\ncase SUB_FLOAT:\ncase MUL_FLOAT:\ncase DIV_FLOAT:\ncase REM_FLOAT:\ncase ADD_LONG:\ncase SUB_LONG:\ncase MUL_LONG:\ncase DIV_LONG:\ncase REM_LONG:\ncase AND_LONG:\ncase OR_LONG:\ncase XOR_LONG:\ncase SHL_LONG:\ncase SHR_LONG:\ncase USHR_LONG:\ncase ADD_DOUBLE:\ncase SUB_DOUBLE:\ncase MUL_DOUBLE:\ncase DIV_DOUBLE:\ncase REM_DOUBLE:\nreturn new BinopInstruction(instruction,codeAddress);\ncase ADD_INT_2ADDR:\ncase SUB_INT_2ADDR:\ncase MUL_INT_2ADDR:\ncase DIV_INT_2ADDR:\ncase REM_INT_2ADDR:\ncase AND_INT_2ADDR:\ncase OR_INT_2ADDR:\ncase XOR_INT_2ADDR:\ncase SHL_INT_2ADDR:\ncase SHR_INT_2ADDR:\ncase USHR_INT_2ADDR:\ncase ADD_FLOAT_2ADDR:\ncase SUB_FLOAT_2ADDR:\ncase MUL_FLOAT_2ADDR:\ncase DIV_FLOAT_2ADDR:\ncase REM_FLOAT_2ADDR:\ncase ADD_LONG_2ADDR:\ncase SUB_LONG_2ADDR:\ncase MUL_LONG_2ADDR:\ncase DIV_LONG_2ADDR:\ncase REM_LONG_2ADDR:\ncase AND_LONG_2ADDR:\ncase OR_LONG_2ADDR:\ncase XOR_LONG_2ADDR:\ncase SHL_LONG_2ADDR:\ncase SHR_LONG_2ADDR:\ncase USHR_LONG_2ADDR:\ncase ADD_DOUBLE_2ADDR:\ncase SUB_DOUBLE_2ADDR:\ncase MUL_DOUBLE_2ADDR:\ncase DIV_DOUBLE_2ADDR:\ncase REM_DOUBLE_2ADDR:\nreturn new Binop2addrInstruction(instruction,codeAddress);\ncase ADD_INT_LIT16:\ncase RSUB_INT:\ncase MUL_INT_LIT16:\ncase DIV_INT_LIT16:\ncase REM_INT_LIT16:\ncase AND_INT_LIT16:\ncase OR_INT_LIT16:\ncase XOR_INT_LIT16:\ncase ADD_INT_LIT8:\ncase RSUB_INT_LIT8:\ncase MUL_INT_LIT8:\ncase DIV_INT_LIT8:\ncase REM_INT_LIT8:\ncase AND_INT_LIT8:\ncase OR_INT_LIT8:\ncase XOR_INT_LIT8:\ncase SHL_INT_LIT8:\ncase SHR_INT_LIT8:\ncase USHR_INT_LIT8:\nreturn new BinopLitInstruction(instruction,codeAddress);\ndefault :\nthrow new IllegalArgumentException(\"Opcode: \" + op + \" @ 0x\"+ Integer.toHexString(codeAddress));\n}\n}\n", "nl": "Resolve an Instruction from an dex opcode."}
{"code": "final public void enable_tracing(){\n}\n", "nl": "Enable tracing."}
{"code": "public void smoothOpenRightMenu(int position,int duration){\n  smoothOpenMenu(position,RIGHT_DIRECTION,duration);\n}\n", "nl": "open menu on right."}
{"code": "public void findHighestTiles(){\n  if (!highestTilesFound) {\n    for (int x=0; x < CHUNK_SIZE; x++) {\n      findHighestTile(x);\n    }\n    highestTilesFound=true;\n  }\n}\n", "nl": "Goes through each column and finds the highest tile. Used for generating the sun on the ground. Only used on the highest chunks though because it wont matter for the others."}
{"code": "@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){\n  Calendar calendar=getCalendar();\n  List<Period> periods=Lists.newArrayList();\n  dateTimeUnit=calendar.minusDays(dateTimeUnit,calendar.weekday(dateTimeUnit) - 1);\n  for (int i=0; i < calendar.weeksInYear(dateTimeUnit.getYear()); i++) {\n    DateInterval interval=calendar.toInterval(dateTimeUnit,DateIntervalType.ISO8601_WEEK);\n    periods.add(new Period(this,interval.getFrom().toJdkDate(),interval.getTo().toJdkDate()));\n    dateTimeUnit=calendar.plusWeeks(dateTimeUnit,1);\n  }\n  return periods;\n}\n", "nl": "Generates weekly Periods for the whole year in which the given Period's startDate exists."}
{"code": "public void showMetrics(){\n  timer.show(\"NullAudioPlayer\");\n}\n", "nl": "Shows metrics for this audio player"}
{"code": "@Override public void close(){\n  try {\n    reader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n", "nl": "closes the accessor"}
{"code": "@VisibleForTesting public boolean doesContainAWord(String selection){\n  return mContainsWordPattern.matcher(selection).find();\n}\n", "nl": "Determines if the given selection contains a word or not."}
{"code": "public UpgradePatchRetry(Context context){\n  this.context=context;\n  retryInfoFile=new File(SharePatchFileUtil.getPatchDirectory(context),RETRY_INFO_NAME);\n  tempPatchFile=new File(SharePatchFileUtil.getPatchDirectory(context),TEMP_PATCH_NAME);\n}\n", "nl": "you must set after tinker has installed"}
{"code": "protected AdsGetDemographicsQuery dateFrom(String value){\n  return unsafeParam(\"date_from\",value);\n}\n", "nl": "Date to show statistics from. For different value of \"period\" different date format is used: 'day': 'YYYY-MM-DD', example: 2011-09-27 - September 27, 2011 '0' - day it was created on; 'month': 'YYYY-MM', example: 2011-09 - September 2011 '0' - month it was created in; 'overall': 0."}
{"code": "public double expectedWeightedValue(){\n  return this.weightedVar;\n}\n", "nl": "Expected value for  the testArray defined in UnivariateStatisticAbstractTest"}
{"code": "public static int decodeUnicodeNotation(String unicodeString){\n  String string=unicodeString.substring(UNICODE_PREFIX.length());\n  int result=(int)Long.parseLong(string,16);\n  return (result);\n}\n", "nl": "Decode unicode notation."}
{"code": "public void changeAccount(String account) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {\nsynchronized (lock) {\n    if (!connected) {\n      throw new IllegalStateException(\"Client not connected\");\n    }\n    if (!authenticated) {\n      throw new IllegalStateException(\"Client not authenticated\");\n    }\n    communication.sendFTPCommand(\"ACCT \" + account);\n    FTPReply r=communication.readFTPReply();\n    touchAutoNoopTimer();\n    if (!r.isSuccessCode()) {\n      throw new FTPException(r);\n    }\n  }\n}\n", "nl": "Call this method to switch the user current account. Be careful with this: some FTP servers don't implement this feature, even though it is a standard FTP one."}
{"code": "public static List<String> readLines(File file) throws IOException {\n  return readLines(file,Charset.defaultCharset());\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings using the default encoding for the VM. The file is always closed."}
{"code": "public UsersSearchQuery country(Integer value){\n  return unsafeParam(\"country\",value);\n}\n", "nl": "Country ID."}
{"code": "public void addRecognizedFeatures(String[] featureIds){\n  int featureIdsCount=featureIds != null ? featureIds.length : 0;\n  for (int i=0; i < featureIdsCount; i++) {\n    String featureId=featureIds[i];\n    if (!fRecognizedFeatures.contains(featureId)) {\n      fRecognizedFeatures.add(featureId);\n    }\n  }\n}\n", "nl": "Allows a parser to add parser specific features to be recognized and managed by the parser configuration."}
{"code": "void markActivityUsed(int activityIndex,String webappId){\n  int elementIndex=findActivityElement(activityIndex);\n  if (elementIndex == -1) {\n    Log.e(TAG,\"Failed to find WebappActivity entry: \" + activityIndex + \", \"+ webappId);\n    return;\n  }\n  ActivityEntry updatedEntry=new ActivityEntry(activityIndex,webappId);\n  mActivityList.remove(elementIndex);\n  mActivityList.add(updatedEntry);\n  storeActivityList();\n}\n", "nl": "Moves a WebappActivity to the back of the queue, indicating that the Webapp is still in use and shouldn't be killed."}
{"code": "public void elect() throws InterruptedException, ActiveElectionException {\n  boolean isException=false;\n  if (getState() != State.PENDING)   return;\n  try {\n    while (!isTerminate()) {\n      try {\n        if (findActive() != null) {\n          return;\n        }\n else         if (pollStateUntilAvailable(State.PREPARE) != null) {\n          return;\n        }\n        if (findActive() != null) {\n          return;\n        }\n else         if (!isAdvanceToStateAllowed(State.PENDING,State.PREPARE)) {\n          continue;\n        }\n else         if (!doChangeState(State.PENDING,State.PREPARE)) {\n          return;\n        }\n        if (findActive() != null) {\n          return;\n        }\n else         if (!isAdvanceToStateAllowed(State.PREPARE,State.ACTIVE)) {\n          continue;\n        }\n else         if (!doChangeState(State.PREPARE,State.ACTIVE)) {\n          return;\n        }\n        notifyListenerOnActive(new ServiceItem(_electTemplate.getServiceID(),_electTemplate.getService(),null));\n        return;\n      }\n catch (      DirectPersistencyRecoveryException ex) {\n        try {\n          if (_logger.isLoggable(Level.WARNING)) {\n            if (ex instanceof DirectPersistencyAttributeStoreException) {\n              _logger.log(Level.WARNING,\"Failed to set or get last primary state using AttributeStore, will try to reelect...\",ex);\n            }\n else {\n              _logger.log(Level.WARNING,\"Failed to elect as primary\",ex);\n            }\n          }\n          isException=true;\n          changeState(getState(),State.PENDING,true);\n        }\n catch (        RemoteException e) {\n          isException=true;\n          String exMsg=\"Failed to communicate with [\" + _namingService.getName() + \"] naming service while changing state from \"+ getState()+ \" to PENDING. \";\n          throw new ActiveElectionException(exMsg,ex);\n        }\n      }\ncatch (      RemoteException ex) {\n        isException=true;\n        String exMsg=\"Failed to communicate with [\" + _namingService.getName() + \"] naming service. \";\n        throw new ActiveElectionException(exMsg,ex);\n      }\n    }\n  }\n  finally {\n    if (!isException) {\n      try {\n        if (getState() == State.PREPARE) {\n          changeState(State.PREPARE,State.PENDING,true);\n        }\n      }\n catch (      RemoteException ex) {\n        throw new ActiveElectionException(\"Force change state failed.\",ex);\n      }\n      try {\n        startSplitBrainController();\n      }\n catch (      Exception ex) {\n        throw new ActiveElectionException(\"Failed to start SplitBrainController.\",ex);\n      }\n    }\n  }\n}\n", "nl": "Elect the active service, this method will be blocked while the active service will be elected."}
{"code": "public static String valueToString(Object value) throws JSONException {\n  if (value == null || value.equals(null)) {\n    return \"null\";\n  }\n  if (value instanceof JSONString) {\n    Object object;\n    try {\n      object=((JSONString)value).toJSONString();\n    }\n catch (    Exception e) {\n      throw new JSONException(e);\n    }\n    if (object instanceof String) {\n      return (String)object;\n    }\n    throw new JSONException(\"Bad value from toJSONString: \" + object);\n  }\n  if (value instanceof Number) {\n    return numberToString((Number)value);\n  }\n  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {\n    return value.toString();\n  }\n  if (value instanceof Map) {\n    return new JSONObject((Map<String,Object>)value).toString();\n  }\n  if (value instanceof Collection) {\n    return new JSONArray((Collection<Object>)value).toString();\n  }\n  if (value.getClass().isArray()) {\n    return new JSONArray(value).toString();\n  }\n  return quote(value.toString());\n}\n", "nl": "Make a JSON text of an Object value. If the object has an value.toJSONString() method, then that method will be used to produce the JSON text. The method is required to produce a strictly conforming text. If the object does not contain a toJSONString method (which is the most common case), then a text will be produced by other means. If the value is an array or Collection, then a JSONArray will be made from it and its toJSONString method will be called. If the value is a MAP, then a JSONObject will be made from it and its toJSONString method will be called. Otherwise, the value's toString method will be called, and the result will be quoted. <p> Warning: This method assumes that the data structure is acyclical."}
{"code": "public static Map<String,Object> checkPermission(DispatchContext ctx,Map<String,?> context){\n  boolean hasPermission=false;\n  String mainAction=(String)context.get(\"mainAction\");\n  if (\"VIEW\".equals(mainAction)) {\n    if (DEFAULT_UID.equals(context.get(LOGINID_PARAMETER_NAME))) {\n      hasPermission=true;\n    }\n else {\n      hasPermission=isValidGetId(ctx,context);\n    }\n  }\n else   if (\"CREATE~UPDATE~DELETE\".contains(mainAction)) {\n    hasPermission=isValidSetId(ctx,context);\n  }\n else {\n    hasPermission=false;\n  }\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  result.put(\"hasPermission\",hasPermission);\n  return result;\n}\n", "nl": "Checks preference get/set permissions. Returns hasPermission=true if permission is granted. <p>This method is a simple wrapper around the isValidxxxId methods.</p>"}
{"code": "private static Bitmap decodeImage(ContentResolver resolver,Uri uri,BitmapFactory.Options options) throws FileNotFoundException {\n  do {\n    InputStream stream=null;\n    try {\n      stream=resolver.openInputStream(uri);\n      return BitmapFactory.decodeStream(stream,EMPTY_RECT,options);\n    }\n catch (    OutOfMemoryError e) {\n      options.inSampleSize*=2;\n    }\n finally {\n      closeSafe(stream);\n    }\n  }\n while (options.inSampleSize <= 512);\n  throw new RuntimeException(\"Failed to decode image: \" + uri);\n}\n", "nl": "Decode image from uri using given \"inSampleSize\", but if failed due to out-of-memory then raise the inSampleSize until success."}
{"code": "public static void syncCollapsedFromSummary2Viewer(final DataTable table,final ClassificationViewer classificationViewer){\n  final String classificationName=classificationViewer.getClassName();\n  if (table.getCollapsed(classificationName) != null && table.getCollapsed(classificationName).size() > 0) {\n    classificationViewer.getCollapsedIds().clear();\n    classificationViewer.getCollapsedIds().addAll(table.getCollapsed(classificationName));\n  }\n}\n", "nl": "sync collapsed nodes"}
{"code": "public boolean isEntryMethod(SootMethod method){\n  return !tgtToEdge.containsKey(method);\n}\n", "nl": "Does this method have no incoming edge?"}
{"code": "public void startTimer(double durationInMilliseconds){\n  startTime=System.nanoTime();\n  timeout=startTime + (long)(durationInMilliseconds * 1000000);\n}\n", "nl": "Start the timer.  If the timer is already started, will simply define the timeout as now + duration A call to this method is mandatory if you want the timeCheck method to throws timeout exceptions"}
{"code": "public static boolean isPowerOfTwo(long n){\n  return (n > 0) && ((n & (n - 1)) == 0);\n}\n", "nl": "Returns true if the argument is a power of two."}
{"code": "public boolean isNull(int index){\n  return JSONObject.NULL.equals(this.opt(index));\n}\n", "nl": "Determine if the value is null."}
{"code": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) public static int launchDocumentInstance(Activity activity,boolean incognito,AsyncTabCreationParams asyncParams){\n  assert asyncParams != null;\n  final int launchMode=asyncParams.getDocumentLaunchMode();\n  final int intentSource=asyncParams.getDocumentStartedBy();\n  final LoadUrlParams loadUrlParams=asyncParams.getLoadUrlParams();\n  if (loadUrlParams.getUrl() == null && asyncParams.getWebContents() != null) {\n    loadUrlParams.setUrl(asyncParams.getWebContents().getUrl());\n  }\n  if (launchMode == LAUNCH_MODE_RETARGET) {\n    assert asyncParams.getWebContents() == null;\n    assert loadUrlParams.getPostData() == null;\n    int relaunchedId=relaunchTask(incognito,loadUrlParams.getUrl());\n    if (relaunchedId != Tab.INVALID_TAB_ID)     return relaunchedId;\n  }\n  int parentId=activity != null && (launchMode == LAUNCH_MODE_AFFILIATED || intentSource == DocumentMetricIds.STARTED_BY_WINDOW_OPEN || intentSource == DocumentMetricIds.STARTED_BY_CONTEXTUAL_SEARCH) ? ActivityDelegate.getTabIdFromIntent(activity.getIntent()) : Tab.INVALID_TAB_ID;\n  Context context=ApplicationStatus.getApplicationContext();\n  Intent intent=createLaunchIntent(context,null,loadUrlParams.getUrl(),incognito,parentId);\n  setRecentsFlagsOnIntent(intent,Intent.FLAG_ACTIVITY_NEW_DOCUMENT,incognito);\n  intent.putExtra(IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,incognito);\n  intent.putExtra(IntentHandler.EXTRA_PAGE_TRANSITION_TYPE,loadUrlParams.getTransitionType());\n  intent.putExtra(IntentHandler.EXTRA_STARTED_BY,intentSource);\n  if (activity != null && activity.getIntent() != null) {\n    intent.putExtra(IntentHandler.EXTRA_PARENT_INTENT,activity.getIntent());\n  }\n  intent.putExtra(EXTRA_LAUNCH_MODE,launchMode);\n  IntentHandler.addTrustedIntentExtras(intent,context);\n  boolean succeeded=false;\n  boolean affiliated=launchMode == LAUNCH_MODE_AFFILIATED;\n  if (activity == null) {\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    succeeded=fireDocumentIntent(context,intent,incognito,affiliated,asyncParams);\n  }\n else {\n    succeeded=fireDocumentIntent(activity,intent,incognito,affiliated,asyncParams);\n  }\n  return succeeded ? ActivityDelegate.getTabIdFromIntent(intent) : Tab.INVALID_TAB_ID;\n}\n", "nl": "Starts a Document for the given URL. Generally, you should be using the TabCreator attached to the DocumentTabModelSelector. NOTE: this method adds trusted intent extra to authenticate that Chrome set the EXTRA_PAGE_TRANSITION_TYPE extra which we only want Chrome to do. This should never be exposed to non-Chrome callers."}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_SUCCEED(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1300483,descriptionId);\n}\n", "nl": "You have modified the appearance of %0."}
{"code": "private static void expandBelow13DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){\n  expandLargeNumber(numberString,\"billion\",9,wordRelation,tokenItem);\n}\n", "nl": "Expands a string that is a 10 to 12 digits number into a list of English words. For example, \"27000000000\" into twenty-seven billion."}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"rename sample=\");\n  final String sampleName=np.getWordRespectCase();\n  np.matchIgnoreCase(\"newName=\");\n  String newName=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  final SamplesViewer viewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);\n  viewer.getSamplesTable().renameSample(sampleName,newName);\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public boolean markSupported(){\n  return false;\n}\n", "nl": "Tests whether this audio input stream supports the <code>mark</code> and <code>reset</code> methods."}
{"code": "@Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n", "nl": "Accept the query executor"}
{"code": "public CreateTableData(String tblName,Schema schema){\n  this.tblName=tblName;\n  this.schema=schema;\n}\n", "nl": "Saves the table name and schema."}
{"code": "public static double nextUp(double d){\n  if (d == Double.POSITIVE_INFINITY)   return d;\n else {\n    d+=0.0d;\n    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));\n  }\n}\n", "nl": "Replacement for the Math.nextUp(...) method that is only available in HONEYCOMB and higher. Dat's some seeeeek sheeet."}
{"code": "public boolean isRepeated(){\n  return card == Cardinality.REPEATED;\n}\n", "nl": "Returns true of the field is repeated."}
{"code": "public Dfp newDfp(final byte x){\n  return new Dfp(this,x);\n}\n", "nl": "Create an instance from a byte value."}
{"code": "@Override public void addFragment(Activity a,int code){\n  Fragment f=buildFragmentByCode(code);\n  model.addFragmentToList(f);\n  ((MainActivity)a).getSupportFragmentManager().beginTransaction().add(R.id.activity_main_fragment,f).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).addToBackStack(null).commit();\n}\n", "nl": "<br> presenter."}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work)."}
{"code": "public static byte[] decode(char[] in){\n  return decode(in,0,in.length);\n}\n", "nl": "Decodes a byte array from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data."}
{"code": "public static StyledLayerDescriptor createNewRaster(){\n  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();\n  NamedLayer namedLayer=styleFactory.createNamedLayer();\n  sld.addStyledLayer(namedLayer);\n  Style style=styleFactory.createStyle();\n  namedLayer.addStyle(style);\n  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();\n  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();\n  ftsList.add(fts);\n  Rule rule=styleFactory.createRule();\n  fts.rules().add(rule);\n  RasterSymbolizer raster=createDefaultRasterSymbolizer();\n  rule.symbolizers().add(raster);\n  return sld;\n}\n", "nl": "Creates the new raster symbol."}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIND_POS_NPC_FOUND(String value0){\n  return new SM_SYSTEM_MESSAGE(1300750,value0);\n}\n", "nl": "%0 is at the position indicated on the map."}
{"code": "static <T>void buildError(Subscriber<T> subscriber,Exception exception){\n  subscriber.onError(exception);\n}\n", "nl": "This method add to subscriber the proper error according to the"}
{"code": "@RequestMapping(value=\"/{namespace}/{key}\",method=RequestMethod.POST,produces=\"application/json\",consumes=\"application/json\") public void addUserKeyJsonValue(@PathVariable String namespace,@PathVariable String key,@RequestBody String body,@RequestParam(defaultValue=\"false\") boolean encrypt,HttpServletResponse response) throws IOException, WebMessageException {\n  if (userKeyJsonValueService.getUserKeyJsonValue(currentUserService.getCurrentUser(),namespace,key) != null) {\n    throw new WebMessageException(WebMessageUtils.conflict(\"The key '\" + key + \"' already exists in the namespace '\"+ namespace+ \"'.\"));\n  }\n  if (!renderService.isValidJson(body)) {\n    throw new WebMessageException(WebMessageUtils.badRequest(\"The data is not valid JSON.\"));\n  }\n  UserKeyJsonValue userKeyJsonValue=new UserKeyJsonValue();\n  userKeyJsonValue.setKey(key);\n  userKeyJsonValue.setUser(currentUserService.getCurrentUser());\n  userKeyJsonValue.setNamespace(namespace);\n  userKeyJsonValue.setValue(body);\n  userKeyJsonValue.setEncrypted(encrypt);\n  userKeyJsonValueService.addUserKeyJsonValue(userKeyJsonValue);\n  response.setStatus(HttpServletResponse.SC_CREATED);\n  messageService.sendJson(WebMessageUtils.created(\"Key '\" + key + \"' in namespace '\"+ namespace+ \"' created.\"),response);\n}\n", "nl": "Creates a new KeyJsonValue Object on the current user with the key, namespace and value supplied."}
{"code": "public void delete(RecordId nextDeletedSlot){\n  Constant flag=EMPTY_CONST;\n  setVal(currentPos(),flag);\n  setNextDeletedSlotId(nextDeletedSlot);\n}\n", "nl": "Deletes the current record. Deletion is performed by marking the record as \"deleted\" and setting the content as a pointer points to next deleted slot."}
{"code": "public ScriptIO(final Script script,final Executor executor){\n  this.script=script;\n  this.executor=executor;\n  if (script != null) {\n    scriptName=script.getName();\n  }\n}\n", "nl": "Creates the ScriptIO."}
{"code": "public void onFailure(String responseBody,Throwable error){\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "public HttpPost createInstallRequest(String path){\n  return new HttpPost(String.format(REQUEST_STRING_WITH_PATH,authorIp,path,Commands.INSTALL.getCommand()));\n}\n", "nl": "Creates HttpPost request for install"}
{"code": "public DatabaseGetCountriesByIdQuery countryIds(Integer... value){\n  return unsafeParam(\"country_ids\",value);\n}\n", "nl": "Country IDs."}
{"code": "protected NotesDeleteCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment ID."}
{"code": "public QRDecomposition qr(){\n  return new QRDecomposition(this);\n}\n", "nl": "QR Decomposition"}
{"code": "public BrowserInfoEntry(Capabilities capabilities){\n  super();\n  this.caps=capabilities;\n}\n", "nl": "Constructs the BrowserInfoEntry."}
{"code": "public void registerProvider(EnvironmentProvider provider){\n  JmxConnectionSupportImpl.registerProviderImpl(provider);\n}\n", "nl": "Registers new EnvironmentProvider."}
{"code": "private void showModuleSelectionDialog(@NotNull List<ModuleSearchResult> searchResults,@NotNull DataNode<ProjectData> projectInfo,@NotNull List<DataNode<ModuleData>> selection,@NotNull File file){\n  List<DataNode<ModuleData>> finalSelection=Lists.newArrayList(selection);\n  List<DataNode<ModuleData>> modulesToDisplayInDialog=Lists.newArrayList();\n  Map<String,ModuleSearchResult> resultsByModuleName=Maps.newHashMap();\n  for (  ModuleSearchResult result : searchResults) {\n    DataNode<ModuleData> module=result.moduleNode;\n    modulesToDisplayInDialog.add(module);\n    if (result.selected) {\n      finalSelection.remove(module);\n    }\n    String moduleName=getNameOf(module);\n    resultsByModuleName.put(moduleName,result);\n  }\n  invokeLaterIfNeeded(null);\n}\n", "nl": "Displays the \"Select Modules\" dialog. This method is invoked when the search for a module containing a file returns more than one result. The user now needs to select the module(s) to include."}
{"code": "@Override public void fileDeleted(Path f){\n  if (f != null) {\n    Path path=f.getFileName();\n    if (path != null) {\n      String filename=path.toString();\n      for (int childIndex=0; childIndex < this.getChildCount(); childIndex++) {\n        FileTreeNode childNode=(FileTreeNode)this.getChildAt(childIndex);\n        if (childNode.name.compareTo(filename) == 0) {\n          this.remove(childIndex);\n          break;\n        }\n      }\n      FileSystemNodeManager.refreshNode(this);\n    }\n  }\n}\n", "nl": "File deleted."}
{"code": "public static Date parseDate(String dateValue) throws DateParseException {\n  return parseDate(dateValue,null,null);\n}\n", "nl": "Parses a date value.  The formats used for parsing the date value are retrieved from the default http params."}
{"code": "public KeyManager(GameSettings settings,ArrayList<InternalKey> additionalKeys){\n  this.additionalKeys=additionalKeys;\n  if (additionalKeys != null) {\n    fixAdditionalKeyBindings(settings);\n    FMLCommonHandler.instance().bus().register(this);\n  }\n}\n", "nl": "Create a new KeyManager class which will be responsible for maintaining our own extra internal keys."}
{"code": "private boolean validFile(String filename){\n  String fileExtension=ExternalFilenames.getFileExtension(filename);\n  if (fileHandlerMap != null) {\n    return (fileHandlerMap.keySet().contains(fileExtension));\n  }\n  return false;\n}\n", "nl": "Valid file."}
{"code": "private void embedTree(Node root){\n  removeAllInternalPoints();\n  node2BoundingBox.clear();\n  for (Node v=getTree().getFirstNode(); v != null; v=v.getNext()) {\n    setLocation(v,null);\n    getNV(v).setFixedSize(true);\n  }\n  taxonLevel=0;\n  if (getDrawerType() == DiagramType.RectangularPhylogram || getDrawerType() == DiagramType.RoundedPhylogram) {\n    embedPhylogramRec(root,null,0);\n    if (getDrawerType() == DiagramType.RoundedPhylogram) {\n      for (Edge e=getTree().getFirstEdge(); e != null; e=getTree().getNextEdge(e))       getEV(e).setShape(EdgeView.ROUNDED_EDGE);\n    }\n  }\n else {\n    embedCladogramRec(root,null);\n    if (getDrawerType() == DiagramType.RoundedCladogram) {\n      for (Edge e=getTree().getFirstEdge(); e != null; e=getTree().getNextEdge(e))       getEV(e).setShape(EdgeView.ROUNDED_EDGE);\n    }\n  }\n  trans.setCoordinateRect(getBBox());\n  if (!isShowIntermediateLabels())   showLabels(getDegree2Nodes(),false);\n}\n", "nl": "embeds a tree is a phylogram from the given root, using the given h- and v-spacing"}
{"code": "@Override public void onWebsocketPing(WebSocket conn,Framedata f){\n  FramedataImpl1 resp=new FramedataImpl1(f);\n  resp.setOptcode(Opcode.PONG);\n  conn.sendFrame(resp);\n}\n", "nl": "This default implementation will send a pong in response to the received ping. The pong frame will have the same payload as the ping frame."}
{"code": "private void stopRequestingSensorEventData(){\n  if (!isRequestingSensorEventData()) {\n    return;\n  }\n  try {\n    Log.v(TAG,\"Stopping to request sensor event data\");\n    for (    Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {\n      sensorDataRequestEntry.getValue().setEndTimestamp(System.currentTimeMillis());\n    }\n    sendSensorEventDataRequests();\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n", "nl": "Sets the end timestamps of all available sensor data requests to now and sends them to the assigned nodes"}
{"code": "public int remove(int offset){\n  int old=get(offset);\n  remove(offset,1);\n  return old;\n}\n", "nl": "Removes the value at <tt>offset</tt> from the list."}
{"code": "public static String generateStackInfo(boolean keepInnerClass,int stackOffset){\n  StackTraceElement[] currentStack=getCurrentStack();\n  StackTraceElement element=currentStack[stackOffset];\n  String className=element.getClassName();\n  String pkgPath[]=className.split(\"\\\\.\");\n  if (pkgPath.length > 0) {\n    className=pkgPath[pkgPath.length - 1];\n  }\n  int innerclassSymbolIndex=className.indexOf(\"$\");\n  String innerClassName=null;\n  if (innerclassSymbolIndex != -1) {\n    innerClassName=className.substring(innerclassSymbolIndex + 1);\n    className=className.substring(0,innerclassSymbolIndex);\n  }\n  String methodName=element.getMethodName();\n  int lineNum=element.getLineNumber();\n  if (keepInnerClass && (!TextUtils.isEmpty(innerClassName))) {\n    methodName=String.format(\"$%s#%s()\",innerClassName,methodName);\n  }\n else {\n    methodName=String.format(\"#%s()\",methodName);\n  }\n  return String.format(\"[(%s.java:%s)%s]\",className,lineNum,methodName);\n}\n", "nl": "Generate stack information by current stackOffset."}
{"code": "public Object childrenAccept(MithraQLVisitor visitor,Object data){\n  visitor.visit(this,data);\n  if (this.children != null) {\n    for (int i=0; i < this.children.length; ++i) {\n      this.children[i].jjtAccept(visitor,data);\n      ((SimpleNode)this.children[i]).childrenAccept(visitor,data);\n    }\n  }\n  return data;\n}\n", "nl": "Accept the visitor."}
{"code": "public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {\n  return encrypt(plaintext.getBytes(encoding),secretKeys);\n}\n", "nl": "Generates a random IV and encrypts this plain text with the given key. Then attaches a hashed MAC, which is contained in the CipherTextIvMac class."}
{"code": "@Override public boolean isDataPresent(){\n  return true;\n}\n", "nl": "Checks if is data present."}
{"code": "public void showTextBubble(String text,View anchorView,int maxWidth,int maxHeight){\n  mTooltipText.setText(text);\n  mTooltipText.measure(MeasureSpec.makeMeasureSpec(maxWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(maxHeight,MeasureSpec.AT_MOST));\n  mAnchorView=anchorView;\n  calculateNewPosition();\n  showAtCalculatedPosition();\n}\n", "nl": "Shows a text bubble anchored to the given view."}
{"code": "@SuppressWarnings(\"unchecked\") public boolean remove(Object obj){\n  boolean res=false;\n  if (contains(obj)) {\n    Unit successor=getSuccOf((E)obj);\n    if (successor == null)     successor=getPredOf((E)obj);\n    res=innerChain.remove(obj);\n    ((E)obj).redirectJumpsToThisTo(successor);\n  }\n  return res;\n}\n", "nl": "Removes the given object from this Chain."}
{"code": "private void put122(final int b,final int s1,final int s2){\n  pool.put12(b,s1).putShort(s2);\n}\n", "nl": "Puts one byte and two shorts into the constant pool."}
{"code": "public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){\n  RecipeFragment fragment=new RecipeFragment();\n  fragment.recipe=recipe;\n  Bundle args=new Bundle();\n  args.putInt(ARG_SECTION_NUMBER,sectionNumber);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Returns a new instance of this fragment for the given section number."}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list."}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  WeekForeCastDao.dropTable(db,ifExists);\n  RealWeatherDao.dropTable(db,ifExists);\n  HourForeCastDao.dropTable(db,ifExists);\n  AqiDao.dropTable(db,ifExists);\n  ZhishuDao.dropTable(db,ifExists);\n  UseAreaDao.dropTable(db,ifExists);\n  AlarmsDao.dropTable(db,ifExists);\n}\n", "nl": "Drops underlying database table using DAOs."}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public static String arrayToString(String[] strs){\n  if (strs.length == 0) {\n    return \"\";\n  }\n  StringBuilder sbuf=new StringBuilder();\n  sbuf.append(strs[0]);\n  for (int idx=1; idx < strs.length; idx++) {\n    sbuf.append(\",\");\n    sbuf.append(strs[idx]);\n  }\n  return sbuf.toString();\n}\n", "nl": "Given an array of strings, return a comma-separated list of its elements."}
{"code": "public XPathMatcher(XPath xpath){\n  fLocationPaths=xpath.getLocationPaths();\n  fStepIndexes=new IntStack[fLocationPaths.length];\n  for (int i=0; i < fStepIndexes.length; i++)   fStepIndexes[i]=new IntStack();\n  fCurrentStep=new int[fLocationPaths.length];\n  fNoMatchDepth=new int[fLocationPaths.length];\n  fMatched=new int[fLocationPaths.length];\n}\n", "nl": "Constructs an XPath matcher that implements a document fragment handler."}
{"code": "public void deleteAllDimensionRows(){\n  try {\n    String dimRowIndexes=keyValueStore.get(DimensionStoreKeyUtils.getAllValuesKey());\n    if (dimRowIndexes == null) {\n      LOG.debug(\"Null value for dimension {} while deleting: \",apiName);\n      return;\n    }\n    String[] keys=objectMapper.readValue(dimRowIndexes,String[].class);\n    LinkedHashSet<String> dimRowKeys=new LinkedHashSet<>(Arrays.asList(keys));\n    for (    String dimRowKey : dimRowKeys) {\n      keyValueStore.remove(dimRowKey);\n    }\n    searchProvider.setKeyValueStore(keyValueStore);\n    keyValueStore.put(DimensionStoreKeyUtils.getCardinalityKey(),\"0\");\n    String allValuesKey=DimensionStoreKeyUtils.getAllValuesKey();\n    keyValueStore.put(allValuesKey,\"[]\");\n  }\n catch (  IOException e) {\n    LOG.error(\"Exception while reading dimension rows {}\",e);\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Internal method for cleaning the dimension rows."}
{"code": "private void init(final AttributeSet attrs){\n  Typeface typeface;\n  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {\n    super.setTypeface(typeface,typeface.getStyle());\n  }\n}\n", "nl": "Initialize custom font attribute."}
{"code": "public static ExpressionFactory newExpressionFactory(){\n  return new ExpressionFactoryImpl(new TreeStore(new ExtendedBuilder(),new Cache(1000)));\n}\n", "nl": "Returns an <code>ExpressionFactory</code> instance."}
{"code": "protected MarketAddQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of an item owner community Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community"}
{"code": "public void onStop(){\n}\n", "nl": "Called when view is stopped"}
{"code": "public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {\n  byte[] decoded=Base64.decodeFromFile(infile);\n  java.io.OutputStream out=null;\n  try {\n    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n    out.write(decoded);\n  }\n catch (  java.io.IOException e) {\n    throw e;\n  }\n finally {\n    try {\n      out.close();\n    }\n catch (    Exception ex) {\n    }\n  }\n}\n", "nl": "Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>."}
{"code": "public Builder perExecutorStatsLogger(StatsLogger perExecutorStatsLogger){\n  this.perExecutorStatsLogger=perExecutorStatsLogger;\n  return this;\n}\n", "nl": "Expose stats of individual executors over <code>perExecutorStatsLogger</code>. Each executor's stats will be exposed under a sub-scope `name`-executor-`id`-0. `name` is the scheduler name, while `id` is the index of the scheduler in the pool."}
{"code": "public static Map<String,Object> clearAllEntityCaches(DispatchContext dctx,Map<String,? extends Object> context){\n  Delegator delegator=dctx.getDelegator();\n  Boolean distributeBool=(Boolean)context.get(\"distribute\");\n  boolean distribute=false;\n  if (distributeBool != null)   distribute=distributeBool.booleanValue();\n  delegator.clearAllCaches(distribute);\n  return ServiceUtil.returnSuccess();\n}\n", "nl": "Clear All Entity Caches Service"}
{"code": "static int dp(Context context,int val){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,val,context.getResources().getDisplayMetrics());\n}\n", "nl": "Returns the given pixel value in dp"}
{"code": "public static int unsignedLeb128Size(int value){\n  int remaining=value >>> 7;\n  int count=0;\n  while (remaining != 0) {\n    remaining>>>=7;\n    count++;\n  }\n  return count + 1;\n}\n", "nl": "Gets the number of bytes in the unsigned LEB128 encoding of the given value."}
{"code": "public CallableDistributedTaskAdapter(){\n}\n", "nl": "Here just for externalizable."}
{"code": "public void updateDistances() throws Exception {\n  taxa=new Taxa();\n  java.util.List<String> pids=doc.getSampleNames();\n  for (  String name : pids) {\n    taxa.add(name);\n  }\n  if (taxa.size() < 4)   throw new IOException(\"Too few samples: \" + taxa.size());\n  distances=new Distances(taxa.size());\n  if (ecologicalIndex.equalsIgnoreCase(UniFrac.TOPOLOGICAL_UNIFRAC))   numberOfNodesUsed=UniFrac.apply(getParentViewer(),UniFrac.TOPOLOGICAL_UNIFRAC,1,distances);\n else   if (ecologicalIndex.equalsIgnoreCase(JensenShannonDivergence.SqrtJensenShannonDivergence))   numberOfNodesUsed=JensenShannonDivergence.apply(getParentViewer(),JensenShannonDivergence.SqrtJensenShannonDivergence,distances);\n else   if (ecologicalIndex.equalsIgnoreCase(PearsonDistance.PEARSON_DISTANCE))   numberOfNodesUsed=PearsonDistance.apply(doc,getParentViewer(),ecologicalIndex,distances);\n else   numberOfNodesUsed=CalculateEcologicalIndices.apply(doc,getParentViewer(),ecologicalIndex,distances,!getEcologicalIndex().contains(\"Goodall\"));\n  if (distances.replaceNaNByZero()) {\n    NotificationsInSwing.showWarning(getFrame(),\"Undefined distances detected, replaced by 0\");\n  }\n  getPcoaTab().clear();\n  getUpgmaTab().clear();\n  getNnetTab().clear();\n  getNJTab().clear();\n  matrixTab.setData(taxa,distances);\n}\n", "nl": "update distances"}
{"code": "private void refreshStateTag(final Supervised supervised,final Timestamp refreshTime){\n  try {\n    Long stateTagId;\n    String message;\n    SupervisionStatus status;\n    stateTagId=supervised.getStateTagId();\n    message=supervised.getStatusDescription();\n    status=supervised.getSupervisionStatus();\n    controlTagFacade.updateAndValidate(stateTagId,status.toString(),message,refreshTime);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Error while refreshing state tag for \" + supervised.getSupervisionEntity() + \" \"+ supervised.getId()+ \" - unable to refresh this tag.\",e);\n  }\n}\n", "nl": "Refreshes the state tag, using the current supervision status. Will only update the status tags in the cache if they have actually changed."}
{"code": "public void remove(LegionMemberEx legionMember){\n  legionMemberById.remove(legionMember.getObjectId());\n  legionMemberExById.remove(legionMember.getObjectId());\n  legionMemberExByName.remove(legionMember.getName());\n}\n", "nl": "Remove LegionMember from this Container."}
{"code": "public void collapse(NodeBase v){\n  if (v != null) {\n    for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {\n      v=(NodeBase)descendants.nextElement();\n      dataTree.collapsePath(new TreePath(v.getPath()));\n    }\n  }\n}\n", "nl": "collapse the given node   or root"}
{"code": "public void java_lang_Class_getFields0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());\n}\n", "nl": "Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object.   private native java.lang.reflect.Field getFields0(int)[];"}
{"code": "public boolean isBelow(Vector2 p,Vector2 q){\n  double diff=p.y - q.y;\n  if (diff == 0.0) {\n    if (p.x > q.x) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n else {\n    if (diff < 0.0) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n}\n", "nl": "Returns true if the given point p is below the given point q. <p> If the point p and q form a horizontal line then p is considered below if its x coordinate is greater than q's x coordinate."}
{"code": "public boolean runAfter(List list,int max){\n  return false;\n}\n", "nl": "Inherit doc comment from supertype."}
{"code": "private void updateButtonState(boolean dataChanged){\n  btnApply.setEnabled(dataChanged);\n  btnRevert.setEnabled(dataChanged);\n}\n", "nl": "Update button Apply/Revert state."}
{"code": "public boolean equivTo(Object c){\n  return equals(c);\n}\n", "nl": "Returns true if this object is structurally equivalent to c.  AbstractDataSources are equal and equivalent if their sourcename is the same"}
{"code": "public boolean hasSuperclass(){\n  checkLevel(HIERARCHY);\n  return superClass != null;\n}\n", "nl": "WARNING: interfaces are subclasses of the java.lang.Object class! Does this class have a superclass? False implies that this is the java.lang.Object class.  Note that interfaces are subclasses of the java.lang.Object class. "}
{"code": "@Override public synchronized void initialize(){\n  if (!mRootDirectory.exists()) {\n    if (!mRootDirectory.mkdirs()) {\n      VolleyLog.e(\"Unable to create cache dir %s\",mRootDirectory.getAbsolutePath());\n    }\n    return;\n  }\n  File[] files=mRootDirectory.listFiles();\n  if (files == null) {\n    return;\n  }\n  for (  File file : files) {\n    BufferedInputStream fis=null;\n    try {\n      fis=new BufferedInputStream(new FileInputStream(file));\n      CacheHeader entry=CacheHeader.readHeader(fis);\n      entry.size=file.length();\n      putEntry(entry.key,entry);\n    }\n catch (    IOException e) {\n      if (file != null) {\n        file.delete();\n      }\n    }\n finally {\n      try {\n        if (fis != null) {\n          fis.close();\n        }\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}\n", "nl": "Initializes the DiskBasedCache by scanning for all files currently in the specified root directory. Creates the root directory if necessary."}
{"code": "public void centerViewTo(float xValue,float yValue,AxisDependency axis){\n  float yInView=getAxisRange(axis) / mViewPortHandler.getScaleY();\n  float xInView=getXAxis().mAxisRange / mViewPortHandler.getScaleX();\n  Runnable job=MoveViewJob.getInstance(mViewPortHandler,xValue - xInView / 2f,yValue + yInView / 2f,getTransformer(axis),this);\n  addViewportJob(job);\n}\n", "nl": "This will move the center of the current viewport to the specified x and y value. This also refreshes the chart by calling invalidate()."}
{"code": "public void process() throws Exception {\n  logger.debug(\"Processing \" + sourceFile + \" files into \"+ destFile);\n  if (!sourceFile.exists()) {\n    throw new FileNotFoundException(\"Source file \" + sourceFile.getPath() + \" not found.\");\n  }\n  boolean needUpdate=false;\n  if (!destFile.exists()) {\n    logger.debug(\"Dest file not found - creating new file\");\n    needUpdate=true;\n  }\n else   if (!metaDataFile.exists()) {\n    logger.debug(\"Meta file not found - creating new file\");\n    needUpdate=true;\n  }\n else {\n    logger.debug(\"Dest file found - checking file modifications\");\n    needUpdate=checkFileModifications();\n  }\n  if (needUpdate) {\n    logger.debug(\"Modifications found. Updating...\");\n    try {\n      doUpdate();\n    }\n catch (    Exception e) {\n      FileUtils.deleteQuietly(destFile);\n      FileUtils.deleteQuietly(metaDataFile);\n      throw e;\n    }\n  }\n else {\n    logger.debug(\"Files are up-to-date\");\n  }\n}\n", "nl": "This method creates a result document if it is missing, or updates existing one if the source file has modification.<br /> If there are no changes - nothing happens."}
{"code": "public PostLexicalAnalyzer(){\n}\n", "nl": "Constructs a PostLexicalAnalyzer"}
{"code": "public Math_Vector sub(double x,double y){\n  this.x-=x;\n  this.y-=y;\n  return this;\n}\n", "nl": "sub the value from this Math_Vector"}
{"code": "public VideoRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"video.restoreComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Object directLocalReadById(Object id,String typeName,QueryResultTypeInternal queryResultType){\n  if (!_isLocalCache)   throw new EngineInternalSpaceException(\"Supported only in local cache\");\n  final IServerTypeDesc serverTypeDesc=_typeManager.getServerTypeDesc(typeName);\n  if (serverTypeDesc == null)   return null;\n  Object res=null;\n  boolean noUid=true;\n  if (serverTypeDesc.isActive()) {\n    if (serverTypeDesc.getTypeDesc().getIdPropertyName() == null)     return null;\n    if (serverTypeDesc.getTypeDesc().isAutoGenerateId())     noUid=false;\n    IEntryHolder entryHolder=noUid ? _cacheManager.getEntryByIdFromPureCache(id,serverTypeDesc) : directLocalReadByUidForClass((String)id,typeName);\n    res=getUserObjectFromEntryHolder(entryHolder,queryResultType);\n  }\n  if (res != null || !noUid)   return res;\n  IServerTypeDesc[] subTypes=serverTypeDesc.getAssignableTypes();\n  for (int i=1; i < subTypes.length; i++) {\n    IServerTypeDesc subType=_typeManager.getServerTypeDesc(subTypes[i].getTypeName());\n    if (subType == null || subType.isInactive())     continue;\n    if (subType.getTypeDesc().getIdPropertyName() == null)     return null;\n    IEntryHolder entryHolder=_cacheManager.getEntryByIdFromPureCache(id,subType);\n    res=getUserObjectFromEntryHolder(entryHolder,queryResultType);\n    if (res != null)     return res;\n  }\n  return null;\n}\n", "nl": "For local reads without xtn and timeout, used only in local cache, only with object reference mode"}
{"code": "public void loadNecessaryClasses(){\n  loadBasicClasses();\n  for (  String name : Options.v().classes()) {\n    loadNecessaryClass(name);\n  }\n  loadDynamicClasses();\n  if (Options.v().oaat()) {\n    if (Options.v().process_dir().isEmpty()) {\n      throw new IllegalArgumentException(\"If switch -oaat is used, then also -process-dir must be given.\");\n    }\n  }\n else {\n    for (    final String path : Options.v().process_dir()) {\n      for (      String cl : SourceLocator.v().getClassesUnder(path)) {\n        SootClass theClass=loadClassAndSupport(cl);\n        theClass.setApplicationClass();\n      }\n    }\n  }\n  prepareClasses();\n  setDoneResolving();\n}\n", "nl": "Load the set of classes that soot needs, including those specified on the command-line. This is the standard way of initialising the list of classes soot should use."}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANCEL_PETITION_OK2(int num1){\n  return new SM_SYSTEM_MESSAGE(1300553,num1);\n}\n", "nl": "The petition has been cancelled. You have %num1 Support Petitions left for today."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200955,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is in the transformation recovery state because [%SkillCaster] used [%SkillName]."}
{"code": "private void sendCrashToServer(Throwable ex){\n  LogUtil.d(\"sendCrashToServer\");\n  if (config.isReportToServer()) {\n    if (null != config) {\n      config.getReporter().report(ex);\n    }\n  }\n}\n", "nl": "report crash to Server"}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public void updateSymbol(PolygonSymbolizer polygonSymbolizer){\n  for (  VendorOptionInterface extension : vendorOptionList) {\n    boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionList,extension.getVendorOption());\n    if (displayVendorOption) {\n      extension.updateSymbol(polygonSymbolizer);\n    }\n  }\n}\n", "nl": "Update symbol but only if allowed to by the vendor options configuration."}
{"code": "public ClarifaiClient(String appId,String appSecret){\n  this(CLARIFAI_API_ROOT,appId,appSecret,InMemoryCredentialCache.getInstance());\n}\n", "nl": "Constructs a new ClarifaiClient. The appId and appSecret are specific to an application and can be obtained from the <a href=\"https://developer.clarifai.com/applications\"> Applications Dashboard</a>."}
{"code": "public boolean isEmpty(){\n  if (getRbacClass() == null && getRbacDevice() == null && getRbacProperty() == null)   return true;\n  return false;\n}\n", "nl": "Checks whether the authorization details is null or not."}
{"code": "@Override public WebElement findElementById(String id){\n  return ((FindsById)super.getWrappedDriver()).findElementById(id);\n}\n", "nl": "Finds element by id."}
{"code": "public DIPHardwareAddressImpl(final String pItemName,final int pFieldIndex) throws ConfigurationException {\n  this(pItemName,null,pFieldIndex);\n}\n", "nl": "Create a DIPHardwareAddress object for an array element. Example: \"item[index]\""}
{"code": "public static String composeConnectionName(final String clientId,final String serverURIs){\n  return clientId + \"@\" + serverURIs;\n}\n", "nl": "Composes a connection name based on the supplied client ID and server URIs."}
{"code": "public static Z1 uz1(int n) throws JampackException {\n  Z1 zone=new Z1(n);\n  for (int i=0; i < n; i++) {\n    zone.re[i]=R.nextDouble();\n    zone.im[i]=R.nextDouble();\n  }\n  return zone;\n}\n", "nl": "Generates a uniform random Z1."}
{"code": "public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n", "nl": "Proceed to the next available ring color. This will automatically wrap back to the beginning of colors."}
{"code": "public void denyAll(PermissionFlag flag){\n  denyAll(flag,defaultMessage);\n}\n", "nl": "Changes the default permission for a flag and removes all direct permissions, direct restrictions will be kept. The current default denial message will be used, if the default message changes later it will not update."}
{"code": "public HintsExample(){\n  oredCriteria=new ArrayList<Criteria>();\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints"}
{"code": "public void addPokestops(Collection<FortData> pokestops){\n  if (pokestops == null || pokestops.isEmpty()) {\n    return;\n  }\n  complete=true;\n  for (  FortData pokestop : pokestops) {\n    this.pokestops.add(new Pokestop(api,pokestop));\n  }\n}\n", "nl": "Add pokestops."}
{"code": "@Override public boolean isShowLabel(){\n  return showLabel;\n}\n", "nl": "Checks if is show label."}
{"code": "@Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {\n  try {\n    if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {\n      if (fLexicalHandler != null) {\n        fLexicalHandler.endEntity(name);\n      }\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}\n", "nl": "This method notifies the end of an entity. The DTD has the pseudo-name of \"[dtd]\" parameter entity names start with '%'; and general entity names are just the entity name. <p/> <strong>Note:</strong> Since the document is an entity, the handler will be notified of the end of the document entity by calling the endEntity method with the entity name \"[xml]\" <em>after</em> calling the endDocument method. When exposing entity boundaries through the SAX API, the document entity is never reported, however. <p/> <strong>Note:</strong> This method is not called for entity references appearing as part of attribute values."}
{"code": "private void prepareFramebuffer(int width,int height){\n  GlUtil.checkGlError(\"start\");\n  int[] values=new int[1];\n  GLES20.glGenTextures(1,values,0);\n  GlUtil.checkGlError(\"glGenTextures\");\n  mOffscreenTexture=values[0];\n  Log.i(TAG,\"prepareFramebuffer mOffscreenTexture:\" + mOffscreenTexture);\n  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mOffscreenTexture);\n  GlUtil.checkGlError(\"glBindTexture\");\n  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,width,height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);\n  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);\n  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);\n  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);\n  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);\n  GlUtil.checkGlError(\"glTexParameter\");\n  GLES20.glGenFramebuffers(1,values,0);\n  GlUtil.checkGlError(\"glGenFramebuffers\");\n  mFramebuffer=values[0];\n  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFramebuffer);\n  GlUtil.checkGlError(\"glBindFramebuffer \" + mFramebuffer);\n  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,mOffscreenTexture,0);\n  int status=GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER);\n  if (status != GLES20.GL_FRAMEBUFFER_COMPLETE) {\n    throw new RuntimeException(\"Framebuffer not complete, status=\" + status);\n  }\n  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);\n  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);\n  GlUtil.checkGlError(\"glBindFramebuffer\");\n}\n", "nl": "Prepares the off-screen framebuffer."}
{"code": "public static void updateDouble(VisualItem item,String field,double val){\n  item.setDouble(getStartField(field),item.getDouble(field));\n  item.setDouble(field,val);\n  item.setDouble(getEndField(field),val);\n}\n", "nl": "Update the values in an interpolated column (a set of three columns representing a current value along with starting and ending values). The current value will become the new starting value, while the given value will become the new current and ending values."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200922,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is unable to fly because [%SkillCaster] used [%SkillName]."}
{"code": "public void appendTier(PraatTier tier){\n  this.tiers.add(tier);\n}\n", "nl": "add a new tier at the end of the TextGrid's tiers"}
{"code": "@Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {\n}\n", "nl": "An unparsed entity declaration."}
{"code": "private static boolean isBracketsBalanced(String metricString){\n  Map<Character,Character> brackets=new HashMap<>();\n  brackets.put('[',']');\n  brackets.put('(',')');\n  Stack<Character> stack=new Stack<>();\n  for (int i=0; i < metricString.length(); i++) {\n    char currentChar=metricString.charAt(i);\n    if (brackets.containsKey(currentChar)) {\n      stack.push(currentChar);\n    }\n else     if (brackets.values().contains(currentChar) && (currentChar != brackets.get(stack.pop()))) {\n      return false;\n    }\n  }\n  return stack.empty();\n}\n", "nl": "Check if the brackets are balanced."}
{"code": "private void removeTokenPostpunctuation(){\n  if (token != null) {\n    String tokenWord=token.getWord();\n    int tokenLength=tokenWord.length();\n    int position=tokenLength - 1;\n    while (position > 0 && postpunctuationSymbols.indexOf((int)tokenWord.charAt(position)) != -1) {\n      position--;\n    }\n    if (tokenLength - 1 != position) {\n      token.setPostpunctuation(tokenWord.substring(position + 1));\n      token.setWord(tokenWord.substring(0,position + 1));\n    }\n else {\n      token.setPostpunctuation(\"\");\n    }\n  }\n}\n", "nl": "Removes the postpunctuation characters from the current token. Copies those postpunctuation characters to the class variable 'postpunctuation'."}
{"code": "public void destroy(){\n  destroyOverlayPanelContent();\n}\n", "nl": "Destroy the native components associated with this panel's content."}
{"code": "public EigenValueDecomposition(Matrix Arg){\n  double[][] A=Arg.getArray();\n  n=Arg.getColumnDimension();\n  V=new double[n][n];\n  d=new double[n];\n  e=new double[n];\n  issymmetric=true;\n  for (int j=0; (j < n) & issymmetric; j++) {\n    for (int i=0; (i < n) & issymmetric; i++) {\n      issymmetric=(A[i][j] == A[j][i]);\n    }\n  }\n  if (issymmetric) {\n    for (int i=0; i < n; i++) {\n      for (int j=0; j < n; j++) {\n        V[i][j]=A[i][j];\n      }\n    }\n    tred2();\n    tql2();\n  }\n else {\n    H=new double[n][n];\n    ort=new double[n];\n    for (int j=0; j < n; j++) {\n      for (int i=0; i < n; i++) {\n        H[i][j]=A[i][j];\n      }\n    }\n    orthes();\n    hqr2();\n  }\n}\n", "nl": "Check for symmetry, then construct the eigenvalue decomposition"}
{"code": "public void removePadding(){\n  if (padding != null) {\n    box.remove(padding);\n  }\n}\n", "nl": "Removes the padding."}
{"code": "public static TableMetadata readTableMetadata(String fileName) throws IOException {\n  byte[] encoded=Files.readAllBytes(Paths.get(fileName));\n  return TableMetadata.fromJson(new String(encoded,StandardCharsets.UTF_8));\n}\n", "nl": "Reads in a json-formatted file and creates a TableMetadata instance from it. Files are expected to be in the format provided by TableMetadata}"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_CANT_USE_DUPLICATED_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1400177,value0);\n}\n", "nl": "You can no longer use %0 as the number of allowed usage has been reached."}
{"code": "public Entry toCacheEntry(byte[] data){\n  Entry e=new Entry();\n  e.data=data;\n  e.etag=etag;\n  e.serverDate=serverDate;\n  e.lastModified=lastModified;\n  e.ttl=ttl;\n  e.softTtl=softTtl;\n  e.responseHeaders=responseHeaders;\n  return e;\n}\n", "nl": "Creates a cache entry for the specified data."}
{"code": "public ElementType parent(){\n  return theType.parent();\n}\n", "nl": "Return the parent element type of the element's type. Convenience method."}
{"code": "private static void applyLightDown(ChunkManager manager,int currentX,int currentY,float lightValue){\n  if (currentX < 0 || currentX >= (ChunkManager.CHUNKS_X * Chunk.CHUNK_SIZE) || currentY < 0 || currentY >= (ChunkManager.CHUNKS_Y * Chunk.CHUNK_SIZE)) {\n    return;\n  }\n  Chunk posChunk=manager.getChunkFromTilePos(currentX,currentY);\n  int posChunkX=currentX - (posChunk.getStartX() * Chunk.CHUNK_SIZE);\n  int posChunkY=currentY - (posChunk.getStartY() * Chunk.CHUNK_SIZE);\n  lightValue-=BlockManager.getBlock(posChunk.getBlock(posChunkX,posChunkY)).getLightBlockingAmount();\n  float totalLight=lightValue;\n  if (totalLight <= posChunk.getLightValue(posChunkX,posChunkY))   return;\n  posChunk.setLightValue(totalLight,posChunkX,posChunkY);\n  if (lightValue <= LightUtils.MIN_LIGHT_VALUE)   return;\n  applyLightDown(manager,currentX,currentY - 1,lightValue);\n}\n", "nl": "Applies light only downwards and doesn't extend out. Used for the lighting from the sun."}
{"code": "public static DataFile makeDataFile(URL definitionUrl,String dataFileName) throws DataFileException {\n  ModelDataFileReader reader=ModelDataFileReader.getModelDataFileReader(definitionUrl);\n  if (reader == null) {\n    throw new DataFileException(\"Could not load definition file located at \\\"\" + definitionUrl + \"\\\"\");\n  }\n  ModelDataFile modelDataFile=reader.getModelDataFile(dataFileName);\n  if (modelDataFile == null) {\n    throw new DataFileException(\"Could not find file definition for data file named \\\"\" + dataFileName + \"\\\"\");\n  }\n  DataFile dataFile=new DataFile(modelDataFile);\n  return dataFile;\n}\n", "nl": "Creates a DataFile object using the specified definition."}
{"code": "@Override public void write(int b) throws IOException {\n  out.write(b);\n  md5.Update((byte)b);\n}\n", "nl": "Writes a byte."}
{"code": "public GroupsEditQuery obsceneWords(List<String> value){\n  return unsafeParam(\"obscene_words\",value);\n}\n", "nl": "Keywords for stopwords filter"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "@Override public Object validate(Object content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {\n  if (context == null)   context=fEmptyContext;\n  if (validatedInfo == null)   validatedInfo=new ValidatedInfo();\n else   validatedInfo.memberType=null;\n  boolean needNormalize=context == null || context.needToNormalize();\n  Object ob=getActualValue(content,context,validatedInfo,needNormalize);\n  validate(context,validatedInfo);\n  return ob;\n}\n", "nl": "validate a value, and return the compiled form"}
{"code": "public Vector add(Vector vec){\n  x+=vec.x;\n  y+=vec.y;\n  z+=vec.z;\n  return this;\n}\n", "nl": "Adds a vector to this one"}
{"code": "public static int exportTaxon2ReadIds(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {\n  int totalLines=0;\n  try {\n    final MainViewer viewer=dir.getMainViewer();\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){\n      final IConnector connector=viewer.getDir().getDocument().getConnector();\n      final IClassificationBlock classificationBlock=connector.getClassificationBlock(viewer.getClassName());\n      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();\n      progressListener.setSubtask(\"Taxa to read Ids\");\n      progressListener.setMaximum(taxonIds.size());\n      progressListener.setProgress(0);\n      for (      int taxonId : taxonIds) {\n        Set<Integer> allBelow;\n        Node v=viewer.getTaxId2Node(taxonId);\n        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId);\n else {\n          allBelow=new HashSet<>();\n          allBelow.add(taxonId);\n        }\n        final String name=getTaxonLabelSource(dir,format,taxonId);\n        if (name != null) {\n          w.write(name);\n          for (          int id : allBelow) {\n            if (classificationBlock.getSum(id) > 0) {\n              try (IReadBlockIterator it=connector.getReadsIterator(viewer.getClassName(),id,0,10000,true,false)){\n                while (it.hasNext()) {\n                  String readId=it.next().getReadName();\n                  w.write(separator + \"\" + readId);\n                }\n              }\n               w.write(\"\\n\");\n              totalLines++;\n              progressListener.checkForCancel();\n            }\n          }\n        }\n        progressListener.incrementProgress();\n      }\n    }\n   }\n catch (  CanceledException canceled) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return totalLines;\n}\n", "nl": "export taxon-path to number of reads assigned"}
{"code": "private void tinkerPreVerifiedCrashHandler(Throwable ex){\n  if (Utils.isXposedExists(ex)) {\n    ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();\n    if (applicationLike == null || applicationLike.getApplication() == null) {\n      return;\n    }\n    if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {\n      return;\n    }\n    boolean isCausedByXposed=false;\n    if (ShareTinkerInternals.isVmArt()) {\n      isCausedByXposed=true;\n    }\n else     if (ex instanceof IllegalAccessError && ex.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n      isCausedByXposed=true;\n    }\n    if (isCausedByXposed) {\n      SampleTinkerReport.onXposedCrash();\n      TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n      ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n      TinkerApplicationHelper.cleanPatch(applicationLike);\n      ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n      Toast.makeText(applicationLike.getApplication(),\"please uninstall Xposed, illegal modify the app\",Toast.LENGTH_LONG).show();\n    }\n  }\n}\n", "nl": "Such as Xposed, if it try to load some class before we load from patch files. With dalvik, it will crash with \"Class ref in pre-verified class resolved to unexpected implementation\". With art, it may crash at some times. But we can't know the actual crash type. If it use Xposed, we can just clean patch or mention user to uninstall it."}
{"code": "@PostConstruct public void loadRuleParentIds(){\n  LOGGER.trace(\"Entering loadRuleParentIds()...\");\n  LOGGER.trace(\"Trying to get cache lock for \" + RuleTagCache.cacheInitializedKey);\n  clusterCache.acquireWriteLockOnKey(RuleTagCache.cacheInitializedKey);\n  try {\n    Boolean isRuleCachePostProcessed=Boolean.FALSE;\n    if (clusterCache.hasKey(ruleCachePostProcessedKey)) {\n      isRuleCachePostProcessed=(Boolean)clusterCache.getCopy(ruleCachePostProcessedKey);\n    }\n    if (!isRuleCachePostProcessed.booleanValue()) {\n      LOGGER.info(\"Setting parent ids for rules...\");\n      ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(threadPoolMin,threadPoolMax,5,TimeUnit.SECONDS,new ArrayBlockingQueue<Runnable>(1000));\n      LoaderTask task=new LoaderTask();\n      int counter=0;\n      for (      Long key : ruleTagCache.getKeys()) {\n        task.addKey(key);\n        counter++;\n        if (counter == 500) {\n          threadPoolExecutor.execute(task);\n          task=new LoaderTask();\n          counter=0;\n        }\n      }\n      threadPoolExecutor.execute(task);\n      threadPoolExecutor.shutdown();\n      try {\n        threadPoolExecutor.awaitTermination(1200,TimeUnit.SECONDS);\n      }\n catch (      InterruptedException e) {\n        LOGGER.warn(\"Exception caught while waiting for rule parent id loading threads to complete (waited longer then timeout?): \",e);\n      }\n      LOGGER.info(\"... rule parent ids set.\");\n      clusterCache.put(ruleCachePostProcessedKey,Boolean.TRUE);\n    }\n else {\n      LOGGER.info(\"Cache \" + RuleTagCache.cacheInitializedKey + \" was already initialized. No need for action..\");\n    }\n  }\n  finally {\n    clusterCache.releaseWriteLockOnKey(RuleTagCache.cacheInitializedKey);\n    LOGGER.trace(\"Released cache lock .. for \" + RuleTagCache.cacheInitializedKey);\n  }\n  LOGGER.trace(\"Leaving loadRuleParentIds()\");\n}\n", "nl": "Loads parent ids in batches of 500 on bean creation, if the distributed cache is being initialised."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_CHANGE_CHANNEL_COOLTIME(String durationtime0,String durationtime1){\n  return new SM_SYSTEM_MESSAGE(1400068,durationtime0,durationtime1);\n}\n", "nl": "You must wait %DURATIONTIME0 to use the channel change function. Time Remaining: %DURATIONTIME1"}
{"code": "public void updateKey(byte[] newKey){\n  this.key=newKey;\n}\n", "nl": "Update the key for packet encryption/decryption with the Blowfish Cipher"}
{"code": "private static int lastIndexOf(Object o,Object[] elements,int index){\n  if (o == null) {\n    for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i;\n  }\n else {\n    for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i;\n  }\n  return -1;\n}\n", "nl": "static version of lastIndexOf."}
{"code": "public synchronized void noteUnsettledTxn(Object tid){\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(TxnManagerImpl.class.getName(),\"noteUnsettledTxn\",new Object[]{tid});\n  }\n  unsettledtxns.add(tid);\n  notifyAll();\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.exiting(TxnManagerImpl.class.getName(),\"noteUnsettledTxn\");\n  }\n}\n", "nl": "Informs the transaction manager to attempt to settle a given transaction."}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (policy == null) {\n    throw new InvalidObjectException(\"null policy\");\n  }\n  if (classpath == null) {\n    throw new InvalidObjectException(\"null class path\");\n  }\n  if (log == null) {\n    throw new InvalidObjectException(\"null log\");\n  }\n  if (serverOptions == null) {\n    throw new InvalidObjectException(\"null server options\");\n  }\n  if (serverProperties == null) {\n    throw new InvalidObjectException(\"null server properties\");\n  }\n  if (host == null) {\n    throw new InvalidObjectException(\"null activation host name\");\n  }\n  if (port <= 0) {\n    throw new InvalidObjectException(\"invalid activation port: \" + port);\n  }\n}\n", "nl": "Reads the default serializable field values for this object. Also, verifies that the deserialized values are legal."}
{"code": "public PhotosPutTagQuery y(Float value){\n  return unsafeParam(\"y\",value);\n}\n", "nl": "Upper left-corner coordinate of the tagged area (as a percentage of the photo's height)."}
{"code": "public V remove(Object key){\n  return backedMap.remove(key);\n}\n", "nl": "Removes the mapping for a key from this map if it is present (optional operation).   More formally, if this map contains a mapping from key <tt>k</tt> to value <tt>v</tt> such that <code>(key==null ?  k==null : key.equals(k))</code>, that mapping is removed.  (The map can contain at most one such mapping.) <p/> <p>Returns the value to which this map previously associated the key, or <tt>null</tt> if the map contained no mapping for the key. <p/> <p>If this map permits null values, then a return value of <tt>null</tt> does not <i>necessarily</i> indicate that the map contained no mapping for the key; it's also possible that the map explicitly mapped the key to <tt>null</tt>. <p/> <p>The map will not contain a mapping for the specified key once the call returns."}
{"code": "public static String checkNull(String string1,String string2,String string3){\n  if (string1 != null)   return string1;\n else   if (string2 != null)   return string2;\n else   if (string3 != null)   return string3;\n else   return \"\";\n}\n", "nl": "Returns the first passed String if not null, otherwise the second if not null, otherwise the third if not null, otherwise an empty but non-null String."}
{"code": "public FactoryConfigurationError(java.lang.String msg,java.lang.Exception e){\n  super(msg);\n  nested=e;\n}\n", "nl": "Construct an exception with a nested inner exception and a message"}
{"code": "@Override public void undo(Transaction tx){\n}\n", "nl": "Does nothing, because a commit record contains no undo information."}
{"code": "private void createVendorOptionPanel(){\n  vendorOptionFillFactory=new VendorOptionFillFactory(getPanelId(),getFunctionManager());\n  List<VendorOptionInterface> voList=vendorOptionFillFactory.getVendorOptionList();\n  if (voList != null) {\n    for (    VendorOptionInterface vendorOption : voList) {\n      vendorOption.setParentPanel(this);\n    }\n  }\n}\n", "nl": "Creates the vendor option panel."}
{"code": "@Override public void readAttributes(DataSourceAttributeListInterface attributeData){\n  if (attributeData == null) {\n    return;\n  }\n  List<DataSourceAttributeData> valueMap=new ArrayList<DataSourceAttributeData>();\n  SimpleFeatureCollection featureCollection=dataSourceInfo.getFeatureCollection();\n  if (featureCollection != null) {\n    SimpleFeatureIterator iterator=featureCollection.features();\n    Map<Integer,Name> fieldNameMap=dataSourceInfo.getFieldNameMap();\n    Map<Integer,Class<?>> fieldTypeMap=dataSourceInfo.getFieldTypeMap();\n    if (iterator.hasNext()) {\n      SimpleFeature feature=iterator.next();\n      List<Object> attributes=feature.getAttributes();\n      for (int i=0; i < attributes.size(); i++) {\n        Name fieldName=fieldNameMap.get(i);\n        Class<?> type=fieldTypeMap.get(i);\n        if (type == Geometry.class) {\n          Object value=feature.getAttribute(fieldName);\n          type=value.getClass();\n        }\n        DataSourceAttributeData data=new DataSourceAttributeData(fieldName,type,attributes.get(i));\n        valueMap.add(data);\n      }\n    }\n  }\n  attributeData.setData(valueMap);\n}\n", "nl": "Read attributes."}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.teams"}
{"code": "public void addObserver(final FileAlterationObserver observer){\n  if (observer != null) {\n    observers.add(observer);\n  }\n}\n", "nl": "Add a file system observer to this monitor."}
{"code": "protected void createImageDescriptor(String id,URL baseURL){\n  URL url=null;\n  try {\n    url=new URL(baseURL,IRevisionGraphConstants.ICON_PATH + id);\n  }\n catch (  MalformedURLException e) {\n  }\n  ImageDescriptor desc=ImageDescriptor.createFromURL(url);\n  imageDescriptors.put(id,desc);\n}\n", "nl": "Creates an image and places it in the image registry."}
{"code": "public static final String name(SimpleGroupPath group,MetricName metric){\n  return name(Stream.concat(group.getPath().stream(),metric.getPath().stream()).collect(Collectors.joining(\".\")));\n}\n", "nl": "Convert a group+metric to a wavefront name. Concatenates the paths of a Group and a Metric, separating each path element with a dot ('.'). Example: - group path: [ 'example', 'group', 'path' ] - and metric: [ 'metric', 'name' ] are concatenated into \"example.group.path.metric.name\". The concatenated name is cleaned to only contain characters allowed by wavefront. (See the WavefrontString.name(String) function.)"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getUpgmaTab());\n}\n", "nl": "action to be performed"}
{"code": "public static void removeAllServices() throws RpcException {\n  try {\n    ServicePublisher.removeAllServices();\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while removing all services\",e);\n  }\n}\n", "nl": "remove all pigeon services, including unregister these services from registry"}
{"code": "public static boolean isBlazeProject(Project project){\n  return BlazeImportSettingsManager.getInstance(project).getImportSettings() != null;\n}\n", "nl": "Returns whether this project was imported from blaze."}
{"code": "public static boolean hasExtension(String extension){\n  if (extension == null || extension.isEmpty()) {\n    return false;\n  }\n  return extensionToMimeTypeMap.containsKey(extension);\n}\n", "nl": "Returns true if the given extension has a registered MIME type."}
{"code": "@Override public int run(){\n  this.model=setupModel();\n  return super.run();\n}\n", "nl": "Runs the tool. Returns a non-zero exit code on errors."}
{"code": "public boolean hasNavigationBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public Object clone(){\n  byte[] newData=new byte[length];\n  System.arraycopy(data,0,newData,0,newData.length);\n  MetaMessage event=new MetaMessage(newData);\n  return event;\n}\n", "nl": "Creates a new object of the same class and with the same contents as this object."}
{"code": "public AlreadySpawnedException(){\n  super();\n}\n", "nl": "Constructs an <code>AlreadySpawnedException</code> with no detail message."}
{"code": "protected UtilsResolveScreenNameQuery screenName(String value){\n  return unsafeParam(\"screen_name\",value);\n}\n", "nl": "Screen name of the user, community (e.g., \"apiclub,\" \"andrew\", or \"rules_of_war\"), or application."}
{"code": "public static ToolbarTapTarget forToolbarOverflow(android.widget.Toolbar toolbar,CharSequence title){\n  return forToolbarOverflow(toolbar,title,null);\n}\n", "nl": "Return a tap target for the overflow button from the given toolbar <p> <b>Note:</b> This is currently experimental, use at your own risk"}
{"code": "public double dot(Vector other){\n  return x * other.x + y * other.y + z * other.z;\n}\n", "nl": "Calculates the dot product of this vector with another. The dot product is defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar."}
{"code": "public static Map<String,Object> copyPartyContactMechs(DispatchContext dctx,Map<String,? extends Object> context){\n  Delegator delegator=dctx.getDelegator();\n  LocalDispatcher dispatcher=dctx.getDispatcher();\n  GenericValue userLogin=(GenericValue)context.get(\"userLogin\");\n  String partyIdFrom=(String)context.get(\"partyIdFrom\");\n  String partyIdTo=(String)context.get(\"partyIdTo\");\n  Locale locale=(Locale)context.get(\"locale\");\n  try {\n    List<Map<String,Object>> valueMaps=ContactMechWorker.getPartyContactMechValueMaps(delegator,partyIdFrom,false);\n    for (    Map<String,Object> thisMap : valueMaps) {\n      GenericValue contactMech=(GenericValue)thisMap.get(\"contactMech\");\n      GenericValue partyContactMech=(GenericValue)thisMap.get(\"partyContactMech\");\n      List<GenericValue> partyContactMechPurposes=UtilGenerics.checkList(thisMap.get(\"partyContactMechPurposes\"));\n      String contactMechId=contactMech.getString(\"contactMechId\");\n      Map<String,Object> serviceResults=dispatcher.runSync(\"createPartyContactMech\",UtilMisc.<String,Object>toMap(\"partyId\",partyIdTo,\"userLogin\",userLogin,\"contactMechId\",contactMechId,\"fromDate\",UtilDateTime.nowTimestamp(),\"allowSolicitation\",partyContactMech.getString(\"allowSolicitation\"),\"extension\",partyContactMech.getString(\"extension\")));\n      if (ServiceUtil.isError(serviceResults)) {\n        return serviceResults;\n      }\n      for (      GenericValue purpose : partyContactMechPurposes) {\n        Map<String,Object> input=UtilMisc.toMap(\"partyId\",partyIdTo,\"contactMechId\",contactMechId,\"userLogin\",userLogin);\n        input.put(\"contactMechPurposeTypeId\",purpose.getString(\"contactMechPurposeTypeId\"));\n        serviceResults=dispatcher.runSync(\"createPartyContactMechPurpose\",input);\n        if (ServiceUtil.isError(serviceResults)) {\n          return serviceResults;\n        }\n      }\n    }\n  }\n catch (  GenericServiceException e) {\n    Debug.logError(e,e.getMessage(),module);\n    return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"PartyCannotCopyPartyContactMech\",UtilMisc.toMap(\"errorString\",e.getMessage()),locale));\n  }\n  return ServiceUtil.returnSuccess();\n}\n", "nl": "Copies all contact mechs from one party to another. Does not delete or overwrite any contact mechs."}
{"code": "public void addNewRule(Rule rule){\n  if (this.symbolData.getFeatureTypeStyle() == null) {\n    ConsoleManager.getInstance().error(this,\"featureTypeStyle == null\");\n  }\n else {\n    List<Rule> ruleList=(List<Rule>)this.symbolData.getFeatureTypeStyle().rules();\n    ruleList.add(rule);\n  }\n}\n", "nl": "Adds the new rule."}
{"code": "protected static void checkValue(Object value){\n  if (!(value instanceof Long))   throw new IllegalArgumentException(\"value is not a Long\");\n}\n", "nl": "Check that the value is a Long"}
{"code": "public static String keepCartUpdated(HttpServletRequest request,HttpServletResponse response){\n  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute(\"dispatcher\");\n  HttpSession session=request.getSession();\n  ShoppingCart cart=getCartObject(request);\n  if (cart.getUserLogin() == null) {\n    GenericValue userLogin=(GenericValue)session.getAttribute(\"userLogin\");\n    if (userLogin != null) {\n      try {\n        cart.setUserLogin(userLogin,dispatcher);\n      }\n catch (      CartItemModifyException e) {\n        Debug.logWarning(e,module);\n      }\n    }\n  }\n  if (cart.getAutoUserLogin() == null) {\n    GenericValue autoUserLogin=(GenericValue)session.getAttribute(\"autoUserLogin\");\n    if (autoUserLogin != null) {\n      if (cart.getUserLogin() == null) {\n        try {\n          cart.setAutoUserLogin(autoUserLogin,dispatcher);\n        }\n catch (        CartItemModifyException e) {\n          Debug.logWarning(e,module);\n        }\n      }\n else {\n        cart.setAutoUserLogin(autoUserLogin);\n      }\n    }\n  }\n  Locale locale=UtilHttp.getLocale(request);\n  if (cart.getLocale() == null || !locale.equals(cart.getLocale())) {\n    cart.setLocale(locale);\n  }\n  return \"success\";\n}\n", "nl": "Update the cart's UserLogin object if it isn't already set."}
{"code": "private void copyIn(Object[] toCopyIn,int first,int n){\n  int limit=first + n;\n  if (limit > toCopyIn.length)   throw new IndexOutOfBoundsException();\n  Object[] newElements=copyOfRange(toCopyIn,first,limit,Object[].class);\nsynchronized (this) {\n    setArray(newElements);\n  }\n}\n", "nl": "Replaces the held array with a copy of the <tt>n</tt> elements of the provided array, starting at position <tt>first</tt>.  To copy an entire array, call with arguments (array, 0, array.length)."}
{"code": "public void loadIdentity(){\n  m01=m02=m10=m12=m20=m21=0;\n  m00=m11=m22=1;\n}\n", "nl": "<code>loadIdentity</code> sets this matrix to the identity matrix. Where all values are zero except those along the diagonal which are one."}
{"code": "private void deletePassword(Intent data){\n  if (data != null && data.hasExtra(PASSWORD_LIST_DELETED_ID)) {\n    int deletedId=data.getIntExtra(PASSWORD_LIST_DELETED_ID,-1);\n    boolean isException=data.getBooleanExtra(DELETED_ITEM_IS_EXCEPTION,false);\n    if (isException) {\n      mPasswordManagerHandler.removeSavedPasswordException(deletedId);\n    }\n else {\n      mPasswordManagerHandler.removeSavedPasswordEntry(deletedId);\n    }\n  }\n}\n", "nl": "Called when a Password is deleted from PasswordEntryEditor."}
{"code": "@Override public BigFraction divide(final BigFraction fraction){\n  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);\n  if (fraction.numerator.signum() == 0) {\n    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);\n  }\n  if (numerator.signum() == 0) {\n    return ZERO;\n  }\n  return multiply(fraction.reciprocal());\n}\n", "nl": "<p> Divide the value of this fraction by another, returning the result in reduced form. </p>"}
{"code": "public double readDouble() throws JMSException {\n  initializeReading();\n  try {\n    if (this.dataIn.available() == 0) {\n      throw new MessageEOFException(\"reached end of data\");\n    }\n    this.dataIn.mark(65);\n    int type=this.dataIn.read();\n    if (type == _DOUBLE) {\n      return this.dataIn.readDouble();\n    }\n    if (type == _FLOAT) {\n      return this.dataIn.readFloat();\n    }\n    if (type == _STRING) {\n      return Double.valueOf(this.dataIn.readUTF()).doubleValue();\n    }\n    if (type == _NULL) {\n      this.dataIn.reset();\n      throw new NullPointerException(\"Cannot convert _NULL value to double.\");\n    }\n else {\n      this.dataIn.reset();\n      throw new MessageFormatException(\" not a double type\");\n    }\n  }\n catch (  NumberFormatException mfe) {\n    try {\n      this.dataIn.reset();\n    }\n catch (    IOException ioe) {\n      JMSException jmsEx=new JMSException(\"reset failed\");\n      jmsEx.setLinkedException(ioe);\n    }\n    throw mfe;\n  }\ncatch (  EOFException e) {\n    JMSException jmsEx=new MessageEOFException(e.toString());\n    jmsEx.setLinkedException(e);\n    throw jmsEx;\n  }\ncatch (  IOException e) {\n    JMSException jmsEx=new MessageFormatException(e.toString());\n    jmsEx.setLinkedException(e);\n    throw jmsEx;\n  }\n}\n", "nl": "Reads a <code>double</code> from the stream message."}
{"code": "public XIncludeParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){\n  super(symbolTable,grammarPool,parentSettings);\n  fXIncludeHandler=new XIncludeHandler();\n  addCommonComponent(fXIncludeHandler);\n  final String[] recognizedFeatures={ALLOW_UE_AND_NOTATION_EVENTS,XINCLUDE_FIXUP_BASE_URIS,XINCLUDE_FIXUP_LANGUAGE};\n  addRecognizedFeatures(recognizedFeatures);\n  final String[] recognizedProperties={XINCLUDE_HANDLER,NAMESPACE_CONTEXT};\n  addRecognizedProperties(recognizedProperties);\n  setFeature(ALLOW_UE_AND_NOTATION_EVENTS,true);\n  setFeature(XINCLUDE_FIXUP_BASE_URIS,true);\n  setFeature(XINCLUDE_FIXUP_LANGUAGE,true);\n  setProperty(XINCLUDE_HANDLER,fXIncludeHandler);\n  setProperty(NAMESPACE_CONTEXT,new XIncludeNamespaceSupport());\n}\n", "nl": "Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p/>"}
{"code": "public boolean equals(Object obj){\n  return (obj instanceof ClientMaxPrincipalType && Constraint.equal(classes,((ClientMaxPrincipalType)obj).classes));\n}\n", "nl": "Two instances of this class are equal if they have the same classes (ignoring order)."}
{"code": "public void action(){\n  Location[] lLocations;\n  NGramDocumentComparatorAgent aAgent=((NGramDocumentComparatorAgent)myAgent);\n  if ((lLocations=aAgent.getActiveContainerList()) == null)   return;\n  boolean bMigrate=Math.random() < aAgent.MigrationProbability;\n  bMigrate=bMigrate && (lLocations.length > 1);\n  if (bMigrate) {\n    int iServerIdx=(int)Math.floor(Math.random() * (double)lLocations.length);\n    int iCnt=0;\n    while (lLocations[iServerIdx].getID().equals(myAgent.here().getID())) {\n      ++iServerIdx;\n      iServerIdx%=lLocations.length;\n      if (++iCnt == 3)       break;\n    }\n    if (lLocations[iServerIdx].getID().equals(myAgent.here().getID())) {\n      myAgent.addBehaviour(new InformForCompleteMoveBehaviour());\n      if (!aAgent.Silent) {\nsynchronized (System.err) {\n          System.err.println(\"Local execution...\");\n        }\n      }\n      return;\n    }\n else     if (!aAgent.Silent)     System.err.println(\"Migrating to \" + lLocations[iServerIdx].getName());\n    myAgent.doMove(lLocations[iServerIdx]);\n  }\n else {\n    myAgent.addBehaviour(new InformForCompleteMoveBehaviour());\n    if (!aAgent.Silent) {\nsynchronized (System.err) {\n        System.err.println(\"Local execution...\");\n      }\n    }\n    return;\n  }\n}\n", "nl": "Performs the migration. It uses the parent agents migration probability  to determine if migration should occur."}
{"code": "public boolean isApplicable(){\n  ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getChartData().getNumberOfSeries() > 0 && viewer.getChartSelection().getSelectedSeries().size() < viewer.getChartData().getNumberOfSeries();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public TypeDecl type(){\n  if (type_computed) {\n    return type_value;\n  }\n  ASTNode$State state=state();\n  int num=state.boundariesCrossed;\n  boolean isFinal=this.is$Final();\n  type_value=type_compute();\n  if (isFinal && num == state().boundariesCrossed)   type_computed=true;\n  return type_value;\n}\n", "nl": "The type of a NumericLiteral is undefined. The literal must be parsed before it can have a type."}
{"code": "public void addImportDecl(ImportDecl node){\n  List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the ImportDecl list."}
{"code": "@Override public int read(byte[] b,int off,int len) throws IOException {\n  int sampleSizeInBytes=frameSize / inputChannels;\n  int outputFrameSize=sampleSizeInBytes * 2;\n  int nFrames=len / outputFrameSize;\n  byte[] inputBytes=new byte[nFrames * frameSize];\n  int nInputBytes=super.read(inputBytes,0,inputBytes.length);\n  if (nInputBytes <= 0)   return nInputBytes;\n  if (inputChannels == 1) {\n    if (outputMode == AudioPlayer.STEREO) {\n      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {\n        for (int k=0; k < sampleSizeInBytes; k++) {\n          b[j + k]=b[j + sampleSizeInBytes + k]=inputBytes[i + k];\n        }\n      }\n    }\n else     if (outputMode == AudioPlayer.LEFT_ONLY) {\n      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {\n        throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());\n      }\n      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {\n        for (int k=0; k < sampleSizeInBytes; k++) {\n          b[j + k]=inputBytes[i + k];\n          b[j + sampleSizeInBytes + k]=0;\n        }\n      }\n    }\n else {\n      assert outputMode == AudioPlayer.RIGHT_ONLY : \"Unexpected output mode: \" + outputMode;\n      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {\n        throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());\n      }\n      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {\n        for (int k=0; k < sampleSizeInBytes; k++) {\n          b[j + k]=0;\n          b[j + sampleSizeInBytes + k]=inputBytes[i + k];\n        }\n      }\n    }\n  }\n else {\n    if (outputMode == AudioPlayer.STEREO) {\n      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {\n        System.arraycopy(inputBytes,i,b,j,outputFrameSize);\n      }\n    }\n else     if (outputMode == AudioPlayer.LEFT_ONLY) {\n      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {\n        throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());\n      }\n      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {\n        for (int k=0; k < sampleSizeInBytes; k++) {\n          b[j + k]=inputBytes[i + k];\n          b[j + sampleSizeInBytes + k]=0;\n        }\n      }\n    }\n else {\n      assert outputMode == AudioPlayer.RIGHT_ONLY : \"Unexpected output mode: \" + outputMode;\n      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {\n        throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());\n      }\n      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {\n        for (int k=0; k < sampleSizeInBytes; k++) {\n          b[j + k]=0;\n          b[j + sampleSizeInBytes + k]=inputBytes[i + sampleSizeInBytes + k];\n        }\n      }\n    }\n  }\n  return 2 * nInputBytes / inputChannels;\n}\n", "nl": "Reads up to a specified maximum number of bytes of data from the audio stream, putting them into the given byte array. <p>This method will always read an integral number of frames. If <code>len</code> does not specify an integral number of frames, a maximum of <code>len - (len % frameSize) </code> bytes will be read."}
{"code": "public CatalogException(Exception e){\n  super();\n  this.exceptionType=WRAPPER;\n  this.exception=e;\n}\n", "nl": "Create a new CatalogException wrapping an existing exception. <p/> <p>The existing exception will be embedded in the new one, and its message will become the default message for the CatalogException.</p>"}
{"code": "public BeyondExtended(Expression expression1,Expression expression2){\n  super(expression1,expression2);\n}\n", "nl": "Instantiates a new beyond extended."}
{"code": "public void logoutUser(){\n  this.firebaseAuth.signOut();\n}\n", "nl": "Allows to logout the current user"}
{"code": "public static ArrayList<String> splitString(String text){\n  return splitString(text,MAX_SIZE);\n}\n", "nl": "Divides a string into chunks."}
{"code": "private String uploadImage(String name,byte[] bytes) throws IOException {\n  FileResource fileResource=new FileResource(name,MimeTypeUtils.IMAGE_PNG.toString(),bytes.length,ByteSource.wrap(bytes).hash(Hashing.md5()).toString(),FileResourceDomain.PUSH_ANALYSIS);\n  fileResourceService.saveFileResource(fileResource,bytes);\n  ExternalFileResource externalFileResource=new ExternalFileResource();\n  externalFileResource.setFileResource(fileResource);\n  externalFileResource.setExpires(null);\n  String accessToken=externalFileResourceService.saveExternalFileResource(externalFileResource);\n  return systemSettingManager.getInstanceBaseUrl() + \"/api/externalFileResources/\" + accessToken;\n}\n", "nl": "Uploads a byte array using FileResource and ExternalFileResource"}
{"code": "boolean isRecovering(){\n  return recoverMessages.size() > 0;\n}\n", "nl": "Tells whether the session is recovering."}
{"code": "final void addHalfEdges(DoubleEdgeListVertex v1,DoubleEdgeListVertex v2){\n  DoubleEdgeListFace face=new DoubleEdgeListFace();\n  DoubleEdgeListHalfEdge left=new DoubleEdgeListHalfEdge();\n  DoubleEdgeListHalfEdge right=new DoubleEdgeListHalfEdge();\n  DoubleEdgeListFace referenceDoubleEdgeListFace=this.getReferenceFace(v1,v2);\n  DoubleEdgeListHalfEdge prev1=this.getPreviousEdge(v1,referenceDoubleEdgeListFace);\n  DoubleEdgeListHalfEdge prev2=this.getPreviousEdge(v2,referenceDoubleEdgeListFace);\n  face.edge=left;\n  referenceDoubleEdgeListFace.edge=right;\n  left.face=face;\n  left.next=prev2.next;\n  left.origin=v1;\n  left.twin=right;\n  right.face=referenceDoubleEdgeListFace;\n  right.next=prev1.next;\n  right.origin=v2;\n  right.twin=left;\n  prev1.next=left;\n  prev2.next=right;\n  DoubleEdgeListHalfEdge curr=left.next;\n  while (curr != left) {\n    curr.face=face;\n    curr=curr.next;\n  }\n  this.edges.add(left);\n  this.edges.add(right);\n  this.faces.add(face);\n}\n", "nl": "Adds two half edges to this DCEL object given the vertices to connect. <p> This method assumes that no crossing edges will be added."}
{"code": "private void updateUrlViewportBounds(Rect out,VisualState visualState,boolean ignoreTranslationY){\n  int leftViewPosition=getViewBoundsLeftOfLocationBar(visualState);\n  int rightViewPosition=getViewBoundsRightOfLocationBar(visualState);\n  leftViewPosition-=mUrlBackgroundPadding.left;\n  if (mUrlExpansionPercent != 0f) {\n    leftViewPosition*=(1f - mUrlExpansionPercent);\n    leftViewPosition-=mUrlBackgroundPadding.left * mUrlExpansionPercent;\n  }\n  rightViewPosition+=mUrlBackgroundPadding.right;\n  if (mUrlExpansionPercent != 0f) {\n    rightViewPosition+=((getWidth() - rightViewPosition) * mUrlExpansionPercent);\n    rightViewPosition+=mUrlBackgroundPadding.right * mUrlExpansionPercent;\n  }\n  out.set(leftViewPosition,0,rightViewPosition,(int)(mPhoneLocationBar.getMeasuredHeight() + (getHeight() - mPhoneLocationBar.getMeasuredHeight() + mUrlBackgroundPadding.bottom + mUrlBackgroundPadding.top) * mUrlExpansionPercent));\n  float yOffset=ignoreTranslationY ? mPhoneLocationBar.getTop() : mPhoneLocationBar.getY();\n  out.offset(0,(int)(yOffset - (mUrlBackgroundPadding.top * mUrlExpansionPercent)));\n}\n", "nl": "Calculate the bounds for UrlViewport and set them to out rect."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_GAME_TIME(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390146,value0,value1);\n}\n", "nl": "Game Time: %0 %1"}
{"code": "public static Pose matrixToPose(Matrix4 m){\n  Vector3 p=m.getTranslation();\n  Quaternion q=new Quaternion();\n  q.fromMatrix(m);\n  q.conjugate();\n  return new Pose(p,q);\n}\n", "nl": "Helper method to extract a Pose object from a transformation matrix taking into account Rajawali conventions."}
{"code": "public static Long[] transformLongArray(long[] source){\n  Long[] destin=new Long[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert long array to Long array"}
{"code": "public void build(NotLikeNode node) throws SQLException {\n  if (node.isJoined())   throwIllegalJoinExpressionException(node);\n  ColumnNode col=(ColumnNode)node.getLeftChild();\n  QueryTableData tableData=col.getColumnData().getColumnTableData();\n  Object value=((LiteralNode)node.getRightChild()).getConvertedObject(tableData.getTypeDesc(),col.getColumnPath());\n  String regex=((String)value).replaceAll(\"%\",\".*\").replaceAll(\"_\",\".\");\n  NotRegexRange range=new NotRegexRange(col.getColumnPath(),col.getFunctionCallDescription(),regex);\n  node.setTemplate(new QueryTemplatePacket(tableData,query.getQueryResultType(),col.getColumnPath(),range));\n}\n", "nl": "Special build for not like - since it can't be translated to a space template. The query"}
{"code": "public static Histogram groupByHistogram(Histogram hist,Set<String> groupFlds,Set<AggregationFn> aggFns){\n  if (Double.compare(hist.recordsOutput(),1.0) < 0)   return new Histogram(hist.fields());\n  double dvProd=1.0;\n  for (  String fld : groupFlds) {\n    double dv=0.0;\n    for (    Bucket bkt : hist.buckets(fld))     dv+=bkt.distinctValues();\n    dvProd*=dv;\n  }\n  double numGroups=Math.min(dvProd,hist.recordsOutput());\n  double gbReduction=numGroups / hist.recordsOutput();\n  Histogram gbHist=new Histogram(groupFlds);\n  for (  String fld : groupFlds) {\n    for (    Bucket bkt : hist.buckets(fld)) {\n      double newFreq=bkt.frequency() * gbReduction;\n      if (Double.compare(newFreq,1.0) < 0)       continue;\n      gbHist.addBucket(fld,new Bucket(bkt.valueRange(),newFreq,bkt.distinctValues(),bkt.valuePercentiles()));\n    }\n  }\n  if (aggFns != null) {\n    for (    AggregationFn aggFn : aggFns) {\n      String argFld=aggFn.argumentFieldName();\n      String fld=aggFn.fieldName();\n      if (aggFn.getClass().equals(SumFn.class))       gbHist.addBucket(fld,sumBucket(hist.buckets(argFld),numGroups));\n else       if (aggFn.getClass().equals(AvgFn.class))       gbHist.addBucket(fld,avgBucket(hist.buckets(argFld),numGroups));\n else       if (aggFn.getClass().equals(CountFn.class))       gbHist.addBucket(fld,countBucket(hist.buckets(argFld),numGroups));\n else       if (aggFn.getClass().equals(DistinctCountFn.class))       gbHist.addBucket(fld,distinctCountBucket(hist.buckets(argFld),numGroups));\n else       if (aggFn.getClass().equals(MinFn.class))       gbHist.addBucket(fld,minBucket(hist.buckets(argFld),numGroups));\n else       if (aggFn.getClass().equals(MaxFn.class))       gbHist.addBucket(fld,maxBucket(hist.buckets(argFld),numGroups));\n else       throw new UnsupportedOperationException();\n    }\n  }\n  return syncHistogram(gbHist);\n}\n", "nl": "Returns a histogram that, for each field, approximates distribution of values in the group-by and aggregation fields. <p> Assumes that: <ul> <li>Distributions of values in group-by fields are independent with each other</li> <li>Aggregate values in different groups are distinct</li> <li></li> </ul>"}
{"code": "public static ToolbarTapTarget forToolbarOverflow(Toolbar toolbar,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,false,title,description);\n}\n", "nl": "Return a tap target for the overflow button from the given toolbar <p> <b>Note:</b> This is currently experimental, use at your own risk"}
{"code": "@Override public boolean accept(File file){\n  String name=file.getName();\n  for (  String wildcard : wildcards) {\n    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches one of the wildcards."}
{"code": "public SourceCommandTag(final Long id,final String name,final int sourceTimeout,final int sourceRetries,final HardwareAddress hwAddress){\n  this.id=id;\n  this.name=name;\n  this.sourceTimeout=sourceTimeout;\n  this.sourceRetries=sourceRetries;\n  this.hardwareAddress=hwAddress;\n}\n", "nl": "Creates a new SourceCommandTag."}
{"code": "private static SnapCandidate createSnapCandidate(ConstraintWidget widget,ConstraintAnchor.Type type,int x,int y){\n  SnapCandidate candidate=new SnapCandidate();\n  candidate.source=widget.getAnchor(type);\n  ConstraintWidget owner=widget.getParent();\n  ConstraintAnchor anchor=new ConstraintAnchor(owner,type);\n  candidate.x=x;\n  candidate.y=y;\n  candidate.target=anchor;\n  return candidate;\n}\n", "nl": "Internal utility function to create a snap candidate on the fly for a margin."}
{"code": "public WallEditQuery placeId(Integer value){\n  return unsafeParam(\"place_id\",value);\n}\n", "nl": "ID of the location where the user was tagged."}
{"code": "public Builder bufferSize(int bufferSize){\n  this._bufferSize=bufferSize;\n  return this;\n}\n", "nl": "Set the output buffer size. <p>If output buffer size is 0, the writes will be transmitted to wire immediately."}
{"code": "private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  _identityExportObjTable=new HashMap<WeakKey,WeakReference<Remote>>();\n}\n", "nl": "reconstruct the GenericExporter after serialization"}
{"code": "public boolean findNext(String regularExpression){\n  return findFirst(regularExpression);\n}\n", "nl": "Find next instance"}
{"code": "public Attr createAttributeNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {\n  return new AttrNSImpl(this,namespaceURI,qualifiedName,localpart);\n}\n", "nl": "NON-DOM: a factory method used by the Xerces DOM parser to create an element."}
{"code": "public boolean first() throws GenericEntityException {\n  try {\n    return resultSet.first();\n  }\n catch (  SQLException e) {\n    if (!closed) {\n      this.close();\n      Debug.logWarning(\"Warning: auto-closed EntityListIterator because of exception: \" + e.toString(),module);\n    }\n    throw new GenericEntityException(\"Error setting the cursor to first\",e);\n  }\n}\n", "nl": "Sets the cursor position to first result; if result set is empty returns false"}
{"code": "public void addRule(String ruleExpression,T resultIfMatched){\n  mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched));\n}\n", "nl": "Add a matching rule in the canonical MIME T form such as \"image/*\" or a MIME T literal such as \"text/html\"."}
{"code": "@SuppressLint(\"NewApi\") public static void postInvalidateOnAnimation(View view){\n  if (Build.VERSION.SDK_INT >= 16)   view.postInvalidateOnAnimation();\n else   view.postInvalidateDelayed(10);\n}\n", "nl": "Original method view.postInvalidateOnAnimation() only supportd in API >= 16, This is a replica of the code from ViewCompat."}
{"code": "public static String separatorsToWindows(String path){\n  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {\n    return path;\n  }\n  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n}\n", "nl": "Converts all separators to the Windows separator of backslash."}
{"code": "public HeaderIterator iterator(){\n  return new SaveListHeaderIterator(this.headers,null);\n}\n", "nl": "Returns an iterator over this group of headers."}
{"code": "private boolean isDerivedByRestriction(String ancestorNS,String ancestorName,XSTypeDefinition type){\n  XSTypeDefinition oldType=null;\n  while (type != null && type != oldType) {\n    if ((ancestorName.equals(type.getName())) && ((ancestorNS != null && ancestorNS.equals(type.getNamespace())) || (type.getNamespace() == null && ancestorNS == null))) {\n      return true;\n    }\n    oldType=type;\n    type=type.getBaseType();\n  }\n  return false;\n}\n", "nl": "DOM Level 3 Checks if a type is derived from another by restriction. See: http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#TypeInfo-isDerivedFrom"}
{"code": "@deprecated public static final boolean equals(CharSequence other,int codepoint){\n  return equals(codepoint,other);\n}\n", "nl": "/*    "}
{"code": "public DartRandom(){\n  super((EmptyConstructorMarker)null,thisType);\n  rnd=new SecureRandom();\n}\n", "nl": "Creates a new cryptographically-secure RNG."}
{"code": "private Response<Bitmap> doParse(NetworkResponse response){\n  byte[] data=response.data;\n  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();\n  Bitmap bitmap=null;\n  if (mMaxWidth == 0 && mMaxHeight == 0) {\n    decodeOptions.inPreferredConfig=mDecodeConfig;\n    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n  }\n else {\n    decodeOptions.inJustDecodeBounds=true;\n    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    int actualWidth=decodeOptions.outWidth;\n    int actualHeight=decodeOptions.outHeight;\n    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);\n    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);\n    decodeOptions.inJustDecodeBounds=false;\n    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);\n    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {\n      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);\n      tempBitmap.recycle();\n    }\n else {\n      bitmap=tempBitmap;\n    }\n  }\n  if (bitmap == null) {\n    return Response.error(new ParseError(response));\n  }\n else {\n    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));\n  }\n}\n", "nl": "The real guts of parseNetworkResponse. Broken out for readability."}
{"code": "public static InputStream toInputStream(String input,Charset encoding){\n  return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding)));\n}\n", "nl": "Convert the specified string to an input stream, encoded as bytes using the specified character encoding."}
{"code": "public static int round(double value){\n  return value > 0 ? (int)(value + 0.5) : -(int)(Math.abs(value) + 0.5);\n}\n", "nl": "Rounds a double to the next nearest integer value. The JDK version of it doesn't work properly."}
{"code": "@Override public Change updateConfig(Equipment equipment,Properties properties) throws IllegalAccessException {\n  if ((properties.getProperty(\"processId\")) != null) {\n    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,\"Reconfiguration of \" + \"Equipment does not currently allow it to be reassigned to a different Process!\");\n  }\n  return super.updateConfig(equipment,properties);\n}\n", "nl": "Overridden as for Equipment rule out updating the process this equipment is associated to."}
{"code": "public final void finalize(){\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"finalize() - Removing the reference to the TimPersistenManager\");\n  }\n  persistenceManager=null;\n}\n", "nl": "It sets the persistenceManager to null, so it could be released by the garbage collector if needed"}
{"code": "public static String stringToHex(final String data){\n  return new String(Hex.encodeHex(ConversionUtils.stringToArray(data)));\n}\n", "nl": "Converts the given string into a HEX string."}
{"code": "public static double min(double[] data){\n  double min=Double.NaN;\n  for (int i=0; i < data.length; i++) {\n    if (Double.isNaN(data[i]))     continue;\n    if (Double.isNaN(min) || data[i] < min)     min=data[i];\n  }\n  return min;\n}\n", "nl": "Find the minimum of all elements in the array, ignoring elements that are NaN."}
{"code": "public UsersIsAppUserQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.isAppUser\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void expandPanel(StateChangeReason reason){\n  animatePanelToState(PanelState.EXPANDED,reason);\n}\n", "nl": "Animates the Contextual Search Panel to its intermediary state."}
{"code": "public Matrix4f adjoint(Matrix4f store){\n  if (store == null) {\n    store=new Matrix4f();\n  }\n  float fA0=m00 * m11 - m01 * m10;\n  float fA1=m00 * m12 - m02 * m10;\n  float fA2=m00 * m13 - m03 * m10;\n  float fA3=m01 * m12 - m02 * m11;\n  float fA4=m01 * m13 - m03 * m11;\n  float fA5=m02 * m13 - m03 * m12;\n  float fB0=m20 * m31 - m21 * m30;\n  float fB1=m20 * m32 - m22 * m30;\n  float fB2=m20 * m33 - m23 * m30;\n  float fB3=m21 * m32 - m22 * m31;\n  float fB4=m21 * m33 - m23 * m31;\n  float fB5=m22 * m33 - m23 * m32;\n  store.m00=+m11 * fB5 - m12 * fB4 + m13 * fB3;\n  store.m10=-m10 * fB5 + m12 * fB2 - m13 * fB1;\n  store.m20=+m10 * fB4 - m11 * fB2 + m13 * fB0;\n  store.m30=-m10 * fB3 + m11 * fB1 - m12 * fB0;\n  store.m01=-m01 * fB5 + m02 * fB4 - m03 * fB3;\n  store.m11=+m00 * fB5 - m02 * fB2 + m03 * fB1;\n  store.m21=-m00 * fB4 + m01 * fB2 - m03 * fB0;\n  store.m31=+m00 * fB3 - m01 * fB1 + m02 * fB0;\n  store.m02=+m31 * fA5 - m32 * fA4 + m33 * fA3;\n  store.m12=-m30 * fA5 + m32 * fA2 - m33 * fA1;\n  store.m22=+m30 * fA4 - m31 * fA2 + m33 * fA0;\n  store.m32=-m30 * fA3 + m31 * fA1 - m32 * fA0;\n  store.m03=-m21 * fA5 + m22 * fA4 - m23 * fA3;\n  store.m13=+m20 * fA5 - m22 * fA2 + m23 * fA1;\n  store.m23=-m20 * fA4 + m21 * fA2 - m23 * fA0;\n  store.m33=+m20 * fA3 - m21 * fA1 + m22 * fA0;\n  return store;\n}\n", "nl": "Places the adjoint of this matrix in store (creates store if null.)"}
{"code": "private void sendMail(){\n  String emailAddress;\n  try {\n    Class<?> stringClass=R.string.class;\n    Field mailLoggerField=stringClass.getField(\"mail_logger\");\n    int emailAddressId=(Integer)mailLoggerField.get(null);\n    emailAddress=getString(emailAddressId);\n  }\n catch (  Exception e) {\n    emailAddress=\"\";\n  }\n  ArrayList<Uri> uris=new ArrayList<Uri>();\n  for (  String file : Log_OC.getLogFileNames()) {\n    File logFile=new File(mLogPath,file);\n    if (logFile.exists()) {\n      uris.add(Uri.fromFile(logFile));\n    }\n  }\n  Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);\n  intent.putExtra(Intent.EXTRA_EMAIL,emailAddress);\n  String subject=String.format(getString(R.string.log_send_mail_subject),getString(R.string.app_name));\n  intent.putExtra(Intent.EXTRA_SUBJECT,subject);\n  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  intent.setType(MAIL_ATTACHMENT_TYPE);\n  intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);\n  try {\n    startActivity(intent);\n  }\n catch (  ActivityNotFoundException e) {\n    Toast.makeText(this,getString(R.string.log_send_no_mail_app),Toast.LENGTH_LONG).show();\n    Log_OC.i(TAG,\"Could not find app for sending log history.\");\n  }\n}\n", "nl": "Start activity for sending email with logs attached"}
{"code": "public void addColumnListener(ColumnListener listener){\n  return;\n}\n", "nl": "Does nothing."}
{"code": "public static Intent createWhatsAppShareIntent(String body){\n  Intent intent=new Intent();\n  intent.setAction(Intent.ACTION_SEND);\n  intent.putExtra(Intent.EXTRA_TEXT,body);\n  intent.setType(\"text/plain\");\n  intent.setPackage(\"com.whatsapp\");\n  return intent;\n}\n", "nl": "Create a WhatsApp share intent"}
{"code": "QueryChanges limit(int limit){\n  Preconditions.checkArgument(limit > 0);\n  this.limit=limit;\n  return this;\n}\n", "nl": "Limit the number of results"}
{"code": "public Code39Reader(){\n  this(false);\n}\n", "nl": "Creates a reader that assumes all encoded data is data, and does not treat the final character as a check digit. It will not decoded \"extended Code 39\" sequences."}
{"code": "public void removeDiscoveryListener(DiscoveryListener listener){\n  listeners.remove(listener);\n}\n", "nl": "Removes a listener from the set of objects listening for discovery events. If the listener object input to this method does not exist in the set of listeners, then this method will take no action."}
{"code": "public static int extractReads(final ProgressListener progressListener,final String classificationName,final Collection<Integer> classIds,final Map<Integer,String> classId2Name,Map<Integer,Collection<Integer>> classId2Descendants,final String outDirectory,final String outFileName,final Document doc,final boolean summarized) throws IOException, CanceledException {\n  progressListener.setSubtask(\"Searching through classification by \" + classificationName);\n  final IConnector connector=doc.getConnector();\n  int numberOfReads=0;\n  final IClassificationBlock classificationBlock=connector.getClassificationBlock(classificationName);\n  if (classificationBlock == null)   return 0;\n  BufferedWriter w=null;\n  try {\n    progressListener.setMaximum(10 * classIds.size());\n    final boolean useMultipleFileNames=outFileName.contains(\"%t\");\n    for (    Integer classId : classIds) {\n      Set<Integer> all=new HashSet<>();\n      all.add(classId);\n      if (summarized && classId2Descendants.get(classId) != null)       all.addAll(classId2Descendants.get(classId));\n      final String outFileFinalName;\n      if (useMultipleFileNames)       outFileFinalName=outFileName.replaceAll(\"%t\",Basic.toCleanName(classId2Name.get(classId)));\n else       outFileFinalName=outFileName;\n      File outFile=new File(outDirectory,outFileFinalName);\n      for (      Integer id : all) {\n        if (classificationBlock.getSum(id) > 0) {\n          try (IReadBlockIterator it=connector.getReadsIterator(classificationName,id,0,10000,true,false)){\n            while (it.hasNext()) {\n              if (w == null)               w=new BufferedWriter(new FileWriter(outFile));\n              IReadBlock readBlock=it.next();\n              String readHeader=readBlock.getReadHeader();\n              if (!readHeader.startsWith(\">\"))               w.write(\">\");\n              w.write(readHeader);\n              if (!readHeader.endsWith(\"\\n\"))               w.write(\"\\n\");\n              String readData=readBlock.getReadSequence();\n              if (readData != null) {\n                w.write(readData);\n                if (!readData.endsWith(\"\\n\"))                 w.write(\"\\n\");\n              }\n              numberOfReads++;\n              progressListener.checkForCancel();\n            }\n          }\n           progressListener.checkForCancel();\n        }\n      }\n      progressListener.incrementProgress();\n      if (useMultipleFileNames && w != null) {\n        w.close();\n        w=null;\n      }\n    }\n  }\n catch (  CanceledException ex) {\n    System.err.println(\"USER CANCELED\");\n  }\n finally {\n    if (w != null)     w.close();\n  }\n  return numberOfReads;\n}\n", "nl": "extracts all reads for the given classes"}
{"code": "public PassthroughRule(String label){\n  this.label=label;\n}\n", "nl": "Creates a new PassthroughRule, which accepts everything it's provided."}
{"code": "private static Comparable castToComparable(Object obj){\n  try {\n    return (Comparable)obj;\n  }\n catch (  ClassCastException cce) {\n    throw new IllegalArgumentException(\"Type \" + obj.getClass() + \" doesn't implement Comparable, Serialization mode might be different than \"+ StorageType.OBJECT+ \".\",cce);\n  }\n}\n", "nl": "Cast the object to Comparable otherwise throws an IllegalArgumentException exception"}
{"code": "protected static ImageIcon createImageIcon(String path){\n  java.net.URL imgURL=ImageFileExtensionUtils.class.getResource(path);\n  if (imgURL != null) {\n    return new ImageIcon(imgURL);\n  }\n else {\n    ConsoleManager.getInstance().error(ImageFileExtensionUtils.class,\"Couldn't find file: \" + path);\n    return null;\n  }\n}\n", "nl": "Returns an ImageIcon, or null if the path was invalid."}
{"code": "public AdsAddOfficeUsersQuery addOfficeUsers(UserActor actor,int accountId,String data){\n  return new AdsAddOfficeUsersQuery(getClient(),actor,accountId,data);\n}\n", "nl": "Adds managers and/or supervisors to advertising account."}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,LaunchScreen.class);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity"}
{"code": "public static boolean equal(Entry[] attrSet1,Entry[] attrSet2){\n  return contains(attrSet1,attrSet2) && contains(attrSet2,attrSet1);\n}\n", "nl": "Tests that two <code>Entry[]</code> arrays are the same."}
{"code": "public static RestMethod create(Method method,RestKind kind,String collectionName,String customMethodName){\n  return new RestMethod(method,kind,collectionName,customMethodName);\n}\n", "nl": "Create a new REST method."}
{"code": "@ManagedOperation(description=\"Refreshes all state tags (new timestamp).\") public void refreshStateTags(){\n  LOGGER.info(\"Recovery task: refreshing state tags.\");\n  supervisionFacade.refreshStateTags();\n  LOGGER.info(\"Recovery task: finished refreshing state tags.\");\n}\n", "nl": "Refresh all state tags with new timestamps."}
{"code": "protected GroupsGetMembersQueryWithFields fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "List of additional fields to be returned."}
{"code": "private void addNewModelForAssociatedModel(Collection<DataSupport> associatedModelCollection,DataSupport baseObj){\n  if (!associatedModelCollection.contains(baseObj)) {\n    associatedModelCollection.add(baseObj);\n  }\n}\n", "nl": "Force to build bidirectional associations for the associated model. If it has already built, ignoring the rest process."}
{"code": "public static Map<String,Integer> offsetMap(Schema sch){\n  int pos=0;\n  Map<String,Integer> offsetMap=new HashMap<String,Integer>();\n  for (  String fldname : sch.fields()) {\n    offsetMap.put(fldname,pos);\n    pos+=Page.maxSize(sch.type(fldname));\n  }\n  return offsetMap;\n}\n", "nl": "Returns the map of field name to offset of a specified schema."}
{"code": "@Override public void startCDATA(){\n  theNextState=S_CDATA;\n}\n", "nl": "A callback for the ScanHandler that allows it to force the lexer state to CDATA content (no markup is recognized except the end of element."}
{"code": "public TypeRef makeRepeated(){\n  return interner.intern(new TypeRef(kind,Cardinality.REPEATED,messageType,enumType));\n}\n", "nl": "Makes the given type to have cardinality repeated."}
{"code": "public void bind(@NonNull RecyclerView recyclerView){\n  unbind();\n  this.recyclerViewWeakReference=new WeakReference<>(recyclerView);\n  recyclerView.getAdapter().registerAdapterDataObserver(this);\n}\n", "nl": "Bind observer to recycler view's adapter. This method must be called after setting adapter to recycler view."}
{"code": "final public void addCallTarget(MethodPAG srcmpag,MethodPAG tgtmpag,Stmt s,Context srcContext,Context tgtContext,Edge e){\n  MethodNodeFactory srcnf=srcmpag.nodeFactory();\n  MethodNodeFactory tgtnf=tgtmpag.nodeFactory();\n  InvokeExpr ie=s.getInvokeExpr();\n  boolean virtualCall=callAssigns.containsKey(ie);\n  int numArgs=ie.getArgCount();\n  for (int i=0; i < numArgs; i++) {\n    Value arg=ie.getArg(i);\n    if (!(arg.getType() instanceof RefLikeType))     continue;\n    if (arg instanceof NullConstant)     continue;\n    Node argNode=srcnf.getNode(arg);\n    argNode=srcmpag.parameterize(argNode,srcContext);\n    argNode=argNode.getReplacement();\n    Node parm=tgtnf.caseParm(i);\n    parm=tgtmpag.parameterize(parm,tgtContext);\n    parm=parm.getReplacement();\n    addEdge(argNode,parm);\n    Pair<Node,Node> pval=addInterproceduralAssignment(argNode,parm,e);\n    callAssigns.put(ie,pval);\n    callToMethod.put(ie,srcmpag.getMethod());\n  }\n  if (ie instanceof InstanceInvokeExpr) {\n    InstanceInvokeExpr iie=(InstanceInvokeExpr)ie;\n    Node baseNode=srcnf.getNode(iie.getBase());\n    baseNode=srcmpag.parameterize(baseNode,srcContext);\n    baseNode=baseNode.getReplacement();\n    Node thisRef=tgtnf.caseThis();\n    thisRef=tgtmpag.parameterize(thisRef,tgtContext);\n    thisRef=thisRef.getReplacement();\n    addEdge(baseNode,thisRef);\n    Pair<Node,Node> pval=addInterproceduralAssignment(baseNode,thisRef,e);\n    callAssigns.put(ie,pval);\n    callToMethod.put(ie,srcmpag.getMethod());\n    if (virtualCall && !virtualCallsToReceivers.containsKey(ie)) {\n      virtualCallsToReceivers.put(ie,baseNode);\n    }\n  }\n  if (s instanceof AssignStmt) {\n    Value dest=((AssignStmt)s).getLeftOp();\n    if (dest.getType() instanceof RefLikeType && !(dest instanceof NullConstant)) {\n      Node destNode=srcnf.getNode(dest);\n      destNode=srcmpag.parameterize(destNode,srcContext);\n      destNode=destNode.getReplacement();\n      Node retNode=tgtnf.caseRet();\n      retNode=tgtmpag.parameterize(retNode,tgtContext);\n      retNode=retNode.getReplacement();\n      addEdge(retNode,destNode);\n      Pair<Node,Node> pval=addInterproceduralAssignment(retNode,destNode,e);\n      callAssigns.put(ie,pval);\n      callToMethod.put(ie,srcmpag.getMethod());\n    }\n  }\n}\n", "nl": "Adds method target as a possible target of the invoke expression in s. If target is null, only creates the nodes for the call site, without actually connecting them to any target method."}
{"code": "public boolean want(Edge e){\n  return e.isExplicit();\n}\n", "nl": "Returns true iff the edge e is wanted."}
{"code": "public void calculateCenter(){\n  if (center == null) {\n    center=new Vector3f(pointa);\n  }\n else {\n    center.set(pointa);\n  }\n  center.addLocal(pointb).addLocal(pointc).multLocal(FastMath.ONE_THIRD);\n}\n", "nl": "calculateCenter finds the average point of the triangle."}
{"code": "protected MarketAddAlbumQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Collection title"}
{"code": "public IdsQuery(String typeName,Object[] ids,QueryResultType queryResultType){\n  this(typeName,ids,null,null,queryResultType);\n}\n", "nl": "Creates an IdsQuery using the specified type, IDs and query result type."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200905,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer paralyzed."}
{"code": "public void readLoop(ReadCallback readCallback) throws IOException {\n  Frame frame=new Frame();\n  do {\n    frame.readFrom(mBufferedInput);\n    mCurrentPayload.write(frame.payloadData,0,(int)frame.payloadLen);\n    if (frame.fin) {\n      byte[] completePayload=mCurrentPayload.toByteArray();\n      readCallback.onCompleteFrame(frame.opcode,completePayload,completePayload.length);\n      mCurrentPayload.reset();\n    }\n  }\n while (frame.opcode != Frame.OPCODE_CONNECTION_CLOSE);\n}\n", "nl": "Enter a loop processing incoming frames until orderly shutdown or a socket exception is thrown.  This method returns normally on orderly shutdown, throws otherwise."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SKIN_CHANGE_TIME_EXPIRED(String value0){\n  return new SM_SYSTEM_MESSAGE(1400291,value0);\n}\n", "nl": "The appearance maintain time for %0 has expired and the appearance modification effect has been removed."}
{"code": "public void outputData(){\n  out.println(\"The res:\");\n  for (int i=0; i < allNum; i++) {\n    out.println(check_data[i]);\n  }\n}\n", "nl": "for testing and debug."}
{"code": "public List<String> tokenize(URL url,PrintWriter writer){\n  try {\n    System.out.println(\"Extracting the text content of the URL...\");\n    String text=ArticleExtractor.INSTANCE.getText(new InputStreamReader(url.openStream(),\"UTF-8\"));\n    if (verbose) {\n      System.out.println(\"URL text content:\");\n      System.out.println(text);\n    }\n    System.out.println(\"Tokenizing the content...\");\n    JavaRDD<String> input=jsc.parallelize(Arrays.asList(text.split(\"\\\\n+\")));\n    JavaRDD<String> output=tokenize(input.map(normalizationFunction));\n    List<String> lines=output.collect();\n    for (    String line : lines) {\n      writer.write(line);\n      writer.write('\\n');\n    }\n    writer.flush();\n    return lines;\n  }\n catch (  BoilerpipeProcessingException e) {\n    e.printStackTrace();\n  }\ncatch (  UnsupportedEncodingException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n", "nl": "Tokenizes a text specified in an URL and writes the result to  a writer."}
{"code": "private Base64(){\n}\n", "nl": "Defeats instantiation."}
{"code": "public LinkedList<Patch> patch_make(LinkedList<Diff> diffs){\n  if (diffs == null) {\n    throw new IllegalArgumentException(\"Null inputs. (patch_make)\");\n  }\n  String text1=diff_text1(diffs);\n  return patch_make(text1,diffs);\n}\n", "nl": "Compute a list of patches to turn text1 into text2. text1 will be derived from the provided diffs."}
{"code": "public GumbelDistribution(double mu,double beta) throws MathIllegalArgumentException {\n  if (beta <= 0) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,beta);\n  }\n  this.beta=beta;\n  this.mu=mu;\n}\n", "nl": "Build a new instance."}
{"code": "public Bundler putIntArray(String key,int[] value){\n  bundle.putIntArray(key,value);\n  return this;\n}\n", "nl": "Inserts an int array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null."}
{"code": "public boolean pre_jimplify(){\n  return soot.PhaseOptions.getBoolean(options,\"pre-jimplify\");\n}\n", "nl": "Pre Jimplify -- Jimplify all methods before starting Spark. When this option is set to true, Spark converts all available  methods to Jimple before starting the points-to analysis. This  allows the Jimplification time to be separated from the  points-to time. However, it increases the total time and memory  requirement, because all methods are Jimplified, rather than  only those deemed reachable by the points-to analysis."}
{"code": "public static ExpectedCondition<Boolean> clickButton(final WebElement button){\n  return null;\n}\n", "nl": "Clicks on button and check if its displayed. <br> When button is not available it returns true."}
{"code": "public void entity(String name,int value){\n  theEntities.put(name,value);\n}\n", "nl": "Add to or replace a character entity in this schema."}
{"code": "public static StorableActivityFence starting(@ActivityType int... activityTypes){\n  return new StorableActivityFence(activityTypes,START_TYPE);\n}\n", "nl": "Creates an storable activity fence which will be valid when the user starts one of the given activity"}
{"code": "private void updateRingColor(float interpolatedTime,Ring ring){\n  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {\n    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));\n  }\n}\n", "nl": "Update the ring color if this is within the last 25% of the animation. The new ring color will be a translation from the starting ring color to the next color."}
{"code": "public boolean shouldInitializeClassesRelationStatus(){\n  return getConfiguration().getMetaDataRepositoryInstance().getMetaDatas().length != _processedClasses.size();\n}\n", "nl": "Gets whether classes relations status is not complete and should be synchronized. OpenJPA creates class meta data only after an entity is persisted for the first time."}
{"code": "public static <E>Stream<Map.Entry<E,E>> crossProductOrdered(Stream<E> stream,Comparator<E> comparator){\n  Objects.requireNonNull(stream);\n  Objects.requireNonNull(comparator);\n  CrossProductOrderedSpliterator<E> spliterator=CrossProductOrderedSpliterator.ordered(stream.spliterator(),comparator);\n  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);\n}\n", "nl": "<p>Generates a stream of <code>Map.Entry&lt;E, E&gt;</code> elements with all the cartesian product of the elements of the provided stream with itself, in which the entries are such that the key is strictly lesser than the value, using the provided comparator.</p> <p>For a stream <code>{a, b, c}</code>, a stream with the following elements is created: <code>{(a, b), (a, c), (b, c)}</code>, where <code>(a, b)</code> is the <code>Map.Entry</code> with key <code>a</code> and value <code>b</code>.</p> <p>A <code>NullPointerException</code> will be thrown if the provided stream or comparator is null.</p>"}
{"code": "public Activity runAfter(String beforeKey,String afterKey){\n  Activity before=get(beforeKey);\n  Activity after=get(afterKey);\n  if (before != null && after != null)   ActivityManager.scheduleAfter(before,after);\n  return after;\n}\n", "nl": "Schedules the Activity corresponding to the afterKey to be run immediately after the completion of the Activity corresponding to  the beforeKey. This method has no scheduling effect on the Activity corresponding to the before key."}
{"code": "public PhotosImplementor(PhotosModel model,PhotosView view){\n  this.model=model;\n  this.view=view;\n}\n", "nl": "<br> life cycle."}
{"code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  if (str.charAt(0) != '-' || str.charAt(1) != '-' || str.charAt(2) != '-') {\n    throw new SchemaDateTimeException(\"Error in day parsing\");\n  }\n  date.year=YEAR;\n  date.month=MONTH;\n  date.day=parseInt(str,3,5);\n  if (DAY_SIZE < len) {\n    if (!isNextCharUTCSign(str,DAY_SIZE,len)) {\n      throw new SchemaDateTimeException(\"Error in day parsing\");\n    }\n else {\n      getTimeZone(str,date,DAY_SIZE,len);\n    }\n  }\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=2;\n  return date;\n}\n", "nl": "Parses, validates and computes normalized version of gDay object"}
{"code": "private Builder(@Nonnull final Builder builder){\n  Check.notNull(builder,\"builder\");\n  icon=builder.icon;\n  id=builder.id;\n  infoUrl=builder.infoUrl;\n  name=builder.name;\n}\n", "nl": "Creates a new instance of a builder with the data of the passed builder."}
{"code": "public void init$Children(){\n  children=new ASTNode[4];\n  setChild(new List(),1);\n  setChild(new Opt(),2);\n  setChild(new List(),3);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public void ReInit(SimpleCharStream stream,int lexState){\n  ReInit(stream);\n  SwitchTo(lexState);\n}\n", "nl": "Reinitialise parser."}
{"code": "public static byte[] toUtf8(String s){\n  try {\n    ByteArrayOutputStream bs=new ByteArrayOutputStream(s.length());\n    DataOutputStream d=new DataOutputStream(bs);\n    d.writeUTF(s);\n    return bs.toByteArray();\n  }\n catch (  IOException e) {\n    G.v().out.println(\"Some sort of IO exception in toUtf8 with \" + s);\n  }\n  return null;\n}\n", "nl": "Utility method; converts the given String into a utf8 encoded array of bytes."}
{"code": "private void parseLet(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){\n  TokenStream tokens=new TokenStream(header);\n  Elem let=parseLetBindingsThenBody(indent,firstContent,tokens,layout);\n  if (let != null) {\n    elems.add(Block.create(!firstContent,let));\n  }\n}\n", "nl": "Parse a let command."}
{"code": "private static String processResult(Map<String,Object> result,HttpServletRequest request){\n  StringBuilder errMsg=new StringBuilder();\n  if (result.containsKey(ModelService.ERROR_MESSAGE_LIST)) {\n    List<String> errorMsgs=UtilGenerics.checkList(result.get(ModelService.ERROR_MESSAGE_LIST));\n    Iterator<String> iterator=errorMsgs.iterator();\n    errMsg.append(\"<ul>\");\n    while (iterator.hasNext()) {\n      errMsg.append(\"<li>\");\n      errMsg.append(iterator.next());\n      errMsg.append(\"</li>\");\n    }\n    errMsg.append(\"</ul>\");\n  }\n else   if (result.containsKey(ModelService.ERROR_MESSAGE)) {\n    errMsg.append(result.get(ModelService.ERROR_MESSAGE));\n    request.setAttribute(\"_ERROR_MESSAGE_\",errMsg.toString());\n  }\n  if (errMsg.length() > 0) {\n    request.setAttribute(\"_ERROR_MESSAGE_\",errMsg.toString());\n    if (result.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_SUCCESS)) {\n      return NON_CRITICAL_ERROR;\n    }\n else {\n      return ERROR;\n    }\n  }\n else {\n    return NO_ERROR;\n  }\n}\n", "nl": "This should be called to translate the error messages of the <code>ShoppingCartHelper</code> to an appropriately formatted <code>String</code> in the request object and indicate whether the result was an error or not and whether the errors were critical or not"}
{"code": "public Iterator<E> iterator(){\n  return new PatchingIterator(innerChain);\n}\n", "nl": "Returns an iterator over this Chain."}
{"code": "public void clearAccumulatedTorque(){\n  this.torques.clear();\n}\n", "nl": "Clears the torques stored in the torque accumulator. <p/> Renamed from clearTorques (3.0.0 and below)."}
{"code": "public Notifier(){\n  super(\"event notifier\");\n  setDaemon(true);\n}\n", "nl": "Construct a daemon thread"}
{"code": "public static Object executeScript(String filePath,String functionName,Map<String,Object> context){\n  return executeScript(filePath,functionName,context,new Object[]{context});\n}\n", "nl": "Executes the script at the specified location and returns the result."}
{"code": "public static Z1 genc(Zmat A,int r1,int r2,int c) throws JampackException {\n  int i, ru;\n  double norm;\n  double s;\n  Z scale;\n  Z t=new Z();\n  Z t1=new Z();\n  c=c - A.basex;\n  r1=r1 - A.basex;\n  r2=r2 - A.basex;\n  ru=r2 - r1 + 1;\n  Z1 u=new Z1(r2 - r1 + 1);\n  for (i=r1; i <= r2; i++) {\n    u.put(i - r1,A.re[i][c],A.im[i][c]);\n    A.re[i][c]=0.0;\n    A.im[i][c]=0.0;\n  }\n  norm=Norm.fro(u);\n  if (r1 == r2 || norm == 0) {\n    A.re[r1][c]=-u.re[0];\n    A.im[r1][c]=-u.im[0];\n    u.put(0,Math.sqrt(2),0);\n    return u;\n  }\n  scale=new Z(1 / norm,0);\n  if (u.re[0] != 0 || u.im[0] != 0) {\n    t=u.get(0);\n    scale.Times(scale,t.Div(t1.Conj(t),Z.abs(t)));\n  }\n  A.put(r1 + A.basex,c + A.basex,t.Minus(t.Div(Z.ONE,scale)));\n  for (i=0; i < ru; i++) {\n    u.Times(i,scale);\n  }\n  u.re[0]=u.re[0] + 1;\n  u.im[0]=0;\n  s=Math.sqrt(1 / u.re[0]);\n  for (i=0; i < ru; i++) {\n    u.re[i]=s * u.re[i];\n    u.im[i]=s * u.im[i];\n  }\n  return u;\n}\n", "nl": "Generates a Householder transformation from within the part of column c of a Zmat (altered) extending from rows r1 to r2.  The method overwrites the column with the result of applying the transformation."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SLOT_FULL(String value0){\n  return new SM_SYSTEM_MESSAGE(1300070,value0);\n}\n", "nl": "The %0 skill failed as there are already too many skills in effect."}
{"code": "public void notifyEventListeners(ZWaveEvent event){\n  logger.debug(\"Notifying event listeners: {}\",event.getClass().getSimpleName());\n  ArrayList<ZWaveEventListener> copy=new ArrayList<ZWaveEventListener>(zwaveEventListeners);\n  for (  ZWaveEventListener listener : copy) {\n    listener.ZWaveIncomingEvent(event);\n  }\n  if (event instanceof ZWaveInclusionEvent) {\n    ZWaveInclusionEvent incEvent=(ZWaveInclusionEvent)event;\nswitch (incEvent.getEvent()) {\ncase IncludeSlaveFound:\n      requestAddNodesStop();\n    logger.debug(\"NODE {}: Including node.\",incEvent.getNodeId());\n  if (getNode(incEvent.getNodeId()) != null) {\n    logger.debug(\"NODE {}: Newly included node already exists - not initialising.\",incEvent.getNodeId());\n    break;\n  }\nlastIncludeSlaveFoundEvent=incEvent;\nZWaveNode newNode=new ZWaveNode(homeId,incEvent.getNodeId(),this);\nZWaveDeviceClass deviceClass=newNode.getDeviceClass();\ndeviceClass.setBasicDeviceClass(incEvent.getBasic());\ndeviceClass.setGenericDeviceClass(incEvent.getGeneric());\ndeviceClass.setSpecificDeviceClass(incEvent.getSpecific());\nfor (CommandClass commandClass : incEvent.getCommandClasses()) {\nZWaveCommandClass zwaveCommandClass=ZWaveCommandClass.getInstance(commandClass.getKey(),newNode,this);\nif (zwaveCommandClass != null) {\nlogger.debug(\"NODE {}: Inclusion is adding command class {}.\",incEvent.getNodeId(),commandClass);\nif (commandClass == CommandClass.SECURITY) {\n}\nnewNode.addCommandClass(zwaveCommandClass);\n}\n}\nzwaveNodes.putIfAbsent(incEvent.getNodeId(),newNode);\nbreak;\ncase IncludeDone:\nif (incEvent.getNodeId() == 0) {\nbreak;\n}\nZWaveNode node=getNode(incEvent.getNodeId());\nif (node == null) {\nlogger.debug(\"NODE {}: Newly included node doesn't exist - initialising from start.\",incEvent.getNodeId());\naddNode(incEvent.getNodeId());\nbreak;\n}\nif (node.getNodeInitStage() != ZWaveNodeInitStage.EMPTYNODE) {\nlogger.debug(\"NODE {}: Newly included node already initialising at {}\",incEvent.getNodeId(),node.getNodeInitStage());\nbreak;\n}\nif (node.getDeviceClass().getBasicDeviceClass() != Basic.NOT_KNOWN) {\nnode.initialiseNode(ZWaveNodeInitStage.INCLUSION_START);\n}\n else {\nnode.initialiseNode(ZWaveNodeInitStage.EMPTYNODE);\n}\nbreak;\ncase ExcludeDone:\nif (incEvent.getNodeId() == 0) {\nbreak;\n}\nlogger.debug(\"NODE {}: Excluding node.\",incEvent.getNodeId());\nif (getNode(incEvent.getNodeId()) == null) {\nlogger.debug(\"NODE {}: Excluding node that doesn't exist.\",incEvent.getNodeId());\nbreak;\n}\nzwaveNodes.remove(incEvent.getNodeId());\nZWaveNodeSerializer nodeSerializer=new ZWaveNodeSerializer();\nnodeSerializer.DeleteNode(event.getNodeId());\nbreak;\ndefault :\nbreak;\n}\n}\n else if (event instanceof ZWaveNetworkEvent) {\nZWaveNetworkEvent networkEvent=(ZWaveNetworkEvent)event;\nswitch (networkEvent.getEvent()) {\ncase DeleteNode:\nif (getNode(networkEvent.getNodeId()) == null) {\nlogger.debug(\"NODE {}: Deleting a node that doesn't exist.\",networkEvent.getNodeId());\nbreak;\n}\nthis.zwaveNodes.remove(networkEvent.getNodeId());\nZWaveNodeSerializer nodeSerializer=new ZWaveNodeSerializer();\nnodeSerializer.DeleteNode(event.getNodeId());\nbreak;\ndefault :\nbreak;\n}\n}\n else if (event instanceof ZWaveNodeStatusEvent) {\nZWaveNodeStatusEvent statusEvent=(ZWaveNodeStatusEvent)event;\nlogger.debug(\"NODE {}: Node Status event - Node is {}\",statusEvent.getNodeId(),statusEvent.getState());\nZWaveNode node=getNode(event.getNodeId());\nif (node == null) {\nlogger.error(\"NODE {}: Node is unknown!\",statusEvent.getNodeId());\nreturn;\n}\nswitch (statusEvent.getState()) {\ncase DEAD:\nbreak;\ncase FAILED:\nbreak;\ncase ALIVE:\nbreak;\n}\n}\n}\n", "nl": "Notify our own event listeners of a ZWave event."}
{"code": "protected Criteria createCriteriaInternal(){\n  Criteria criteria=new Criteria();\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.submissions"}
{"code": "public Legion(int legionId,String legionName){\n  this();\n  this.legionId=legionId;\n  this.legionName=legionName;\n}\n", "nl": "Only called when a legion is created!"}
{"code": "public static boolean PM(int packedTime){\n  return packedTime >= NOON;\n}\n", "nl": "Returns true if the time is in the PM or \"after noon\". Note: we follow the convention that 12:00 NOON is PM and 12 MIDNIGHT is AM"}
{"code": "@Override public void onTaskError(long id){\n  int position=mTaskAdapter.getPositionById(id);\n  if (position != -1) {\n    Task task=mTaskAdapter.getItem(position);\n    if (task.getState() != Task.STATE_PAUSE) {\n      mTaskAdapter.getItem(position).setState(Task.STATE_ERROR);\n      notifyItemChanged(position);\n    }\n  }\n}\n", "nl": "task state"}
{"code": "public boolean validateRequest(String publicKey,String hmac,String query){\n  ApiResult apiResult=this.api.getApiByPublicKey(publicKey);\n  if (apiResult == null) {\n    return false;\n  }\n  String myHmac=HmacUtils.hmacSha1Hex(apiResult.getPrivateKey(),query);\n  return myHmac.equals(hmac);\n}\n", "nl": "Validates a request made to the API against the public key supplied, the hmac supplied and the query string itself. http://stackoverflow.com/questions/11830338/web-api-creating-api-keys http://stackoverflow.com/questions/6312544/hmac-sha1-how-to-do-it-properly-in-java http://stackoverflow.com/questions/3208160/how-to-generate-an-hmac-in-java-equivalent-to-a-python-example?rq=1"}
{"code": "@Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {\n  startElement(element,attributes,augs);\n  endElement(element,augs);\n}\n", "nl": "An empty element."}
{"code": "public PayloadBuilder withScheme(String scheme){\n  _scheme=checkNotNull(scheme,\"scheme\");\n  return this;\n}\n", "nl": "Sets the protocol, ie. \"http\" or \"https\"."}
{"code": "public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {\n  boolean file1Exists=file1.exists();\n  if (file1Exists != file2.exists()) {\n    return false;\n  }\n  if (!file1Exists) {\n    return true;\n  }\n  if (file1.isDirectory() || file2.isDirectory()) {\n    throw new IOException(\"Can't compare directories, only files\");\n  }\n  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n    return true;\n  }\n  Reader input1=null;\n  Reader input2=null;\n  try {\n    if (charsetName == null) {\n      input1=new InputStreamReader(new FileInputStream(file1));\n      input2=new InputStreamReader(new FileInputStream(file2));\n    }\n else {\n      input1=new InputStreamReader(new FileInputStream(file1),charsetName);\n      input2=new InputStreamReader(new FileInputStream(file2),charsetName);\n    }\n    return IOUtils.contentEqualsIgnoreEOL(input1,input2);\n  }\n  finally {\n    IOUtils.closeQuietly(input1);\n    IOUtils.closeQuietly(input2);\n  }\n}\n", "nl": "Compares the contents of two files to determine if they are equal or not. <p> This method checks to see if the two files point to the same file,  before resorting to line-by-line comparison of the contents. <p>"}
{"code": "public Vector divide(Vector vec){\n  x/=vec.x;\n  y/=vec.y;\n  z/=vec.z;\n  return this;\n}\n", "nl": "Divides the vector by another."}
{"code": "public boolean isApplicable(){\n  try {\n    return getViewer().isPCoATab() && getViewer().getPcoaTab().getPCoA().getEigenValues() != null;\n  }\n catch (  Exception ex) {\n    return false;\n  }\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public String geom_dump_verbose(){\n  return soot.PhaseOptions.getString(options,\"geom-dump-verbose\");\n}\n", "nl": "Verbose dump file -- Filename for detailed execution log. If you want to save the geomPTA analysis information  for future analysis, please provide a file name. \t\t\t\t\t\t"}
{"code": "@NonNull protected static Bitmap ensureBitmapIsUsable(@Nullable Bitmap target,int viewWidth,int viewHeight){\n  if (target != null) {\n    if (target.getWidth() > viewWidth && target.getHeight() > viewHeight) {\n      target=Bitmap.createBitmap(target,0,0,viewWidth,viewHeight);\n    }\n else     if (target.getWidth() != viewWidth || target.getHeight() != viewHeight) {\n      target.recycle();\n      target=null;\n    }\n  }\n  if (target == null) {\n    target=Bitmap.createBitmap(viewWidth,viewHeight,Bitmap.Config.ARGB_8888);\n  }\n  return target;\n}\n", "nl": "Utility method for ensuring that a provided bitmap is of the specified dimensions."}
{"code": "public OpenMapRealVector append(OpenMapRealVector v){\n  OpenMapRealVector res=new OpenMapRealVector(this,v.getDimension());\n  Iterator iter=v.entries.iterator();\n  while (iter.hasNext()) {\n    iter.advance();\n    res.setEntry(iter.key() + virtualSize,iter.value());\n  }\n  return res;\n}\n", "nl": "Optimized method to append a OpenMapRealVector."}
{"code": "public static int apply(Director dir,String cName,File file,boolean allTaxonomicLevels,ProgressListener progressListener) throws IOException, CanceledException {\n  final ViewerBase viewer=(ViewerBase)dir.getViewerByClassName(cName);\n  if (viewer == null)   throw new IOException(cName + \" Viewer not open\");\n  final NodeSet selectedNodes=viewer.getSelectedNodes();\n  if (selectedNodes.size() == 0) {\n    throw new IOException(\"No nodes selected\");\n  }\n  System.err.println(\"Writing file: \" + file);\n  progressListener.setSubtask(\"Processing \" + cName + \" nodes\");\n  progressListener.setMaximum(selectedNodes.size());\n  progressListener.setProgress(0);\n  int maxRankIndex=0;\n  if (allTaxonomicLevels) {\n    maxRankIndex=determineMaxTaxonomicRankIndex(selectedNodes);\n    System.err.println(\"Exporting \" + (maxRankIndex + 1) + \" taxonomic levels down to rank of '\"+ ranks[maxRankIndex]+ \"'\");\n  }\n  final int numberOfLevels=maxRankIndex + 1;\n  int numberOfRows=0;\n  int nodesSkipped=0;\n  final int numberOfColumns=dir.getDocument().getNumberOfSamples();\n  try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){\n    for (int i=0; i < numberOfLevels; i++)     w.write(\"Level_\" + (i + 1) + \"\\t\");\n    w.write(\"Observation Ids\");\n    for (    String sample : dir.getDocument().getSampleNames()) {\n      w.write(\"\\t\" + sample);\n    }\n    w.write(\"\\n\");\n    for (    Node v : selectedNodes) {\n      final String name=viewer.getLabel(v);\n      final Integer taxonId=(Integer)v.getInfo();\n      if (maxRankIndex > 1) {\n        final String path=makePath(v,maxRankIndex);\n        if (path != null)         w.write(String.format(\"%s\\tID%d\",path,taxonId));\n else {\n          if (nodesSkipped < 5)           System.err.println(\"Skipping node: \" + name);\n else           if (nodesSkipped == 5)           System.err.println(\"Skipping more nodes...\");\n          nodesSkipped++;\n          continue;\n        }\n      }\n else       w.write(String.format(\"%s\\tID%d\",name,taxonId));\n      NodeData data=viewer.getNodeData(v);\n      if (v.getOutDegree() == 0) {\n        for (int i=0; i < numberOfColumns; i++)         w.write(\"\\t\" + data.getSummarized(i));\n      }\n else {\n        for (int i=0; i < numberOfColumns; i++)         w.write(\"\\t\" + data.getAssigned(i));\n      }\n      w.write(\"\\n\");\n      numberOfRows++;\n    }\n  }\n   System.err.println(\"Nodes skipped: \" + nodesSkipped);\n  return numberOfRows;\n}\n", "nl": "apply the exporter"}
{"code": "public void animateX(int durationMillis,Easing.EasingOption easing){\n  if (android.os.Build.VERSION.SDK_INT < 11)   return;\n  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,\"phaseX\",0f,1f);\n  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));\n  animatorX.setDuration(durationMillis);\n  animatorX.addUpdateListener(mListener);\n  animatorX.start();\n}\n", "nl": "Animates the rendering of the chart on the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart."}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n  setChild(new List(),0);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children."}
{"code": "public IntColumn(int nrows,int capacity,int defaultValue){\n  super(int.class,new Integer(defaultValue));\n  if (capacity < nrows) {\n    throw new IllegalArgumentException(\"Capacity value can not be less than the row count.\");\n  }\n  m_values=new int[capacity];\n  Arrays.fill(m_values,defaultValue);\n  m_size=nrows;\n}\n", "nl": "Create a new IntColumn."}
{"code": "public grammaticalityEstimator(String sCorpusDir,int iMinChar,int iMaxChar,int iMinWord,int iMaxWord,int iNeighbourhoodWindow,boolean bFlatDir){\n  iMinCharNGram=iMinChar;\n  iMaxCharNGram=iMaxChar;\n  iMinWordNGram=iMinWord;\n  iMaxWordNGram=iMaxWord;\n  DistroDocs=new TreeMap<Integer,DistributionDocument>();\n  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();\n  StringBuffer sb=new StringBuffer();\n  DocumentSet ds=new DocumentSet(sCorpusDir,1.0);\n  ds.createSets(bFlatDir);\n  Iterator iTexts=ds.getTrainingSet().iterator();\n  while (iTexts.hasNext()) {\n    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iTexts.next();\n    try {\n      BufferedReader bf=new BufferedReader(new FileReader(cfeCur.getFileName()));\n      String sTmp;\n      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);\n      bf.close();\n    }\n catch (    FileNotFoundException ex) {\n      ex.printStackTrace(System.err);\n    }\ncatch (    IOException ex) {\n      ex.printStackTrace(System.err);\n    }\n    sb.append((char)0);\n  }\n  FullTextDataString=sb.toString();\n  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {\n    DistroDocs.put(iCnt,new DistributionDocument(iNeighbourhoodWindow,iCnt));\n  }\n  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {\n    DistroWordDocs.put(iCnt,new DistributionWordDocument(iNeighbourhoodWindow,iCnt));\n  }\n}\n", "nl": "Creates a new instance of grammaticalityEstimator."}
{"code": "@RequestMapping(value=\"/{namespace}/{key}\",method=RequestMethod.PUT,produces=\"application/json\",consumes=\"application/json\") public void updateKeyJsonValue(@PathVariable String namespace,@PathVariable String key,@RequestBody String body,HttpServletRequest request,HttpServletResponse response) throws WebMessageException, IOException {\n  if (!hasAccess(namespace)) {\n    throw new WebMessageException(WebMessageUtils.forbidden(\"The namespace '\" + namespace + \"' is protected, and you don't have the right authority to access it.\"));\n  }\n  KeyJsonValue keyJsonValue=keyJsonValueService.getKeyJsonValue(namespace,key);\n  if (keyJsonValue == null) {\n    throw new WebMessageException(WebMessageUtils.notFound(\"The key '\" + key + \"' was not found in the namespace '\"+ namespace+ \"'.\"));\n  }\n  if (!renderService.isValidJson(body)) {\n    throw new WebMessageException(WebMessageUtils.badRequest(\"The data is not valid JSON.\"));\n  }\n  keyJsonValue.setValue(body);\n  keyJsonValueService.updateKeyJsonValue(keyJsonValue);\n  response.setStatus(HttpServletResponse.SC_OK);\n  messageService.sendJson(WebMessageUtils.ok(\"Key '\" + key + \"' updated.\"),response);\n}\n", "nl": "Update a key in the given namespace."}
{"code": "@Override protected int readBlock(double[] target,int targetPos){\n  int blockSize=getBlockSize();\n  int validSamplesInFrame=frameProvider.validSamplesInFrame();\n  int frameLength=frameProvider.getFrameLengthSamples();\n  if (validSamplesInFrame < frameLength) {\n    assert !frameProvider.hasMoreData();\n    int nCopied;\n    if (blockSize < (frameLength - validSamplesInFrame)) {\n      nCopied=blockSize;\n    }\n else {\n      nCopied=blockSize - (frameLength - validSamplesInFrame);\n    }\n    assert nCopied > 0;\n    System.arraycopy(memory,0,target,targetPos,nCopied);\n    return nCopied;\n  }\n else {\n    System.arraycopy(memory,0,target,targetPos,blockSize);\n    System.arraycopy(memory,blockSize,memory,0,memory.length - blockSize);\n    Arrays.fill(memory,memory.length - blockSize,memory.length,0);\n    return blockSize;\n  }\n}\n", "nl": "Provide a block of data. This method is called from the superclass when data is requested. Note that prepareBlock() will be called before this."}
{"code": "public JToggleGroup createCheckboxGroup(){\n  return createToggleGroup(JToggleGroup.CHECKBOX);\n}\n", "nl": "Creates a new group of check boxes for interacting with the query."}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list."}
{"code": "public WildcardFilter(String[] wildcards){\n  if (wildcards == null) {\n    throw new IllegalArgumentException(\"The wildcard array must not be null\");\n  }\n  this.wildcards=new String[wildcards.length];\n  System.arraycopy(wildcards,0,this.wildcards,0,wildcards.length);\n}\n", "nl": "Construct a new case-sensitive wildcard filter for an array of wildcards."}
{"code": "Object decompressObject(MarshObject objToDecompress) throws IOException, ClassNotFoundException {\n  CompressedMarshObjectConvertor cv=null;\n  Object obj=null;\n  try {\n    cv=_compressedConvertorPool.getResource();\n    obj=cv.getObject(objToDecompress);\n  }\n  finally {\n    if (cv != null)     _compressedConvertorPool.freeResource(cv);\n  }\n  return obj;\n}\n", "nl": "Decompress the desired object using GigaSpaces compression facility"}
{"code": "protected boolean isInitialMethod(SootMethod sm){\n  for (  Unit u : this.initialSeeds.keySet())   if (interproceduralCFG().getMethodOf(u) == sm)   return true;\n  return false;\n}\n", "nl": "Gets whether the given method is an entry point, i.e. one of the initial seeds belongs to the given method"}
{"code": "public int addFile(File file){\n  return getFileId(file);\n}\n", "nl": "add a file, if not already present"}
{"code": "public void start(Context context,Fragment fragment){\n  start(context,fragment,REQUEST_CROP);\n}\n", "nl": "Send the crop Intent from a Fragment"}
{"code": "public NewsfeedSearchQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "void restoreRotationState(@NonNull ContentResolver contentResolver){\n  Settings.System.putInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION,originalAccelerometer);\n  Settings.System.putInt(contentResolver,Settings.System.USER_ROTATION,originalUserRotation);\n}\n", "nl": "Should be called after testing completes, to restore original rotation values"}
{"code": "public static void addAllJARsInAssets(final Context cxt){\n  try {\n    if (debug) {\n      Log.d(TAG,\"addAllJARsInAssets on \" + Thread.currentThread());\n    }\n    String[] arrJars=createSubDexList(cxt);\n    copyJarsFromAssets(cxt,arrJars);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "find and append all JARs"}
{"code": "private static Set<Label> labelsWithConfigs(Project project){\n  List<RunConfiguration> configurations=RunManager.getInstance(project).getAllConfigurationsList();\n  Set<Label> labelsWithConfigs=Sets.newHashSet();\n  for (  RunConfiguration configuration : configurations) {\n    if (configuration instanceof BlazeRunConfiguration) {\n      BlazeRunConfiguration blazeRunConfiguration=(BlazeRunConfiguration)configuration;\n      TargetExpression target=blazeRunConfiguration.getTarget();\n      if (target instanceof Label) {\n        labelsWithConfigs.add((Label)target);\n      }\n    }\n  }\n  return labelsWithConfigs;\n}\n", "nl": "Collects a set of all the Blaze labels that have an associated run configuration."}
{"code": "public void computeOverlapGraph(int minOverlap,final Alignment alignment,ProgressListener progress) throws IOException, CanceledException {\n  this.alignment=alignment;\n  OverlapGraphBuilder overlapGraphBuilder=new OverlapGraphBuilder(minOverlap);\n  overlapGraphBuilder.apply(alignment,progress);\n  overlapGraph=overlapGraphBuilder.getOverlapGraph();\n  node2readName=overlapGraphBuilder.getNode2ReadNameMap();\n  readId2ContainedReads=overlapGraphBuilder.getReadId2ContainedReads();\n}\n", "nl": "compute the overlap graph"}
{"code": "public VersionCellEditor(VendorOptionTableModel model){\n  this.model=model;\n}\n", "nl": "Version data cell editor."}
{"code": "private void addWindowsPath(int id,String path){\n  if (path == null || path.equals(\"\")) {\n    return;\n  }\n  _sb.append(id);\n  _sb.append(\" RCDATA BEGIN \\\"\");\n  _sb.append(path.replaceAll(\"\\\\\\\\\",\"\\\\\\\\\\\\\\\\\").replaceAll(\"/\",\"\\\\\\\\\\\\\\\\\"));\n  _sb.append(\"\\\\0\\\" END\\n\");\n}\n", "nl": "Stores path in Windows format with '\\' separators."}
{"code": "public static Integer parseInt(String string){\n  if (string == null || string.trim().isEmpty()) {\n    return null;\n  }\n  try {\n    return Integer.parseInt(string);\n  }\n catch (  NumberFormatException ex) {\n    return null;\n  }\n}\n", "nl": "Parses an integer silently. Returns the Integer value of the given string. Returns null if the input string is null, empty or if it cannot be parsed."}
{"code": "public static final void drawPulleyJoint(GL2 gl,PulleyJoint joint){\n  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);\n  Vector2 p1=joint.getAnchor1();\n  Vector2 p2=joint.getPulleyAnchor1();\n  Vector2 p3=joint.getPulleyAnchor2();\n  Vector2 p4=joint.getAnchor2();\n  gl.glBegin(GL.GL_LINE_STRIP);\n  gl.glVertex2d(p1.x,p1.y);\n  gl.glVertex2d(p2.x,p2.y);\n  gl.glVertex2d(p3.x,p3.y);\n  gl.glVertex2d(p4.x,p4.y);\n  gl.glEnd();\n}\n", "nl": "Renders a PulleyJoint to the given graphics object."}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (codebase == null) {\n    throw new InvalidObjectException(\"null export codebase\");\n  }\n  if (policy == null) {\n    throw new InvalidObjectException(\"null policy\");\n  }\n  if (classpath == null) {\n    throw new InvalidObjectException(\"null import codebase\");\n  }\n  if (implClassName == null) {\n    throw new InvalidObjectException(\"null implementation class name\");\n  }\n  lifeCycle=NoOpLifeCycle;\n  servicePreparer=null;\n  descCreated=false;\n  descCreatedLock=new Object();\n}\n", "nl": "Reads the default serializable field values for this object and resets the tranisient fields to legal values. Also, verifies that the deserialized values are legal."}
{"code": "public BoardUnfixTopicQuery unfixTopic(UserActor actor,int groupId,int topicId){\n  return new BoardUnfixTopicQuery(getClient(),actor,groupId,topicId);\n}\n", "nl": "Unpins a pinned topic from the top of a community's discussion board."}
{"code": "public synchronized int size(){\n  return count;\n}\n", "nl": "Return the current size of the byte array."}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n{\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures."}
{"code": "public JsonArray add(JsonValue value){\n  if (value == null) {\n    throw new NullPointerException(\"value is null\");\n  }\n  values.add(value);\n  return this;\n}\n", "nl": "Appends the specified JSON value to the end of this array."}
{"code": "public ListQueryBinding(TupleSet ts,String field){\n  this(ts,field,true);\n}\n", "nl": "Create a new ListQueryBinding over the given set and data field."}
{"code": "public void hide(){\n  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();\n  lp.height=0;\n  mContentView.setLayoutParams(lp);\n}\n", "nl": "hide footer when disable pull load more"}
{"code": "private Animation applySlideLeftAnimationTo(View view){\n  Animation animation=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,-1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);\n  animation.setDuration(200);\n  animation.setInterpolator(new AccelerateInterpolator());\n  view.startAnimation(animation);\n  return animation;\n}\n", "nl": "Applies a slide down animation relative to itself to the view supplied"}
{"code": "public ZWaveEnergyProductionCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){\n  super(node,controller,endpoint);\n}\n", "nl": "Creates a new instance of the ZWaveEnergyProductionCommandClass class."}
{"code": "@Override public ImageWritable transform(ImageWritable image,Random random){\n  if (image == null) {\n    return null;\n  }\n  Mat mat=(Mat)converter.convert(image.getFrame());\n  Mat result=new Mat();\n  try {\n    cvtColor(mat,result,conversionCode);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n  return new ImageWritable(converter.convert(result));\n}\n", "nl": "Takes an image and returns a transformed image. Uses the random object in the case of random transformations."}
{"code": "public static int exportTaxon2Counts(String format,Director dir,File file,char separator,boolean reportSummarized,ProgressListener progressListener) throws IOException {\n  int totalLines=0;\n  try {\n    final MainViewer viewer=dir.getMainViewer();\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){\n      final List<String> names=viewer.getDir().getDocument().getSampleNames();\n      if (names.size() > 1) {\n        w.write(\"#Datasets\");\n        for (        String name : names) {\n          if (name == null)           System.err.println(\"Internal error, sample name is null\");\n else {\n            if (separator == ',')             name=name.replaceAll(\",\",\"_\");\n          }\n          w.write(separator + name);\n        }\n        w.write(\"\\n\");\n      }\n      final NodeSet selected=viewer.getSelectedNodes();\n      progressListener.setSubtask(\"Taxa to counts\");\n      progressListener.setMaximum(selected.size());\n      progressListener.setProgress(0);\n      for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {\n        Integer taxonId=(Integer)v.getInfo();\n        if (taxonId != null) {\n          final NodeData data=viewer.getNodeData(v);\n          final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());\n          final String name=getTaxonLabelSource(dir,format,taxonId);\n          if (name != null) {\n            if (counts.length == names.size()) {\n              w.write(name);\n              for (              int num : counts)               w.write(separator + \"\" + num);\n              w.write(\"\\n\");\n              totalLines++;\n            }\n else             System.err.println(\"Skipped \" + name + \", number of values: \"+ counts.length);\n          }\n        }\n        progressListener.incrementProgress();\n      }\n    }\n   }\n catch (  CanceledException canceled) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return totalLines;\n}\n", "nl": "export taxon name to counts mapping"}
{"code": "public Builder trustSource(TrustSource trustSource){\n  this.trustSource=trustSource;\n  return this;\n}\n", "nl": "The TrustSource that supplies the trusted root CAs used to validate upstream servers' certificates."}
{"code": "public void checkWarnings(){\n  super.checkWarnings();\n  if (!suppressWarnings(\"unchecked\") && !hasAnnotationSafeVarargs() && isVariableArity()&& !getParameter(getNumParameter() - 1).type().isReifiable())   warning(\"possible heap pollution for \" + \"variable arity parameter\");\n}\n", "nl": "Check if the method is missing a SafeVarargs annotation."}
{"code": "public static double product(final double... values) throws MathIllegalArgumentException {\n  return PRODUCT.evaluate(values);\n}\n", "nl": "Returns the product of the entries in the input array, or <code>Double.NaN</code> if the array is empty. <p> Throws <code>IllegalArgumentException</code> if the array is null."}
{"code": "public static String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  final ResourceBundle resourceBundle=ResourceBundle.getBundle(\"mf.org.apache.xerces.impl.msg.JAXPValidationMessages\",locale);\n  String msg;\n  try {\n    msg=resourceBundle.getString(key);\n    if (arguments != null) {\n      try {\n        msg=java.text.MessageFormat.format(msg,arguments);\n      }\n catch (      Exception e) {\n        msg=resourceBundle.getString(\"FormatFailed\");\n        msg+=\" \" + resourceBundle.getString(key);\n      }\n    }\n  }\n catch (  MissingResourceException e) {\n    msg=resourceBundle.getString(\"BadMessageKey\");\n    throw new MissingResourceException(key,msg,key);\n  }\n  if (msg == null) {\n    msg=key;\n    if (arguments.length > 0) {\n      StringBuffer str=new StringBuffer(msg);\n      str.append('?');\n      for (int i=0; i < arguments.length; i++) {\n        if (i > 0) {\n          str.append('&');\n        }\n        str.append(String.valueOf(arguments[i]));\n      }\n    }\n  }\n  return msg;\n}\n", "nl": "Formats a message with the specified arguments using the given locale information."}
{"code": "private boolean release(String id){\n  AudioPlayer audio=players.remove(id);\n  if (audio == null) {\n    return false;\n  }\n  if (players.isEmpty()) {\n    onLastPlayerReleased();\n  }\n  audio.destroy();\n  return true;\n}\n", "nl": "Release the audio player instance to save memory."}
{"code": "public static String toTypeDesc(SootMethodRef m){\n  StringBuilder sb=new StringBuilder();\n  sb.append('(');\n  for (  Type t : m.parameterTypes()) {\n    sb.append(toTypeDesc(t));\n  }\n  sb.append(')');\n  sb.append(toTypeDesc(m.returnType()));\n  return sb.toString();\n}\n", "nl": "Compute type description for methods, comprising  parameter types and return type."}
{"code": "protected Pair<Long,DLSN> readLastTxIdInLedger(LogSegmentMetadata l) throws IOException {\n  LogRecordWithDLSN record=recoverLastRecordInLedger(l,false,false,true);\n  if (null == record) {\n    return Pair.of(DistributedLogConstants.EMPTY_LOGSEGMENT_TX_ID,DLSN.InvalidDLSN);\n  }\n else {\n    return Pair.of(record.getTransactionId(),record.getDlsn());\n  }\n}\n", "nl": "Find the id of the last edit log transaction written to a edit log ledger."}
{"code": "private ServiceRegistrar[] buildServiceRegistrar(){\n  int k=0;\n  ServiceRegistrar[] proxys=new ServiceRegistrar[discoveredLocators.size()];\n  Iterator iter=discoveredLocators.iterator();\n  while (iter.hasNext()) {\n    LocatorReg reg=(LocatorReg)iter.next();\n    proxys[k++]=reg.proxy;\n  }\n  return proxys;\n}\n", "nl": "From each element of the set of LocatorReg objects that correspond to lookup services that have been discovered, this method extracts the ServiceRegistrar reference and returns all of the references in an array of ServiceRegistrar."}
{"code": "public static Account createAccount(String name,String password){\n  String passwordHash=AccountUtils.encodePassword(password);\n  Account account=new Account();\n  account.setName(name);\n  account.setPasswordHash(passwordHash);\n  account.setAccessLevel((byte)0);\n  account.setMembership((byte)0);\n  account.setActivated((byte)1);\n  if (getAccountDAO().insertAccount(account)) {\n    return account;\n  }\n  return null;\n}\n", "nl": "Creates new account and stores it in DB. Returns account object in case of success or null if failed"}
{"code": "@Override public Loader<Cursor> onCreateLoader(int i,Bundle bundle){\n  return new CursorLoader(getActivity(),FeedContract.Entry.CONTENT_URI,PROJECTION,null,null,FeedContract.Entry.COLUMN_NAME_PUBLISHED + \" desc\");\n}\n", "nl": "Query the content provider for data. <p>Loaders do queries in a background thread. They also provide a ContentObserver that is triggered when data in the content provider changes. When the sync adapter updates the content provider, the ContentObserver responds by resetting the loader and then reloading it."}
{"code": "private void visit(NodeItem n,NodeItem c,int doi,int ldist){\n  PrefuseLib.updateVisible(n,true);\n  double localDOI=-ldist / Math.min(1000.0,m_divisor);\n  n.setDOI(doi + localDOI);\n  if (c != null) {\n    EdgeItem e=(EdgeItem)c.getParentEdge();\n    e.setDOI(c.getDOI());\n    PrefuseLib.updateVisible(e,true);\n  }\n}\n", "nl": "Visit a specific node and update its degree-of-interest."}
{"code": "private DefaultMutableTreeNode createDnNode(Dn dn,Token token,XMBean xmbean){\n  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();\n  Object data=createNodeValue(xmbean,token);\n  String label=data.toString();\n  XNodeInfo userObject=new XNodeInfo(Type.MBEAN,data,label,xmbean.getObjectName().toString());\n  node.setUserObject(userObject);\n  return node;\n}\n", "nl": "Creates the node corresponding to the whole Dn, i.e. an MBean."}
{"code": "public Constraint(int row,int col){\n  this(row,col,1);\n}\n", "nl": "Create a constraint to fit this component into a grid cell."}
{"code": "private void enter_Enemy(){\n  if (--delay >= 0)   return;\n  velocity.x=(int)(sx * 180);\n  velocity.y=(int)(sy * 180);\n  int dr=rnd.nextInt(5) + 6;\n  if (len % 500 == 0)   shoot_Missile(dr);\n  len--;\n  if (len >= 0)   return;\n  col++;\n  if (col < sPath.get_Directions().length) {\n    GetDir(col);\n  }\n else {\n    status=BEGINPOS;\n  }\n}\n", "nl": "enemy enter the main scene"}
{"code": "public static void d(String tag,String s,Throwable e){\n  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s,e);\n}\n", "nl": "Debug log message."}
{"code": "public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_IN_NO_CHAT(String value0){\n  return new SM_SYSTEM_MESSAGE(1300814,value0);\n}\n", "nl": "You are currently unable to chat. There are %0 minute(s) left in your ban."}
{"code": "public void saveRep(Repository rep,ObjectId idTransformation,ObjectId idStep) throws KettleException {\n  try {\n    rep.saveStepAttribute(idTransformation,idStep,\"TableName\",this.tabelName);\n    rep.saveStepAttribute(idTransformation,idStep,\"factDimLensString\",factDimLensString);\n    rep.saveStepAttribute(idTransformation,idStep,\"outputRowSize\",this.outputRowSize);\n    rep.saveStepAttribute(idTransformation,idStep,\"tableName\",this.tableName);\n    rep.saveStepAttribute(idTransformation,idStep,\"databaseName\",this.databaseName);\n    rep.saveStepAttribute(idTransformation,idStep,\"dimensionCount\",this.dimensionCount);\n    rep.saveStepAttribute(idTransformation,idStep,\"noDictionaryDims\",this.noDictionaryDims);\n    rep.saveStepAttribute(idTransformation,idStep,\"noDictionaryDimsMapping\",this.noDictionaryDimsMapping);\n    rep.saveStepAttribute(idTransformation,idStep,\"complexDimensionCount\",this.complexDimensionCount);\n    rep.saveStepAttribute(idTransformation,idStep,\"measureCount\",this.measureCount);\n    rep.saveStepAttribute(idTransformation,idStep,\"isUpdateMemberRequest\",this.updateMemberRequest);\n    rep.saveStepAttribute(idTransformation,idStep,\"measureDataType\",measureDataType);\n    rep.saveStepAttribute(idTransformation,idStep,\"partitionID\",partitionID);\n    rep.saveStepAttribute(idTransformation,idStep,\"segmentId\",segmentId);\n    rep.saveStepAttribute(idTransformation,idStep,\"taskNo\",taskNo);\n  }\n catch (  Exception e) {\n    throw new KettleException(BaseMessages.getString(PKG,\"TemplateStep.Exception.UnableToSaveStepInfoToRepository\",new String[0]) + idStep,e);\n  }\n}\n", "nl": "Save the steps data into a Kettle repository"}
{"code": "@JavascriptInterface public void showToast(String toast){\n  Toast.makeText(mContext,toast,Toast.LENGTH_SHORT).show();\n}\n", "nl": "Show a toast from the web page"}
{"code": "static public int[] addIndex(int[] X,int x){\n  int newX[]=new int[X.length + 1];\n  for (int i=0; i < X.length; i++)   newX[i]=X[i];\n  newX[X.length]=x;\n  return newX;\n}\n", "nl": "Add val x to list of int X"}
{"code": "public static Configuration createEquipmentDataTag(Long parentId){\n  Configuration configuration=new Configuration();\n  DataTag dataTag=DataTag.create(\"DATA_INI_TEST\",Integer.class,new DataTagAddress()).equipmentId(parentId).id(1000L).build();\n  configuration.addEntity(dataTag);\n  return configuration;\n}\n", "nl": "DataTag id: 1000"}
{"code": "protected SecureSendSMSNotificationQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "ID of the user to whom SMS notification is sent. The user shall allow the application to send him/her notifications (account.getAppPermissions, +1)."}
{"code": "public void prepareMatrixOffset(boolean inverted){\n  mMatrixOffset.reset();\n  if (!inverted) {\n    mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());\n  }\n else {\n    mMatrixOffset.setTranslate(mViewPortHandler.offsetLeft(),-mViewPortHandler.offsetTop());\n    mMatrixOffset.postScale(1.0f,-1.0f);\n  }\n}\n", "nl": "Prepares the matrix that contains all offsets."}
{"code": "public static TemplateParser create(){\n  return new TemplateParser();\n}\n", "nl": "Create a template parser"}
{"code": "public static void json(String tag,Object source){\n  if (isEnable()) {\n    Object o=getJsonObjFromStr(source);\n    if (o != null) {\n      try {\n        if (o instanceof JSONObject) {\n          format(tag,((JSONObject)o).toString(2));\n        }\n else         if (o instanceof JSONArray) {\n          format(tag,((JSONArray)o).toString(2));\n        }\n else {\n          format(tag,source);\n        }\n      }\n catch (      JSONException e) {\n        format(tag,source);\n      }\n    }\n else {\n      format(tag,source);\n    }\n  }\n}\n", "nl": "Log an josn message with structural format with logy."}
{"code": "@Override public boolean isShown(){\n  return isShown;\n}\n", "nl": "Is this badge currently visible in the UI?"}
{"code": "protected synchronized void afterSpaceModeChange(SpaceMode newMode){\n  if (_logger.isLoggable(Level.FINER))   _logger.finer(\"Invoking afterSpaceModeChange event, new mode is \" + newMode);\n  Queue<ISpaceModeListener> remoteListeners=new LinkedList<ISpaceModeListener>();\n  for (Iterator<ISpaceModeListener> iter=_primarySpaceModeListeners.iterator(); iter.hasNext(); ) {\n    ISpaceModeListener listener=iter.next();\n    try {\n      if (LRMIUtilities.isRemoteProxy(listener)) {\n        if (_logger.isLoggable(Level.FINEST))         _logger.finest(\"located remote listener for afterSpaceModeChange, adding to asynchronous dispatch queue [\" + listener.toString() + \"]\");\n        remoteListeners.add(listener);\n        continue;\n      }\n      listener.afterSpaceModeChange(newMode);\n    }\n catch (    Exception rex) {\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.log(Level.FINE,\"Failed to invoke remote method ISpaceModeListener.afterSpaceModeChange(...) implemented by listener [\" + listener + \"]. Action Taken: Unregistered listener\",rex);\n      }\n      _primarySpaceModeListeners.removeListener(listener);\n    }\n  }\n  if (remoteListeners.size() > 0)   dispatchAfterEventToRemoteListeners(remoteListeners,newMode);\n  if (_logger.isLoggable(Level.FINEST))   _logger.finest(\"completed invoking synchronous afterSpaceModeChange event with mode \" + newMode);\n}\n", "nl": "Notify the listeners about the event"}
{"code": "@NotNull private ImageOverlayBuilder outlineOCRRegion(@NotNull OCRResult.Region region){\n  region.lines.forEach(null);\n  return this;\n}\n", "nl": "outlines a region with text."}
{"code": "public void sum(String column) throws QueryPlanException {\n  this.sumColumnName=column;\n}\n", "nl": "Add a sum on column. Can only sum integer or float columns"}
{"code": "public void removeDecoration(int pieceIndex,int decorationIndex,boolean updateSkills){\n  if (decorations[pieceIndex][decorationIndex] != dummyDecoration && decorations[pieceIndex][decorationIndex] != null) {\n    decorations[pieceIndex][decorationIndex]=null;\n    int i=0;\n    Decoration[] newDecorations=new Decoration[3];\n    for (    Decoration d : decorations[pieceIndex]) {\n      if (d != null && d != dummyDecoration) {\n        newDecorations[i++]=d;\n      }\n    }\n    while (i < newDecorations.length) {\n      newDecorations[i++]=null;\n    }\n    decorations[pieceIndex]=newDecorations;\n    if (updateSkills) {\n      updateSkillTreePointsSets();\n    }\n  }\n}\n", "nl": "Removes the decoration at the specified location from the specified armor piece. Will fail if the decoration in question is non-existent or a dummy."}
{"code": "@Override public void allocate(){\n  Log.d(Mary.LOG,\"dUMMYfree START alllocate\");\n  if (isLoaded()) {\n    return;\n  }\n  BulkTimer.LOAD.start();\n  Lexicon lexicon=getLexicon();\n  Log.d(Mary.LOG,\"lexicon = \" + lexicon);\n  if (lexicon != null && !lexicon.isLoaded()) {\n    Log.d(Mary.LOG,\"lexicon insead= \" + lexicon.toString());\n    try {\n      lexicon.load();\n    }\n catch (    IOException ioe) {\n      throw new Error(\"Can't load voice\",ioe);\n    }\n  }\n  Log.d(Mary.LOG,\"start lexicon loader \");\n  loader();\n  Log.d(Mary.LOG,\"end lexicon loader \");\n  BulkTimer.LOAD.stop();\n  if (isMetrics()) {\n    BulkTimer.LOAD.show(\"loading \" + toString() + \" for \"+ getRunTitle());\n  }\n  setLoaded(true);\n}\n", "nl": "Loads this Voice. It loads the lexicon and the audio output handler, but does not create audio output and output thread. It then calls the <code>loader()</code> method to load Voice-specific data, which include utterance processors."}
{"code": "@Override public void json(String json){\n  if (TextUtils.isEmpty(json)) {\n    d(\"Empty/Null json content\");\n    return;\n  }\n  try {\n    if (json.startsWith(\"{\")) {\n      JSONObject jsonObject=new JSONObject(json);\n      String message=jsonObject.toString(JSON_INDENT);\n      d(message);\n      return;\n    }\n    if (json.startsWith(\"[\")) {\n      JSONArray jsonArray=new JSONArray(json);\n      String message=jsonArray.toString(JSON_INDENT);\n      d(message);\n    }\n  }\n catch (  JSONException e) {\n    e(e.getCause().getMessage() + \"\\n\" + json);\n  }\n}\n", "nl": "Formats the json content and print it"}
{"code": "public PhotosReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"photos.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean showDefaultConfigurationFileMissingChoice(final String title,final Scene scene){\n  final DialogAction createWithSample=new DialogAction(\"Create \" + BaseConfigurationManager.APPLICATION_NAME + \" configuration file with sample content\",System.getProperty(\"line.separator\") + \"This creates a configuration file \" + \"in \\\"\"+ BaseConfigurationManager.getDefaultHomeDirectory()+ \"\\\"\"+ \" called \\\"\"+ BaseConfigurationManager.getDefaultConfigurationFileName()+ \"\\\"\"+ \", which will include sample connections to localhost and iot.eclipse.org.\");\n  final DialogAction createEmpty=new DialogAction(\"Create empty \" + BaseConfigurationManager.APPLICATION_NAME + \" configuration file\",System.getProperty(\"line.separator\") + \"This creates a configuration file \" + \"in \\\"\"+ BaseConfigurationManager.getDefaultHomeDirectory()+ \"\\\"\"+ \" called \\\"\"+ BaseConfigurationManager.getDefaultConfigurationFileName()+ \"\\\" with no sample connections.\");\n  final DialogAction copyExisting=new DialogAction(\"Copy existing \" + BaseConfigurationManager.APPLICATION_NAME + \" configuration file\",System.getProperty(\"line.separator\") + \"This copies an existing configuration file (selected in the next step) \" + \"to \\\"\"+ BaseConfigurationManager.getDefaultHomeDirectory()+ \"\\\"\"+ \" and renames it to \\\"\"+ BaseConfigurationManager.getDefaultConfigurationFileName()+ \"\\\".\");\n  final DialogAction dontDoAnything=new DialogAction(\"Don't do anything\",System.getProperty(\"line.separator\") + \"You can still point \" + BaseConfigurationManager.APPLICATION_NAME+ \" at your chosen configuration file \"+ \"by using the \\\"--configuration=my_custom_path\\\"\"+ \" command line parameter or open a configuration file from the main menu.\");\n  final List<DialogAction> links=Arrays.asList(createWithSample,createEmpty,copyExisting,dontDoAnything);\n  Optional<DialogAction> response=CommandLinksDialog.showCommandLinks(title,\"Please select one of the following options with regards to the \" + BaseConfigurationManager.APPLICATION_NAME + \" configuration file:\",links.get(0),links,550,650,30,110,scene.getStylesheets());\n  boolean configurationFileCreated=false;\n  if (!response.isPresent()) {\n  }\n else   if (response.get().getHeading().toLowerCase().contains(\"sample\")) {\n    configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromClassPath(\"sample\");\n  }\n else   if (response.get().getHeading().toLowerCase().contains(\"empty\")) {\n    configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromClassPath(\"empty\");\n  }\n else   if (response.get().getHeading().toLowerCase().contains(\"copy\")) {\n    final FileChooser fileChooser=new FileChooser();\n    fileChooser.setTitle(\"Select configuration file to copy\");\n    String extensions=\"xml\";\n    fileChooser.setSelectedExtensionFilter(new ExtensionFilter(\"XML file\",extensions));\n    final File selectedFile=fileChooser.showOpenDialog(scene.getWindow());\n    if (selectedFile != null) {\n      configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromFile(selectedFile);\n    }\n  }\n else {\n  }\n  return configurationFileCreated;\n}\n", "nl": "Shows the choice dialog when missing configuration file is detected."}
{"code": "public AdsGetSuggestionsQueryWithRegions(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section){\n  super(client,\"ads.getSuggestions\",Utils.buildParametrizedType(List.class,TargSuggestionsRegions.class));\n  accessToken(actor.getAccessToken());\n  section(section);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static int snapLeft(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int left,ArrayList<SnapCandidate> snapCandidates){\n  return snapHorizontal(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.LEFT),left,snapCandidates);\n}\n", "nl": "Convenience function to snap the left position"}
{"code": "@Override public SketchSetOperationPostAggregation withFields(List<PostAggregation> fields){\n  return new SketchSetOperationPostAggregation(getName(),getFunc(),fields,getSize());\n}\n", "nl": "Get a new instance of this PostAggregation with the given fields."}
{"code": "public boolean isKeyguardSecure(){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n    LogUtils.e(\"can not call isKeyguardSecure if SDK_INT < 16 \");\n    return false;\n  }\n else {\n    return keyguardManager.isKeyguardSecure();\n  }\n}\n", "nl": "Call requires API level 16"}
{"code": "public static Patterns jars(String[] includes,String[] excludes){\n  return new Patterns(includes,excludes);\n}\n", "nl": "Sets the jar patterns to scan"}
{"code": "public void clear(){\n  super.clear();\n  location=null;\n}\n", "nl": "erase the block"}
{"code": "public static VersionNumber parseLastVersionNumber(@Nonnull final String text){\n  return VersionParser.parseLastVersionNumber(Check.notNull(text,\"text\"));\n}\n", "nl": "Interprets a string with version information. The last version number in the string will be searched and processed."}
{"code": "public boolean addAll(PointsToSetInternal other,PointsToSetInternal exclude){\n  if (exclude != null) {\n    throw new RuntimeException(\"NYI\");\n  }\n  return newSet.addAll(other,oldSet);\n}\n", "nl": "Adds contents of other into this set, returns true if this set  changed."}
{"code": "public void addSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    mListeners=new ArrayList<SwipeListener>();\n  }\n  mListeners.add(listener);\n}\n", "nl": "Add a callback to be invoked when a swipe event is sent to this view."}
{"code": "protected boolean expect(TokenKind kind){\n  return expect(kind,false);\n}\n", "nl": "Consumes the current token iff it's one of the expected types.<br> Otherwise, returns false and reports an error."}
{"code": "public tsfile_data data(TimeSeriesCollection ts_data){\n  final dictionary_delta dict_delta=new dictionary_delta();\n  dict_delta.gdd=new path_dictionary_delta[0];\n  dict_delta.mdd=new path_dictionary_delta[0];\n  dict_delta.sdd=new strval_dictionary_delta[0];\n  dict_delta.tdd=new tag_dictionary_delta[0];\n  final List<tsfile_record> records=new ArrayList<>();\n  final Iterator<TimeSeriesValue> tsv_iter=ts_data.getTSValues().stream().iterator();\n  while (tsv_iter.hasNext()) {\n    final TimeSeriesValue tsv=tsv_iter.next();\n    tsfile_record record=new tsfile_record();\n    record.group_ref=simpleGroupPath_index(dict_delta,tsv.getGroup().getPath());\n    record.tag_ref=tags_index(dict_delta,tsv.getGroup().getTags());\n    record.metrics=tsv.getMetrics().entrySet().stream().map(null).toArray(null);\n    records.add(record);\n  }\n  tsfile_data result=new tsfile_data();\n  result.records=records.stream().toArray(null);\n  result.ts=timestamp(ts_data.getTimestamp());\n  if (dict_delta.gdd.length > 0 || dict_delta.mdd.length > 0 || dict_delta.sdd.length > 0 || dict_delta.tdd.length > 0)   result.dd=dict_delta;\n  return result;\n}\n", "nl": "Transform a TimeSeriesCollection into the XDR serialized form."}
{"code": "@Override public void onUIRefreshPrepare(PtrFrameLayout frame){\n}\n", "nl": "prepare for loading"}
{"code": "public void printDuration(String tag){\n  LogUtils.i(tag + \" :  \" + duration());\n}\n", "nl": "Print duration."}
{"code": "public static void main(String[] args){\n  Key k=generate(512);\n  System.out.println(k);\n  String s=\"hello\";\n  String pub_key=\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANckZ1iK/1sOb7N1n2xuwiIoHZtJ3mgaV3s0PCcJKhdV5MsjQ/yzQ5N4lnQd9RyLjVfDH6M6KNDSmPc+rmRFRH0CAwEAAQ==\";\n  String pri_key=\"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA1yRnWIr/Ww5vs3WfbG7CIigdm0neaBpXezQ8JwkqF1XkyyND/LNDk3iWdB31HIuNV8Mfozoo0NKY9z6uZEVEfQIDAQABAkArmSv8TIa9DCrkwkRhc/yRcXG2g3y3ugbaZ9Z8zqWh/p2bU0ih2EdhqCl1M9QzOlmwdgL6dOZtupr93cvPwb2dAiEA/8plzQ4y0xGqbRjDai4KfEwgNQ57T0f74giFqErHzRsCIQDXUXzpRbnMqksB/SrT45BzPUH4eEIoYQ2ZBuEVuLJGRwIhANufHlU30a+kRV4ymuZ57YrXmfe0HW/u8HgctRXQT0jtAiBqPCNkOOm+KDtP5OhPmRS5Nv0oqbUClTgPS4ycmf8jmwIgfKUvHfL+DBr0mhee0kXE//RVOHUORv9jgyFL7TK1W6s=\";\n  byte[] ss=encode(s.getBytes(),pub_key);\n  System.out.println(new String(Base64.encode(ss)));\n  byte[] ss1=decode(ss,pri_key);\n  System.out.println(new String(ss1));\n}\n", "nl": "The main method."}
{"code": "public static long calculateDifferentDay(Date startDate,Date endDate){\n  return calculateDifference(startDate,endDate,DifferenceMode.Day);\n}\n", "nl": "Calculate different day long."}
{"code": "private void reset(){\n  currentIndex=0;\n  undoList.clear();\n  updateMenuItems();\n}\n", "nl": "Reset undo list"}
{"code": "public static JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> computeExpTable(JavaSparkContext sc,FileSystem fs,BroadcastVars bVars,Query query,String queryInputFile,String outputDirExp,boolean useModExpJoin){\n  JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> expCalculations;\n  logger.info(\"Creating expTable in hdfs for query identifier = \" + query.getQueryInfo().getIdentifier());\n  Path outPathExp=new Path(outputDirExp);\n  try {\n    if (fs.exists(outPathExp)) {\n      fs.delete(outPathExp,true);\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  Map<Integer,BigInteger> queryElements=query.getQueryElements();\n  List<Integer> keys=new ArrayList<>(queryElements.keySet());\n  int numSplits=SystemConfiguration.getIntProperty(\"pir.expCreationSplits\",100);\n  JavaRDD<Integer> queryHashes=sc.parallelize(keys,numSplits);\n  int numExpLookupPartitions=SystemConfiguration.getIntProperty(\"pir.numExpLookupPartitions\",100);\n  expCalculations=queryHashes.flatMapToPair(new ExpTableGenerator(bVars)).groupByKey(numExpLookupPartitions);\n  if (!useModExpJoin) {\n    JavaPairRDD<Integer,String> hashToPartition=expCalculations.mapPartitionsToPair(new ExpKeyFilenameMap(bVars));\n    Map<Integer,String> queryHashFileNameMap=hashToPartition.collectAsMap();\n    query.setExpFileBasedLookup(new HashMap<>(queryHashFileNameMap));\n    try {\n      new HadoopFileSystemStore(fs).store(queryInputFile,query);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    bVars.setQuery(query);\n  }\n  logger.info(\"Completed creation of expTable\");\n  return expCalculations;\n}\n", "nl": "Method to create the distributed modular exponentiation lookup table in hdfs for a given Query <p> Returns a Pair RDD of the form <queryHash, <<power>,<element^power mod N^2>>"}
{"code": "public ConfigurationNotFoundException(String s){\n  super(s);\n}\n", "nl": "Creates an instance with the specified detail message."}
{"code": "public GroupsIsMemberQueryWithUserIds isMember(UserActor actor,String groupId,Integer... userIds){\n  return new GroupsIsMemberQueryWithUserIds(getClient(),actor,groupId,userIds);\n}\n", "nl": "Returns information specifying whether a user is a member of a community."}
{"code": "public TicTacTocPoint(int x,int y){\n  super();\n  this.x=x;\n  this.y=y;\n}\n", "nl": "init The TicTacTocPoint Using Click Mouse Event x,y (or another pointer)"}
{"code": "private void putForeignKeyValue(ContentValues values,DataSupport baseObj){\n  Map<String,Long> associatedModelMap=baseObj.getAssociatedModelsMapWithoutFK();\n  for (  String associatedTableName : associatedModelMap.keySet()) {\n    values.put(getForeignKeyColumnName(associatedTableName),associatedModelMap.get(associatedTableName));\n  }\n}\n", "nl": "If the table for this model have a foreign key column, the value of foreign key id should be saved too."}
{"code": "private void applyForceAtPointAction(){\n  TreePath path=this.tree.getSelectionPath();\n  if (path != null) {\n    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();\n    if (node.getUserObject() instanceof SandboxBody) {\n      SandboxBody body=(SandboxBody)node.getUserObject();\n      Vector2[] forcePoint=ApplyForceAtPointDialog.show(ControlUtilities.getParentWindow(this));\n      if (forcePoint != null) {\nsynchronized (Simulation.LOCK) {\n          body.applyForce(forcePoint[0],forcePoint[1]);\n        }\n      }\n    }\n  }\n}\n", "nl": "Applies a forces at a point to the given body if the user accepts the input."}
{"code": "private void handleNotifyCoreSA(Context context,NotifyTemplateHolder template,boolean fromReplication,AnswerHolder answer){\n  boolean shouldReplicate=false;\n  if (_engine.isReplicated() && !_engine.getSpaceImpl().isBackup())   shouldReplicate=_engine.shouldReplicate(ReplicationOperationType.NOTIFY,true,!template.isReplicateNotify(),fromReplication);\n  _cacheManager.insertTemplate(context,template,shouldReplicate);\n  Uuid spaceUID=_engine.getSpaceImpl().getUuid();\n  answer.setEventRegistration(new GSEventRegistration(template.getEventId(),null,context.getNotifyLease(),template.getSequenceNumber(),template.getUID(),spaceUID));\n}\n", "nl": "Handles Notify Core."}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void tryStartingKbMode(int keyCode){\n  if ((keyCode == -1 || addKeyIfLegal(keyCode))) {\n    mInKbMode=true;\n    mDoneButton.setEnabled(false);\n    updateDisplay(false);\n  }\n}\n", "nl": "Try to start keyboard mode with the specified key, as long as the timepicker is not in the middle of a touch-event."}
{"code": "public GaussianComponent(double componentWeight,Matrix mean,Matrix covariances) throws IllegalArgumentException {\n  if (componentWeight < 0 || componentWeight > 1)   throw new IllegalArgumentException(\"the weight of the component must be in the intervall [0,1];\");\n  if (mean == null || covariances == null)   throw new IllegalArgumentException(\"mean and covariances must not be null values;\");\n  this.mean=mean;\n  this.covariances=covariances;\n  this.componentWeight=componentWeight;\n  dimension=mean.getRowDimension();\n  try {\n    covariances.times(mean);\n    actualizeOptimizationFields();\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"mean and covariance matrix must have compatible shapes and the covarince matrix must not be singular;\");\n  }\n}\n", "nl": "Creates a gaussian component and checks the component settings for correctness."}
{"code": "public FixedWidthTextTableSchema(){\n}\n", "nl": "Creates a new, initially empty FixedWidthTextTableSchema."}
{"code": "@Override public Filter createFilter(){\n  return new BeyondExtended();\n}\n", "nl": "Creates the filter."}
{"code": "protected void addCenter(NlComponent node,String id){\n  Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);\n  myCenterHorizEdges.add(new Segment(centerY(b),b.x,x2(b),node,id,SegmentType.CENTER_HORIZONTAL,NO_MARGIN));\n  myCenterVertEdges.add(new Segment(centerX(b),b.y,y2(b),node,id,SegmentType.CENTER_VERTICAL,NO_MARGIN));\n}\n", "nl": "Records the center edges for the given node to the potential match list"}
{"code": "final public static long updateCollection(Object id,V v,Class<? extends Bean> t){\n  return updateCollection(id,v,t,false);\n}\n", "nl": "update the collection according the Mapping(collection) declaration"}
{"code": "public PointFillDetails(FunctionNameInterface functionManager){\n  super(PointFillDetails.class,configFile,functionManager);\n}\n", "nl": "Instantiates a new point fill details."}
{"code": "public static URL makeURL(String pathname) throws MalformedURLException {\n  if (pathname.startsWith(\"/\")) {\n    return new URL(\"file://\" + pathname);\n  }\n  String userdir=System.getProperty(\"user.dir\");\n  userdir=userdir.replace('\\\\','/');\n  if (userdir.endsWith(\"/\")) {\n    return new URL(\"file:///\" + userdir + pathname);\n  }\n else {\n    return new URL(\"file:///\" + userdir + \"/\"+ pathname);\n  }\n}\n", "nl": "Construct a file: URL for a path name. <p/> <p>URLs in the file: scheme can be constructed for paths on the local file system. Several possibilities need to be considered: </p> <p/> <ul> <li>If the path does not begin with a slash, then it is assumed to reside in the users current working directory (System.getProperty(\"user.dir\")).</li> <li>On Windows machines, the current working directory uses backslashes (\\\\, instead of /).</li> <li>If the current working directory is \"/\", don't add an extra slash before the base name.</li> </ul> <p/> <p>This method is declared static so that other classes can use it directly.</p>"}
{"code": "public DistributionDocumentEvaluator(Map<Integer,String> mIdxToWord,grammaticalityEstimator geEstimator){\n  WordMap=mIdxToWord;\n  Estimator=geEstimator;\n}\n", "nl": "Creates a new instance of DistributionDocumentEvaluator, given an integer-to-term map and a distribution document."}
{"code": "public TLongObjectHashMap(int initialCapacity,float loadFactor){\n  super(initialCapacity,loadFactor);\n}\n", "nl": "Creates a new <code>TLongObjectHashMap</code> instance with a prime capacity equal to or greater than <tt>initialCapacity</tt> and with the specified load factor."}
{"code": "public void onFailure(int statusCode,Header[] headers,String responseBody,Throwable error){\n  onFailure(responseBody,error);\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "public static void writeLittleEndianInt(DataOutputStream dataStream,int val) throws IOException {\n  int mask=0x000000ff;\n  for (int shift=0; shift < 32; shift+=8) {\n    dataStream.writeByte(mask & (val >> shift));\n  }\n}\n", "nl": "Writes a little-endian integer to the given DataOutputStream."}
{"code": "public ConnectionEndpointDetails(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static GeneralPath stackSpline(GeneralPath p,float[] pts,float epsilon,float slack,boolean closed,float tx,float ty){\n  int npoints=0;\n  for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break;\n  return stackSpline(p,pts,0,npoints / 2,epsilon,slack,closed,tx,ty);\n}\n", "nl": "Computes a set of curves using the cardinal spline approach, but using straight lines for completely horizontal or vertical segments."}
{"code": "public static ManifestModInfo create(File modFile,Manifest manifest){\n  Set<Object> attributeNames=manifest.getMainAttributes().keySet();\n  if (!attributeNames.contains(new Attributes.Name(\"ID\"))) {\n    return null;\n  }\n  ManifestModInfo container=new ManifestModInfo();\n  Attributes attributes=manifest.getMainAttributes();\n  for (  Field field : ManifestModInfo.class.getDeclaredFields()) {\n    if (field.isAnnotationPresent(SerializedName.class)) {\n      String name=field.getAnnotation(SerializedName.class).value();\n      if (attributeNames.contains(new Attributes.Name(name))) {\n        try {\n          field.set(container,attributes.getValue(name).split(\"\\\\s*<-->\")[0]);\n        }\n catch (        IllegalAccessException e) {\n          OpenModLoader.getLogger().catching(e);\n          return null;\n        }\n      }\n    }\n  }\n  container.modFile=modFile;\n  return container;\n}\n", "nl": "Uses a manifest to create a mod container."}
{"code": "public void paintSelection(Graphics g0){\n  Graphics2D g=(Graphics2D)g0;\n  SelectedBlock selectedBlock=getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);\n    rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);\n    g.setColor(highlightColorSemiTransparent);\n    g.fill(rect);\n  }\n}\n", "nl": "paint the selection rectangle"}
{"code": "public IdentityHashSet(Collection<E> original){\n  delegate=new IdentityHashMap<E,E>();\n  addAll(original);\n}\n", "nl": "Creates a new IdentityHashSet containing the same elements as the given collection."}
{"code": "public void update(PhysicalTable table,DataSourceMetadata metadata){\n  ConcurrentSkipListMap<DateTime,Map<String,SegmentInfo>> current=metadata.getSegments().stream().collect(Collectors.groupingBy(null,null,Collectors.mapping(null,COLLECTOR)));\n  allSegments.computeIfAbsent(table,null).set(current);\n}\n", "nl": "Update the information with respect to the segment metadata of a particular physical table. This operation should be atomic per table."}
{"code": "public boolean readClass(DataInputStream d){\n  try {\n    magic=d.readInt() & 0xFFFFFFFFL;\n    if (magic != MAGIC) {\n      G.v().out.println(\"Wrong magic number in \" + fn + \": \"+ magic);\n      return false;\n    }\n    minor_version=d.readUnsignedShort();\n    major_version=d.readUnsignedShort();\n    constant_pool_count=d.readUnsignedShort();\n    if (!readConstantPool(d))     return false;\n    access_flags=d.readUnsignedShort();\n    this_class=d.readUnsignedShort();\n    super_class=d.readUnsignedShort();\n    interfaces_count=d.readUnsignedShort();\n    if (interfaces_count > 0) {\n      interfaces=new int[interfaces_count];\n      int j;\n      for (j=0; j < interfaces_count; j++)       interfaces[j]=d.readUnsignedShort();\n    }\n    if (Options.v().time())     Timers.v().fieldTimer.start();\n    fields_count=d.readUnsignedShort();\n    readFields(d);\n    if (Options.v().time())     Timers.v().fieldTimer.end();\n    if (Options.v().time())     Timers.v().methodTimer.start();\n    methods_count=d.readUnsignedShort();\n    readMethods(d);\n    if (Options.v().time())     Timers.v().methodTimer.end();\n    if (Options.v().time())     Timers.v().attributeTimer.start();\n    attributes_count=d.readUnsignedShort();\n    if (attributes_count > 0) {\n      attributes=new attribute_info[attributes_count];\n      readAttributes(d,attributes_count,attributes);\n    }\n    if (Options.v().time())     Timers.v().attributeTimer.end();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"IOException with \" + fn + \": \"+ e.getMessage(),e);\n  }\n  return true;\n}\n", "nl": "Builds the internal representation of this Class by reading in the given class file."}
{"code": "public static boolean isImage(File file){\n  Uri selectedUri=Uri.fromFile(file);\n  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());\n  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);\n  return (mimeType != null && mimeType.startsWith(\"image/\"));\n}\n", "nl": "Checks if file passed is an image"}
{"code": "private FileFinderResult find(FileType fileType) throws FileFinderException {\n  FileFinderResult fileFinderResultByType=new FileFinderResult();\n  List<FileMatch> sourceMatchCandidates=getSourceMatcheCandidates(fileType);\n  List<FileMatch> targetMatcheCandidates=getTargetMatcheCandidates(fileType);\n  targetMatcheCandidates=filterTargetMatchesWithoutSourceMatches(sourceMatchCandidates,targetMatcheCandidates);\n  sourceMatchCandidates=filterSourceMatchesThatAreTargetMatches(sourceMatchCandidates,targetMatcheCandidates);\n  fileFinderResultByType.getSources().addAll(sourceMatchCandidates);\n  fileFinderResultByType.getTargets().addAll(targetMatcheCandidates);\n  return fileFinderResultByType;\n}\n", "nl": "Finds files for a given type."}
{"code": "void hideFooter(){\n  state=FooterState.STATE_GONE;\n  hideView();\n}\n", "nl": "set visibility gone"}
{"code": "public static BufferedImage mergeImageAndText(URL imageFilePath,List<TextPosition> textList) throws IOException {\n  BufferedImage im=ImageIO.read(imageFilePath);\n  Graphics2D g2=im.createGraphics();\n  Font font=AppSplashScreen.getFont();\n  g2.setFont(font);\n  g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n  g2.setColor(Color.black);\n  for (  TextPosition obj : textList) {\n    g2.drawString(obj.textString,obj.position.x,obj.position.y);\n  }\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  ImageIO.write(im,\"png\",baos);\n  InputStream in=new ByteArrayInputStream(baos.toByteArray());\n  BufferedImage bImageFromConvert=ImageIO.read(in);\n  return bImageFromConvert;\n}\n", "nl": "Merge image and text."}
{"code": "public static String formatUid(int uid){\n  StringBuilder sb=new StringBuilder();\n  formatUid(sb,uid);\n  return sb.toString();\n}\n", "nl": "Generate a text representation of the vuid, breaking out its individual components -- user, app, isolated, etc."}
{"code": "public WasabiEmailException(ErrorCode errorCode,String message,Throwable cause){\n  super(errorCode,message,cause);\n}\n", "nl": "Throws an WasabiEmailException."}
{"code": "public static boolean checkBsDiffFileSize(File bsDiffFile,File newFile){\n  if (!bsDiffFile.exists()) {\n    throw new TinkerPatchException(\"can not find the bsDiff file:\" + bsDiffFile.getAbsolutePath());\n  }\n  double ratio=bsDiffFile.length() / (double)newFile.length();\n  if (ratio > TypedValue.BSDIFF_PATCH_MAX_RATIO) {\n    Logger.e(\"bsDiff patch file:%s, size:%dk, new file:%s, size:%dk. patch file is too large, treat it as newly file to save patch time!\",bsDiffFile.getName(),bsDiffFile.length() / 1024,newFile.getName(),newFile.length() / 1024);\n    return false;\n  }\n  return true;\n}\n", "nl": "if bsDiff result is too larger, just treat it as newly file"}
{"code": "@Override public void cancel(){\n  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(noButton));\n}\n", "nl": "Cancels the dialog."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public RShiftExpr fullCopy(){\n  RShiftExpr tree=(RShiftExpr)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public static Map<String,Object> createContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){\n  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);\n  context.put(\"entityOperation\",\"_CREATE\");\n  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,\"_CREATE\");\n  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);\n  context.put(\"targetOperationList\",targetOperationList);\n  context.put(\"contentPurposeList\",contentPurposeList);\n  context.put(\"skipPermissionCheck\",null);\n  Map<String,Object> result=null;\n  try {\n    result=createContentAssocMethod(dctx,context);\n  }\n catch (  GenericServiceException e) {\n    return ServiceUtil.returnError(e.getMessage());\n  }\ncatch (  GenericEntityException e2) {\n    return ServiceUtil.returnError(e2.getMessage());\n  }\ncatch (  Exception e3) {\n    return ServiceUtil.returnError(e3.getMessage());\n  }\n  return result;\n}\n", "nl": "Create a ContentAssoc service. The work is done in a separate method so that complex services that need this functionality do not need to incur the reflection performance penalty."}
{"code": "public void remove(GenericEntity entity){\n  UtilCache.clearCache(getCacheName(entity.getEntityName()));\n  ModelEntity model=entity.getModelEntity();\n  if (model != null) {\n    Iterator<String> it=model.getViewConvertorsIterator();\n    while (it.hasNext()) {\n      String targetEntityName=it.next();\n      UtilCache.clearCache(getCacheName(targetEntityName));\n    }\n  }\n}\n", "nl": "Removes all condition caches that include the specified entity."}
{"code": "private String formatString(final String s){\n  if (s.equals(newLine)) {\n    return s;\n  }\n  return String.format(\"[%s]: %s\",timestamp(),s);\n}\n", "nl": "Formats the given message with the timestamp appended to the front."}
{"code": "void assignToNew(String fileName,PageFormatter fmtr){\n  internalLock.writeLock().lock();\n  try {\n    flush();\n    fmtr.format(this);\n    blk=contents.append(fileName);\n    pins=0;\n    isNew=true;\n    lastLsn=LogSeqNum.DEFAULT_VALUE;\n  }\n  finally {\n    internalLock.writeLock().unlock();\n  }\n}\n", "nl": "Initializes the buffer's page according to the specified formatter, and appends the page to the specified file. If the buffer was dirty, then the contents of the previous page are first written to disk."}
{"code": "public boolean isSetCallType(){\n  return __isset_bit_vector.get(__CALLTYPE_ISSET_ID);\n}\n", "nl": "Returns true if field callType is set (has been assigned a value) and false otherwise"}
{"code": "protected void initEnvironment(Options options,MainArguments mainArgs,JCommander jcommander){\n}\n", "nl": "Hook to allow setting variables that are not run or validation specific, based on options. Sample use case are remote logging, test harnesses and others. Called after command line options are parsed, but before a file is read or a run started."}
{"code": "protected void invalidateSchema(){\n  super.invalidateSchema();\n  this.filterColumns();\n}\n", "nl": "Invalidates this table's cached schema. This method should be called whenever columns are added or removed from this table."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_INVITE_FORCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1390117,value0);\n}\n", "nl": "%0 is currently rejecting alliance invitations."}
{"code": "private static int try_failure(int count,String s,String e){\n  print(\">    \" + s + \"*** failure ***\\n>      Message: \"+ e+ \"\\n\");\n  return ++count;\n}\n", "nl": "Print appropriate messages for unsuccessful outcome try"}
{"code": "public boolean showCookiesSites(){\n  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES;\n}\n", "nl": "Returns whether this category is the Cookies category."}
{"code": "public int indexOf(T o){\n  for (int i=0; i < size && elems[i] != null; i++) {\n    if (elems[i].equals(o))     return i;\n  }\n  return -1;\n}\n", "nl": "returns first index"}
{"code": "public ASCIIReader(InputStream inputStream,byte[] buffer,MessageFormatter messageFormatter,Locale locale){\n  fInputStream=inputStream;\n  fBuffer=buffer;\n  fFormatter=messageFormatter;\n  fLocale=locale;\n}\n", "nl": "Constructs an ASCII reader from the specified input stream and buffer."}
{"code": "final public static int insertCollection(String collection,V v){\n  MongoCollection<Document> c=getCollection(collection);\n  if (c != null) {\n    Document d=new Document();\n    for (    String name : v.names()) {\n      Object v1=v.value(name);\n      d.append(name,v1);\n    }\n    try {\n      c.insertOne(d);\n      if (log.isDebugEnabled())       log.debug(\"inserted collection=\" + collection + \", d=\"+ d);\n      return 1;\n    }\n catch (    Exception e) {\n      if (log.isErrorEnabled())       log.error(e.getMessage(),e);\n    }\n  }\n  return 0;\n}\n", "nl": "insert into the collection"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200902,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer confused."}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,RegisterActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity"}
{"code": "public void decreaseDpi(){\n  if (this.currentDpiPos > 0) {\n    --this.currentDpiPos;\n  }\n}\n", "nl": "Decrease the image size (dpi)."}
{"code": "public IResource[] promptForMultiple() throws InterruptedException {\n  List targetResources=new ArrayList();\n  for (int i=0; i < resources.length; i++) {\n    IResource resource=resources[i];\n    if (condition.needsPrompt(resource) && confirmOverwrite) {\n      if (confirmOverwrite(condition.promptMessage(resource))) {\n        targetResources.add(resource);\n      }\n    }\n else {\n      targetResources.add(resource);\n    }\n  }\n  return (IResource[])targetResources.toArray(new IResource[targetResources.size()]);\n}\n", "nl": "Call to calculate and show prompt. If no resources satisfy the prompt condition a dialog won't be shown. The resources for which the user confirmed the action are returned."}
{"code": "public int remove(T item){\n  int index=indexOf(item);\n  if (index >= 0)   super.remove(index);\n  return index;\n}\n", "nl": "Removes the first occurrence of the specific item from this list if exists."}
{"code": "@Override public int hashCode(){\n  return (getClass().getName() + Name).hashCode();\n}\n", "nl": "The hash code of the object is the hashcode of its class name, followed by the object's name."}
{"code": "public static byte[] hexStringToByte(final String source){\n  byte[] bytes=null;\n  if (source != null) {\n    bytes=new byte[source.length() / 2];\n    int i=0;\n    while (i < bytes.length) {\n      bytes[i]=(byte)(Integer.parseInt(source.substring(i * 2,(i + 1) * 2),16));\n      i++;\n    }\n  }\n  return bytes;\n}\n", "nl": "hex string to byte"}
{"code": "public void rollback(ServerTransaction xtn,boolean anyUpdates) throws SAException {\n}\n", "nl": "Performs rollback to transaction- rewrite taken entries, remove new entries."}
{"code": "public LocationAnimator(){\n  super();\n}\n", "nl": "Create a new LocationAnimator that processes all data groups."}
{"code": "public void add(UIElement element){\n  elements.add(element);\n}\n", "nl": "Add a UI element to the container."}
{"code": "public static JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> computeExpTable(JavaSparkContext sc,FileSystem fs,BroadcastVars bVars,Query query,String queryInputFile,String outputDirExp){\n  return computeExpTable(sc,fs,bVars,query,queryInputFile,outputDirExp,false);\n}\n", "nl": "Method to create the distributed modular exponentiation lookup table in hdfs for a given Query <p> Returns a Pair RDD of the form <queryHash, <<power>,<element^power mod N^2>>"}
{"code": "public FruchtermanReingoldLayout(String graph){\n  this(graph,700);\n}\n", "nl": "Create a new FruchtermanReingoldLayout."}
{"code": "@Override public int[] makeDensityTestPoints(){\n  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11};\n}\n", "nl": "Creates the default probability density test input values"}
{"code": "public PhotosGetCommentsQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public boolean insertTrivialPhiNodes(){\n  update();\n  boolean change=false;\n  varToBlocks=new HashMultiMap<Local,Block>();\n  Map<Local,List<Block>> localsToDefPoints=new HashMap<Local,List<Block>>();\n  for (  Block block : cfg) {\n    for (    Unit unit : block) {\n      List<ValueBox> defBoxes=unit.getDefBoxes();\n      for (      ValueBox vb : defBoxes) {\n        Value def=vb.getValue();\n        if (def instanceof Local) {\n          Local local=(Local)def;\n          List<Block> def_points=null;\n          if (localsToDefPoints.containsKey(local)) {\n            def_points=localsToDefPoints.get(local);\n          }\n else {\n            def_points=new ArrayList<Block>();\n            localsToDefPoints.put(local,def_points);\n          }\n          def_points.add(block);\n        }\n      }\n      if (Shimple.isPhiNode(unit))       varToBlocks.put(Shimple.getLhsLocal(unit),block);\n    }\n  }\n  int[] workFlags=new int[cfg.size()];\n  int iterCount=0;\n  Stack<Block> workList=new Stack<Block>();\n  Map<Integer,Integer> has_already=new HashMap<Integer,Integer>();\n  for (Iterator<Block> blocksIt=cfg.iterator(); blocksIt.hasNext(); ) {\n    Block block=blocksIt.next();\n    has_already.put(block.getIndexInMethod(),0);\n  }\n{\n    for (    Local local : localsToDefPoints.keySet()) {\n      iterCount++;\n{\n        List<Block> def_points=localsToDefPoints.get(local);\n        if (def_points.size() == 1) {\n          continue;\n        }\n        for (        Block block : def_points) {\n          workFlags[block.getIndexInMethod()]=iterCount;\n          workList.push(block);\n        }\n      }\n      while (!workList.empty()) {\n        Block block=workList.pop();\n        DominatorNode<Block> node=dt.getDode(block);\n        Iterator<DominatorNode<Block>> frontierNodes=df.getDominanceFrontierOf(node).iterator();\n        while (frontierNodes.hasNext()) {\n          Block frontierBlock=frontierNodes.next().getGode();\n          int fBIndex=frontierBlock.getIndexInMethod();\n          Iterator<Unit> unitsIt=frontierBlock.iterator();\n          if (!unitsIt.hasNext()) {\n            continue;\n          }\n          if (has_already.get(frontierBlock.getIndexInMethod()) < iterCount) {\n            has_already.put(frontierBlock.getIndexInMethod(),iterCount);\n            prependTrivialPhiNode(local,frontierBlock);\n            change=true;\n            if (workFlags[fBIndex] < iterCount) {\n              workFlags[fBIndex]=iterCount;\n              workList.push(frontierBlock);\n            }\n          }\n        }\n      }\n    }\n  }\n  return change;\n}\n", "nl": "Phi node Insertion Algorithm from Cytron et al 91, P24-5, <p>Special Java case: If a variable is not defined along all paths of entry to a node, a Phi node is not needed.</p>"}
{"code": "public static void remove(String name){\n  Helper.delete(W.create(\"name\",name),Jar.class);\n}\n", "nl": "Removes the."}
{"code": "public static boolean canUseSkill(Player player,Skill skill){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseSkill.ordinal()]) {\n    if (!restrictions.canUseSkill(player,skill)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check whether player can use such skill"}
{"code": "public static boolean attemptCrafting(EntityPlayerMP player,IRecipe recipe){\n  if (player == null || recipe == null)   return false;\n  ItemStack is=recipe.getRecipeOutput();\n  if (is == null)   return false;\n  List<ItemStack> ingredients=getIngredients(recipe);\n  if (playerHasIngredients(player,ingredients)) {\n    removeIngredientsFromPlayer(player,ingredients);\n    ItemStack resultForInventory=is.copy();\n    ItemStack resultForReward=is.copy();\n    player.inventory.addItemStackToInventory(resultForInventory);\n    RewardForCollectingItemImplementation.GainItemEvent event=new RewardForCollectingItemImplementation.GainItemEvent(resultForReward);\n    MinecraftForge.EVENT_BUS.post(event);\n    return true;\n  }\n  return false;\n}\n", "nl": "Attempt to craft the given recipe.<br> This pays no attention to tedious things like using the right crafting table / brewing stand etc, or getting the right shape.<br> It simply takes the raw ingredients out of the player's inventory, and inserts the output of the recipe, if possible."}
{"code": "@Override public Object apply(SqlFunctionExecutionContext context){\n  assertNumberOfArguments(2,context);\n  Object str=context.getArgument(0);\n  Object subStr=context.getArgument(1);\n  if (str != null && subStr != null && str instanceof String && subStr instanceof String) {\n    return String.valueOf(str).indexOf(String.valueOf(subStr)) + 1;\n  }\n else {\n    throw new RuntimeException(\"InStr function - wrong arguments types. First argument:[\" + str + \"]. Second argument:[ \"+ subStr+ \"]\");\n  }\n}\n", "nl": "inStr is an SQL convention (Not Java's), in the sense that the first index is 1 and not 0."}
{"code": "public void createWindowSurface(Object surface){\n  if (eGLSurface != EGL14.EGL_NO_SURFACE) {\n    throw new IllegalStateException(\"surface already created\");\n  }\n  eGLSurface=eglCore.createWindowSurface(surface);\n}\n", "nl": "Creates a window surface. <p/>"}
{"code": "private void createDictionaryCacheForGivenType(CacheType cacheType,String carbonStorePath){\n  Cache cacheObject=null;\n  if (cacheType.equals(CacheType.REVERSE_DICTIONARY)) {\n    cacheObject=new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier,Dictionary>(carbonStorePath,cacheTypeToLRUCacheMap.get(cacheType));\n  }\n else   if (cacheType.equals(CacheType.FORWARD_DICTIONARY)) {\n    cacheObject=new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier,Dictionary>(carbonStorePath,cacheTypeToLRUCacheMap.get(cacheType));\n  }\n  cacheTypeToCacheMap.put(cacheType,cacheObject);\n}\n", "nl": "This method will create the cache for given cache type"}
{"code": "public boolean handleSVNDir(IContainer svnDir){\n  if (!svnDir.isTeamPrivateMember()) {\n    IFile entriesFile=svnDir.getFile(new Path(SVNConstants.SVN_ENTRIES));\n    if (entriesFile.exists() && !svnDir.isTeamPrivateMember()) {\n      try {\n        svnDir.setTeamPrivateMember(true);\n        if (Policy.DEBUG_METAFILE_CHANGES) {\n          System.out.println(\"[svn] found a new SVN meta folder, marking as team-private: \" + svnDir.getFullPath());\n        }\n      }\n catch (      CoreException e) {\n        SVNProviderPlugin.log(SVNException.wrapException(svnDir,Policy.bind(\"SyncFileChangeListener.errorSettingTeamPrivateFlag\"),e));\n      }\n    }\n  }\n  return svnDir.isTeamPrivateMember();\n}\n", "nl": "If it's a new SVN directory with the canonical child metafiles then mark it as team-private.  Makr it is team private even when it is changed but not marked team private yet."}
{"code": "public static Class forName(String name) throws ClassNotFoundException {\n  return forName(name,getDefaultClassLoader());\n}\n", "nl": "Replacement for <code>Class.forName()</code> that also returns Class instances for primitives (like \"int\") and array class names (like \"String[]\"). <p>Always uses the default class loader: that is, preferably the thread context class loader, or the ClassLoader that loaded the ClassUtils class as fallback."}
{"code": "private static boolean isIntegral(JsonPrimitive primitive){\n  if (primitive.value instanceof Number) {\n    Number number=(Number)primitive.value;\n    return number instanceof BigInteger || number instanceof Long || number instanceof Integer|| number instanceof Short|| number instanceof Byte;\n  }\n  return false;\n}\n", "nl": "Returns true if the specified number is an integral type (Long, Integer, Short, Byte, BigInteger)"}
{"code": "public void resetConstraintHandles(){\n  mConstraintHandles.clear();\n  for (  ConstraintAnchor anchor : mWidget.getAnchors()) {\nswitch (anchor.getType()) {\ncase LEFT:\n{\n        mConstraintHandles.add(mLeftAnchor);\n      }\n    break;\ncase TOP:\n{\n    mConstraintHandles.add(mTopAnchor);\n  }\nbreak;\ncase RIGHT:\n{\nmConstraintHandles.add(mRightAnchor);\n}\nbreak;\ncase BOTTOM:\n{\nmConstraintHandles.add(mBottomAnchor);\n}\nbreak;\ncase BASELINE:\n{\nmConstraintHandles.add(mBaselineAnchor);\n}\nbreak;\ncase CENTER_X:\n{\nmConstraintHandles.add(mCenterXAnchor);\n}\nbreak;\ncase CENTER_Y:\n{\nmConstraintHandles.add(mCenterYAnchor);\n}\nbreak;\ncase CENTER:\n{\nmConstraintHandles.add(mCenterAnchor);\n}\nbreak;\n}\n}\nfor (ConstraintHandle handle : mConstraintHandles) {\nhandle.updateAnchor();\n}\n}\n", "nl": "Add all constraint handles into a single array"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_PAINT_SUCCEED(int objectNameId,int colorItemNameId){\n  return new SM_SYSTEM_MESSAGE(1401436,calculateNameId(objectNameId),new DescriptionId(colorItemNameId));\n}\n", "nl": "You have painted %0 with %1."}
{"code": "void draw(Canvas canvas,Paint textPaint){\n  if (drawText(canvas,textPaint,characterList,bottomCharIndex,bottomDelta)) {\n    if (bottomCharIndex >= 0) {\n      currentChar=characterList[bottomCharIndex];\n    }\n else     if (bottomCharIndex == UNKNOWN_END_INDEX) {\n      currentChar=targetChar;\n    }\n    currentBottomDelta=bottomDelta;\n  }\n  drawText(canvas,textPaint,characterList,bottomCharIndex + 1,bottomDelta - charHeight);\n  drawText(canvas,textPaint,characterList,bottomCharIndex - 1,bottomDelta + charHeight);\n}\n", "nl": "Draw the current state of the column as it's animating from one character in the list to another. This method will take into account various factors such as animation progress and the previously interrupted animation state to render the characters in the correct position on the canvas."}
{"code": "public static String translateJavaVersion(int javaVersion){\n  if (javaVersion == Options.java_version_default) {\n    return \"1.0\";\n  }\n else {\n    return \"1.\" + (javaVersion - 1);\n  }\n}\n", "nl": "Translate internal numbering of java versions to real version  for debug messages."}
{"code": "public Created(Object impl,Object proxy){\n  this.proxy=proxy;\n  this.impl=impl;\n}\n", "nl": "Constructs an instance of this class."}
{"code": "public boolean hasAdditionalText(){\n  return mAdditionalText != null;\n}\n", "nl": "Returns true if the line contains an \"additional text\" field."}
{"code": "public static byte[] bitmapToByte(Bitmap b){\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array"}
{"code": "protected void loader() throws IOException {\n  setupFeatureSet();\n  setupUtteranceProcessors();\n  setupFeatureProcessors();\n}\n", "nl": "Called by <code> Voice </code>  during loading, derived voices should override this to provide customized loading."}
{"code": "public int model(){\n  return theType.model();\n}\n", "nl": "Return the content model vector of the element's type. Convenience method."}
{"code": "public void delete(){\n  if (tx.isReadOnly() && !isTempTable())   throw new UnsupportedOperationException();\n  if (fhp == null)   fhp=openHeaderForModification();\n  RecordId deletedRid=currentRecordId();\n  tx.recoveryMgr().logLogicalStart();\n  rp.delete(fhp.getLastDeletedSlot());\n  fhp.setLastDeletedSlot(currentRecordId());\n  tx.recoveryMgr().logRecordFileDeletionEnd(ti.tableName(),deletedRid.block().number(),deletedRid.id());\n  closeHeader();\n}\n", "nl": "Deletes the current record. The client must call next() to move to the next record. Calls to methods on a deleted record have unspecified behavior."}
{"code": "public void evalute(Element element){\nswitch (code) {\ncase PAGE_INSTRUCTION:\n    element.putAttribute(PageAttribute.KEY,PageAttribute.create(arg));\n  break;\ncase SUPPRESS_WARNING_INSTRUCTION:\nelement.getModel().addSupressionDirective(element,arg);\nbreak;\ncase RESOURCE_INSTRUCTION:\nif (!(element instanceof MessageType)) {\nelement.getModel().getDiagCollector().addDiag(Diag.error(element.getLocation(),\"resource instruction must be associated with a message declaration, but '%s' \" + \"is not a message.\",element.getFullName()));\n}\n else {\nelement.addAttribute(ResourceAttribute.KEY,ResourceAttribute.create(arg));\n}\nbreak;\ncase DEPRECATION_DESCRIPTION:\nelement.putAttribute(DeprecationDescriptionAttribute.KEY,DeprecationDescriptionAttribute.create(arg));\nbreak;\ndefault :\nelement.getModel().getDiagCollector().addDiag(Diag.error(element.getLocation(),\"documentation instruction '%s' unknown.\",code));\n}\n}\n", "nl": "Evaluate the instruction in context of given element."}
{"code": "@Override public void startDocument() throws SAXException {\n  super.startDocument();\n}\n", "nl": "start the document"}
{"code": "public static Map<String,Object> createTelecomNumber(DispatchContext ctx,Map<String,? extends Object> context){\n  Map<String,Object> result=FastMap.newInstance();\n  Delegator delegator=ctx.getDelegator();\n  Security security=ctx.getSecurity();\n  GenericValue userLogin=(GenericValue)context.get(\"userLogin\");\n  Locale locale=(Locale)context.get(\"locale\");\n  Timestamp now=UtilDateTime.nowTimestamp();\n  List<GenericValue> toBeStored=FastList.newInstance();\n  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,\"PARTYMGR\",\"_PCM_CREATE\");\n  if (result.size() > 0)   return result;\n  String contactMechTypeId=\"TELECOM_NUMBER\";\n  String newCmId=null;\n  try {\n    newCmId=delegator.getNextSeqId(\"ContactMech\");\n  }\n catch (  IllegalArgumentException e) {\n    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"contactmechservices.could_not_create_contact_info_id_generation_failure\",locale));\n  }\n  GenericValue tempContactMech=delegator.makeValue(\"ContactMech\",UtilMisc.toMap(\"contactMechId\",newCmId,\"contactMechTypeId\",contactMechTypeId));\n  toBeStored.add(tempContactMech);\n  toBeStored.add(delegator.makeValue(\"PartyContactMech\",UtilMisc.toMap(\"partyId\",partyId,\"contactMechId\",newCmId,\"fromDate\",now,\"roleTypeId\",context.get(\"roleTypeId\"),\"allowSolicitation\",context.get(\"allowSolicitation\"),\"extension\",context.get(\"extension\"))));\n  toBeStored.add(delegator.makeValue(\"TelecomNumber\",UtilMisc.toMap(\"contactMechId\",newCmId,\"countryCode\",context.get(\"countryCode\"),\"areaCode\",context.get(\"areaCode\"),\"contactNumber\",context.get(\"contactNumber\"))));\n  try {\n    delegator.storeAll(toBeStored);\n  }\n catch (  GenericEntityException e) {\n    Debug.logWarning(e.toString(),module);\n    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"contactmechservices.could_not_create_contact_info_write\",UtilMisc.toMap(\"errMessage\",e.getMessage()),locale));\n  }\n  result.put(\"contactMechId\",newCmId);\n  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);\n  return result;\n}\n", "nl": "Creates a TelecomNumber <b>security check</b>: userLogin partyId must equal partyId, or must have PARTYMGR_CREATE permission"}
{"code": "public void add(FieldIdEnum fieldId,FieldConfigBase fieldConfig){\n  Map<FieldIdEnum,FieldConfigBase> panelMap=fieldConfigMap.get(panelId);\n  if (panelMap == null) {\n    panelMap=new HashMap<FieldIdEnum,FieldConfigBase>();\n  }\n  panelMap.put(fieldId,fieldConfig);\n}\n", "nl": "Adds the field data manager to the internal structure."}
{"code": "@Override protected void initComparator(){\n  if (Comparator == null)   Comparator=new NGramCachedNonSymmGraphComparator();\n}\n", "nl": "Makes sure the comparator is not null."}
{"code": "public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {\n    int tempSpec=widthMeasureSpec;\n    widthMeasureSpec=heightMeasureSpec;\n    heightMeasureSpec=tempSpec;\n  }\n  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);\n  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);\n  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {\n    width=widthMeasureSpec;\n    height=heightMeasureSpec;\n  }\n else   if (mVideoWidth > 0 && mVideoHeight > 0) {\n    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);\n    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);\n    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);\n    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);\n    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {\n      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;\n      float displayAspectRatio;\nswitch (mCurrentAspectRatio) {\ncase IRenderView.AR_16_9_FIT_PARENT:\n        displayAspectRatio=16.0f / 9.0f;\n      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;\n    break;\ncase IRenderView.AR_4_3_FIT_PARENT:\n  displayAspectRatio=4.0f / 3.0f;\nif (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;\nbreak;\ncase IRenderView.AR_ASPECT_FIT_PARENT:\ncase IRenderView.AR_ASPECT_FILL_PARENT:\ncase IRenderView.AR_ASPECT_WRAP_CONTENT:\ndefault :\ndisplayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;\nif (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;\nbreak;\n}\nboolean shouldBeWider=displayAspectRatio > specAspectRatio;\nswitch (mCurrentAspectRatio) {\ncase IRenderView.AR_ASPECT_FIT_PARENT:\ncase IRenderView.AR_16_9_FIT_PARENT:\ncase IRenderView.AR_4_3_FIT_PARENT:\nif (shouldBeWider) {\nwidth=widthSpecSize;\nheight=(int)(width / displayAspectRatio);\n}\n else {\nheight=heightSpecSize;\nwidth=(int)(height * displayAspectRatio);\n}\nbreak;\ncase IRenderView.AR_ASPECT_FILL_PARENT:\nif (shouldBeWider) {\nheight=heightSpecSize;\nwidth=(int)(height * displayAspectRatio);\n}\n else {\nwidth=widthSpecSize;\nheight=(int)(width / displayAspectRatio);\n}\nbreak;\ncase IRenderView.AR_ASPECT_WRAP_CONTENT:\ndefault :\nif (shouldBeWider) {\nwidth=Math.min(mVideoWidth,widthSpecSize);\nheight=(int)(width / displayAspectRatio);\n}\n else {\nheight=Math.min(mVideoHeight,heightSpecSize);\nwidth=(int)(height * displayAspectRatio);\n}\nbreak;\n}\n}\n else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {\nwidth=widthSpecSize;\nheight=heightSpecSize;\nif (mVideoWidth * height < width * mVideoHeight) {\nwidth=height * mVideoWidth / mVideoHeight;\n}\n else if (mVideoWidth * height > width * mVideoHeight) {\nheight=width * mVideoHeight / mVideoWidth;\n}\n}\n else if (widthSpecMode == View.MeasureSpec.EXACTLY) {\nwidth=widthSpecSize;\nheight=width * mVideoHeight / mVideoWidth;\nif (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {\nheight=heightSpecSize;\n}\n}\n else if (heightSpecMode == View.MeasureSpec.EXACTLY) {\nheight=heightSpecSize;\nwidth=height * mVideoWidth / mVideoHeight;\nif (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {\nwidth=widthSpecSize;\n}\n}\n else {\nwidth=mVideoWidth;\nheight=mVideoHeight;\nif (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {\nheight=heightSpecSize;\nwidth=height * mVideoWidth / mVideoHeight;\n}\nif (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {\nwidth=widthSpecSize;\nheight=width * mVideoHeight / mVideoWidth;\n}\n}\n}\n else {\n}\nmMeasuredWidth=width;\nmMeasuredHeight=height;\n}\n", "nl": "Must be called by View.onMeasure(int, int)"}
{"code": "public static boolean isLifecycleClass(String className){\n  return className.equals(ACTIVITYCLASS) || className.equals(SERVICECLASS) || className.equals(BROADCASTRECEIVERCLASS)|| className.equals(CONTENTPROVIDERCLASS)|| className.equals(APPLICATIONCLASS);\n}\n", "nl": "Gets whether the given class if one of Android's default lifecycle classes (android.app.Activity etc.)"}
{"code": "static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){\n  double wr=(double)actualWidth / desiredWidth;\n  double hr=(double)actualHeight / desiredHeight;\n  double ratio=Math.min(wr,hr);\n  float n=1.0f;\n  while ((n * 2) <= ratio) {\n    n*=2;\n  }\n  return (int)n;\n}\n", "nl": "Returns the largest power-of-two divisor for use in downscaling a bitmap that will not result in the scaling past the desired dimensions."}
{"code": "public static KeyStore createRootCertificateKeyStore(String keyStoreType,X509Certificate certificate,String privateKeyAlias,PrivateKey privateKey,String privateKeyPassword,String provider){\n  if (privateKeyPassword == null) {\n    throw new IllegalArgumentException(\"Must specify a KeyStore password\");\n  }\n  KeyStore newKeyStore=KeyStoreUtil.createEmptyKeyStore(keyStoreType,provider);\n  try {\n    newKeyStore.setKeyEntry(privateKeyAlias,privateKey,privateKeyPassword.toCharArray(),new Certificate[]{certificate});\n  }\n catch (  KeyStoreException e) {\n    throw new KeyStoreAccessException(\"Unable to store certificate and private key in KeyStore\",e);\n  }\n  return newKeyStore;\n}\n", "nl": "Creates a new KeyStore containing the specified root certificate and private key."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public AbstractDot fullCopy(){\n  AbstractDot tree=(AbstractDot)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public ResizeImageTransform(int newWidth,int newHeight){\n  this(null,newWidth,newHeight);\n}\n", "nl": "Returns new ResizeImageTransform object"}
{"code": "private void determinePhraseTopBaseConf(Element phrase){\n  Voice voice=null;\n  Element voiceElement=(Element)DomUtils.getAncestor(phrase,MaryXML.VOICE);\n  if (voiceElement != null)   voice=Voice.getVoice(voiceElement);\n  if (voice == null)   voice=defaultVoiceMap.get(phrase.getOwnerDocument());\n  if (voice == null) {\n    voice=Voice.getDefaultVoice(getLocale());\n  }\n  if (!(voice instanceof MbrolaVoice)) {\n    throw new IllegalStateException(\"TobiContourGenerator can be used only for MBROLA voices, but voice \" + voice.getName() + \" is a \"+ voice.getClass().toString());\n  }\n  MbrolaVoice mVoice=(MbrolaVoice)voice;\n  int topStart=mVoice.topStart();\n  int topEnd=mVoice.topEnd();\n  int baseStart=mVoice.baseStart();\n  int baseEnd=mVoice.baseEnd();\n  TopBaseConfiguration tbConf=new TopBaseConfiguration(topStart,topEnd,baseStart,baseEnd);\n  Element current=phrase;\n  Stack<Element> prosodyElements=new Stack<Element>();\n  while (DomUtils.hasAncestor(current,MaryXML.PROSODY)) {\n    current=(Element)DomUtils.getAncestor(current,MaryXML.PROSODY);\n    prosodyElements.push(current);\n    if (voiceElement != null && !DomUtils.isAncestor(voiceElement,current)) {\n      break;\n    }\n  }\n  while (!prosodyElements.empty()) {\n    Element prosody=prosodyElements.pop();\n    tbConf=calculateTopBase(prosody,tbConf);\n  }\n  Element lastSegment=DomUtils.getLastElementByTagName(phrase,MaryXML.PHONE);\n  if (lastSegment != null) {\n    int endTime=getSegmentEndInMillis(lastSegment);\n    if (endTime == -1) {\n      Log.w(Mary.LOG,\"Unexpected end time `\" + lastSegment.getAttribute(\"end\") + \"'\");\n    }\n    tbConf.setTimes(0,endTime);\n  }\n  topBaseConfMap.put(phrase,tbConf);\n}\n", "nl": "Determine the topline and baseline start and end frequencies for a <code>phrase</code>. Create an appropriate TopBaseConfiguration object and save it in a hash, as a value to which the phrase element is the key."}
{"code": "private static boolean clientOverwriteable(SootMethod m){\n  SootClass c=m.getDeclaringClass();\n  if (!c.isFinal() && !m.isFinal() && visible(m)&& clientCanInstantiate(c))   return true;\n  return false;\n}\n", "nl": "Returns true if the given method itself is visible to the client and overwriteable. This is true if neither the method nor its declaring class are final, if the method is visible and if the declaring class can be instantiated."}
{"code": "public static Tuple min(TupleSet tuples,String field){\n  return min(tuples,field,DefaultLiteralComparator.getInstance());\n}\n", "nl": "Get the Tuple with the minimum data field value."}
{"code": "public TraceInfo(TraceInfo other){\n  __isset_bit_vector.clear();\n  __isset_bit_vector.or(other.__isset_bit_vector);\n  if (other.isSetClientAppkey()) {\n    this.clientAppkey=other.clientAppkey;\n  }\n  if (other.isSetTraceId()) {\n    this.traceId=other.traceId;\n  }\n  if (other.isSetSpanId()) {\n    this.spanId=other.spanId;\n  }\n  if (other.isSetRootMessageId()) {\n    this.rootMessageId=other.rootMessageId;\n  }\n  if (other.isSetCurrentMessageId()) {\n    this.currentMessageId=other.currentMessageId;\n  }\n  if (other.isSetServerMessageId()) {\n    this.serverMessageId=other.serverMessageId;\n  }\n  this.debug=other.debug;\n  this.sample=other.sample;\n  if (other.isSetClientIp()) {\n    this.clientIp=other.clientIp;\n  }\n}\n", "nl": "Performs a deep copy on <i>other</i>."}
{"code": "public static <T>void removeAll(List<T> list,List<Integer> indexes){\n  if (list == null || indexes == null) {\n    return;\n  }\n  Collections.sort(indexes,Collections.reverseOrder());\n  final int size=list.size();\n  for (  Integer index : indexes) {\n    if (index >= 0 && index < size) {\n      list.remove((int)index);\n    }\n  }\n}\n", "nl": "Removes from the given list the elements at the given indexes. Ignores indexes which are out of bounds of list."}
{"code": "public int hashCode(){\n  int hash=type;\n  if (loader != null) {\n    hash+=loader.hashCode();\n  }\n  for (int i=contextElements.length; --i >= 0; ) {\n    hash+=contextElements[i].hashCode();\n  }\n  if (principals != null) {\n    for (int i=principals.length; --i >= 0; ) {\n      hash+=principals[i].hashCode();\n    }\n  }\n  for (int i=permissions.length; --i >= 0; ) {\n    hash+=permissions[i].hashCode();\n  }\n  return hash;\n}\n", "nl": "Returns a hash code value for this object."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200352,num0,skillname);\n}\n", "nl": "You reduced your flight time by %num0 by using [%SkillName]."}
{"code": "private static String trimCommentIndentation(String description){\n  if (description.startsWith(\" \")) {\n    description=description.substring(1);\n  }\n  return description.replace(\"\\n \",\"\\n\").replace(\"\\r \",\"\\r\");\n}\n", "nl": "Trim the one space indentation in proto comments which is the convention for writing documentation."}
{"code": "@ApiMethod(path=\"{type}/\",verb=ApiVerb.POST,description=\"Write one or more entries to the space.\",consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value=\"/{type}\",method=RequestMethod.POST,consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> post(@ApiPathParam(name=\"type\",description=TYPE_DESCRIPTION) @PathVariable String type,@RequestBody(required=false) @ApiBodyObject(clazz=ErrorMessage.class) String requestBody) throws TypeNotFoundException {\n  if (logger.isLoggable(Level.FINE))   logger.fine(\"performing post, type: \" + type);\n  if (requestBody == null) {\n    throw new RestException(\"Request body cannot be empty\");\n  }\n  GigaSpace gigaSpace=ControllerUtils.xapCache.get();\n  createAndWriteDocuments(gigaSpace,type,requestBody,WriteModifiers.UPDATE_OR_WRITE);\n  Map<String,Object> result=new HashMap<String,Object>();\n  result.put(\"status\",\"success\");\n  return result;\n}\n", "nl": "REST POST request handler"}
{"code": "public static Map<String,Object> updateBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){\n  Map<String,Object> result=null;\n  try {\n    result=updateBinaryFileMethod(dctx,context);\n  }\n catch (  GenericServiceException e) {\n    return ServiceUtil.returnError(e.getMessage());\n  }\n  return result;\n}\n", "nl": "A service wrapper for the createBinaryFileMethod method. Forces permissions to be checked."}
{"code": "public TrustManagerBuilder add(TrustManager... mgrs){\n  for (  TrustManager tm : mgrs) {\n    if (tm instanceof X509TrustManager) {\n      mgr.add((X509TrustManager)tm);\n    }\n  }\n  return (this);\n}\n", "nl": "Use this to add arbitrary TrustManagers to the mix. Only the X509TrustManager instances in the array will be used. This is also used, under the covers, by most of the other builder methods, to add configured trust managers."}
{"code": "public boolean isTransparent(){\n  return transparent;\n}\n", "nl": "Checks if flag is transparent."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PAY_GIVEUP_OTHER(String value0){\n  return new SM_SYSTEM_MESSAGE(1390229,value0);\n}\n", "nl": "%0 gave up the Bidding."}
{"code": "static void testValidity(Object o) throws JSONException {\n  if (o != null) {\n    if (o instanceof Double) {\n      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {\n        throw new JSONException(\"JSON does not allow non-finite numbers.\");\n      }\n    }\n else     if (o instanceof Float) {\n      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {\n        throw new JSONException(\"JSON does not allow non-finite numbers.\");\n      }\n    }\n  }\n}\n", "nl": "Throw an exception if the object is an NaN or infinite number."}
{"code": "public void readJasmin(InputStream input,String name,boolean numberLines) throws IOException, Exception {\n  errors=0;\n  filename=name;\n  source_name=name;\n  auto_number=numberLines;\n  class_env=new ClassEnv();\n  scanner=new Scanner(input);\n  parser parse_obj=new parser(this,scanner);\n  if (false) {\n  }\n else {\n    parse_obj.parse();\n  }\n}\n", "nl": "Parses a Jasmin file, converting it internally into a binary representation. If something goes wrong, this throws one of an IOException, or a jasError, or one of a few other exceptions. I'll tie this down more formally in the next version."}
{"code": "public MaryData process(MaryData d,List<Target> targetFeaturesList,List<Element> segmentsAndBoundaries,List<Element> tokensAndBoundaries) throws Exception {\n  Voice v=d.getDefaultVoice();\n  assert v instanceof HMMVoice;\n  HMMVoice hmmv=(HMMVoice)v;\n  HTSUttModel um=processTargetList(targetFeaturesList,segmentsAndBoundaries,hmmv.getHMMData());\n  HTSParameterGeneration pdf2par=new HTSParameterGeneration();\n  pdf2par.htsMaximumLikelihoodParameterGeneration(um,hmmv.getHMMData());\n  HTSVocoder par2speech=new HTSVocoder();\n  AudioInputStream ais=par2speech.htsMLSAVocoder(pdf2par,hmmv.getHMMData());\n  MaryData output=new MaryData(outputType(),d.getLocale());\n  if (d.getAudioFileFormat() != null) {\n    output.setAudioFileFormat(d.getAudioFileFormat());\n    if (d.getAudio() != null) {\n      assert d.getAudio() instanceof AppendableSequenceAudioInputStream;\n      output.setAudio(d.getAudio());\n    }\n  }\n  output.appendAudio(ais);\n  if (tokensAndBoundaries != null)   setRealisedProsody(tokensAndBoundaries,um);\n  return output;\n}\n", "nl": "This functions process directly the target features list: targetFeaturesList when using external prosody, duration and f0 are read from acoustparams: segmentsAndBoundaries realised durations and f0 are set in: tokensAndBoundaries when calling this function HMMVoice must be initialised already, that is TreeSet and ModelSet must be loaded already."}
{"code": "@deprecated public String toString(int start,int limit){\n  StringBuilder result=new StringBuilder();\n  for (int i=start; i < limit; i++) {\n    Object item=this.items.get(i);\n    if ((item instanceof String)) {\n      String itemString=(String)item;\n      result.append(this.tokenizer.quoteLiteral(itemString));\n    }\n else {\n      result.append(this.items.get(i).toString());\n    }\n  }\n  return result.toString();\n}\n", "nl": "/*     "}
{"code": "@Nullable private String findLabel(TransformWork work,String label){\n  String val=work.getLabel(label);\n  if (val != null) {\n    return val;\n  }\n  for (  Change<?> change : work.getChanges().getCurrent()) {\n    val=change.getLabels().get(label);\n    if (val != null) {\n      return val;\n    }\n  }\n  return null;\n}\n", "nl": "Tries to find a label. First it looks at the generated message (IOW labels that might have been added by previous steps) and then looks in all the commit messages being imported."}
{"code": "private static short rangeCheck(short value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return value;\n}\n", "nl": "Throw exception if value out of range (short version)"}
{"code": "public static InputStream openResourceFileAsStream(String resourceFileName){\n  if (resourceFileName.equals(\"jtok/enen_b-abbrev.txt\"))   resourceFileName=\"jtok/en/en_b-abbrev.txt\";\n  InputStream is=null;\n  try {\n    is=MaryLink.getContext().getAssets().open(resourceFileName);\n    if (null == is) {\n      is=MaryLink.getContext().getAssets().open(\"/\" + resourceFileName);\n      if (null == is) {\n        is=MaryLink.getContext().getAssets().open(resourceFileName);\n        if (null == is) {\n          is=new FileInputStream(resourceFileName);\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    Log.d(Mary.LOG,\"openResourceFileAsStream, CANN'T open file=\" + resourceFileName);\n  }\n  return is;\n}\n", "nl": "Returns an input stream for the given resource file."}
{"code": "private void updateAssociatedTableWithFK(DataSupport baseObj){\n  Map<String,Set<Long>> associatedModelMap=baseObj.getAssociatedModelsMapWithFK();\n  ContentValues values=new ContentValues();\n  for (  String associatedTableName : associatedModelMap.keySet()) {\n    values.clear();\n    String fkName=getForeignKeyColumnName(baseObj.getTableName());\n    values.put(fkName,baseObj.getBaseObjId());\n    Set<Long> ids=associatedModelMap.get(associatedTableName);\n    if (ids != null && !ids.isEmpty()) {\n      mDatabase.update(associatedTableName,values,getWhereOfIdsWithOr(ids),null);\n    }\n  }\n}\n", "nl": "Update the foreign keys in the associated model's table."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200841,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] recovered %num0 MP by using [%SkillName]."}
{"code": "public static int[] sortValues(Matrix m){\n  double[] v=new double[m.getColumnDimension()];\n  int[] index=new int[v.length];\n  for (int i=0; i < v.length; i++) {\n    v[i]=m.get(i,i);\n    index[i]=i;\n  }\n  for (int i=0; i < v.length; i++) {\n    for (int j=i + 1; j < v.length; j++) {\n      if (Math.abs(v[i]) < Math.abs(v[j])) {\n        double tmpValue=v[j];\n        v[j]=v[i];\n        v[i]=tmpValue;\n        int tmpIndex=index[j];\n        index[j]=index[i];\n        index[i]=tmpIndex;\n      }\n    }\n  }\n  return index;\n}\n", "nl": "sort indices by values"}
{"code": "public static double oneTailedFishersExact(int k,int n,int r,int m){\n  if (k < 0 || k < (m + r) - n || k > r || k > m || r > n || m > n) {\n    throw new IllegalArgumentException(\"Invalid Fisher's exact: \" + \"k=\" + k + \" n=\"+ n+ \" r=\"+ r+ \" m=\"+ m+ \" k<0=\"+ (k < 0)+ \" k<(m+r)-n=\"+ (k < (m + r) - n)+ \" k>r=\"+ (k > r)+ \" k>m=\"+ (k > m)+ \" r>n=\"+ (r > n)+ \"m>n=\"+ (m > n));\n  }\n  if (m > n / 2) {\n    m=n - m;\n    k=r - k;\n  }\n  if (r > n / 2) {\n    r=n - r;\n    k=m - k;\n  }\n  if (m > r) {\n    int temp=m;\n    m=r;\n    r=temp;\n  }\n  double total=0.0;\n  if (k > m / 2) {\n    for (int k0=k; k0 <= m; k0++) {\n      total+=SloppyMath.hypergeometric(k0,n,r,m);\n    }\n  }\n else {\n    int min=Math.max(0,(m + r) - n);\n    for (int k0=min; k0 < k; k0++) {\n      total+=SloppyMath.hypergeometric(k0,n,r,m);\n    }\n    total=1.0 - total;\n  }\n  return total;\n}\n", "nl": "Find a one-tailed Fisher's exact probability. Chance of having seen this or a more extreme departure from what you would have expected given independence. I.e., k >= the value passed in. Warning: this was done just for collocations, where you are concerned with the case of k being larger than predicted. It doesn't correctly handle other cases, such as k being smaller than expected."}
{"code": "public StreamSource(File f){\n  setSystemId(f.toURI().toASCIIString());\n}\n", "nl": "Construct a StreamSource from a File."}
{"code": "public static File[] convertFileCollectionToFileArray(Collection<File> files){\n  return files.toArray(new File[files.size()]);\n}\n", "nl": "Converts a Collection containing java.io.File instanced into array representation. This is to account for the difference between File.listFiles() and FileUtils.listFiles()."}
{"code": "private int updateMouseCursor(ResizeHandle handle){\n  if (handle == null) {\n    return Cursor.DEFAULT_CURSOR;\n  }\nswitch (handle.getType()) {\ncase LEFT_BOTTOM:\n{\n      return Cursor.SW_RESIZE_CURSOR;\n    }\ncase LEFT_TOP:\n{\n    return Cursor.NW_RESIZE_CURSOR;\n  }\ncase RIGHT_BOTTOM:\n{\n  return Cursor.SE_RESIZE_CURSOR;\n}\ncase RIGHT_TOP:\n{\nreturn Cursor.NE_RESIZE_CURSOR;\n}\ncase LEFT_SIDE:\n{\nreturn Cursor.W_RESIZE_CURSOR;\n}\ncase RIGHT_SIDE:\n{\nreturn Cursor.E_RESIZE_CURSOR;\n}\ncase TOP_SIDE:\n{\nreturn Cursor.N_RESIZE_CURSOR;\n}\ncase BOTTOM_SIDE:\n{\nreturn Cursor.S_RESIZE_CURSOR;\n}\n}\nreturn Cursor.DEFAULT_CURSOR;\n}\n", "nl": "Return the mouse cursor type given the current handle we hit"}
{"code": "public int findIndexOfValue(String value){\n  if (value != null && mEntryValues != null) {\n    for (int i=mEntryValues.length - 1; i >= 0; i--) {\n      if (mEntryValues[i].equals(value)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n", "nl": "Returns the index of the given value (in the entry values array)."}
{"code": "private void addReportingRates(DataQueryParams params,Grid grid){\n  if (!params.getReportingRates().isEmpty() && !params.isSkipData()) {\n    for (    ReportingRateMetric metric : ReportingRateMetric.values()) {\n      DataQueryParams dataSourceParams=DataQueryParams.newBuilder(params).retainDataDimensionReportingRates(metric).withIncludeNumDen(false).ignoreDataApproval().withAggregationType(AggregationType.COUNT).withTimely((REPORTING_RATE_ON_TIME == metric || ACTUAL_REPORTS_ON_TIME == metric)).build();\n      addReportingRates(dataSourceParams,grid,metric,params.isIncludeNumDen());\n    }\n  }\n}\n", "nl": "Adds reporting rates to the given grid based on the given data query parameters."}
{"code": "public static String toPEMformat(X509Certificate[] certificateChain){\n  StringWriter sw=new StringWriter();\n  for (  X509Certificate certificate : certificateChain) {\n    sw.append(toPEMformat(certificate));\n  }\n  return sw.toString();\n}\n", "nl": "Serialize Certificate chain in PEM format"}
{"code": "public static StyledLayerDescriptor createSLDFromString(SLDDataInterface sldData){\n  if ((sldData == null) || (sldData.getSld() == null)) {\n    return null;\n  }\n  StyleFactory styleFactory=CommonFactoryFinder.getStyleFactory();\n  InputStream stream=new ByteArrayInputStream(sldData.getSld().getBytes());\n  SLDParser styleReader=new SLDParser(styleFactory,stream);\n  URL resourceLocator=getResourceLocator(sldData);\n  sldData.setResourceLocator(resourceLocator);\n  setResourcelocator(styleReader,resourceLocator);\n  StyledLayerDescriptor sld=null;\n  try {\n    sld=styleReader.parseSLD();\n  }\n catch (  RuntimeException e) {\n    ConsoleManager.getInstance().error(SLDUtils.class,e.getMessage());\n  }\n  return sld;\n}\n", "nl": "Creates a StyledLayerDescriptor object containing a SLD from a string."}
{"code": "public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {\n  checkIndices(start,end);\n  visitor.start(getDimension(),start,end);\n  for (int i=start; i <= end; i++) {\n    setEntry(i,visitor.visit(i,getEntry(i)));\n  }\n  return visitor.end();\n}\n", "nl": "Visits (and possibly alters) some entries of this vector in default order (increasing index)."}
{"code": "protected void searchUpdate(){\n  String query=m_queryF.getText();\nsynchronized (m_lock) {\n    m_searcher.search(query);\n    if (m_searcher.getQuery().length() == 0)     m_resultL.setText(null);\n else {\n      int r=m_searcher.getTupleCount();\n      m_resultL.setText(r + \" match\" + (r == 1 ? \"\" : \"es\"));\n    }\n  }\n}\n", "nl": "Update the search results based on the current query."}
{"code": "protected void okButtonPressed(){\n  String selectedItem=(String)comboBoxNewSLD.getSelectedItem();\n  if (selectedItem != null) {\n    if (newSLDObjectMap != null) {\n      selected=newSLDObjectMap.get(selectedItem);\n    }\n  }\n  setVisible(false);\n}\n", "nl": "Ok button pressed."}
{"code": "private void putEntry(String key,CacheHeader entry){\n  if (!mEntries.containsKey(key)) {\n    mTotalSize+=entry.size;\n  }\n else {\n    CacheHeader oldEntry=mEntries.get(key);\n    mTotalSize+=(entry.size - oldEntry.size);\n  }\n  mEntries.put(key,entry);\n}\n", "nl": "Puts the entry with the specified key into the cache."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200989,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] was put in the magical counterattack state because [%SkillCaster] used [%SkillName]."}
{"code": "public LineUnavailableException(){\n  super();\n}\n", "nl": "Constructs a <code>LineUnavailableException</code> that has <code>null</code> as its error detail message."}
{"code": "public PercentageCellRenderer(){\n  super();\n  withRatingColors(0,1);\n}\n", "nl": "Creates an instance of the PercentageCellRenderer, with rating colors between 0 and 1."}
{"code": "public int read() throws IOException {\n  if (totalRead >= totalExpected) {\n    return -1;\n  }\n  int result=in.read();\n  if (result != -1) {\n    totalRead++;\n  }\n  return result;\n}\n", "nl": "Implement length limitation on top of the <code>read</code> method of the wrapped <code>ServletInputStream</code>."}
{"code": "public FriendsGetAvailableForCallQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname."}
{"code": "public static String gmlPosToString(String pos,String precision) throws ParseException {\n  int nDecimals=Integer.parseInt(precision);\n  String[] c=pos.trim().split(\"\\\\s\",2);\n  if (c.length != 2) {\n    return \"\";\n  }\n  String lat=parseCoordinate(c[0],nDecimals,NF), lon=parseCoordinate(c[1],nDecimals,NF);\n  return \"[\" + lat + \",\"+ lon+ \"]\";\n}\n", "nl": "Parses a gml:pos element and outputs a GeoJSON string."}
{"code": "public XMLInputSource(String publicId,String systemId,String baseSystemId){\n  fPublicId=publicId;\n  fSystemId=systemId;\n  fBaseSystemId=baseSystemId;\n}\n", "nl": "Constructs an input source from just the public and system identifiers, leaving resolution of the entity and opening of the input stream up to the caller."}
{"code": "public static boolean hasEquipmentValueDeadbandChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){\n  return sourceDataTag.getValueDeadbandType() == DataTagDeadband.DEADBAND_EQUIPMENT_ABSOLUTE || sourceDataTag.getValueDeadbandType() == DataTagDeadband.DEADBAND_EQUIPMENT_RELATIVE && sourceDataTag.getValueDeadband() != oldSourceDataTag.getValueDeadband();\n}\n", "nl": "Checks if the deadband type is an equipment deadband and if it  the deadband value changed."}
{"code": "private static String toPunycode(String ruleText){\n  try {\n    if (UrlUtils.isASCII(ruleText)) {\n      return ruleText;\n    }\n    String[] startsWith=new String[]{\"http://www.\",\"https://www.\",\"http://\",\"https://\",\"||\"};\n    String[] contains=new String[]{\"/\",\"^\"};\n    int startIndex=-1;\n    for (    String start : startsWith) {\n      if (ruleText.startsWith(start)) {\n        startIndex=start.length();\n        break;\n      }\n    }\n    if (startIndex == -1) {\n      return ruleText;\n    }\n    int symbolIndex=-1;\n    for (    String contain : contains) {\n      int index=ruleText.indexOf(contain,startIndex);\n      if (index >= 0) {\n        symbolIndex=index;\n        break;\n      }\n    }\n    String domain=symbolIndex == -1 ? ruleText.substring(startIndex) : ruleText.substring(startIndex,symbolIndex);\n    ruleText=StringUtils.replace(ruleText,domain,UrlUtils.toPunycode(domain));\n    return ruleText;\n  }\n catch (  Exception ex) {\n    LoggerFactory.getLogger(UrlFilterRule.class).warn(\"Error while getting ascii domain for rule \" + ruleText,ex);\n    return StringUtils.EMPTY;\n  }\n}\n", "nl": "Searches for domain name in rule text and transforms it to punycode if needed."}
{"code": "public DateSelectionDialog(Shell parent,String dateString){\n  super(parent);\n  this.setShellStyle(SWT.CLOSE);\n  this.date=parseDate(dateString);\n}\n", "nl": "Constructs a new dialog for selecting a date"}
{"code": "private void ensureTupleArray(int row){\n  int nrows=Math.max(m_table.getRowCount(),row + 1);\n  if (m_tuples == null) {\n    m_tuples=new TableTuple[nrows];\n  }\n else   if (m_tuples.length < nrows) {\n    int capacity=Math.max((3 * m_tuples.length) / 2 + 1,nrows);\n    TableTuple[] tuples=new TableTuple[capacity];\n    System.arraycopy(m_tuples,0,tuples,0,m_tuples.length);\n    m_tuples=tuples;\n  }\n}\n", "nl": "Ensure the tuple array exists."}
{"code": "public static String truncateBeforeSecondOccurrence(String text,String word){\n  int pos=text.indexOf(word);\n  if (pos == -1)   return text;\n  pos=text.indexOf(word,pos + 1);\n  if (pos == -1)   return text;\n else   return text.substring(0,pos);\n}\n", "nl": "removes all of string from the second occurrence of the given word onward"}
{"code": "private static String readFile(File file,Charset encoding) throws IOException {\n  byte[] encoded=Files.readAllBytes(Paths.get(file.getAbsolutePath()));\n  return new String(encoded,encoding);\n}\n", "nl": "Read file."}
{"code": "public int hashCode(){\n  return (ClientMinPrincipal.class.hashCode() + Constraint.hash(principals));\n}\n", "nl": "Returns a hash code value for this object."}
{"code": "public static QueryParser create(QueryBuilder queryBuilder){\n  return new QueryParser(queryBuilder);\n}\n", "nl": "Create a query parser with the specified graph"}
{"code": "public static void main(String[] args){\n  String ss=\"{a:'a',b:1}\";\n  JSON j=JSON.fromObject(ss);\n  System.out.println(j);\n  ss=\"{a:'a',b:1, c:{a:1, b:'a'}}\";\n  j=JSON.fromObject(ss);\n  System.out.println(j);\n  System.out.println(j.get(\"b\").getClass());\n  ss=\"[{a:'a',b:1}]\";\n  List<JSON> l1=JSON.fromObjects(ss);\n  System.out.println(l1);\n  System.out.println(l1.get(0).get(\"b\").getClass());\n}\n", "nl": "The main method."}
{"code": "public PlacesGetCheckinsQuery timestamp(Integer value){\n  return unsafeParam(\"timestamp\",value);\n}\n", "nl": "Specifies that only those check-ins created after the specified timestamp will be returned."}
{"code": "public void testOneSampleUniformUniform(){\n  final KolmogorovSmirnovTest test=new KolmogorovSmirnovTest();\n  final UniformRealDistribution unif=new UniformRealDistribution(-0.5,0.5);\n  Assert.assertEquals(8.881784197001252E-16,test.kolmogorovSmirnovTest(unif,uniform,false),TOLERANCE);\n  Assert.assertTrue(test.kolmogorovSmirnovTest(unif,uniform,0.05));\n  Assert.assertEquals(0.5400666982352942,test.kolmogorovSmirnovStatistic(unif,uniform),TOLERANCE);\n}\n", "nl": "Uniform distribution, uniform data"}
{"code": "public boolean contains(T obj){\n  throw new RuntimeException(\"RwlSegmentedStoredList::contains not supported\");\n}\n", "nl": "is this object contained in the SL ?"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public AssignSimpleExpr fullCopy(){\n  AssignSimpleExpr tree=(AssignSimpleExpr)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "protected LocationSettings(Context context){\n  mContext=context;\n}\n", "nl": "Don't use this; use getInstance() instead. This should be used only by the Application inside of createLocationSettings()."}
{"code": "@NotNull public AddFaceToFaceListAction addFaceToFaceList(@NotNull String faceListId,@Nullable String userData,@Nullable String targetFace,@NotNull InputStream image){\n  Validation.validate(faceListId,\"^[a-z0-9_-]{1,64}$\",new ParameterValidationException(\"faceListId\",\"Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.\"));\n  Validation.validate(Utils.blankIfNull(userData),1,new ParameterValidationException(\"userData\",\"The size limit is 1KB\"));\n  return new AddFaceToFaceListAction(cognitiveContext,faceListId,userData,targetFace,image);\n}\n", "nl": "Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns an persistedFaceId representing the added face, and persistedFaceId will not expire. <p> The persistedFaceId will be used in output JSON of Face - Find Similar, or in Face List - Delete a Face from a Face List to remove face from a face list. JPEG, PNG, GIF(the first frame), and BMP are supported. The image file size should be no larger than 4MB. The detectable face size is between 36x36 to 4096x4096 pixels. The faces out of this range will not be detected. Rectangle specified by targetFace should contain exactly one face. Zero or multiple faces will be regarded as an error. Out of detectable face size, large head-pose, or very large occlusions will also result in fail to add a person face. The given rectangle specifies both face location and face size at the same time. There is no guarantee of corrent result if you are using rectangle which are not returned from Face - Detect. Face list is a group of faces, and these faces will not expire. Face list is used as a parameter of source faces in Face - Find Similar. Face List is useful when to find similar faces in a fixed face set very often, e.g. to find a similar face in a face list of celebrities, friends, or family members. <p> A face list can have a maximum of 1000 faces."}
{"code": "public ShortListImpl(short[] array,int length){\n  fArray=array;\n  fLength=length;\n}\n", "nl": "Construct an XSObjectList implementation"}
{"code": "public void fileSaved(){\n  reset();\n}\n", "nl": "File saved."}
{"code": "public Lexicon removeLowCoverageWords(double coverage){\n  int minDf=(int)(numDocs * coverage);\n  return removeLowDfWords(minDf);\n}\n", "nl": "Remove words cover less than certain proportion of the whole corpus."}
{"code": "public FieldConfigGeometry(FieldConfigCommonData commonData,String buttonText){\n  super(commonData);\n  this.buttonText=buttonText;\n}\n", "nl": "Instantiates a new field config string."}
{"code": "public void drawLine(PointF p1,PointF p2,Canvas canvas,Paint paint){\n  canvas.save();\n  canvas.drawLine(p1.x,p1.y,p2.x,p2.y,paint);\n  canvas.restore();\n}\n", "nl": "Draw a straight line through the points"}
{"code": "@Override public Filter createFilter(List<Expression> parameterList){\n  IsGreaterThanOrEqualToImpl filter=null;\n  if ((parameterList == null) || (parameterList.size() != 3)) {\n    filter=new IsGreaterThanOrEqualToExtended();\n  }\n else {\n    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(2);\n    filter=new IsGreaterThanOrEqualToExtended(parameterList.get(0),parameterList.get(1),(Boolean)matchCase.getValue());\n  }\n  return filter;\n}\n", "nl": "Creates the filter."}
{"code": "public String toString(){\n  return \"PartOfSpeechTagger\";\n}\n", "nl": "Returns the string representation of the object"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "public static double[][] diag(double[] values){\n  final int dim=values.length;\n  final double[][] matrix=new double[dim][dim];\n  for (int i=0; i < dim; i++) {\n    matrix[i][i]=values[i];\n  }\n  return matrix;\n}\n", "nl": "creates a  matrix with a and b on the diagonal and all other entries are zero"}
{"code": "protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int WordNGramSize_Min,int WordNGramSize_Max,int Word_Dmax,int CharacterNGramSize_Min,int CharacterNGramSize_Max,int Character_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,String sSummaryDir,String sModelDir,int iThreads,boolean bSilent,boolean bProgress) throws Exception {\n  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;\n  ThreadList tqRobin=new ThreadList(iThreads);\n  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);\n  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);\n  dsSummarySet.createSets();\n  dsModelSet.createSets();\n  HashMap hmCategoryResults=new HashMap();\n  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {\n    System.err.println(\"Empty document set...\");\n    throw new Exception(\"Empty document set...\");\n  }\n  pOverallResultsOutStream.print(\"Theme\\t\");\n  pOverallResultsOutStream.print(\"SystemID\\t\");\n  if (bDoWordNGrams) {\n    pOverallResultsOutStream.print(\"GraphCooccurence\\t\");\n    pOverallResultsOutStream.print(\"GraphValue\\t\");\n    pOverallResultsOutStream.print(\"GraphSize\\t\");\n    pOverallResultsOutStream.print(\"HistoContainmentSimilarity\\t\");\n    pOverallResultsOutStream.print(\"HistoValue\\t\");\n    pOverallResultsOutStream.print(\"HistoSize\\t\");\n    pOverallResultsOutStream.print(\"OverallSimil\\t\");\n  }\n  if (bDoCharNGrams) {\n    pOverallResultsOutStream.print(\"CharGraphCooccurence\\t\");\n    pOverallResultsOutStream.print(\"CharGraphValue\\t\");\n    pOverallResultsOutStream.print(\"CharGraphSize\\t\");\n    pOverallResultsOutStream.print(\"NHistoContainmentSimilarity\\t\");\n    pOverallResultsOutStream.print(\"NHistoValue\\t\");\n    pOverallResultsOutStream.print(\"NHistoSize\\t\");\n    pOverallResultsOutStream.print(\"NOverallSimil\\t\");\n  }\n  pOverallResultsOutStream.println();\n  int iTotal=dsSummarySet.getTrainingSet().size();\n  int iCur=0;\n  Iterator iCatIter=dsModelSet.getCategories().iterator();\n  Date dStart=new Date();\n  while (iCatIter.hasNext()) {\n    String sCurCategory=(String)iCatIter.next();\n    if (!bSilent)     System.err.println(\"Processing category:\" + sCurCategory);\n    hModelCache.clear();\n    hNModelCache.clear();\n    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);\n    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();\n    while (iIter.hasNext()) {\n      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();\n      Runnable r=new CalcSimilRunner(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,cfeCur,lModelFiles,sSem,bDoCharNGrams,bDoWordNGrams,pOverallResultsOutStream,bSilent,this,WeightMethod,Progress);\n      while (!tqRobin.addThreadFor(r))       Thread.yield();\n      Date dCurTime=new Date();\n      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);\n      if (!bSilent || (bProgress))       System.err.print(\"Completed \" + String.format(\"%7.4f\",(double)iCur++ / iTotal * 100) + \"%\"+ String.format(\" - Remaining %50s\\r\",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));\n    }\n  }\n  try {\n    tqRobin.waitUntilCompletion();\n  }\n catch (  InterruptedException ex) {\n    System.err.println(\"Could not complete execution of all tasks.\");\n    ex.printStackTrace(System.err);\n  }\n  System.err.println(\"Completed 100%. A total of \" + iTotal + \" comparisons were \"+ \"performed.\");\n}\n", "nl": "Performs optimized evaluation of a given set of summaries, given a model directory."}
{"code": "@Override public void onUIRefreshBegin(PtrFrameLayout frame){\n  mDrawable.setAlpha(255);\n  mDrawable.start();\n}\n", "nl": "perform refreshing UI"}
{"code": "public static SM_SYSTEM_MESSAGE STR_ARTIFACT_FIRE(DescriptionId race,String value1,DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1301036,race,value1,descriptionId);\n}\n", "nl": "The %0 %1 has succeeded in activating the %2 Artifact."}
{"code": "public static boolean isConnected(Context context){\n  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();\n  return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\n}\n", "nl": "isConnected This method is used to check for network connectivity before attempting a network call"}
{"code": "@ObjectiveCName(\"add:action:name:event:timeoutListener:timeout:\") void add(Topic topic,Actions action,String name,Event event,UtilTimeoutListener timeoutListener,int timeout){\n  String uniqueName=this.getUniqueName(topic,action,name);\n  this.clear(uniqueName);\n  addToRegister(topic,action,name,event,timeoutListener,timeout);\n}\n", "nl": "Checks to see if an ack timer already exists in the register for the given name and action. If it does, it clears it, then starts a new one."}
{"code": "public static <K,V>MapContext<K,V> createMapContext(MapContext<K,V> source){\n  MapContext<K,V> newValue=MapContext.getMapContext();\n  newValue.stackList.addAll(source.stackList);\n  return newValue;\n}\n", "nl": "Does a shallow copy of the internal stack of the passed MapContext; enables simultaneous stacks that share common parent Maps"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Timed protected Assignment assignUserToLookUp(Assignment assignment,Date date){\n  final String CQL;\n  Date paramDate=date;\n  if (paramDate == null) {\n    paramDate=new Date();\n  }\n  if (assignment.getBucketLabel() != null) {\n    CQL=\"insert into user_assignment_look_up \" + \"(experiment_id, user_id, context, created, bucket_label) \" + \"values (?, ?, ?, ?, ?)\";\n  }\n else {\n    CQL=\"insert into user_assignment_look_up \" + \"(experiment_id, user_id, context, created) \" + \"values (?, ?, ?, ?)\";\n  }\n  try {\n    PreparedCqlQuery<User.ID,String> query=driver.getKeyspace().prepareQuery(keyspace.userAssignmentLookUp()).withCql(CQL).asPreparedStatement().withByteBufferValue(assignment.getExperimentID(),ExperimentIDSerializer.get()).withByteBufferValue(assignment.getUserID(),UserIDSerializer.get()).withStringValue(assignment.getContext().getContext()).withByteBufferValue(paramDate,DateSerializer.get());\n    if (assignment.getBucketLabel() != null) {\n      query.withByteBufferValue(assignment.getBucketLabel(),BucketLabelSerializer.get());\n    }\n    query.execute();\n    return (Assignment.newInstance(assignment.getExperimentID()).withBucketLabel(assignment.getBucketLabel()).withUserID(assignment.getUserID()).withContext(assignment.getContext()).withStatus(Assignment.Status.NEW_ASSIGNMENT).withCreated(paramDate).withCacheable(null).build());\n  }\n catch (  ConnectionException e) {\n    throw new RepositoryException(\"Could not save user assignment \\\"\" + assignment + \"\\\"\",e);\n  }\n}\n", "nl": "Adds an assignment associated with a new user"}
{"code": "public RingBuffer(int size){\n  this.size=size;\n  buffer=new byte[size];\n  wp=rp=0;\n}\n", "nl": "Initialize a ring buffer given number of bytes"}
{"code": "public static StyledLayerDescriptor createNewPolygon(){\n  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();\n  NamedLayer namedLayer=styleFactory.createNamedLayer();\n  sld.addStyledLayer(namedLayer);\n  Style style=styleFactory.createStyle();\n  namedLayer.addStyle(style);\n  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();\n  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();\n  ftsList.add(fts);\n  Rule rule=styleFactory.createRule();\n  fts.rules().add(rule);\n  PolygonSymbolizer polygon=createDefaultPolygonSymbolizer();\n  rule.symbolizers().add(polygon);\n  return sld;\n}\n", "nl": "Creates a new polygon symbol."}
{"code": "<T>T onMax(String tableName,String column,String[] conditions,Class<T> type){\n  return mathQuery(tableName,new String[]{\"max(\" + column + \")\"},conditions,type);\n}\n", "nl": "The open interface for other classes in CRUD package to calculate the maximum value on a given column."}
{"code": "public KeyHook(String description,int keyCode,String category){\n  super(description,keyCode,category);\n}\n", "nl": "Create a KeyBinding object for the specified key, keycode and category.<br>"}
{"code": "public PhotosSaveQuery photosList(String value){\n  return unsafeParam(\"photos_list\",value);\n}\n", "nl": "Parameter returned when photos are uploaded to server."}
{"code": "public int startNewBookie() throws Exception {\n  ServerConfiguration conf=newServerConfiguration();\n  startBookie(conf);\n  return conf.getBookiePort();\n}\n", "nl": "Helper method to startup a new bookie server with the indicated port number. Also, starts the auto recovery process, if the isAutoRecoveryEnabled is set true."}
{"code": "private Map<String,List<ChartObject>> transformToFilterStyle(CriteriaMap<?> criteriaMap,Map<String,List<ChartObject>> input,List<String> chartFields){\n  Map<String,List<ChartObject>> result=new LinkedHashMap<>();\n  for (  Map.Entry<String,List<ChartObject>> entry : input.entrySet()) {\n    boolean isConverted=false;\n    List<ChartObject> data=entry.getValue();\n    for (    String field : chartFields) {\n      QueryBuilder.ComplexSearchCriteria filterCriteria=QueryBuilder.filterSearchCriteriaPreProcessor(field);\n      String queryCriteria=criteriaMap.getCriteriaHolder(filterCriteria.getGlobalSearchCriteria()).getQueryCriteria();\n      if (queryCriteria.equals(entry.getKey())) {\n        result.put(criteriaMap.getCriteriaHolder(queryCriteria).getFilterCriteria(),data);\n        isConverted=true;\n        break;\n      }\n    }\n    if (!isConverted)     result.put(entry.getKey(),data);\n  }\n  return result;\n}\n", "nl": "Transform chart data fields names to ui known names using criteria holder."}
{"code": "void rollbackLocalTransaction() throws RollbackFailedException {\n  if (_tx == null) {\n    return;\n  }\n  try {\n    if (_logger.isLoggable(Level.FINEST)) {\n      _logger.log(Level.FINEST,\"Aborting local transaction: \" + _tx);\n    }\n    _tx.abort();\n  }\n catch (  Exception e) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,\"Internal error during local transaction abort: \" + _tx,e);\n    }\n    throw new RollbackFailedException(e);\n  }\n}\n", "nl": "Rolls back the local transaction."}
{"code": "@Override public boolean add(Interval e){\n  throw new IllegalAccessError(\"Do not use add in Simplified Interval List\");\n}\n", "nl": "Only internal calls to linked list mutators should be used to change the list."}
{"code": "public void showLoadingDialog(String message){\n  dismissLoadingDialog();\n  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag == null) {\n    Log_OC.d(TAG,\"show loading dialog\");\n    LoadingDialog loading=new LoadingDialog(message);\n    FragmentManager fm=getSupportFragmentManager();\n    FragmentTransaction ft=fm.beginTransaction();\n    loading.show(ft,DIALOG_WAIT_TAG);\n    fm.executePendingTransactions();\n  }\n}\n", "nl": "Show loading dialog"}
{"code": "public JSONStringer endArray() throws JSONException {\n  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,\"]\");\n}\n", "nl": "Ends encoding the current array."}
{"code": "public static CommandResult execute(String command,File dir){\n  SimpleCommand simpleCommand=new SimpleCommand(command);\n  return execute(simpleCommand,dir);\n}\n", "nl": "Executes the command given by building a SimpleCommand via tokenizing the string and the executes the command."}
{"code": "public int largestAbsComponent(){\n  S2Point temp=fabs(this);\n  if (temp.x > temp.y) {\n    if (temp.x > temp.z) {\n      return 0;\n    }\n else {\n      return 2;\n    }\n  }\n else {\n    if (temp.y > temp.z) {\n      return 1;\n    }\n else {\n      return 2;\n    }\n  }\n}\n", "nl": "Return the index of the largest component fabs"}
{"code": "private List<DataSourceFieldInterface> processFields(String layerName,JsonElement fieldArrayElement){\n  List<DataSourceFieldInterface> fieldList=new ArrayList<DataSourceFieldInterface>();\n  if (fieldArrayElement != null) {\n    JsonArray fieldArray=fieldArrayElement.getAsJsonArray();\n    for (int index=0; index < fieldArray.size(); index++) {\n      JsonObject fieldObject=null;\n      try {\n        fieldObject=fieldArray.get(index).getAsJsonObject();\n      }\n catch (      IllegalStateException e) {\n        ConsoleManager.getInstance().error(this,\"Layer : \" + layerName);\n        ConsoleManager.getInstance().exception(this,e);\n      }\n      if (fieldObject != null) {\n        Class<?> fieldType=convertFieldType(fieldObject.get(\"type\").getAsString());\n        DataSourceField esriField=new DataSourceField(fieldObject.get(\"field\").getAsString(),fieldType);\n        fieldList.add(esriField);\n      }\n    }\n  }\n  return fieldList;\n}\n", "nl": "Process fields."}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_DICE_PASSED(String value0){\n  return new SM_SYSTEM_MESSAGE(1300782,value0);\n}\n", "nl": "%0 gave up rolling the dice."}
{"code": "public static Rule createTransitiveRule(String ruleId,RelationType relType,String fromRoleId,String toRoleId,MindmapsGraph graph){\n  final int arity=relType.hasRoles().size();\n  if (arity != 2)   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());\n  VarAdmin startVar=Graql.var().isa(relType.getId()).rel(fromRoleId,\"x\").rel(toRoleId,\"z\").admin();\n  VarAdmin endVar=Graql.var().isa(relType.getId()).rel(fromRoleId,\"z\").rel(toRoleId,\"y\").admin();\n  VarAdmin headVar=Graql.var().isa(relType.getId()).rel(fromRoleId,\"x\").rel(toRoleId,\"y\").admin();\n  String body=Patterns.conjunction(Sets.newHashSet(startVar,endVar)).toString() + \";\";\n  String head=headVar.toString() + \";\";\n  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());\n}\n", "nl": "create transitive rule R(from: X, to: Y) :- R(from: X,to: Z), R(from: Z, to: Y)"}
{"code": "public ThisRef newThisRef(RefType t){\n  return Jimple.v().newThisRef(t);\n}\n", "nl": "Constructs a ThisRef(RefType) grammar chunk."}
{"code": "public static List<Lock> loadByHost(long uid,long time,String host){\n  Beans<Lock> bs=Helper.load(W.create(\"uid\",uid).and(\"created\",time,W.OP_GT).and(\"host\",host).sort(\"created\",1),0,Integer.MAX_VALUE,Lock.class);\n  return bs == null ? null : bs.getList();\n}\n", "nl": "Load by host."}
{"code": "public CauchyDistribution(){\n  this(0,1);\n}\n", "nl": "Creates a Cauchy distribution with the median equal to zero and scale equal to one."}
{"code": "public static void handleSubscriptionNotifications(StatefulService service,Operation update,String notificationTaskLink,TaskState opTaskState,int expectedNotificationCount,Object returnState,Set<String> finishedTaskLinks,boolean deleteTask){\n  int finishedTaskCount;\n  update.complete();\n  if ((update.getAction() != Action.PATCH && update.getAction() != Action.PUT)) {\n    return;\n  }\n  if (TaskState.isCancelled(opTaskState) || TaskState.isFailed(opTaskState)) {\n    SubscriptionUtils.sendFailureSelfPatch(service,new IllegalStateException(\"Operation failed:\" + Utils.toJsonHtml(update)));\n    if (deleteTask) {\n      service.sendRequest(Operation.createDelete(service,notificationTaskLink).setBody(new ServiceDocument()));\n    }\n    return;\n  }\n  if (!TaskState.isFinished(opTaskState)) {\n    return;\n  }\nsynchronized (finishedTaskLinks) {\n    if (!finishedTaskLinks.add(notificationTaskLink)) {\n      return;\n    }\n    finishedTaskCount=finishedTaskLinks.size();\n  }\n  Operation deleteOp=Operation.createDelete(service,notificationTaskLink).setReferer(service.getUri()).setCompletion(null);\n  service.getHost().stopSubscriptionService(deleteOp,UriUtils.buildPublicUri(service.getHost(),update.getUri().getPath()));\n  if (deleteTask) {\n    service.sendRequest(Operation.createDelete(service,notificationTaskLink).setBody(new ServiceDocument()));\n  }\n  if (finishedTaskCount == expectedNotificationCount) {\n    SubscriptionUtils.sendPatch(service,returnState);\n  }\n}\n", "nl": "handle subscriptions from multiple services 1. Mark operation as complete 2. If the operation is not PUT or POST, return 3. If the task has failed, send failure patch to service 4. Update the list of services from which we have received notification 5. Unsubscribe from notifications, optionally delete the task that raised the notification 6. If we have received the expected number of notifications, patch the next state back"}
{"code": "@Override public String toString(){\n  return str;\n}\n", "nl": "Returns a field name in English. This method is intended to be used for debugging/diagnosis and not for display to end-users."}
{"code": "private void validateSortSize(){\n  String sortSizeStr=carbonProperties.getProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);\n  try {\n    int sortSize=Integer.parseInt(sortSizeStr);\n    if (sortSize < CarbonCommonConstants.SORT_SIZE_MIN_VAL) {\n      LOGGER.info(\"The batch size value \\\"\" + sortSizeStr + \"\\\" is invalid. Using the default value \\\"\"+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);\n      carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);\n    }\n  }\n catch (  NumberFormatException e) {\n    LOGGER.info(\"The batch size value \\\"\" + sortSizeStr + \"\\\" is invalid. Using the default value \\\"\"+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);\n    carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);\n  }\n}\n", "nl": "This method validates the sort size"}
{"code": "public void destroyView() throws CanceledException {\n  JFrame saveLastActiveFrame=lastActiveFrame;\n  lastActiveFrame=this.getFrame();\n  try {\n    askToSaveCurrent();\n  }\n catch (  CanceledException ex) {\n    ProjectManager.setQuitting(false);\n    throw ex;\n  }\n  try {\n    if (ProjectManager.isQuitting() && ProjectManager.getNumberOfProjects() == 1) {\n      if (!confirmQuit()) {\n        ProjectManager.setQuitting(false);\n      }\n    }\n  }\n catch (  CanceledException ex) {\n    ProjectManager.setQuitting(false);\n    throw ex;\n  }\n  doc.closeConnector();\n  if (lastActiveViewer == MainViewer.this)   lastActiveViewer=null;\n  lastActiveFrame=saveLastActiveFrame;\n  if (lastActiveFrame == getFrame())   lastActiveFrame=null;\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public static void mainQuickTest2() throws IOException, UnsupportedAudioFileException {\n  String emotion=\"angry\";\n  String method=\"F\";\n  String inputFolder=\"/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral/train_99\";\n  String outputBaseFolder=\"/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral2\" + emotion + \"/neutral2\"+ emotion+ \"Out_codebook\"+ method+ \"3\";\n  String baseFile=\"/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral2\" + emotion + \"/neutral\"+ method+ \"_X_\"+ emotion+ method+ \"_99\";\n  boolean isSourceVocalTractSpectrumFromModel=true;\n  int numBestMatches=15;\n  boolean isTemporalSmoothing=true;\n  int smoothingNumNeighbours=1;\n  boolean isContextBasedPreselection=true;\n  int totalContextNeighbours=5;\n  boolean isPitchFromTargetFile=true;\n  int pitchFromTargetMethod=ProsodyTransformerParams.FULL_CONTOUR;\n  boolean isDurationFromTargetFile=true;\n  int durationFromTargetMethod=ProsodyTransformerParams.PHONEME_DURATIONS;\n  boolean isEnergyFromTargetFile=false;\n  boolean isLsfsFromTargetFile=false;\n  int targetAlignmentFileType=BaselineTransformerParams.FESTIVAL_UTT;\n  String outputFolderInfoString=\"isSrc\" + String.valueOf(isSourceVocalTractSpectrumFromModel ? 1 : 0) + \"_nBest\"+ String.valueOf(numBestMatches)+ \"_smooth\"+ String.valueOf(isTemporalSmoothing ? 1 : 0)+ \"_\"+ String.valueOf(smoothingNumNeighbours)+ \"_context\"+ String.valueOf(isContextBasedPreselection ? 1 : 0)+ \"_\"+ String.valueOf(totalContextNeighbours)+ \"_psUtt\"+ String.valueOf(isPitchFromTargetFile ? 1 : 0)+ \"_tsUtt\"+ String.valueOf(isDurationFromTargetFile ? 1 : 0);\n  mainParametric(inputFolder,outputBaseFolder,baseFile,outputFolderInfoString,isSourceVocalTractSpectrumFromModel,numBestMatches,isTemporalSmoothing,smoothingNumNeighbours,isContextBasedPreselection,totalContextNeighbours,isPitchFromTargetFile,pitchFromTargetMethod,isDurationFromTargetFile,durationFromTargetMethod,isEnergyFromTargetFile,isLsfsFromTargetFile,targetAlignmentFileType);\n}\n", "nl": "This example uses the ouput of the example: marytts.signalproc.adaptation.codebook.WeightedCodebookParallelTrainer.mainQuickTest2() Input: /Neutral-Spike-Conversion/codebook/neutral2angry/neutralF_X_angryF_99.pmf /Neutral-Spike-Conversion/codebook/neutral/train_99/*.wav Ouput: /Neutral-Spike-Conversion/codebook/neutral2angry/neutral2angryOut_codebookF3/ isSrc1_nBest15_smooth1_1_context1_5_psUtt1_tsUtt1_prosody1x0x0/*.wav"}
{"code": "public boolean safe_forname(){\n  return soot.PhaseOptions.getBoolean(options,\"safe-forname\");\n}\n", "nl": "Safe forName -- Handle Class.forName() calls conservatively. When a program calls Class.forName(), the named class is  resolved, and its static initializer executed. In many cases, it  cannot be determined statically which class will be loaded, and  which static initializer executed. When this option is set to  true, Soot will conservatively assume that any static  initializer could be executed. This may make the call graph very  large. When this option is set to false, any calls to  Class.forName() for which the class cannot be determined  statically are assumed to call no static initializers."}
{"code": "public double readDouble(){\n  return X.toDouble(readString(),0);\n}\n", "nl": "Read double."}
{"code": "public void saveScoreboard(Configuration config,Scoreboard scoreboard){\n  ConfigurationSection teamsSection=config.createSection(\"teams\");\n  scoreboard.getTeams().forEach(null);\n  ConfigurationSection objectivesSection=config.createSection(\"objectives\");\n  scoreboard.getObjectives().forEach(null);\n  ConfigurationSection scoresSection=config.createSection(\"scores\");\n  scoreboard.getEntries().forEach(null);\n}\n", "nl": "Saves a scoreboard to a configuration file."}
{"code": "public static void resolveExpressionType(PsiElement objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  objSubjectExpression=ExpressionSemanticUtil.getExpressionTroughParenthesis(objSubjectExpression);\n  if (objSubjectExpression instanceof ArrayCreationExpression) {\n    objTypesSet.add(Types.strArray);\n    checkCallables((ArrayCreationExpression)objSubjectExpression,objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof StringLiteralExpression) {\n    objTypesSet.add(Types.strString);\n    return;\n  }\n  if (objSubjectExpression instanceof ConstantReference) {\n    resolveConstantReference((ConstantReference)objSubjectExpression,objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof TernaryExpression) {\n    resolveTernaryOperator((TernaryExpression)objSubjectExpression,objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof UnaryExpression) {\n    resolveUnaryExpression((UnaryExpression)objSubjectExpression,objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof BinaryExpression) {\n    resolveBinaryExpression((BinaryExpression)objSubjectExpression,objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof SelfAssignmentExpression) {\n    resolveSelfAssignmentExpression((SelfAssignmentExpression)objSubjectExpression,objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof Variable) {\n    String strVariableName=((Variable)objSubjectExpression).getName();\n    if (!StringUtil.isEmpty(strVariableName) && strVariableName.charAt(0) == '_') {\n      if (\"|_GET|_POST|_SESSION|_REQUEST|_FILES|_COOKIE|_ENV|_SERVER|\".contains(\"|\" + strVariableName + \"|\")) {\n        storeAsTypeWithSignaturesImport(Types.strArray,objScope,objIndex,objTypesSet);\n        return;\n      }\n    }\n    storeAsTypeWithSignaturesImport(((Variable)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof ArrayAccessExpression) {\n    PsiElement var=((ArrayAccessExpression)objSubjectExpression).getValue();\n    if (var instanceof PsiReference) {\n      var=((PsiReference)var).resolve();\n    }\n    if ((var instanceof PhpTypedElement) && ((PhpTypedElement)var).getType().equals(PhpType.STRING)) {\n      objTypesSet.add(Types.strString);\n    }\n    storeAsTypeWithSignaturesImport(((ArrayAccessExpression)objSubjectExpression).getType().toString(),objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof NewExpression) {\n    resolveNewExpression((NewExpression)objSubjectExpression,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof PsiReference) {\n    PsiElement target=((PsiReference)objSubjectExpression).resolve();\n    if (target instanceof PhpTypedElement) {\n      storeAsTypeWithSignaturesImport(((PhpTypedElement)target).getType().toString(),objScope,objIndex,objTypesSet);\n      return;\n    }\n  }\n  if (objSubjectExpression instanceof ClassConstantReference) {\n    storeAsTypeWithSignaturesImport(((ClassConstantReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof FieldReference) {\n    storeAsTypeWithSignaturesImport(((FieldReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof MethodReference) {\n    storeAsTypeWithSignaturesImport(((MethodReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof FunctionReference) {\n    storeAsTypeWithSignaturesImport(((FunctionReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);\n    return;\n  }\n  if (objSubjectExpression instanceof FunctionImpl) {\n    objTypesSet.add(Types.strCallable);\n    return;\n  }\n  if (objSubjectExpression instanceof PhpExpression) {\n    resolvePhpExpression((PhpExpression)objSubjectExpression,objScope,objIndex,objTypesSet);\n  }\n}\n", "nl": "high-level resolving logic"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_RETURN_NOMOVE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300049,value0);\n}\n", "nl": "%0 gives up the attack."}
{"code": "public ObjectColumn(int nrows){\n  this(Object.class,nrows,nrows,null);\n}\n", "nl": "Create a new ObjectColumn. The type is assumed to be Object."}
{"code": "public static String formatTimestamp(@Nullable Date date){\n  return (date != null) ? ISO8601Utils.format(date,true) : null;\n}\n", "nl": "Formats the specified timestamp as an ISO 8601 string with milliseconds and UTC timezone."}
{"code": "protected GroupsGetMembersQueryWithFields fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "List of additional fields to be returned."}
{"code": "@Override @Transactional(value=\"cacheTransactionManager\") public void doCreateRuleTag(ConfigurationElement element) throws IllegalAccessException {\n  checkId(element.getEntityId());\n  tagCache.acquireWriteLockOnKey(element.getEntityId());\n  try {\n    LOGGER.trace(\"Creating RuleTag with id \" + element.getEntityId());\n    RuleTag ruleTag=commonTagFacade.createCacheObject(element.getEntityId(),element.getElementProperties());\n    Collection<Long> tagIds=ruleTag.getRuleInputTagIds();\n    try {\n      configurableDAO.insert(ruleTag);\n    }\n catch (    Exception e) {\n      LOGGER.error(\"Exception caught while inserting a new Rule into the DB - rolling back changes\",e);\n      throw new UnexpectedRollbackException(\"Unexpected exception while creating a Rule: rolling back the change\",e);\n    }\n    try {\n      for (      Long tagId : tagIds) {\n        tagConfigGateway.addRuleToTag(tagId,ruleTag.getId());\n      }\n      tagCache.putQuiet(ruleTag);\n    }\n catch (    RuntimeException e) {\n      String errMessage=\"Exception caught while adding a RuleTag - rolling back DB transaction.\";\n      LOGGER.error(errMessage,e);\n      tagCache.remove(ruleTag.getId());\n      for (      Long tagId : tagIds) {\n        try {\n          tagConfigGateway.removeRuleFromTag(tagId,ruleTag.getId());\n        }\n catch (        RuntimeException ex) {\n          LOGGER.warn(\"Exception caught while attempting to role back rule creation in cache (removing references from input tags)\",ex);\n        }\n      }\n      throw new UnexpectedRollbackException(errMessage,e);\n    }\n  }\n  finally {\n    tagCache.releaseWriteLockOnKey(element.getEntityId());\n  }\n}\n", "nl": "Creates a rule on existing tags.  <p>The DAQ does not need informing of this change (so no return type as for DataTags."}
{"code": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) private static boolean relaunchTask(int tabId){\n  if (tabId == Tab.INVALID_TAB_ID)   return false;\n  Context context=ApplicationStatus.getApplicationContext();\n  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n  for (  AppTask task : manager.getAppTasks()) {\n    RecentTaskInfo info=DocumentUtils.getTaskInfoFromTask(task);\n    if (info == null)     continue;\n    int id=ActivityDelegate.getTabIdFromIntent(info.baseIntent);\n    if (id != tabId)     continue;\n    DocumentTabModelSelector.setPrioritizedTabId(id);\n    if (!moveToFront(task))     continue;\n    return true;\n  }\n  return false;\n}\n", "nl": "Bring the task matching the given tab ID to the front."}
{"code": "public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {\n  DimColumnFilterInfo resolvedFilterObject=null;\n  List<String> evaluateResultListFinal;\n  try {\n    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();\n    if (!metadata.isIncludeFilter() && !evaluateResultListFinal.contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {\n      evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);\n    }\n  }\n catch (  FilterIllegalMemberException e) {\n    throw new FilterUnsupportedException(e);\n  }\n  resolvedFilterObject=FilterUtil.getNoDictionaryValKeyMemberForFilter(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter());\n  visitableObj.setFilterValues(resolvedFilterObject);\n}\n", "nl": "Visitor Method will update the filter related details in visitableObj, For no dictionary type columns the filter members will resolved directly, no need to look up in dictionary since it will not be part of dictionary, directly the actual data can be converted as byte[] and can be set. this type of encoding is effective when the particular column is having very high cardinality."}
{"code": "public static <T extends RealFieldElement<T>>FieldRotation<T> applyInverseTo(final Rotation rOuter,final FieldRotation<T> rInner){\n  return new FieldRotation<T>(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(),rInner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())),rInner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())),rInner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())),false);\n}\n", "nl": "Apply the inverse of a rotation to another rotation. Applying the inverse of a rotation to another rotation is computing the composition in an order compliant with the following rule : let u be any vector and v its image by rInner (i.e. rInner.applyTo(u) = v), let w be the inverse image of v by rOuter (i.e. rOuter.applyInverseTo(v) = w), then w = comp.applyTo(u), where comp = applyInverseTo(rOuter, rInner)."}
{"code": "private Bitmap compress(String imagePath,int width,int height){\n  BitmapFactory.Options options=new BitmapFactory.Options();\n  options.inJustDecodeBounds=true;\n  BitmapFactory.decodeFile(imagePath,options);\n  int outH=options.outHeight;\n  int outW=options.outWidth;\n  int inSampleSize=1;\n  if (outH > height || outW > width) {\n    int halfH=outH / 2;\n    int halfW=outW / 2;\n    while ((halfH / inSampleSize) > height && (halfW / inSampleSize) > width) {\n      inSampleSize*=2;\n    }\n  }\n  options.inSampleSize=inSampleSize;\n  options.inJustDecodeBounds=false;\n  int heightRatio=(int)Math.ceil(options.outHeight / (float)height);\n  int widthRatio=(int)Math.ceil(options.outWidth / (float)width);\n  if (heightRatio > 1 || widthRatio > 1) {\n    if (heightRatio > widthRatio) {\n      options.inSampleSize=heightRatio;\n    }\n else {\n      options.inSampleSize=widthRatio;\n    }\n  }\n  options.inJustDecodeBounds=false;\n  return BitmapFactory.decodeFile(imagePath,options);\n}\n", "nl": "obtain the thumbnail that specify the size"}
{"code": "public static void writeLayout(String folder){\n  if (selectedLayout != null) {\n    selectedLayout.writeLayout(folder);\n  }\n}\n", "nl": "Write layout."}
{"code": "static VersionNumber identifyIOSVersion(final String userAgent){\n  VersionNumber version=VersionNumber.UNKNOWN;\n  final List<Pattern> patterns=new ArrayList<Pattern>();\n  patterns.add(Pattern.compile(\"iPhone OS\\\\s?((\\\\d+)((\\\\_\\\\d+)+)?) like Mac OS X\"));\n  patterns.add(Pattern.compile(\"CPU OS\\\\s?((\\\\d+)((\\\\_\\\\d+)+)?) like Mac OS X\"));\n  patterns.add(Pattern.compile(\"iPhone OS\\\\s?((\\\\d+)((\\\\.\\\\d+)+)?);\"));\n  for (  final Pattern pattern : patterns) {\n    final Matcher m=pattern.matcher(userAgent);\n    if (m.find()) {\n      version=parseFirstVersionNumber(m.group(MAJOR_INDEX).replaceAll(\"_\",\".\"));\n      break;\n    }\n  }\n  return version;\n}\n", "nl": "This method try to determine the version number of the operating system <i>iOS</i> more accurately."}
{"code": "private ColorsUtil(){\n  throw new Error(\"Do not need instantiate!\");\n}\n", "nl": "Don't let anyone instantiate this class."}
{"code": "public static void clickButtonRewiConnect(){\n  RewiMod.getInstance().connectToServer(\"Rewinside.TV\",\"mc.rewinside.tv\",25565,false);\n}\n", "nl": "Connects the player to RewisServer"}
{"code": "public static void initCatalogMgr(boolean isNew,Transaction tx){\n  catalogMgr=new CatalogMgr(isNew,tx);\n}\n", "nl": "Initializes the catalog manager. Note that the catalog manager should be initialized <em>before</em> system recovery."}
{"code": "public Element generateSimpleElement(final Document document,final Object pojo,final String... attributes) throws ParserConfigurationException, IllegalAccessException, InstantiationException {\n  return generateSimpleElement(document,pojo,Arrays.asList(attributes));\n}\n", "nl": "Generates an xml element from this pojo. Translating the fields like described in the class description."}
{"code": "public Mushroom(Material shroom,BlockFace capFace){\n  this(shroom,MushroomBlockTexture.getCapByFace(capFace));\n}\n", "nl": "Constructs a brown/red mushroom cap block with the specified face or faces set to cap texture. Setting any of the four sides will also set the top to cap. To set two side faces at once use e.g. north-west. Specify self to set all six faces at once."}
{"code": "public JSONArray names(){\n  JSONArray ja=new JSONArray();\n  Iterator keys=keys();\n  while (keys.hasNext()) {\n    ja.put(keys.next());\n  }\n  return ja.length() == 0 ? null : ja;\n}\n", "nl": "Produce a JSONArray containing the names of the elements of this JSONObject."}
{"code": "public AemDialog clickTab(final String label){\n  bobcatWait.withTimeout(Timeouts.BIG).until((ExpectedCondition<Object>)null,5);\n  return this;\n}\n", "nl": "Clicks the specified tab in component's Edit Window."}
{"code": "public static SM_SYSTEM_MESSAGE STR_GATHER_START_2_GATHER(String value0){\n  return new SM_SYSTEM_MESSAGE(1330012,value0);\n}\n", "nl": "You are harvesting %0."}
{"code": "public MathRuntimeException(final Throwable rootCause){\n  super(rootCause);\n  this.pattern=getMessage();\n  this.arguments=new Object[0];\n}\n", "nl": "Constructs a new <code>MathRuntimeException</code> with specified nested <code>Throwable</code> root cause."}
{"code": "public void testLatestUpdatePersistedToDB(){\n  DataTagCacheObject floatTag=new DataTagCacheObject();\n  floatTag.setId(new Long(1000100));\n  floatTag.setName(\"Test float tag\");\n  floatTag.setMode(DataTagConstants.MODE_TEST);\n  floatTag.setDataType(\"Float\");\n  floatTag.setValue(new Float(10));\n  floatTag.setCacheTimestamp(new Timestamp(System.currentTimeMillis() - 10));\n  dataTagMapper.insertDataTag(floatTag);\n  assertNotNull(dataTagMapper.getItem(floatTag.getId()));\n  dataTagCache.put(floatTag.getId(),floatTag);\n  DataTagCacheObject cacheObject=(DataTagCacheObject)dataTagCache.get(floatTag.getId());\n  cacheObject.setValue(new Float(20));\n  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis() - 1));\n  dataTagCache.notifyListenersOfUpdate(cacheObject);\n  cacheObject.setValue(new Float(30));\n  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));\n  dataTagCache.notifyListenersOfUpdate(cacheObject);\n  assertEquals(new Float(30),cacheObject.getValue());\n  try {\n    Thread.sleep(30000);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  DataTag objectInDB=dataTagMapper.getItem(floatTag.getId());\n  assertNotNull(objectInDB);\n  assertEquals(new Float(30),objectInDB.getValue());\n  dataTagCache.remove(floatTag.getId());\n}\n", "nl": "Tests that if 2 updates for the same tag are written to the cache at roughly the same time, that only the most recent one ends up in the DB. This is testing the way the synchrobuffer is integrated into the design. We assume that incoming updates for the same tag have different timestamps. Is only testing the one-server configuration (each member of the cluster will have a separate buffer)."}
{"code": "public OversecAsciiArmoredOutputStream(OutputStream out,Hashtable headers){\n  this(out);\n  Enumeration e=headers.keys();\n  while (e.hasMoreElements()) {\n    Object key=e.nextElement();\n    this.headers.put(key,headers.get(key));\n  }\n}\n", "nl": "Constructs an armored output stream with default and custom headers."}
{"code": "public static boolean isDocumentActivity(String className){\n  return TextUtils.equals(className,IncognitoDocumentActivity.class.getName()) || TextUtils.equals(className,DocumentActivity.class.getName()) || TextUtils.equals(className,LEGACY_CLASS_NAME)|| TextUtils.equals(className,LEGACY_INCOGNITO_CLASS_NAME);\n}\n", "nl": "Determines whether the given class can be classified as a DocumentActivity (this includes both regular document activity and incognito document activity)."}
{"code": "public static void publishAllServices() throws RpcException {\n  try {\n    ServicePublisher.publishAllServices();\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while publishing all services\",e);\n  }\n}\n", "nl": "publish all pigeon services to registry"}
{"code": "public BannedIpsExample(){\n  oredCriteria=new ArrayList<Criteria>();\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.banned_ips"}
{"code": "public static void logPreferenceChange(boolean enabled){\n  RecordHistogram.recordEnumeratedHistogram(\"Search.ContextualSearchPreferenceStateChange\",enabled ? PREFERENCE_ENABLED : PREFERENCE_DISABLED,PREFERENCE_HISTOGRAM_BOUNDARY);\n}\n", "nl": "Logs changes to the Contextual Search preference, aside from those resulting from the first run flow."}
{"code": "public String showAndGetCommand(){\n  setVisible(true);\n  return result;\n}\n", "nl": "show the dialog and return the entered command string, or null"}
{"code": "public DistributionDocumentEvaluator(Map<Integer,String> mIdxToWord,grammaticalityEstimator geEstimator){\n  WordMap=mIdxToWord;\n  Estimator=geEstimator;\n}\n", "nl": "Creates a new instance of DistributionDocumentEvaluator, given an integer-to-term map and a distribution document."}
{"code": "public static final void emoteStopWalking(Npc owner){\n  owner.unsetState(CreatureState.WALKING);\n}\n", "nl": "Npc stops walking"}
{"code": "private boolean permissionOnInAndroid(String permission,Context context){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)   return true;\n  return PackageManager.PERMISSION_GRANTED == context.getPackageManager().checkPermission(permission,context.getPackageName());\n}\n", "nl": "Returns whether a per-app permission is enabled."}
{"code": "public void update(double deltaTime){\n  if (is_Un_Dead) {\n    Un_Dead_Cult--;\n    if (Un_Dead_Cult < 0) {\n      is_Un_Dead=false;\n    }\n  }\n  if (getnDirection() == RIGHT)   velocity.set(8,0);\n else   if (getnDirection() == LEFT)   velocity.set(-8,0);\n else   if (getnDirection() == UP)   velocity.set(0,0);\n  position.add(velocity.x * deltaTime,velocity.y * deltaTime);\n}\n", "nl": "unit update"}
{"code": "private void initResourcesIfNecessary(){\n  if (centerDrawable == null) {\n    centerDrawable=getContext().getResources().getDrawable(wheelForeground);\n  }\n  if (topShadow == null) {\n    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);\n  }\n  if (bottomShadow == null) {\n    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);\n  }\n  setBackgroundResource(wheelBackground);\n}\n", "nl": "Initializes resources"}
{"code": "public static Map<String,Object> alwaysDeclineProcessor(DispatchContext dctx,Map<String,? extends Object> context){\n  Locale locale=(Locale)context.get(\"locale\");\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  BigDecimal processAmount=(BigDecimal)context.get(\"processAmount\");\n  Debug.logInfo(\"Test Processor Declining Credit Card\",module);\n  String refNum=UtilDateTime.nowAsString();\n  result.put(\"authResult\",Boolean.FALSE);\n  result.put(\"processAmount\",processAmount);\n  result.put(\"authRefNum\",refNum);\n  result.put(\"authAltRefNum\",refNum);\n  result.put(\"authFlag\",\"D\");\n  result.put(\"authMessage\",UtilProperties.getMessage(resource,\"AccountingPaymentTestProcessorDeclined\",locale));\n  return result;\n}\n", "nl": "Always decline processor"}
{"code": "public IJSpace createSpace(String spaceName,final JSpaceAttributes spaceAttr) throws CreateException, RemoteException {\n  if (spaceName == null)   throw new IllegalArgumentException(\"The spaceName parameter can not be null.\");\n  spaceName=spaceName.trim();\n  try {\n    ValidationUtils.checkServiceNameForValidation(spaceName,\"Space name\");\n  }\n catch (  InvalidServiceNameException exc) {\n    throw new CreateException(\"Invalid space name.\",new InvalidServiceNameException(exc.getMessage()));\n  }\n  final String fullSpaceName=JSpaceUtilities.createFullSpaceName(_containerName,spaceName);\n  System.setProperty(SystemProperties.DB_CONTAINER_NAME,_containerName);\n  System.setProperty(SystemProperties.DB_SPACE_NAME,spaceName);\n  SpaceImpl spaceImpl;\nsynchronized (_lock) {\n    if (!spaceName.equalsIgnoreCase(_containerName) && _containerEntry == null && _spaceName.equals(spaceName)) {\n      boolean isSpaceFileAreadyWasExists=new File(m_configDirectory + File.separator + spaceName+ \".xml\").exists();\n      try {\n        String schemaName=spaceAttr.getSchemaName();\n        if (schemaName != null) {\n          String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + Constants.Schemas.SCHEMAS_FOLDER+ \"/\"+ schemaName+ Constants.Schemas.SPACE_SCHEMA_FILE_SUFFIX;\n          InputStream schemaInputStream=ResourceLoader.getResourceStream(schemaFilePath);\n          if (schemaInputStream == null) {\n            String schemasFolderPath=Environment.createSchemasFolderIfNotExists();\n            String schemaFileFullPath=schemasFolderPath + File.separator + schemaName+ Constants.Schemas.SPACE_SCHEMA_FILE_SUFFIX;\n            spaceAttr.setProperty(Constants.SPACE_CONFIG_PREFIX + SCHEMA_ELEMENT,schemaName);\n            File schemaFile=new File(schemaFileFullPath);\n            SpaceConfigFactory.performSaveAs(schemaFile,spaceName,_containerName,spaceAttr);\n          }\n        }\n        createSpaceXML(spaceName,spaceAttr);\n        Properties spaceProperties=JProperties.getSpaceProperties(fullSpaceName);\n        if (spaceAttr.getClusterConfigURL() != null && !spaceAttr.getClusterConfigURL().equals(CLUSTER_CONFIG_URL_DEFAULT)) {\n          ClusterPolicy clusterPolicy=createClusterPolicy(spaceName,spaceAttr.getClusterConfigURL());\n          spaceAttr.setClustered(true);\n          spaceAttr.setClusterPolicy(clusterPolicy);\n          spaceProperties.put(fullSpaceName + \".\" + Constants.SPACE_CONFIG_PREFIX+ IS_CLUSTER_SPACE_PROP,String.valueOf(spaceAttr.isClustered()));\n          spaceProperties.put(fullSpaceName + \".\" + Constants.SPACE_CONFIG_PREFIX+ CLUSTER_CONFIG_URL_PROP,spaceAttr.getClusterConfigURL());\n          JProperties.setSpaceProperties(fullSpaceName,spaceProperties);\n        }\n        JSpaceAttributes attr=(JSpaceAttributes)spaceAttr.clone();\n        spaceImpl=createSpaceImpl(spaceName,attr);\n        _containerEntry=new ContainerEntry(spaceImpl,spaceAttr);\n        if (!Boolean.valueOf(spaceAttr.isPrivate()).booleanValue())         m_LookupMng.register(_containerEntry.getClusteredSpaceProxy(),_containerName);\n        try {\n          updateContainerXML();\n        }\n catch (        Exception ex) {\n          if (_logger.isLoggable(Level.WARNING))           _logger.log(Level.WARNING,\"Fail to update \" + _containerName + \" container XML\",ex);\n        }\n        if (isJMXEnabled())         com.j_spaces.jmx.JMXProvider.registerSpaceMBean(spaceName,spaceImpl);\n        if (spaceImpl.getClusterPolicy() != null)         return this.getClusteredSpace(spaceName);\n        return this.getSpace(spaceName);\n      }\n catch (      Exception ex) {\n        JProperties.removeSpaceProperties(fullSpaceName);\n        if (!isSpaceFileAreadyWasExists) {\n          File sf=new File(m_configDirectory + File.separator + spaceName+ \".xml\");\n          sf.delete();\n        }\n        if (_logger.isLoggable(Level.SEVERE))         _logger.log(Level.SEVERE,\"Failed to create <\" + spaceName + \"> space\",ex);\n        throw new CreateException(\"Failed to create <\" + spaceName + \"> space\",ex);\n      }\n    }\n else {\n      if (spaceName.equalsIgnoreCase(_containerName))       throw new CreateException(\"Could not create space <\" + spaceName + \"> since its name is the same name as container.\");\n      throw new CreateException(\"Space <\" + spaceName + \"> already exists in <\"+ _containerName+ \"> container.\");\n    }\n  }\n}\n", "nl": "Creates JSpace with unique space-name in this container and write the created space to appropriate Storage Adapter. If space already exists in this container <code>CreateException</code> will be throws. The created space will be registered with all discovered Lookup Services in the network. Created space will added to XML file."}
{"code": "public void write(short[] data){\n  for (  short unit : data) {\n    write(unit);\n  }\n}\n", "nl": "Writes the contents of the given array."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public ParMethodDecl fullCopy(){\n  ParMethodDecl tree=(ParMethodDecl)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "public Response<?> response(){\n  return response;\n}\n", "nl": "The full HTTP response. This may be null if the exception was serialized."}
{"code": "public ACQUAINT2DocumentSet(String sTACXMLFile){\n  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();\n  XMLDoc=null;\n  Categories=null;\n  hsDocs=null;\n  hmDocsToCategories=null;\n  try {\n    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();\n    XMLDoc=docBuilder.parse(new File(sTACXMLFile));\n  }\n catch (  ParserConfigurationException ex) {\n    System.err.println(\"Invalid XML file. Details:\");\n    ex.printStackTrace(System.err);\n  }\ncatch (  SAXException ex) {\n    System.err.println(\"Invalid XML file. Details:\");\n    ex.printStackTrace(System.err);\n  }\ncatch (  IOException ex) {\n    System.err.println(\"Could not read XML file. Cause:\");\n    ex.printStackTrace(System.err);\n  }\n  if (XMLDoc == null)   return;\n  hmDocsToCategories=new HashMap<String,String>();\n  XMLDoc.getDocumentElement().normalize();\n}\n", "nl": "Creates a new instance of TACDocumentSet, given a corresponding TAC08 formatted file."}
{"code": "final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){\n  final ListAdapter adapter=mAdapter;\n  if (adapter == null) {\n    return mListPadding.top + mListPadding.bottom;\n  }\n  int returnedHeight=mListPadding.top + mListPadding.bottom;\n  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;\n  int prevHeightWithoutPartialChild=0;\n  int i;\n  View child;\n  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;\n  final PLA_AbsListView.RecycleBin recycleBin=mRecycler;\n  final boolean recyle=recycleOnMeasure();\n  final boolean[] isScrap=mIsScrap;\n  for (i=startPosition; i <= endPosition; ++i) {\n    child=obtainView(i,isScrap);\n    measureScrapChild(child,i,widthMeasureSpec);\n    if (i > 0) {\n      returnedHeight+=dividerHeight;\n    }\n    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {\n      recycleBin.addScrapView(child);\n    }\n    returnedHeight+=child.getMeasuredHeight();\n    if (returnedHeight >= maxHeight) {\n      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;\n    }\n    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n      prevHeightWithoutPartialChild=returnedHeight;\n    }\n  }\n  return returnedHeight;\n}\n", "nl": "Measures the height of the given range of children (inclusive) and returns the height with this ListView's padding and divider heights included. If maxHeight is provided, the measuring will stop when the current height reaches maxHeight."}
{"code": "public void addSoundEvent(State event,int resId){\n  mSoundMap.put(event,resId);\n}\n", "nl": "Set the Sounds to be played when a Pull Event happens. You specify which sound plays for which events by calling this method multiple times for each event. <p/> If you've already set a sound for a certain event, and add another sound for that event, only the new sound will be played."}
{"code": "public boolean hasBuildFile(@NotNull String moduleGradlePath){\n  Module module=GradleUtil.findModuleByGradlePath(myProject,moduleGradlePath);\n  if (module == null) {\n    return false;\n  }\n  VirtualFile gradleBuildFile=GradleUtil.getGradleBuildFile(module);\n  return gradleBuildFile != null && gradleBuildFile.exists();\n}\n", "nl": "Returns true if there exists a build.gradle file for a module identified by the given module path."}
{"code": "public void startScroll(int startX,int startY,int dx,int dy){\n  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);\n}\n", "nl": "Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration."}
{"code": "public void addLocations(Collection<PBLocation> locations){\n  l_locations.addAll(locations);\n}\n", "nl": "Adds the specific collection of locations to this argument."}
{"code": "public boolean isKnownRepository(String location,boolean requireExactMatch){\n  Set<String> keys=repositories.keySet();\n  for (  String checkLocation : keys) {\n    if (!requireExactMatch && location.indexOf(checkLocation) != -1) {\n      return true;\n    }\n    if (location.equals(checkLocation))     return true;\n  }\n  return false;\n}\n", "nl": "Answer whether the provided repository location is known by the provider or not. The location string corresponds to the Strin returned by ISVNRepositoryLocation#getLocation()"}
{"code": "@Override public void deleteItem(Long id){\n  alarmMapper.deleteAlarm(id);\n}\n", "nl": "The Alarm implementation of this method also sets the JMS topic name for distribution to the client. TODO used for LASER or TIM publication?"}
{"code": "public static boolean isEqual(Double d1,Double d2){\n  if (d1 == null || d2 == null) {\n    return false;\n  }\n  return Math.abs(d1 - d2) < TOLERANCE;\n}\n", "nl": "Tests whether the two decimal numbers are equal with a tolerance of 0.01. If one or both of the numbers are null, false is returned."}
{"code": "public long timeSinceLast(){\n  long currentTime=System.currentTimeMillis();\n  return currentTime - lastMessageTime;\n}\n", "nl": "Returns the number of milliseconds since the last time timerString was called"}
{"code": "protected void updateDegrees(int e,int incr){\n  if (!getEdgeTable().isValidRow(e))   return;\n  int s=getSourceNode(e);\n  int t=getTargetNode(e);\n  if (s < 0 || t < 0)   return;\n  updateDegrees(e,s,t,incr);\n  if (incr < 0) {\n    m_edgeTuples.invalidate(e);\n  }\n}\n", "nl": "Internal method for updating the linkage of this graph."}
{"code": "protected AdsGetFloodStatsQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID."}
{"code": "private void initializeValues(){\n  IDialogSettings settings=getDialogSettings();\n  if (settings != null) {\n    String[] hostNames=settings.getArray(STORE_URL_ID);\n    if (hostNames != null) {\n      for (int i=0; i < hostNames.length; i++) {\n        urlCombo.add(hostNames[i]);\n      }\n    }\n    if (showCredentials) {\n      String[] userNames=settings.getArray(STORE_USERNAME_ID);\n      if (userNames != null) {\n        for (int i=0; i < userNames.length; i++) {\n          userCombo.add(userNames[i]);\n        }\n      }\n    }\n  }\n  if (properties != null) {\n    if (showCredentials) {\n      String user=properties.getProperty(\"user\");\n      if (user != null) {\n        userCombo.setText(user);\n      }\n      String password=properties.getProperty(\"password\");\n      if (password != null) {\n        passwordText.setText(password);\n      }\n    }\n    String host=properties.getProperty(\"url\");\n    if (host != null) {\n      urlCombo.setText(host);\n    }\n  }\n}\n", "nl": "Initializes states of the controls."}
{"code": "private void generatePatternBitmap(){\n  if (getBounds().width() <= 0 || getBounds().height() <= 0)   return;\n  mBitmap=Util.allocateBitmap(getBounds().width(),getBounds().height());\n  if (mBitmap == null)   return;\n  Canvas canvas=new Canvas(mBitmap);\n  Rect r=new Rect();\n  boolean verticalStartWhite=true;\n  for (int i=0; i <= numRectanglesVertical; i++) {\n    boolean isWhite=verticalStartWhite;\n    for (int j=0; j <= numRectanglesHorizontal; j++) {\n      r.top=i * mRectangleSize;\n      r.left=j * mRectangleSize;\n      r.bottom=r.top + mRectangleSize;\n      r.right=r.left + mRectangleSize;\n      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);\n      isWhite=!isWhite;\n    }\n    verticalStartWhite=!verticalStartWhite;\n  }\n}\n", "nl": "This will generate a bitmap with the pattern as big as the rectangle we were allow to draw on. We do this to cache the bitmap so we don't need to recreate it each time draw() is called since it takes a few milliseconds."}
{"code": "public Pair<String,String> next(){\n  currentHeaderPosition=nextHeaderPosition;\n  Pair<String,String> result=new Pair<>(nextHeader,nextSequence);\n  nextHeader=nextNextHeader;\n  nextHeaderPosition=nextNextHeaderPosition;\n  nextSequence=null;\n  nextNextHeader=null;\n  if (nextHeader != null) {\n    String aLine;\n    try {\n      while ((aLine=r.readLine()) != null) {\n        if (aLine.startsWith(\">\")) {\n          nextNextHeader=aLine;\n          nextNextHeaderPosition=position;\n          position+=aLine.length() + endOfLineBytes;\n          break;\n        }\n else {\n          position+=aLine.length() + endOfLineBytes;\n          parts.add(aLine);\n        }\n      }\n      numberOfSequencesRead++;\n    }\n catch (    IOException e) {\n      Basic.caught(e);\n    }\n    nextSequence=Basic.concatenateAndRemoveWhiteSpaces(parts);\n    parts.clear();\n  }\n else   try {\n    close();\n  }\n catch (  IOException ex) {\n    Basic.caught(ex);\n  }\n  return result;\n}\n", "nl": "gets next fastA record"}
{"code": "@deprecated public static int compare(CharSequence a,CharSequence b){\n  int alength=a.length();\n  int blength=b.length();\n  int min=alength <= blength ? alength : blength;\n  for (int i=0; i < min; i++) {\n    int diff=a.charAt(i) - b.charAt(i);\n    if (diff != 0) {\n      return diff;\n    }\n  }\n  return alength - blength;\n}\n", "nl": "/*    "}
{"code": "public long lowestOnBit(){\n  return id & -id;\n}\n", "nl": "Return the lowest-numbered bit that is on for cells at the given level."}
{"code": "public static int readLTriad(byte[] bytes){\n  return (bytes[0] & 0xFF) | ((bytes[1] & 0xFF) << 8) | ((bytes[2] & 0x0F) << 16);\n}\n", "nl": "Reads a 3-byte little-endian number"}
{"code": "static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {\n  StringBuilder sb=new StringBuilder(msg.length());\n  if (encoding == null) {\n    encoding=DEFAULT_ENCODING;\n  }\n else   if (!DEFAULT_ENCODING.equals(encoding)) {\n    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());\n    if (eci != null) {\n      encodingECI(eci.getValue(),sb);\n    }\n  }\n  int len=msg.length();\n  int p=0;\n  int textSubMode=SUBMODE_ALPHA;\n  if (compaction == Compaction.TEXT) {\n    encodeText(msg,p,len,sb,textSubMode);\n  }\n else   if (compaction == Compaction.BYTE) {\n    byte[] bytes=msg.getBytes(encoding);\n    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);\n  }\n else   if (compaction == Compaction.NUMERIC) {\n    sb.append((char)LATCH_TO_NUMERIC);\n    encodeNumeric(msg,p,len,sb);\n  }\n else {\n    int encodingMode=TEXT_COMPACTION;\n    while (p < len) {\n      int n=determineConsecutiveDigitCount(msg,p);\n      if (n >= 13) {\n        sb.append((char)LATCH_TO_NUMERIC);\n        encodingMode=NUMERIC_COMPACTION;\n        textSubMode=SUBMODE_ALPHA;\n        encodeNumeric(msg,p,n,sb);\n        p+=n;\n      }\n else {\n        int t=determineConsecutiveTextCount(msg,p);\n        if (t >= 5 || n == len) {\n          if (encodingMode != TEXT_COMPACTION) {\n            sb.append((char)LATCH_TO_TEXT);\n            encodingMode=TEXT_COMPACTION;\n            textSubMode=SUBMODE_ALPHA;\n          }\n          textSubMode=encodeText(msg,p,t,sb,textSubMode);\n          p+=t;\n        }\n else {\n          int b=determineConsecutiveBinaryCount(msg,p,encoding);\n          if (b == 0) {\n            b=1;\n          }\n          byte[] bytes=msg.substring(p,p + b).getBytes(encoding);\n          if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {\n            encodeBinary(bytes,0,1,TEXT_COMPACTION,sb);\n          }\n else {\n            encodeBinary(bytes,0,bytes.length,encodingMode,sb);\n            encodingMode=BYTE_COMPACTION;\n            textSubMode=SUBMODE_ALPHA;\n          }\n          p+=b;\n        }\n      }\n    }\n  }\n  return sb.toString();\n}\n", "nl": "Performs high-level encoding of a PDF417 message using the algorithm described in annex P of ISO/IEC 15438:2001(E). If byte compaction has been selected, then only byte compaction is used."}
{"code": "public Builder name(String name){\n  this.name=name;\n  return this;\n}\n", "nl": "Set the name of this scheduler. It would be used as part of stats scope and thread name."}
{"code": "public void toString(StringBuffer sb){\n  sb.append(getID());\n}\n", "nl": "Parser debug printout."}
{"code": "@OPTIONS public Response preflightResponse(){\n  return Response.ok().build();\n}\n", "nl": "Responds to the OPTIONS preflight request."}
{"code": "public void testRetrieveVirtualFieldWithoutSort() throws Exception {\n  deleteAllDocs();\n  send(\"addDocument\",\"{fields: {id: 0, boost: 1.0}}\");\n  send(\"addDocument\",\"{fields: {id: 1, boost: 2.0}}\");\n  send(\"search\",\"{query: MatchAllDocsQuery, sort: {fields: [{field: id, reverse: true}]}, retrieveFields: [id, logboost]}\");\n  assertEquals(2,getInt(\"totalHits\"));\n  assertEquals(1,getInt(\"hits[0].fields.id\"));\n  assertEquals(0,getInt(\"hits[1].fields.id\"));\n  assertEquals(.6931f,getFloat(\"hits[0].fields.logboost\"),.0001f);\n  assertEquals(0.0f,getFloat(\"hits[1].fields.logboost\"),.0001f);\n}\n", "nl": "Don't sort by virtual field, and ask for its value"}
{"code": "private void finalizeDrawables(Array<DrawableData> backup,Array<FileHandle> filesToProcess){\n  for (  FileHandle file : filesToProcess) {\n    DrawableData data=new DrawableData(file);\n    if (!checkIfNameExists(data.name)) {\n      AtlasData.getInstance().getDrawables().add(data);\n    }\n  }\n  gatherDrawables();\n  Main.instance.showDialogLoading(null);\n}\n", "nl": "Adds the drawables to the project."}
{"code": "private boolean mustUpdateCoordinates(){\n  boolean mustUpdate=(dataMatrix.size() == 0);\n  if (previousTranspose != isTranspose()) {\n    mustUpdate=true;\n  }\n  if (scalingType != ChartViewer.ScalingType.LINEAR)   return mustUpdate;\n  if (previousTranspose != isTranspose()) {\n    previousTranspose=isTranspose();\n    previousClusterAttributes=false;\n    previousClusterClasses=false;\n  }\n{\n    final ArrayList<String> currentClasses=new ArrayList<>();\n    currentClasses.addAll(getChartData().getClassNames());\n    if (!previousClasses.equals(currentClasses)) {\n      mustUpdate=true;\n      previousClasses.clear();\n      previousClasses.addAll(currentClasses);\n    }\n  }\n{\n    final ArrayList<String> currentSamples=new ArrayList<>();\n    currentSamples.addAll(getChartData().getSeriesNames());\n    if (!previousSamples.equals(currentSamples)) {\n      mustUpdate=true;\n      previousSamples.clear();\n      previousSamples.addAll(currentSamples);\n    }\n  }\n{\n    final Set<String> currentAttributes=new HashSet<>();\n    currentAttributes.addAll(getViewer().getAttributesList().getEnabledLabels());\n    if (!previousAttributes.equals(currentAttributes)) {\n      mustUpdate=true;\n      previousAttributes.clear();\n      previousAttributes.addAll(currentAttributes);\n    }\n  }\n{\n    if (!previousClusterClasses && viewer.getClassesList().isDoClustering())     mustUpdate=true;\n  }\n{\n    if (!previousClusterAttributes && viewer.getAttributesList().isDoClustering())     mustUpdate=true;\n  }\n  if (!mustUpdate) {\n    final Set<String> currentAttributes=new HashSet<>();\n    currentAttributes.addAll(getViewer().getAttributesList().getAllLabels());\n    if (!currentAttributes.equals(viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes())) {\n      viewer.getAttributesList().sync(viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(),null,false);\n      mustUpdate=true;\n    }\n  }\n  return mustUpdate;\n}\n", "nl": "do we need to recompute coordinates?"}
{"code": "public void moveFile(String file){\n  File f=new File(this.tempFile);\n  if (!file.startsWith(\"/\")) {\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n      file=Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;\n    }\n else {\n      file=\"/data/data/\" + handler.cordova.getActivity().getPackageName() + \"/cache/\"+ file;\n    }\n  }\n  String logMsg=\"renaming \" + this.tempFile + \" to \"+ file;\n  Log.d(LOG_TAG,logMsg);\n  if (!f.renameTo(new File(file)))   Log.e(LOG_TAG,\"FAILED \" + logMsg);\n}\n", "nl": "Save temporary recorded file to specified name"}
{"code": "public static char parseNextCharacter(final String source,final ParsePosition pos){\n  int index=pos.getIndex();\n  final int n=source.length();\n  char ret=0;\n  if (index < n) {\n    char c;\n    do {\n      c=source.charAt(index++);\n    }\n while (Character.isWhitespace(c) && index < n);\n    pos.setIndex(index);\n    if (index < n) {\n      ret=c;\n    }\n  }\n  return ret;\n}\n", "nl": "Parses <code>source</code> until a non-whitespace character is found."}
{"code": "public CounterMovingAverage(){\n  this(DEFAULT_NUMBER_OFCOUNTERS);\n}\n", "nl": "Creates a new CounterMovingAverage with a default number of counters."}
{"code": "public boolean removeHouseFromAuction(House house,boolean noSale){\n  if (house.getStatus() != HouseStatus.SELL_WAIT) {\n    return false;\n  }\n  HouseBidEntry bidEntry=null;\n  HouseBidEntry playerBid=null;\n  Integer lastPlayer=null;\nsynchronized (houseBids) {\n    bidEntry=houseBids.remove(house.getObjectId());\n    if (bidEntry == null) {\n      return false;\n    }\n    lastPlayer=bidEntry.getLastBiddingPlayer();\n    playerBid=playerBids.remove(lastPlayer);\n  }\nsynchronized (bidsByIndex) {\n    bidsByIndex.remove(bidEntry.getEntryIndex());\n  }\n  PlayerCommonData pcd=null;\n  if (house.getOwnerId() != 0) {\n    if (house.isInGracePeriod()) {\n      house.setSellStarted(null);\n    }\n    pcd=getPlayerData(house.getOwnerId());\n    MailFormatter.sendHouseAuctionMail(house,pcd,AuctionResult.CANCELED_BID,System.currentTimeMillis(),bidEntry.getBidPrice() + bidEntry.getRefundKinah());\n    house.setStatus(HouseStatus.ACTIVE);\n  }\n else {\n    house.setStatus(noSale ? HouseStatus.NOSALE : HouseStatus.ACTIVE);\n  }\n  if (lastPlayer != null) {\n    pcd=getPlayerData(lastPlayer);\n    MailFormatter.sendHouseAuctionMail(house,pcd,AuctionResult.CANCELED_BID,System.currentTimeMillis(),playerBid.getBidPrice());\n  }\n  DAOManager.getDAO(HouseBidsDAO.class).deleteHouseBids(house.getObjectId());\n  house.save();\n  return true;\n}\n", "nl": "Remove house from auction. Currently from admin command, both for player and non-player houses. Returns kinah for the selling player and the last bidder if such exist"}
{"code": "public static S2Cap empty(){\n  return new S2Cap(new S2Point(1,0,0),-1);\n}\n", "nl": "Return an empty cap, i.e. a cap that contains no points."}
{"code": "private void checkTreeMLSchema(Schema s) throws DataIOException {\n  for (int i=0; i < s.getColumnCount(); ++i) {\n    Class type=s.getColumnType(i);\n    if (TYPES.get(type) == null) {\n      throw new DataIOException(\"Data type unsupported by the \" + \"TreeML format: \" + type.getName());\n    }\n  }\n}\n", "nl": "Checks if all Schema types are compatible with the TreeML specification. The TreeML spec only allows the types <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>boolean</code>, <code>string</code>, and <code>date</code>."}
{"code": "public void run(){\n  double MQE=0.99d * Double.MAX_VALUE;\n  double oldMQE=Double.MAX_VALUE;\n  double minDistance;\n  int clusterIndex=0;\n  Matrix curPoint;\n  int i=0;\n  while (MQE < oldMQE && i < maxIterations) {\n    oldMQE=MQE;\n    MQE=0;\n    if (i != 0) {\n      for (int n=0; n < numberClusters; n++)       clusters[n].reset(clusters[n].getMeanOfElements());\n    }\n    for (int k=0; k < data.size(); k++) {\n      curPoint=data.get(k);\n      minDistance=Double.MAX_VALUE;\n      for (int j=0; j < numberClusters; j++) {\n        double d=clusters[j].getDistanceFromCenter(curPoint);\n        if (d < minDistance) {\n          minDistance=d;\n          clusterIndex=j;\n        }\n      }\n      MQE+=minDistance;\n      clusters[clusterIndex].add(curPoint);\n    }\n    i++;\n  }\n  createFullCovarianceMatrices();\n  existsClustering=true;\n}\n", "nl": "Starts the k-mean clustering algorithm. The cluster centers are recomputed till the mean quanisation error(MQE) stops decreasing."}
{"code": "public static Map<String,Object> addRoleType(DispatchContext ctx,Map<String,? extends Object> context){\n  Map<String,Object> result=new HashMap<String,Object>();\n  Delegator delegator=ctx.getDelegator();\n  String orderId=(String)context.get(\"orderId\");\n  String partyId=(String)context.get(\"partyId\");\n  String roleTypeId=(String)context.get(\"roleTypeId\");\n  Boolean removeOld=(Boolean)context.get(\"removeOld\");\n  if (removeOld != null && removeOld.booleanValue()) {\n    try {\n      delegator.removeByAnd(\"OrderRole\",UtilMisc.toMap(\"orderId\",orderId,\"roleTypeId\",roleTypeId));\n    }\n catch (    GenericEntityException e) {\n      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);\n      result.put(ModelService.ERROR_MESSAGE,\"ERROR: Could not remove old roles (\" + e.getMessage() + \").\");\n      return result;\n    }\n  }\n  Map<String,String> fields=UtilMisc.<String,String>toMap(\"orderId\",orderId,\"partyId\",partyId,\"roleTypeId\",roleTypeId);\n  try {\n    GenericValue testValue=EntityQuery.use(delegator).from(\"OrderRole\").where(fields).queryOne();\n    if (testValue != null) {\n      ServiceUtil.returnSuccess();\n    }\n else {\n      GenericValue value=delegator.makeValue(\"OrderRole\",fields);\n      delegator.create(value);\n    }\n  }\n catch (  GenericEntityException e) {\n    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);\n    result.put(ModelService.ERROR_MESSAGE,\"ERROR: Could not add role to order (\" + e.getMessage() + \").\");\n    return result;\n  }\n  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);\n  return result;\n}\n", "nl": "Service to add a role type to an order"}
{"code": "private String makeOTP(){\n  StringBuilder stringBuilder=new StringBuilder();\n  stringBuilder.append(mOtpOneField.getText().toString());\n  stringBuilder.append(mOtpTwoField.getText().toString());\n  stringBuilder.append(mOtpThreeField.getText().toString());\n  stringBuilder.append(mOtpFourField.getText().toString());\n  return stringBuilder.toString();\n}\n", "nl": "Get an instance of the present otp"}
{"code": "public void toggle(){\n  toggle(false,null,null);\n}\n", "nl": "Toggle the badge visibility in the UI."}
{"code": "public String toString(){\n  StringBuilder strBuf=new StringBuilder();\n  Iterator<E> it=iterator();\n  boolean b=false;\n  strBuf.append(\"[\");\n  while (it.hasNext()) {\n    if (!b)     b=true;\n else     strBuf.append(\", \");\n    strBuf.append(it.next().toString());\n  }\n  strBuf.append(\"]\");\n  return strBuf.toString();\n}\n", "nl": "Returns a textual representation of the contents of this Chain."}
{"code": "private void bookmark(){\n  Bookmarks.init(context);\n  if (Bookmarks.bookmark(item.getId())) {\n    Utils.showSnackBar(context,Utils.colorVariant(color,1.07f),R.id.coordinatorLayout,R.string.bookmarkedPlace,Snackbar.LENGTH_LONG);\n    menuToolbar.findItem(R.id.bookmark).setIcon(new IconicsDrawable(this,GoogleMaterial.Icon.gmd_bookmark).paddingDp(1).color(Color.WHITE).sizeDp(24));\n  }\n else {\n    Utils.showSnackBar(context,Utils.colorVariant(color,1.07f),R.id.coordinatorLayout,R.string.removedPlace,Snackbar.LENGTH_LONG);\n    menuToolbar.findItem(R.id.bookmark).setIcon(new IconicsDrawable(this,GoogleMaterial.Icon.gmd_bookmark_border).paddingDp(1).color(Color.WHITE).sizeDp(24));\n  }\n  FragmentBookmarks.loadBookmarks(context);\n  Inquiry.deinit();\n}\n", "nl": "Bookmark the respective Place. Drawable transition between the bookmark states."}
{"code": "public Record deleteRecord(RecordID rid) throws DatabaseException {\n  return null;\n}\n", "nl": "Deletes the record specified by rid from the table. Make sure to update this.stats, this.freePages, and this.numRecords as necessary."}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public ParExpr fullCopy(){\n  ParExpr tree=(ParExpr)copy();\n  if (children != null) {\n    for (int i=0; i < children.length; ++i) {\n      ASTNode child=(ASTNode)children[i];\n      if (child != null) {\n        child=child.fullCopy();\n        tree.setChild(child,i);\n      }\n    }\n  }\n  return tree;\n}\n", "nl": "Create a deep copy of the AST subtree at this node. The copy is dangling, i.e. has no parent."}
{"code": "void findSubmodules(Console console) throws RepoException {\n  addBackSubmodules=new ArrayList<>();\n  String submoduleStatus=repo.simpleCommand(\"submodule\",\"status\").getStdout();\n  for (  String line : Splitter.on('\\n').omitEmptyStrings().split(submoduleStatus)) {\n    String submoduleName=line.replaceFirst(\"^-[0-9a-f]{40} \",\"\");\n    if (submoduleName.equals(line)) {\n      console.warn(\"Cannot parse line from 'git submodule status': \" + line);\n      continue;\n    }\n    if (!destinationFiles.matches(repo.getWorkTree().resolve(submoduleName))) {\n      addBackSubmodules.add(submoduleName);\n    }\n  }\n}\n", "nl": "Finds and records the path of all submodules. This should be called when they are not staged for deletion."}
{"code": "private String printGFormat(double x){\n  String sx, sy, sz, ret;\n  int savePrecision=precision;\n  int i;\n  char[] ca4, ca5;\n  boolean noDigits=false;\n  if (Double.isInfinite(x)) {\n    if (x == Double.POSITIVE_INFINITY) {\n      if (leadingSign)       ca4=\"+Inf\".toCharArray();\n else       if (leadingSpace)       ca4=\" Inf\".toCharArray();\n else       ca4=\"Inf\".toCharArray();\n    }\n else     ca4=\"-Inf\".toCharArray();\n    noDigits=true;\n  }\n else   if (Double.isNaN(x)) {\n    if (leadingSign)     ca4=\"+NaN\".toCharArray();\n else     if (leadingSpace)     ca4=\" NaN\".toCharArray();\n else     ca4=\"NaN\".toCharArray();\n    noDigits=true;\n  }\n else {\n    if (!precisionSet)     precision=defaultDigits;\n    if (precision == 0)     precision=1;\n    int ePos=-1;\n    if (conversionCharacter == 'g') {\n      sx=eFormatString(x,'e').trim();\n      ePos=sx.indexOf('e');\n    }\n else {\n      sx=eFormatString(x,'E').trim();\n      ePos=sx.indexOf('E');\n    }\n    i=ePos + 1;\n    int expon=0;\n    if (sx.charAt(i) == '-') {\n      for (++i; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;\n      if (i < sx.length())       expon=-Integer.parseInt(sx.substring(i));\n    }\n else {\n      if (sx.charAt(i) == '+')       ++i;\n      for (; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;\n      if (i < sx.length())       expon=Integer.parseInt(sx.substring(i));\n    }\n    if (!alternateForm) {\n      if (expon >= -4 && expon < precision)       sy=fFormatString(x).trim();\n else       sy=sx.substring(0,ePos);\n      i=sy.length() - 1;\n      for (; i >= 0; i--)       if (sy.charAt(i) != '0')       break;\n      if (i >= 0 && sy.charAt(i) == '.')       i--;\n      if (i == -1)       sz=\"0\";\n else       if (!Character.isDigit(sy.charAt(i)))       sz=sy.substring(0,i + 1) + \"0\";\n else       sz=sy.substring(0,i + 1);\n      if (expon >= -4 && expon < precision)       ret=sz;\n else       ret=sz + sx.substring(ePos);\n    }\n else {\n      if (expon >= -4 && expon < precision)       ret=fFormatString(x).trim();\n else       ret=sx;\n    }\n    if (leadingSpace)     if (x >= 0)     ret=\" \" + ret;\n    ca4=ret.toCharArray();\n  }\n  ca5=applyFloatPadding(ca4,false);\n  precision=savePrecision;\n  return new String(ca5);\n}\n", "nl": "Format method for the g conversion character. <p/> For g format, the flag character '-', means that the output should be left justified within the field.  The default is to pad with blanks on the left.  '+' character means that the conversion will always begin with a sign (+ or -).  The blank flag character means that a non-negative input will be preceded with a blank.  If both a '+' and a ' ' are specified, the blank flag is ignored.  The '0' flag character implies that padding to the field width will be done with zeros instead of blanks. <p/> The field width is treated as the minimum number of characters to be printed.  The default is to add no padding.  Padding is with blanks by default. <p/> The precision, if set, is the minimum number of digits to appear after the radix character. Padding is with trailing 0s."}
{"code": "public DocsSaveQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Document title."}
{"code": "public void initialize(MediaRouteController controller){\n  setRouteSelector(controller.buildMediaRouteSelector());\n  setDialogFactory(new ChromeMediaRouteDialogFactory());\n}\n", "nl": "Set the necessary state for the button to work"}
{"code": "public AppsGetFriendsListQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Additional profile fields, see description."}
{"code": "public static void printUsage(){\n  System.out.println(\"Usage: \" + grammarAndContentAnalysis.class.getName() + \"[-corpusDir=dir\"+ System.getProperty(\"file.separator\")+ \"] The base directory\"+ \" of the corpus including the directory separator character.\\n\"+ \"[-categoriesForGrammar=#] \\t The number of categories to use for grammar extraction. Default is 2.\\n\"+ \" -trainPercent=#.## \\t The training percent to use for the grammar. Default is 0.66.\\n\"+ \" -minNGram=# \\t The min n-gram rank. Default is 3.\\n\"+ \" -maxNGram=# \\t The max n-gram rank. Default is 8.\\n\"+ \" -partOfCorpus=#.## \\t The percent of corpus to use for all \"+ \" experiments.\\n\"+ \" -windowSize=# \\t The neighbourhood window. Default is max(2*minNGram, maxNGram+1).\\n\"+ \" -cache \\t If selected will cache category graphs in memory. NOTE: Very memory consuming.\");\n}\n", "nl": "Provides command-line syntax information for calling the class."}
{"code": "public void remove(String key){\n  preferences.edit().remove(key).apply();\n}\n", "nl": "Remove SharedPreferences item with 'key'"}
{"code": "static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {\n  try {\n    Class providerClass=findProviderClass(className,cl,doFallback);\n    Object instance=providerClass.newInstance();\n    if (DEBUG)     debugPrintln(\"created new instance of \" + providerClass + \" using ClassLoader: \"+ cl);\n    return instance;\n  }\n catch (  ClassNotFoundException x) {\n    throw new ConfigurationError(\"Provider \" + className + \" not found\",x);\n  }\ncatch (  Exception x) {\n    throw new ConfigurationError(\"Provider \" + className + \" could not be instantiated: \"+ x,x);\n  }\n}\n", "nl": "Create an instance of a class using the specified ClassLoader"}
{"code": "@Override public double nextDouble(){\n  return randomGenerator.nextDouble();\n}\n", "nl": "Returns the next pseudorandom, uniformly distributed <code>double</code> value between <code>0.0</code> and <code>1.0</code> from this random number generator's sequence."}
{"code": "public boolean matchStringConstant(){\n  return '\\'' == (char)tok.ttype;\n}\n", "nl": "Returns true if the current token is a string."}
{"code": "public AdsUpdateAdsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.updateAds\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public BoardGetCommentsQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of comments."}
{"code": "@Override public void onRequestSingleCollectionSuccess(Call<Collection> call,Response<Collection> response){\n  if (response.isSuccessful() && response.body() != null) {\n    Mysplash.getInstance().setCollection(response.body());\n    view.dismissRequestDialog();\n    view.drawBrowsableView();\n  }\n else {\n    requestCollection();\n  }\n}\n", "nl": "<br> listener."}
{"code": "Collection<? extends ClientRequestResult> handleExecuteCommandRequest(final ClientRequest executeCommandRequest){\n  final Collection<CommandReport> commandReports=new ArrayList<CommandReport>(1);\n  commandReports.add(commandExecutionManager.execute((CommandExecuteRequest<?>)executeCommandRequest.getObjectParameter()));\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Finished executing command - returning report.\");\n  }\n  return commandReports;\n}\n", "nl": "Inner method which handles the Execute Command Request"}
{"code": "public UnknownTransactionException(){\n  super();\n}\n", "nl": "Constructs an instance with no detail message."}
{"code": "public BoundingVolume merge(BoundingVolume volume){\n  if (volume == null) {\n    return this;\n  }\nswitch (volume.getType()) {\ncase AABB:\n{\n      BoundingBox vBox=(BoundingBox)volume;\n      return merge(vBox.center,vBox.xExtent,vBox.yExtent,vBox.zExtent,new BoundingBox(new Vector3f(0,0,0),0,0,0));\n    }\ndefault :\n  return null;\n}\n}\n", "nl": "<code>merge</code> combines this sphere with a second bounding sphere. This new sphere contains both bounding spheres and is returned."}
{"code": "public boolean contains(Object o){\n  if (o == null)   return false;\n  return map.containsKey(o);\n}\n", "nl": "Returns <tt>true</tt> if this set contains the specified element."}
{"code": "public static FilteredDataTagValueUpdate fromXML(final Element domElement){\n  FilteredDataTagValueUpdate result=new FilteredDataTagValueUpdate();\n  if (domElement.getNodeName().equals(XML_ROOT_ELEMENT)) {\n    try {\n      result.processId=Long.valueOf(domElement.getAttribute(XML_ATTRIBUTE_PROCESS_ID));\n      if (result.processId != null) {\n        Node fieldNode=null;\n        NodeList fields=domElement.getChildNodes();\n        int fieldsCount=fields.getLength();\n        result.values=new ArrayList<>(fieldsCount);\n        for (int i=0; i < fieldsCount; i++) {\n          fieldNode=fields.item(i);\n          if (fieldNode.getNodeType() == Node.ELEMENT_NODE && fieldNode.getNodeName().equals(FilteredDataTagValue.XML_ROOT_ELEMENT)) {\n            result.values.add(FilteredDataTagValue.fromXML((Element)fieldNode));\n          }\n        }\n      }\n    }\n catch (    NumberFormatException nfe) {\n      result=null;\n      log.error(\"Cannot extract valid process-id from FilteredDataTagValueUpdate message. Returning null.\");\n    }\n  }\n else {\n    result=null;\n    log.error(\"Cannot decode FilteredDataTagValueUpdate message. Root element is not <FilteredDataTagValueUpdate>\");\n  }\n  return result;\n}\n", "nl": "Gets the object from it's XML encoded form."}
{"code": "public WriteModifiers(WriteModifiers modifiers1,WriteModifiers modifiers2,WriteModifiers modifiers3){\n  super(modifiers1,modifiers2,modifiers3);\n}\n", "nl": "Creates a new modifiers from the specified modifiers."}
{"code": "public static int floorDiv(final int a,final int b) throws MathRuntimeException {\n  if (b == 0) {\n    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);\n  }\n  final int m=a % b;\n  if ((a ^ b) >= 0 || m == 0) {\n    return a / b;\n  }\n else {\n    return (a / b) - 1;\n  }\n}\n", "nl": "Finds q such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0. <p> This methods returns the same value as integer division when a and b are same signs, but returns a different value when they are opposite (i.e. q is negative)."}
{"code": "private Object readResolve(){\n  wakeUpQueue=new ArrayBlockingQueue<SerialMessage>(MAX_BUFFFER_SIZE,true);\n  timer=new Timer();\n  return this;\n}\n", "nl": "Resolves uninitialized fields after XML Deserialization."}
{"code": "public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {\n  FileOutputStream out=null;\n  try {\n    out=openOutputStream(file,append);\n    final BufferedOutputStream buffer=new BufferedOutputStream(out);\n    IOUtils.writeLines(lines,lineEnding,buffer,encoding);\n    buffer.flush();\n    out.close();\n  }\n  finally {\n    IOUtils.closeQuietly(out);\n  }\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The specified character encoding and the line ending will be used."}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"java.lang.Object invoke(java.lang.Object,java.lang.Object[])\")) {\n    java_lang_reflect_Method_invoke(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures."}
{"code": "public void info(String message){\n  addLogEntry(new InfoEntry(message));\n}\n", "nl": "Stores the info entry."}
{"code": "public SemiVariance withBiasCorrected(boolean isBiasCorrected){\n  return new SemiVariance(isBiasCorrected,this.varianceDirection);\n}\n", "nl": "Returns a copy of this instance with the given biasCorrected setting."}
{"code": "public XmlMerger(File source,File target,File baseDir){\n  this.baseDir=baseDir;\n  this.sourceFile=source;\n  this.destFile=target;\n  this.metaDataFile=new File(target.getParent(),target.getName() + \".properties\");\n}\n", "nl": "Create new instance of <tt>XmlMerger </tt>"}
{"code": "public DelegateFileFilter(FilenameFilter filter){\n  if (filter == null) {\n    throw new IllegalArgumentException(\"The FilenameFilter must not be null\");\n  }\n  this.filenameFilter=filter;\n  this.fileFilter=null;\n}\n", "nl": "Constructs a delegate file filter around an existing FilenameFilter."}
{"code": "public RegisterEntriesListenerSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private static ImmutableList<Option<?>> buildFrameworkOptions(){\n  ImmutableList.Builder<Option<?>> frameworkOptions=new ImmutableList.Builder<Option<?>>();\n  frameworkOptions.add(ToolOptions.DESCRIPTOR_SET);\n  frameworkOptions.add(ToolOptions.CONFIG_FILES);\n  frameworkOptions.add(ConfigGeneratorDriver.BIN_OUT);\n  frameworkOptions.add(ConfigGeneratorDriver.TXT_OUT);\n  frameworkOptions.add(ConfigGeneratorDriver.JSON_OUT);\n  frameworkOptions.add(ConfigGeneratorFromProtoDescriptor.SUPPRESS_WARNINGS);\n  frameworkOptions.add(SwaggerImportTool.OPEN_API);\n  frameworkOptions.add(SwaggerImportTool.SERVICE_NAME);\n  frameworkOptions.add(SwaggerImportTool.METHOD_NAMESPACE);\n  frameworkOptions.add(SwaggerImportTool.TYPE_NAMESPACE);\n  return frameworkOptions.build();\n}\n", "nl": "Add all options that will be accepted on the command line."}
{"code": "private void read(InputStream in) throws IOException {\n  BufferedReader br=new BufferedReader(new InputStreamReader(in,\"UTF8\"));\n  String line=null;\n  String name=null;\n  Boolean preference=null;\n  isEmpty=true;\n  completeNamePrefs=new HashMap(53);\n  packagePrefs=new HashMap(23);\n  namespacePrefs=new HashMap(11);\n  if ((line=readLineTrimComments(br)) != null) {\n    if (!line.startsWith(HEADER_TITLE)) {\n      throw new IOException(\"unsupported preferred list header: \" + line);\n    }\n else {\n      String version=line.substring(HEADER_TITLE.length(),line.length()).trim();\n      if (!version.startsWith(\"1.\")) {\n        throw new IOException(\"preferred list major version \" + \"not supported\");\n      }\n    }\n    for (line=readLineTrimComments(br); line != null; line=readLineTrimComments(br)) {\n      if (line.length() == 0) {\n        continue;\n      }\n else       if (line.startsWith(NAME_PREFIX)) {\n        if (name != null) {\n          throw new IOException(\"Preferred name without \" + \"preference value\");\n        }\n        name=line.substring(NAME_PREFIX.length()).trim();\n        continue;\n      }\n else       if (line.startsWith(PREF_PREFIX)) {\n        String value=line.substring(PREF_PREFIX.length()).trim();\n        if (value.equals(\"\")) {\n          throw new IOException(\"Empty preference value not \" + \"permitted\");\n        }\n        preference=Boolean.valueOf(value);\n      }\n else {\n        throw new IOException(\"unrecognized preference entry: \" + line);\n      }\n      if (name == null) {\n        if (preference != null) {\n          if (!isEmpty) {\n            throw new IOException(\"default preference must \" + \"be the first expression and can not \" + \"be redefined\");\n          }\n          defaultPreference=preference;\n          preference=null;\n          isEmpty=false;\n        }\n      }\n else       if (preference != null) {\n        if (name.startsWith(\"/\") || name.startsWith(\"*\") || name.startsWith(\"-\")|| name.startsWith(\".\")) {\n          throw new IOException(\"Invalid character \" + \"at name beginning: \" + name);\n        }\n else         if (name.endsWith(\"/*\")) {\n          mapPut(packagePrefs,name.substring(0,name.length() - 2),preference);\n        }\n else         if (name.endsWith(\"/-\")) {\n          mapPut(namespacePrefs,name.substring(0,name.length() - 2),preference);\n        }\n else         if (name.endsWith(\"/\")) {\n          mapPut(packagePrefs,name.substring(0,name.length() - 1),preference);\n        }\n else {\n          int state=(preference.booleanValue() ? NAME_PREFERRED : NAME_NOT_PREFERRED);\n          mapPut(completeNamePrefs,name,new Integer(state));\n        }\n        preference=null;\n        name=null;\n      }\n    }\n    if (name != null) {\n      throw new IOException(\"Preferred name without \" + \"preference value\");\n    }\n  }\n  if (isEmpty) {\n    throw new IOException(\"Empty preferences list is invalid\");\n  }\n}\n", "nl": "Read and parse preference information from the parameter input stream <code>in</code>.  When the method completes, the preference expression maps contain preference settings for preference names contained in the input stream."}
{"code": "private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){\n  if (x > left && x < right && y > top && y < bottom) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Determines if the specified coordinate falls anywhere inside the given bounds."}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200347,skillname);\n}\n", "nl": "Your recovery amount changed after using [%SkillName]."}
{"code": "@Override public boolean equals(Object that){\n  if (this == that) {\n    return true;\n  }\n  if (that == null) {\n    return false;\n  }\n  if (getClass() != that.getClass()) {\n    return false;\n  }\n  SysRoleMenu other=(SysRoleMenu)that;\n  return (this.getRoleId() == null ? other.getRoleId() == null : this.getRoleId().equals(other.getRoleId())) && (this.getMenuId() == null ? other.getMenuId() == null : this.getMenuId().equals(other.getMenuId())) && (this.getPermission() == null ? other.getPermission() == null : this.getPermission().equals(other.getPermission()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table sys_role_menu"}
{"code": "XSParticleDecl traverseLocal(Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){\n  XSParticleDecl particle=null;\n  if (fSchemaHandler.fDeclPool != null) {\n    particle=fSchemaHandler.fDeclPool.getParticleDecl();\n  }\n else {\n    particle=new XSParticleDecl();\n  }\n  if (fDeferTraversingLocalElements) {\n    particle.fType=XSParticleDecl.PARTICLE_ELEMENT;\n    Attr attr=elmDecl.getAttributeNode(SchemaSymbols.ATT_MINOCCURS);\n    if (attr != null) {\n      String min=attr.getValue();\n      try {\n        int m=Integer.parseInt(XMLChar.trim(min));\n        if (m >= 0)         particle.fMinOccurs=m;\n      }\n catch (      NumberFormatException ex) {\n      }\n    }\n    fSchemaHandler.fillInLocalElemInfo(elmDecl,schemaDoc,allContextFlags,parent,particle);\n  }\n else {\n    traverseLocal(particle,elmDecl,schemaDoc,grammar,allContextFlags,parent,null);\n    if (particle.fType == XSParticleDecl.PARTICLE_EMPTY)     particle=null;\n  }\n  return particle;\n}\n", "nl": "Traverse a locally declared element (or an element reference). <p/> To handle the recursive cases efficiently, we delay the traversal and return an empty particle node. We'll fill in this particle node later after we've done with all the global declarations. This method causes a number of data structures in the schema handler to be filled in."}
{"code": "@Override public void endNormalization(Service.Builder builder){\n}\n", "nl": "Default implementation of ending normalization; does nothing."}
{"code": "public PrefixFileFilter(List<String> prefixes){\n  this(prefixes,IOCase.SENSITIVE);\n}\n", "nl": "Constructs a new Prefix file filter for a list of prefixes."}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener"}
{"code": "public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {\n  if (inputOffset > 0) {\n    skipFully(input,inputOffset);\n  }\n  if (length == 0) {\n    return 0;\n  }\n  int bytesToRead=buffer.length;\n  if (length > 0 && length < buffer.length) {\n    bytesToRead=(int)length;\n  }\n  int read;\n  long totalRead=0;\n  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {\n    output.write(buffer,0,read);\n    totalRead+=read;\n    if (length > 0) {\n      bytesToRead=(int)Math.min(length - totalRead,buffer.length);\n    }\n  }\n  return totalRead;\n}\n", "nl": "Copy some or all chars from a large (over 2GB) <code>InputStream</code> to an <code>OutputStream</code>, optionally skipping input chars. <p> This method uses the provided buffer, so there is no need to use a <code>BufferedReader</code>. <p>"}
{"code": "public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime) throws JobManagerException {\n  schedule(null,serviceName,context,startTime,frequency,interval,count,endTime);\n}\n", "nl": "Schedule a job to start at a specific time with specific recurrence info"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\") private AddEditBookmarkFragment generateBaseFragment(){\n  if (getIntent() == null) {\n    throw new IllegalArgumentException(\"intent can not be null\");\n  }\n  Intent intent=getIntent();\n  Uri intentUri=intent.getData();\n  Long bookmarkId=null;\n  boolean isFolder=false;\n  AddEditBookmarkFragment addEditFragment;\n  if (intentUri != null && intentUri.getHost().equals(\"editbookmark\")) {\n    isFolder=intentUri.getBooleanQueryParameter(BOOKMARK_IS_FOLDER_URI_PARAM,false);\n    String bookmarkIdParam=intentUri.getQueryParameter(BOOKMARK_ID_URI_PARAM);\n    if (bookmarkIdParam != null)     bookmarkId=Long.parseLong(bookmarkIdParam);\n    addEditFragment=AddEditBookmarkFragment.newEditInstance(isFolder,bookmarkId);\n  }\n else {\n    Bundle extras=intent.getExtras();\n    String url=null;\n    String name=null;\n    if (extras != null) {\n      isFolder=extras.getBoolean(BOOKMARK_INTENT_IS_FOLDER,false);\n      if (extras.containsKey(BOOKMARK_INTENT_TITLE)) {\n        name=extras.getString(BOOKMARK_INTENT_TITLE);\n      }\n      if (extras.containsKey(BOOKMARK_INTENT_URL)) {\n        url=extras.getString(BOOKMARK_INTENT_URL);\n        url=DomDistillerUrlUtils.getOriginalUrlFromDistillerUrl(url);\n      }\n      if (extras.containsKey(BOOKMARK_INTENT_ID)) {\n        bookmarkId=extras.getLong(BOOKMARK_INTENT_ID);\n      }\n    }\n    addEditFragment=AddEditBookmarkFragment.newInstance(isFolder,bookmarkId,name,url);\n  }\n  setActionListenerOnAddEdit(addEditFragment);\n  return addEditFragment;\n}\n", "nl": "Creates the base add/edit bookmark fragment based on the intent passed to this activity."}
{"code": "private void initLabels(){\n  CompareConfiguration cc=getCompareConfiguration();\n  String resourceName=resource.getName();\n  setTitle(Policy.bind(\"SVNCompareRevisionsInput.compareResourceAndVersions\",new Object[]{resourceName}));\n  cc.setLeftEditable(true);\n  cc.setRightEditable(false);\n  String leftLabel=Policy.bind(\"SVNCompareRevisionsInput.workspace\",new Object[]{resourceName});\n  cc.setLeftLabel(leftLabel);\n  String rightLabel=Policy.bind(\"SVNCompareRevisionsInput.repository\",new Object[]{resourceName});\n  cc.setRightLabel(rightLabel);\n}\n", "nl": "initialize the labels : the title, the lft label and the right one"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showAxes=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  final ClusterViewer viewer=getViewer();\n  viewer.getPcoaTab().setShowAxes(show);\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected void checkIdentityMatrix(RealMatrix m){\n  for (int i=0; i < m.getRowDimension(); i++) {\n    for (int j=0; j < m.getColumnDimension(); j++) {\n      if (i == j) {\n        Assert.assertEquals(m.getEntry(i,j),1d,0);\n      }\n else {\n        Assert.assertEquals(m.getEntry(i,j),0d,0);\n      }\n    }\n  }\n}\n", "nl": "Verifies that the matrix is an identity matrix"}
{"code": "@Px private int calculateIndicatorDotStart(){\n  final int dotCount=indicatorDots.size();\n  final float halfDotCount=dotCount / 2f;\n  final int dotWidth=2 * dotRadius;\n  final float totalDotWidth=dotWidth * halfDotCount;\n  final float halfDotPaddingCount=Math.max(halfDotCount - 0.5f,0);\n  final float totalDotPaddingWidth=dotPadding * halfDotPaddingCount;\n  int startPosition=getWidth() / 2;\n  startPosition-=totalDotWidth + totalDotPaddingWidth;\n  return startPosition;\n}\n", "nl": "Calculate the starting horizontal position for the line of indicator dots. Assumes dots are centered horizontally."}
{"code": "public boolean isUnindexSupported(){\n  return true;\n}\n", "nl": "Returns true, as unidexing is supported by this class."}
{"code": "public static void changeSpeed(EntityLivingBase entity,UUID speedModifierUUID,String name,double modifier){\n  AttributeModifier speedModifier=(new AttributeModifier(speedModifierUUID,name,modifier - 1,2));\n  IAttributeInstance iattributeinstance=entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);\n  if (iattributeinstance.getModifier(speedModifierUUID) != null) {\n    iattributeinstance.removeModifier(speedModifier);\n  }\n  iattributeinstance.applyModifier(speedModifier);\n}\n", "nl": "Edit the speed of an entity."}
{"code": "public synchronized void recover(LogRecovery client) throws LogException {\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(MultiLogManager.class.getName(),\"recover\",client);\n  }\n  if (!valid)   throw new InvalidatedLogException(\"Cannot recover from \" + \"invalidated log\");\n  if (client == null)   throw new IllegalArgumentException(\"Cannot have a <null> \" + \"client argument.\");\n  ObjectInputStream in=null;\n  ArrayList recList=new ArrayList();\n  try {\n    if (persistenceLogger.isLoggable(Level.FINEST)) {\n      persistenceLogger.log(Level.FINEST,\"Recovering from: {0}\",name);\n    }\n    in=new HeaderlessObjectInputStream(new BufferedInputStream(new FileInputStream(name)));\n    this.cookie=in.readLong();\n    LogRecord rec=null;\n    boolean done=false;\n    boolean update=true;\n    try {\n      while (!done) {\n        rec=(LogRecord)in.readObject();\n        if (rec != null) {\n          recList.add(rec);\n        }\n else {\n          update=false;\n          done=true;\n          if (persistenceLogger.isLoggable(Levels.HANDLED)) {\n            persistenceLogger.log(Levels.HANDLED,\"Log for cookie {0} contained a null \" + \"record object\",new Long(cookie));\n          }\n        }\n      }\n    }\n catch (    ClassNotFoundException cnfe) {\n      update=false;\n      if (persistenceLogger.isLoggable(Level.WARNING)) {\n        persistenceLogger.log(Level.WARNING,\"Problem recovering log file\",cnfe);\n      }\n    }\ncatch (    ClassCastException cce) {\n      update=false;\n      if (persistenceLogger.isLoggable(Level.WARNING)) {\n        persistenceLogger.log(Level.WARNING,\"Problem recovering log file\",cce);\n      }\n    }\ncatch (    EOFException eofe) {\n    }\ncatch (    IOException ioe) {\n      update=false;\n      if (persistenceLogger.isLoggable(Level.WARNING)) {\n        persistenceLogger.log(Level.WARNING,\"Problem recovering log file\",ioe);\n      }\n    }\n    if (update) {\n      for (int i=0; i < recList.size(); i++) {\n        client.recover(cookie,(LogRecord)recList.get(i));\n      }\n    }\n else {\n      if (persistenceLogger.isLoggable(Level.WARNING)) {\n        persistenceLogger.log(Level.WARNING,\"Skipping log recovery for\",name);\n      }\n    }\n  }\n catch (  IOException ioe) {\n    if (persistenceLogger.isLoggable(Level.WARNING)) {\n      persistenceLogger.log(Level.WARNING,\"Problem recovering log file\",ioe);\n    }\n  }\n finally {\n    try {\n      if (in != null)       in.close();\n    }\n catch (    IOException ioe) {\n      if (persistenceLogger.isLoggable(Levels.HANDLED)) {\n        persistenceLogger.log(Levels.HANDLED,\"Problem closing recovered log file\",ioe);\n      }\n    }\n    readonly=false;\n  }\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.exiting(MultiLogManager.class.getName(),\"recover\");\n  }\n}\n", "nl": "Recover information from the log."}
{"code": "@Override public void onClick(View v){\n  if (v.getId() == R.id.ok) {\n    Log_OC.d(TAG,\"Clicked MOVE, start movement\");\n    new MoveFilesTask().execute();\n  }\n else   if (v.getId() == R.id.cancel) {\n    Log_OC.d(TAG,\"Clicked CANCEL, bye\");\n    finish();\n  }\n else {\n    Log_OC.e(TAG,\"Clicked phantom button, id: \" + v.getId());\n  }\n}\n", "nl": "Listener method to perform the MOVE / CANCEL action available in this activity."}
{"code": "private static void fatalError(String msg,Throwable e) throws RemoteException {\n  System.err.println(msg);\n  if (e != null)   e.printStackTrace(System.err);\n  throw new RemoteException(msg,e);\n}\n", "nl": "Unrecoverable error happened -- show it and give up the ghost."}
{"code": "@Override public void onRequestInitiated(int code){\n  if (code == ConnectAPI.COUPON_CODE) {\n    progressDialog.setMessage(\"Loading coupons...\");\n    progressDialog.show();\n  }\n}\n", "nl": "Show progress dialog when request is made to the server."}
{"code": "protected boolean checkTextOfOtherToken(String tag,Element currentRulePart,int position,NodeList tokens){\n  Element otherToken=null;\n  if (tag.equals(\"nextText\")) {\n    if (position < tokens.getLength() - 1) {\n      otherToken=(Element)tokens.item(position + 1);\n    }\n  }\n  if (nextPlusXTextPattern.matcher(tag).find()) {\n    String tempString=tag.replaceAll(\"nextPlus\",\"\");\n    String newString=tempString.replaceAll(\"Text\",\"\");\n    int num=Integer.parseInt(newString);\n    if (position < tokens.getLength() - (num + 1))     otherToken=(Element)tokens.item(position + 1 + num);\n  }\n  if (tag.equals(\"previousText\")) {\n    if (position > 0)     otherToken=(Element)tokens.item(position - 1);\n  }\n  if (previousMinusXTextPattern.matcher(tag).find()) {\n    String tempString=tag.replaceAll(\"previousMinus\",\"\");\n    String newString=tempString.replaceAll(\"Text\",\"\");\n    int num=Integer.parseInt(newString);\n    if (position > num)     otherToken=(Element)tokens.item(position - (num + 1));\n  }\n  if (otherToken == null)   return false;\n  String otherTokenText=MaryDomUtils.tokenText(otherToken);\n  return checkText(currentRulePart,otherTokenText);\n}\n", "nl": "checks rule part with tag \"nextText\",\"previousText\",\"nextPlusXText\" or \"previousMinusXText\"; there is only the \"word\" attribute right now: checks if text of a token is the same as the value of the word attribute in the rule"}
{"code": "public SM_SKILL_ACTIVATION(int skillId,boolean isActive){\n  this.skillId=skillId;\n  this.isActive=isActive;\n  this.unk=0;\n}\n", "nl": "For toggle skills"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"zoom what=\");\n  String what=np.getWordMatchesIgnoringCase(\"fit full selection\");\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  if (viewer.getSelectedComponent() instanceof ITab) {\n    ITab tab=((ITab)viewer.getSelectedComponent());\n    if (what.equalsIgnoreCase(\"fit\"))     tab.zoomToFit();\n else     if (what.equalsIgnoreCase(\"selection\")) {\n      tab.zoomToSelection();\n    }\n else     if (what.equalsIgnoreCase(\"full\")) {\n      GraphView graphView=viewer.getGraphView();\n      graphView.fitGraphToWindow();\n      graphView.trans.setScaleY(1);\n    }\n  }\n}\n", "nl": "parses the given command and executes it"}
{"code": "public Optional<Double> std(){\n  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);\n  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();\n  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());\n  allSubtypes.addAll(subtypes);\n  allSubtypes.addAll(statisticsResourceTypes);\n  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();\n  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new StdMapReduce(statisticsResourceTypes,dataType));\n  Map<String,Map<String,Double>> std=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);\n  Map<String,Double> stdTuple=std.get(StdMapReduce.MEMORY_KEY);\n  double squareSum=stdTuple.get(StdMapReduce.SQUARE_SUM);\n  double sum=stdTuple.get(StdMapReduce.SUM);\n  double count=stdTuple.get(StdMapReduce.COUNT);\n  return Optional.of(Math.sqrt(squareSum / count - (sum / count) * (sum / count)));\n}\n", "nl": "Compute the standard deviation of instances of the selected resource-type."}
{"code": "@Override public boolean write(Node node,LSOutput destination) throws LSException {\n  if (node == null)   return false;\n  XMLSerializer ser=null;\n  String ver=_getXmlVersion(node);\n  if (ver != null && ver.equals(\"1.1\")) {\n    if (xml11Serializer == null) {\n      xml11Serializer=new XML11Serializer();\n      initSerializer(xml11Serializer);\n    }\n    copySettings(serializer,xml11Serializer);\n    ser=xml11Serializer;\n  }\n else {\n    ser=serializer;\n  }\n  String encoding=null;\n  if ((encoding=destination.getEncoding()) == null) {\n    encoding=_getInputEncoding(node);\n    if (encoding == null) {\n      encoding=_getXmlEncoding(node);\n      if (encoding == null) {\n        encoding=\"UTF-8\";\n      }\n    }\n  }\n  try {\n    prepareForSerialization(ser,node);\n    ser._format.setEncoding(encoding);\n    OutputStream outputStream=destination.getByteStream();\n    Writer writer=destination.getCharacterStream();\n    String uri=destination.getSystemId();\n    if (writer == null) {\n      if (outputStream == null) {\n        if (uri == null) {\n          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,\"no-output-specified\",null);\n          if (ser.fDOMErrorHandler != null) {\n            DOMErrorImpl error=new DOMErrorImpl();\n            error.fType=\"no-output-specified\";\n            error.fMessage=msg;\n            error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;\n            ser.fDOMErrorHandler.handleError(error);\n          }\n          throw new LSException(LSException.SERIALIZE_ERR,msg);\n        }\n else {\n          ser.setOutputByteStream(XMLEntityManager.createOutputStream(uri));\n        }\n      }\n else {\n        ser.setOutputByteStream(outputStream);\n      }\n    }\n else {\n      ser.setOutputCharStream(writer);\n    }\n    if (node.getNodeType() == Node.DOCUMENT_NODE)     ser.serialize((Document)node);\n else     if (node.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)     ser.serialize((DocumentFragment)node);\n else     if (node.getNodeType() == Node.ELEMENT_NODE)     ser.serialize((Element)node);\n else     return false;\n  }\n catch (  UnsupportedEncodingException ue) {\n    if (ser.fDOMErrorHandler != null) {\n      DOMErrorImpl error=new DOMErrorImpl();\n      error.fException=ue;\n      error.fType=\"unsupported-encoding\";\n      error.fMessage=ue.getMessage();\n      error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;\n      ser.fDOMErrorHandler.handleError(error);\n    }\n    throw new LSException(LSException.SERIALIZE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,\"unsupported-encoding\",null));\n  }\ncatch (  LSException lse) {\n    throw lse;\n  }\ncatch (  RuntimeException e) {\n    if (e == DOMNormalizer.abort) {\n      return false;\n    }\n    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();\n  }\ncatch (  Exception e) {\n    if (ser.fDOMErrorHandler != null) {\n      DOMErrorImpl error=new DOMErrorImpl();\n      error.fException=e;\n      error.fMessage=e.getMessage();\n      error.fSeverity=DOMError.SEVERITY_ERROR;\n      ser.fDOMErrorHandler.handleError(error);\n    }\n    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();\n  }\n finally {\n    ser.clearDocumentState();\n  }\n  return true;\n}\n", "nl": "Serialize the specified node as described above in the general description of the <code>LSSerializer</code> interface. The output is written to the supplied <code>LSOutput</code>. <br> When writing to a <code>LSOutput</code>, the encoding is found by looking at the encoding information that is reachable through the <code>LSOutput</code> and the item to be written (or its owner document) in this order: <ol> <li> <code>LSOutput.encoding</code>, </li> <li> <code>Document.actualEncoding</code>, </li> <li> <code>Document.xmlEncoding</code>. </li> </ol> <br> If no encoding is reachable through the above properties, a default encoding of \"UTF-8\" will be used. <br> If the specified encoding is not supported an \"unsupported-encoding\" error is raised. <br> If no output is specified in the <code>LSOutput</code>, a \"no-output-specified\" error is raised."}
{"code": "public static List<Double> mergeCoords(List<Double> x,List<Double> y){\n  if (x.size() != y.size())   throw new IllegalArgumentException(\"Sample sizes must be the same for each data applyTransformToDestination.\");\n  List<Double> ret=new ArrayList<>();\n  for (int i=0; i < x.size(); i++) {\n    ret.add(x.get(i));\n    ret.add(y.get(i));\n  }\n  return ret;\n}\n", "nl": "This will merge the coordinates of the given coordinate system."}
{"code": "public FeatureVector toFeatureVector(int unitIndex,String featureString){\n  String[] featureValues=featureString.split(\"\\\\s+\");\n  if (featureValues.length != numByteFeatures + numShortFeatures + numContinuousFeatures)   throw new IllegalArgumentException(\"Expected \" + (numByteFeatures + numShortFeatures + numContinuousFeatures) + \" features, got \"+ featureValues.length);\n  byte[] bytes=new byte[numByteFeatures];\n  short[] shorts=new short[numShortFeatures];\n  float[] floats=new float[numContinuousFeatures];\n  for (int i=0; i < numByteFeatures; i++) {\n    bytes[i]=Byte.parseByte(featureValues[i]);\n  }\n  for (int i=0; i < numShortFeatures; i++) {\n    shorts[i]=Short.parseShort(featureValues[numByteFeatures + i]);\n  }\n  for (int i=0; i < numContinuousFeatures; i++) {\n    floats[i]=Float.parseFloat(featureValues[numByteFeatures + numShortFeatures + i]);\n  }\n  return new FeatureVector(bytes,shorts,floats,unitIndex);\n}\n", "nl": "Create a feature vector consistent with this feature definition by reading the data from a String representation. In that String, the String values for each feature must be separated by white space. For example, this format is created by toFeatureString(FeatureVector)."}
